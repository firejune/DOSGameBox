module.expors = function (Module) {
  // Don't copy canvas image back into RAM in SDL_LockSurface()
  Module['screenIsReadOnly'] = true;

  // Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
  // Note: Some Emscripten settings may limit the speed of the generated code.
  // The Module object: Our interface to the outside world. We import
  // and export values on it, and do the work to get that through
  // closure compiler if necessary. There are various ways Module can be used:
  // 1. Not defined. We create it here
  // 2. A function parameter, function(Module) { ..generated code.. }
  // 3. pre-run appended it, var Module = {}; ..generated code..
  // 4. External script tag defines var Module.
  // We need to do an eval in order to handle the closure compiler
  // case, where this code here is minified but Module was defined
  // elsewhere (e.g. case 4 above). We also need to check if Module
  // already exists (e.g. case 3 above).
  // Note that if you want to run closure, and also to use Module
  // after the generated code, you will need to define   var Module = {};
  // before the code. Then that object will be used in the code, and you
  // can continue to use Module afterwards as well.
  // var Module;
  if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

  // Sometimes an existing Module object exists with properties
  // meant to overwrite the default module functionality. Here
  // we collect those properties and reapply _after_ we configure
  // the current environment's defaults to avoid having to be so
  // defensive during initialization.
  var moduleOverrides = {};
  for (var key in Module) {
    if (Module.hasOwnProperty(key)) {
      moduleOverrides[key] = Module[key];
    }
  }

  // The environment setup code below is customized to use Module.
  // *** Environment setup code ***
  var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
  var ENVIRONMENT_IS_WEB = typeof window === 'object';
  var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

  if (ENVIRONMENT_IS_NODE) {
    // Expose functionality in the same simple way that the shells work
    // Note that we pollute the global namespace here, otherwise we break in node
    if (!Module['print']) Module['print'] = function print(x) {
      process['stdout'].write(x + '\n');
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      process['stderr'].write(x + '\n');
    };

    var nodeFS = require('fs');
    var nodePath = require('path');

    Module['read'] = function read(filename, binary) {
      filename = nodePath['normalize'](filename);
      var ret = nodeFS['readFileSync'](filename);
      // The path is absolute if the normalized version is the same as the resolved.
      if (!ret && filename != nodePath['resolve'](filename)) {
        filename = path.join(__dirname, '..', 'src', filename);
        ret = nodeFS['readFileSync'](filename);
      }
      if (ret && !binary) ret = ret.toString();
      return ret;
    };

    Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

    Module['load'] = function load(f) {
      globalEval(read(f));
    };

    Module['arguments'] = process['argv'].slice(2);

    module['exports'] = Module;
  }
  else if (ENVIRONMENT_IS_SHELL) {
    if (!Module['print']) Module['print'] = print;
    if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

    if (typeof read != 'undefined') {
      Module['read'] = read;
    } else {
      Module['read'] = function read() { throw 'no read() available (jsc?)' };
    }

    Module['readBinary'] = function readBinary(f) {
      return read(f, 'binary');
    };

    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }

    this['Module'] = Module;

    eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
  }
  else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module['read'] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    };

    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }

    if (typeof console !== 'undefined') {
      if (!Module['print']) Module['print'] = function print(x) {
        console.log(x);
      };
      if (!Module['printErr']) Module['printErr'] = function printErr(x) {
        console.log(x);
      };
    } else {
      // Probably a worker, and without console.log. We can do very little here...
      var TRY_USE_DUMP = false;
      if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
        dump(x);
      }) : (function(x) {
        // self.postMessage(x); // enable this if you want stdout to be sent as messages
      }));
    }

    if (ENVIRONMENT_IS_WEB) {
      this['Module'] = Module;
    } else {
      Module['load'] = importScripts;
    }
  }
  else {
    // Unreachable because SHELL is dependant on the others
    throw 'Unknown runtime environment. Where are we?';
  }

  function globalEval(x) {
    eval.call(null, x);
  }
  if (!Module['load'] == 'undefined' && Module['read']) {
    Module['load'] = function load(f) {
      globalEval(Module['read'](f));
    };
  }
  if (!Module['print']) {
    Module['print'] = function(){};
  }
  if (!Module['printErr']) {
    Module['printErr'] = Module['print'];
  }
  if (!Module['arguments']) {
    Module['arguments'] = [];
  }
  // *** Environment setup code ***

  // Closure helpers
  Module.print = Module['print'];
  Module.printErr = Module['printErr'];

  // Callbacks
  Module['preRun'] = [];
  Module['postRun'] = [];

  // Merge back in the overrides
  for (var key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
      Module[key] = moduleOverrides[key];
    }
  }



  // === Auto-generated preamble library stuff ===

  //========================================
  // Runtime code shared with compiler
  //========================================

  var Runtime = {
    stackSave: function () {
      return STACKTOP;
    },
    stackRestore: function (stackTop) {
      STACKTOP = stackTop;
    },
    forceAlign: function (target, quantum) {
      quantum = quantum || 4;
      if (quantum == 1) return target;
      if (isNumber(target) && isNumber(quantum)) {
        return Math.ceil(target/quantum)*quantum;
      } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
        return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
      }
      return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
    },
    isNumberType: function (type) {
      return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
    },
    isPointerType: function isPointerType(type) {
    return type[type.length-1] == '*';
  },
    isStructType: function isStructType(type) {
    if (isPointerType(type)) return false;
    if (isArrayType(type)) return true;
    if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
    // See comment in isStructPointerType()
    return type[0] == '%';
  },
    INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
    FLOAT_TYPES: {"float":0,"double":0},
    or64: function (x, y) {
      var l = (x | 0) | (y | 0);
      var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
      return l + h;
    },
    and64: function (x, y) {
      var l = (x | 0) & (y | 0);
      var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
      return l + h;
    },
    xor64: function (x, y) {
      var l = (x | 0) ^ (y | 0);
      var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
      return l + h;
    },
    getNativeTypeSize: function (type) {
      switch (type) {
        case 'i1': case 'i8': return 1;
        case 'i16': return 2;
        case 'i32': return 4;
        case 'i64': return 8;
        case 'float': return 4;
        case 'double': return 8;
        default: {
          if (type[type.length-1] === '*') {
            return Runtime.QUANTUM_SIZE; // A pointer
          } else if (type[0] === 'i') {
            var bits = parseInt(type.substr(1));
            assert(bits % 8 === 0);
            return bits/8;
          } else {
            return 0;
          }
        }
      }
    },
    getNativeFieldSize: function (type) {
      return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
    },
    dedup: function dedup(items, ident) {
    var seen = {};
    if (ident) {
      return items.filter(function(item) {
        if (seen[item[ident]]) return false;
        seen[item[ident]] = true;
        return true;
      });
    } else {
      return items.filter(function(item) {
        if (seen[item]) return false;
        seen[item] = true;
        return true;
      });
    }
  },
    set: function set() {
    var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
    var ret = {};
    for (var i = 0; i < args.length; i++) {
      ret[args[i]] = 0;
    }
    return ret;
  },
    STACK_ALIGN: 8,
    getAlignSize: function (type, size, vararg) {
      // we align i64s and doubles on 64-bit boundaries, unlike x86
      if (vararg) return 8;
      if (!vararg && (type == 'i64' || type == 'double')) return 8;
      if (!type) return Math.min(size, 8); // align structures internally to 64 bits
      return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
    },
    calculateStructAlignment: function calculateStructAlignment(type) {
      type.flatSize = 0;
      type.alignSize = 0;
      var diffs = [];
      var prev = -1;
      var index = 0;
      type.flatIndexes = type.fields.map(function(field) {
        index++;
        var size, alignSize;
        if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
          size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
          alignSize = Runtime.getAlignSize(field, size);
        } else if (Runtime.isStructType(field)) {
          if (field[1] === '0') {
            // this is [0 x something]. When inside another structure like here, it must be at the end,
            // and it adds no size
            // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
            size = 0;
            if (Types.types[field]) {
              alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
            } else {
              alignSize = type.alignSize || QUANTUM_SIZE;
            }
          } else {
            size = Types.types[field].flatSize;
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          }
        } else if (field[0] == 'b') {
          // bN, large number field, like a [N x i8]
          size = field.substr(1)|0;
          alignSize = 1;
        } else if (field[0] === '<') {
          // vector type
          size = alignSize = Types.types[field].flatSize; // fully aligned
        } else if (field[0] === 'i') {
          // illegal integer field, that could not be legalized because it is an internal structure field
          // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
          size = alignSize = parseInt(field.substr(1))/8;
          assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
        } else {
          assert(false, 'invalid type for calculateStructAlignment');
        }
        if (type.packed) alignSize = 1;
        type.alignSize = Math.max(type.alignSize, alignSize);
        var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
        type.flatSize = curr + size;
        if (prev >= 0) {
          diffs.push(curr-prev);
        }
        prev = curr;
        return curr;
      });
      if (type.name_ && type.name_[0] === '[') {
        // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
        // allocating a potentially huge array for [999999 x i8] etc.
        type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
      }
      type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
      if (diffs.length == 0) {
        type.flatFactor = type.flatSize;
      } else if (Runtime.dedup(diffs).length == 1) {
        type.flatFactor = diffs[0];
      }
      type.needsFlattening = (type.flatFactor != 1);
      return type.flatIndexes;
    },
    generateStructInfo: function (struct, typeName, offset) {
      var type, alignment;
      if (typeName) {
        offset = offset || 0;
        type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
        if (!type) return null;
        if (type.fields.length != struct.length) {
          printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
          return null;
        }
        alignment = type.flatIndexes;
      } else {
        var type = { fields: struct.map(function(item) { return item[0] }) };
        alignment = Runtime.calculateStructAlignment(type);
      }
      var ret = {
        __size__: type.flatSize
      };
      if (typeName) {
        struct.forEach(function(item, i) {
          if (typeof item === 'string') {
            ret[item] = alignment[i] + offset;
          } else {
            // embedded struct
            var key;
            for (var k in item) key = k;
            ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
          }
        });
      } else {
        struct.forEach(function(item, i) {
          ret[item[1]] = alignment[i];
        });
      }
      return ret;
    },
    dynCall: function (sig, ptr, args) {
      if (args && args.length) {
        if (!args.splice) args = Array.prototype.slice.call(args);
        args.splice(0, 0, ptr);
        return Module['dynCall_' + sig].apply(null, args);
      } else {
        return Module['dynCall_' + sig].call(null, ptr);
      }
    },
    functionPointers: [],
    addFunction: function (func) {
      for (var i = 0; i < Runtime.functionPointers.length; i++) {
        if (!Runtime.functionPointers[i]) {
          Runtime.functionPointers[i] = func;
          return 2*(1 + i);
        }
      }
      throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
    },
    removeFunction: function (index) {
      Runtime.functionPointers[(index-2)/2] = null;
    },
    getAsmConst: function (code, numArgs) {
      // code is a constant string on the heap, so we can cache these
      if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
      var func = Runtime.asmConstCache[code];
      if (func) return func;
      var args = [];
      for (var i = 0; i < numArgs; i++) {
        args.push(String.fromCharCode(36) + i); // $0, $1 etc
      }
      code = Pointer_stringify(code);
      if (code[0] === '"') {
        // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
        if (code.indexOf('"', 1) === code.length-1) {
          code = code.substr(1, code.length-2);
        } else {
          // something invalid happened, e.g. EM_ASM("..code($0)..", input)
          abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
        }
      }
      return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
    },
    warnOnce: function (text) {
      if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
      if (!Runtime.warnOnce.shown[text]) {
        Runtime.warnOnce.shown[text] = 1;
        Module.printErr(text);
      }
    },
    funcWrappers: {},
    getFuncWrapper: function (func, sig) {
      assert(sig);
      if (!Runtime.funcWrappers[func]) {
        Runtime.funcWrappers[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, arguments);
        };
      }
      return Runtime.funcWrappers[func];
    },
    UTF8Processor: function () {
      var buffer = [];
      var needed = 0;
      this.processCChar = function (code) {
        code = code & 0xFF;

        if (buffer.length == 0) {
          if ((code & 0x80) == 0x00) {        // 0xxxxxxx
            return String.fromCharCode(code);
          }
          buffer.push(code);
          if ((code & 0xE0) == 0xC0) {        // 110xxxxx
            needed = 1;
          } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
            needed = 2;
          } else {                            // 11110xxx
            needed = 3;
          }
          return '';
        }

        if (needed) {
          buffer.push(code);
          needed--;
          if (needed > 0) return '';
        }

        var c1 = buffer[0];
        var c2 = buffer[1];
        var c3 = buffer[2];
        var c4 = buffer[3];
        var ret;
        if (buffer.length == 2) {
          ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
        } else if (buffer.length == 3) {
          ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
        } else {
          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                          ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
          ret = String.fromCharCode(
            Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
            (codePoint - 0x10000) % 0x400 + 0xDC00);
        }
        buffer.length = 0;
        return ret;
      }
      this.processJSString = function processJSString(string) {
        string = unescape(encodeURIComponent(string));
        var ret = [];
        for (var i = 0; i < string.length; i++) {
          ret.push(string.charCodeAt(i));
        }
        return ret;
      }
    },
    stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
    staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
    dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
    alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
    makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
    GLOBAL_BASE: 8,
    QUANTUM_SIZE: 4,
    __dummy__: 0
  }


  Module['Runtime'] = Runtime;









  //========================================
  // Runtime essentials
  //========================================

  var __THREW__ = 0; // Used in checking for thrown exceptions.

  var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
  var EXITSTATUS = 0;

  var undef = 0;
  // tempInt is used for 32-bit signed values or smaller. tempBigInt is used
  // for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
  var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
  var tempI64, tempI64b;
  var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

  function assert(condition, text) {
    if (!condition) {
      abort('Assertion failed: ' + text);
    }
  }

  var globalScope = this;

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  function ccall(ident, returnType, argTypes, args) {
    return ccallFunc(getCFunc(ident), returnType, argTypes, args);
  }
  Module["ccall"] = ccall;

  // Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
  function getCFunc(ident) {
    try {
      var func = Module['_' + ident]; // closure exported function
      if (!func) func = eval('_' + ident); // explicit lookup
    } catch(e) {
    }
    assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
    return func;
  }

  // Internal function that does a C call using a function, not an identifier
  function ccallFunc(func, returnType, argTypes, args) {
    var stack = 0;
    function toC(value, type) {
      if (type == 'string') {
        if (value === null || value === undefined || value === 0) return 0; // null string
        value = intArrayFromString(value);
        type = 'array';
      }
      if (type == 'array') {
        if (!stack) stack = Runtime.stackSave();
        var ret = Runtime.stackAlloc(value.length);
        writeArrayToMemory(value, ret);
        return ret;
      }
      return value;
    }
    function fromC(value, type) {
      if (type == 'string') {
        return Pointer_stringify(value);
      }
      assert(type != 'array');
      return value;
    }
    var i = 0;
    var cArgs = args ? args.map(function(arg) {
      return toC(arg, argTypes[i++]);
    }) : [];
    var ret = fromC(func.apply(null, cArgs), returnType);
    if (stack) Runtime.stackRestore(stack);
    return ret;
  }

  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  function cwrap(ident, returnType, argTypes) {
    var func = getCFunc(ident);
    return function() {
      return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
    }
  }
  Module["cwrap"] = cwrap;

  // Sets a value in memory in a dynamic way at run-time. Uses the
  // type data. This is the same as makeSetValue, except that
  // makeSetValue is done at compile-time and generates the needed
  // code then, whereas this function picks the right code at
  // run-time.
  // Note that setValue and getValue only do *aligned* writes and reads!
  // Note that ccall uses JS types as for defining types, while setValue and
  // getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
  function setValue(ptr, value, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
      switch(type) {
        case 'i1': HEAP8[(ptr)]=value; break;
        case 'i8': HEAP8[(ptr)]=value; break;
        case 'i16': HEAP16[((ptr)>>1)]=value; break;
        case 'i32': HEAP32[((ptr)>>2)]=value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)]=value; break;
        case 'double': HEAPF64[((ptr)>>3)]=value; break;
        default: abort('invalid type for setValue: ' + type);
      }
  }
  Module['setValue'] = setValue;

  // Parallel to setValue.
  function getValue(ptr, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
      switch(type) {
        case 'i1': return HEAP8[(ptr)];
        case 'i8': return HEAP8[(ptr)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return HEAPF64[((ptr)>>3)];
        default: abort('invalid type for setValue: ' + type);
      }
    return null;
  }
  Module['getValue'] = getValue;

  var ALLOC_NORMAL = 0; // Tries to use _malloc()
  var ALLOC_STACK = 1; // Lives for the duration of the current function call
  var ALLOC_STATIC = 2; // Cannot be freed
  var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
  var ALLOC_NONE = 4; // Do not allocate
  Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
  Module['ALLOC_STACK'] = ALLOC_STACK;
  Module['ALLOC_STATIC'] = ALLOC_STATIC;
  Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
  Module['ALLOC_NONE'] = ALLOC_NONE;

  // allocate(): This is for internal use. You can use it yourself as well, but the interface
  //             is a little tricky (see docs right below). The reason is that it is optimized
  //             for multiple syntaxes to save space in generated code. So you should
  //             normally not use allocate(), and instead allocate memory using _malloc(),
  //             initialize it with setValue(), and so forth.
  // @slab: An array of data, or a number. If a number, then the size of the block to allocate,
  //        in *bytes* (note that this is sometimes confusing: the next parameter does not
  //        affect this!)
  // @types: Either an array of types, one for each byte (or 0 if no type at that position),
  //         or a single type which is used for the entire block. This only matters if there
  //         is initial data - if @slab is a number, then this does not matter at all and is
  //         ignored.
  // @allocator: How to allocate memory, see ALLOC_*
  function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === 'number') {
      zeroinit = true;
      size = slab;
    } else {
      zeroinit = false;
      size = slab.length;
    }

    var singleType = typeof types === 'string' ? types : null;

    var ret;
    if (allocator == ALLOC_NONE) {
      ret = ptr;
    } else {
      ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
    }

    if (zeroinit) {
      var ptr = ret, stop;
      assert((ret & 3) == 0);
      stop = ret + (size & ~3);
      for (; ptr < stop; ptr += 4) {
        HEAP32[((ptr)>>2)]=0;
      }
      stop = ret + size;
      while (ptr < stop) {
        HEAP8[((ptr++)|0)]=0;
      }
      return ret;
    }

    if (singleType === 'i8') {
      if (slab.subarray || slab.slice) {
        HEAPU8.set(slab, ret);
      } else {
        HEAPU8.set(new Uint8Array(slab), ret);
      }
      return ret;
    }

    var i = 0, type, typeSize, previousType;
    while (i < size) {
      var curr = slab[i];

      if (typeof curr === 'function') {
        curr = Runtime.getFunctionIndex(curr);
      }

      type = singleType || types[i];
      if (type === 0) {
        i++;
        continue;
      }

      if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

      setValue(ret+i, curr, type);

      // no need to look up size unless type changes, so cache it
      if (previousType !== type) {
        typeSize = Runtime.getNativeTypeSize(type);
        previousType = type;
      }
      i += typeSize;
    }

    return ret;
  }
  Module['allocate'] = allocate;

  function Pointer_stringify(ptr, /* optional */ length) {
    // TODO: use TextDecoder
    // Find the length, and check for UTF while doing so
    var hasUtf = false;
    var t;
    var i = 0;
    while (1) {
      t = HEAPU8[(((ptr)+(i))|0)];
      if (t >= 128) hasUtf = true;
      else if (t == 0 && !length) break;
      i++;
      if (length && i == length) break;
    }
    if (!length) length = i;

    var ret = '';

    if (!hasUtf) {
      var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
      var curr;
      while (length > 0) {
        curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
        ret = ret ? ret + curr : curr;
        ptr += MAX_CHUNK;
        length -= MAX_CHUNK;
      }
      return ret;
    }

    var utf8 = new Runtime.UTF8Processor();
    for (i = 0; i < length; i++) {
      t = HEAPU8[(((ptr)+(i))|0)];
      ret += utf8.processCChar(t);
    }
    return ret;
  }
  Module['Pointer_stringify'] = Pointer_stringify;

  // Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
  // a copy of that string as a Javascript String object.
  function UTF16ToString(ptr) {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0)
        return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
  Module['UTF16ToString'] = UTF16ToString;

  // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
  // null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
  function stringToUTF16(str, outPtr) {
    for(var i = 0; i < str.length; ++i) {
      // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
      var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
      HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
  }
  Module['stringToUTF16'] = stringToUTF16;

  // Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
  // a copy of that string as a Javascript String object.
  function UTF32ToString(ptr) {
    var i = 0;

    var str = '';
    while (1) {
      var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
      if (utf32 == 0)
        return str;
      ++i;
      // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
      if (utf32 >= 0x10000) {
        var ch = utf32 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      } else {
        str += String.fromCharCode(utf32);
      }
    }
  }
  Module['UTF32ToString'] = UTF32ToString;

  // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
  // null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
  // but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
  function stringToUTF32(str, outPtr) {
    var iChar = 0;
    for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
      // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
      var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
      if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
        var trailSurrogate = str.charCodeAt(++iCodeUnit);
        codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
      }
      HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
      ++iChar;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
  }
  Module['stringToUTF32'] = stringToUTF32;

  function demangle(func) {
    try {
      // Special-case the entry point, since its name differs from other name mangling.
      if (func == 'Object._main' || func == '_main') {
        return 'main()';
      }
      if (typeof func === 'number') func = Pointer_stringify(func);
      if (func[0] !== '_') return func;
      if (func[1] !== '_') return func; // C function
      if (func[2] !== 'Z') return func;
      switch (func[3]) {
        case 'n': return 'operator new()';
        case 'd': return 'operator delete()';
      }
      var i = 3;
      // params, etc.
      var basicTypes = {
        'v': 'void',
        'b': 'bool',
        'c': 'char',
        's': 'short',
        'i': 'int',
        'l': 'long',
        'f': 'float',
        'd': 'double',
        'w': 'wchar_t',
        'a': 'signed char',
        'h': 'unsigned char',
        't': 'unsigned short',
        'j': 'unsigned int',
        'm': 'unsigned long',
        'x': 'long long',
        'y': 'unsigned long long',
        'z': '...'
      };
      function dump(x) {
        //return;
        if (x) Module.print(x);
        Module.print(func);
        var pre = '';
        for (var a = 0; a < i; a++) pre += ' ';
        Module.print (pre + '^');
      }
      var subs = [];
      function parseNested() {
        i++;
        if (func[i] === 'K') i++; // ignore const
        var parts = [];
        while (func[i] !== 'E') {
          if (func[i] === 'S') { // substitution
            i++;
            var next = func.indexOf('_', i);
            var num = func.substring(i, next) || 0;
            parts.push(subs[num] || '?');
            i = next+1;
            continue;
          }
          if (func[i] === 'C') { // constructor
            parts.push(parts[parts.length-1]);
            i += 2;
            continue;
          }
          var size = parseInt(func.substr(i));
          var pre = size.toString().length;
          if (!size || !pre) { i--; break; } // counter i++ below us
          var curr = func.substr(i + pre, size);
          parts.push(curr);
          subs.push(curr);
          i += pre + size;
        }
        i++; // skip E
        return parts;
      }
      var first = true;
      function parse(rawList, limit, allowVoid) { // main parser
        limit = limit || Infinity;
        var ret = '', list = [];
        function flushList() {
          return '(' + list.join(', ') + ')';
        }
        var name;
        if (func[i] === 'N') {
          // namespaced N-E
          name = parseNested().join('::');
          limit--;
          if (limit === 0) return rawList ? [name] : name;
        } else {
          // not namespaced
          if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
          var size = parseInt(func.substr(i));
          if (size) {
            var pre = size.toString().length;
            name = func.substr(i + pre, size);
            i += pre + size;
          }
        }
        first = false;
        if (func[i] === 'I') {
          i++;
          var iList = parse(true);
          var iRet = parse(true, 1, true);
          ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
        } else {
          ret = name;
        }
        paramLoop: while (i < func.length && limit-- > 0) {
          //dump('paramLoop');
          var c = func[i++];
          if (c in basicTypes) {
            list.push(basicTypes[c]);
          } else {
            switch (c) {
              case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
              case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
              case 'L': { // literal
                i++; // skip basic type
                var end = func.indexOf('E', i);
                var size = end - i;
                list.push(func.substr(i, size));
                i += size + 2; // size + 'EE'
                break;
              }
              case 'A': { // array
                var size = parseInt(func.substr(i));
                i += size.toString().length;
                if (func[i] !== '_') throw '?';
                i++; // skip _
                list.push(parse(true, 1, true)[0] + ' [' + size + ']');
                break;
              }
              case 'E': break paramLoop;
              default: ret += '?' + c; break paramLoop;
            }
          }
        }
        if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
        return rawList ? list : ret + flushList();
      }
      return parse();
    } catch(e) {
      return func;
    }
  }

  function demangleAll(text) {
    return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
  }

  function stackTrace() {
    var stack = new Error().stack;
    return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
  }

  // Memory management

  var PAGE_SIZE = 4096;
  function alignMemoryPage(x) {
    return (x+4095)&-4096;
  }

  var HEAP;
  var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

  var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
  var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
  var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

  function enlargeMemory() {
    abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
  }

  var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
  var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;
  var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

  var totalMemory = 4096;
  while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
    if (totalMemory < 16*1024*1024) {
      totalMemory *= 2;
    } else {
      totalMemory += 16*1024*1024
    }
  }
  if (totalMemory !== TOTAL_MEMORY) {
    Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
    TOTAL_MEMORY = totalMemory;
  }

  // Initialize the runtime's memory
  // check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

  Module['HEAP'] = HEAP;
  Module['HEAP8'] = HEAP8;
  Module['HEAP16'] = HEAP16;
  Module['HEAP32'] = HEAP32;
  Module['HEAPU8'] = HEAPU8;
  Module['HEAPU16'] = HEAPU16;
  Module['HEAPU32'] = HEAPU32;
  Module['HEAPF32'] = HEAPF32;
  Module['HEAPF64'] = HEAPF64;

  function callRuntimeCallbacks(callbacks) {
    while(callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == 'function') {
        callback();
        continue;
      }
      var func = callback.func;
      if (typeof func === 'number') {
        if (callback.arg === undefined) {
          Runtime.dynCall('v', func);
        } else {
          Runtime.dynCall('vi', func, [callback.arg]);
        }
      } else {
        func(callback.arg === undefined ? null : callback.arg);
      }
    }
  }

  var __ATPRERUN__  = []; // functions called before the runtime is initialized
  var __ATINIT__    = []; // functions called during startup
  var __ATMAIN__    = []; // functions called when main() is to be run
  var __ATEXIT__    = []; // functions called during shutdown
  var __ATPOSTRUN__ = []; // functions called after the runtime has exited

  var runtimeInitialized = false;

  function preRun() {
    // compatibility - merge in anything from Module['preRun'] at this time
    if (Module['preRun']) {
      if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
      while (Module['preRun'].length) {
        addOnPreRun(Module['preRun'].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }

  function ensureInitRuntime() {
    if (runtimeInitialized) return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__);
  }

  function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
  }

  function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__);
  }

  function postRun() {
    // compatibility - merge in anything from Module['postRun'] at this time
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length) {
        addOnPostRun(Module['postRun'].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }

  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

  function addOnInit(cb) {
    __ATINIT__.unshift(cb);
  }
  Module['addOnInit'] = Module.addOnInit = addOnInit;

  function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb);
  }
  Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

  function addOnExit(cb) {
    __ATEXIT__.unshift(cb);
  }
  Module['addOnExit'] = Module.addOnExit = addOnExit;

  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

  // Tools

  // This processes a JS string into a C-line array of numbers, 0-terminated.
  // For LLVM-originating strings, see parser.js:parseLLVMString function
  function intArrayFromString(stringy, dontAddNull, length /* optional */) {
    var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
    if (length) {
      ret.length = length;
    }
    if (!dontAddNull) {
      ret.push(0);
    }
    return ret;
  }
  Module['intArrayFromString'] = intArrayFromString;

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }
  Module['intArrayToString'] = intArrayToString;

  // Write a Javascript array to somewhere in the heap
  function writeStringToMemory(string, buffer, dontAddNull) {
    var array = intArrayFromString(string, dontAddNull);
    var i = 0;
    while (i < array.length) {
      var chr = array[i];
      HEAP8[(((buffer)+(i))|0)]=chr;
      i = i + 1;
    }
  }
  Module['writeStringToMemory'] = writeStringToMemory;

  function writeArrayToMemory(array, buffer) {
    for (var i = 0; i < array.length; i++) {
      HEAP8[(((buffer)+(i))|0)]=array[i];
    }
  }
  Module['writeArrayToMemory'] = writeArrayToMemory;

  function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; i++) {
      HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
    }
    if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
  }
  Module['writeAsciiToMemory'] = writeAsciiToMemory;

  function unSign(value, bits, ignore, sig) {
    if (value >= 0) {
      return value;
    }
    return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                      : Math.pow(2, bits)         + value;
  }
  function reSign(value, bits, ignore, sig) {
    if (value <= 0) {
      return value;
    }
    var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                          : Math.pow(2, bits-1);
    if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                         // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                         // TODO: In i64 mode 1, resign the two parts separately and safely
      value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
    }
    return value;
  }

  // check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
  if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
    var ah  = a >>> 16;
    var al = a & 0xffff;
    var bh  = b >>> 16;
    var bl = b & 0xffff;
    return (al*bl + ((ah*bl + al*bh) << 16))|0;
  };
  Math.imul = Math['imul'];


  var Math_abs = Math.abs;
  var Math_cos = Math.cos;
  var Math_sin = Math.sin;
  var Math_tan = Math.tan;
  var Math_acos = Math.acos;
  var Math_asin = Math.asin;
  var Math_atan = Math.atan;
  var Math_atan2 = Math.atan2;
  var Math_exp = Math.exp;
  var Math_log = Math.log;
  var Math_sqrt = Math.sqrt;
  var Math_ceil = Math.ceil;
  var Math_floor = Math.floor;
  var Math_pow = Math.pow;
  var Math_imul = Math.imul;
  var Math_fround = Math.fround;
  var Math_min = Math.min;

  // A counter of dependencies for calling run(). If we need to
  // do asynchronous work before running, increment this and
  // decrement it. Incrementing must happen in a place like
  // PRE_RUN_ADDITIONS (used by emcc to add file preloading).
  // Note that you can add dependencies in preRun, even though
  // it happens right before run - run will be postponed until
  // the dependencies are met.
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

  function addRunDependency(id) {
    runDependencies++;
    if (Module['monitorRunDependencies']) {
      Module['monitorRunDependencies'](runDependencies);
    }
  }
  Module['addRunDependency'] = addRunDependency;
  function removeRunDependency(id) {
    runDependencies--;
    if (Module['monitorRunDependencies']) {
      Module['monitorRunDependencies'](runDependencies);
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback(); // can add another dependenciesFulfilled
      }
    }
  }
  Module['removeRunDependency'] = removeRunDependency;

  Module["preloadedImages"] = {}; // maps url to image data
  Module["preloadedAudios"] = {}; // maps url to audio data


  var memoryInitializer = null;

  // === Body ===



  STATIC_BASE = 8;

  STATICTOP = STATIC_BASE + 30089464;

















  var _stdout;
  var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
  var _stdin;
  var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
  var _stderr;
  var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;















  /* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a549() } },{ func: function() { __GLOBAL__I_a858() } },{ func: function() { __GLOBAL__I_a1038() } },{ func: function() { __GLOBAL__I_a1270() } },{ func: function() { __GLOBAL__I_a1827() } },{ func: function() { __GLOBAL__I_a2254() } },{ func: function() { __GLOBAL__I_a2304() } },{ func: function() { __GLOBAL__I_a2417() } },{ func: function() { __GLOBAL__I_a2640() } },{ func: function() { __GLOBAL__I_a2873() } },{ func: function() { __GLOBAL__I_a3216() } });























  var _environ;
  var _environ=_environ=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































  var ___fsmu8;
  var ___dso_handle;
  var ___dso_handle=___dso_handle=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
























































































































































































































































































  var __ZTVN10__cxxabiv120__si_class_type_infoE;
  __ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,0,251,2,0,130,3,0,0,156,2,0,0,106,2,0,0,138,4,0,0,8,0,0,0,2,0,0,0,8,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
  var __ZTVN10__cxxabiv119__pointer_type_infoE;
  __ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0,0,0,0,16,251,2,0,130,3,0,0,34,2,0,0,106,2,0,0,138,4,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
  var __ZTVN10__cxxabiv117__class_type_infoE;
  __ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,48,251,2,0,130,3,0,0,160,1,0,0,106,2,0,0,138,4,0,0,8,0,0,0,4,0,0,0,2,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;












































































































































































































































































































































































































































































































































































































































































































  var __ZTIi;
  __ZTIi=allocate([48,198,2,0,64,222,2,0], "i8", ALLOC_STATIC);;
  var __ZTIc;
  __ZTIc=allocate([48,198,2,0,72,222,2,0], "i8", ALLOC_STATIC);;


  var __ZTISt9exception;
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































  var __ZN22CALLBACK_HandlerObjectD1Ev;
  var __ZN7DOS_FCBC1Ettb;
  var __ZN13Virtual_DriveC1Ev;
  var __ZN10localDriveC1EPKcthtth;
  var __ZN10cdromDriveC1EcPKcthtthRi;
  var __ZN15DOS_Drive_CacheC1Ev;
  var __ZN15DOS_Drive_CacheD1Ev;
  var __ZN8fatDriveC1EPKcjjjjj;
  var __ZN19IO_ReadHandleObjectD1Ev;
  var __ZN20IO_WriteHandleObjectD1Ev;
  var __ZN11MixerObjectD1Ev;
  var __ZN5DBOPL4ChipC1Ev;
  var __ZN9imageDiskC1EP8_IO_FILEPhjb;
  var __ZN6ConfigD1Ev;
  var __ZN11CommandLineC1EiPKPKc;
  var __ZN11CommandLineC1EPKcS1_;
  var __ZN14AutoexecObjectD1Ev;
  var __ZN9DOS_ShellC1Ev;
  var __ZN9BatchFileC1EP9DOS_ShellPKcS3_S3_;
  var __ZN12CSerialModemC1EjP11CommandLine;
  var __ZN15TCPClientSocketC1Ei;
  var __ZN15TCPClientSocketC1EPKct;
  var __ZN15TCPClientSocketD1Ev;
  var __ZN15TCPServerSocketC1Et;
  var __ZN15TCPServerSocketD1Ev;
  var __ZN10CNullModemC1EjP11CommandLine;
  var __ZN12CSerialDummyC1EjP11CommandLine;
  var __ZNSt13runtime_errorC1EPKc;
  var __ZNSt13runtime_errorD1Ev;
  var __ZNSt12length_errorD1Ev;
  var __ZNSt12out_of_rangeD1Ev;
  var __ZNSt3__16localeC1Ev;
  var __ZNSt3__16localeC1ERKS0_;
  var __ZNSt3__16localeD1Ev;
  var __ZNSt8bad_castC1Ev;
  var __ZNSt8bad_castD1Ev;
  /* memory initializer */ allocate([112,108,101,97,115,101,32,114,101,97,100,32,116,104,101,32,67,79,80,89,73,78,71,32,102,105,108,101,32,116,104,111,114,111,117,103,104,108,121,32,98,101,102,111,114,101,32,100,111,105,110,103,32,115,111,46,10,0,0,0,0,0,0,0,97,110,100,32,121,111,117,32,97,114,101,32,119,101,108,99,111,109,101,32,116,111,32,114,101,100,105,115,116,114,105,98,117,116,101,32,105,116,32,117,110,100,101,114,32,99,101,114,116,97,105,110,32,99,111,110,100,105,116,105,111,110,115,59,0,0,0,0,0,0,0,0,68,79,83,66,111,120,32,99,111,109,101,115,32,119,105,116,104,32,65,66,83,79,76,85,84,69,76,89,32,78,79,32,87,65,82,82,65,78,84,89,46,32,32,84,104,105,115,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,44,0,0,0,0,0,0,0,68,79,83,66,111,120,32,105,115,32,119,114,105,116,116,101,110,32,98,121,32,116,104,101,32,68,79,83,66,111,120,32,84,101,97,109,32,40,83,101,101,32,65,85,84,72,79,82,83,32,102,105,108,101,41,41,0,0,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,100,111,115,98,111,120,46,99,111,110,102,32,101,120,105,115,116,115,32,105,110,32,99,117,114,114,101,110,116,32,119,111,114,107,105,110,103,32,100,105,114,101,99,116,111,114,121,46,10,75,101,121,109,97,112,112,105,110,103,32,109,105,103,104,116,32,110,111,116,32,98,101,32,112,114,111,112,101,114,108,121,32,114,101,115,101,116,46,10,80,108,101,97,115,101,32,114,101,115,101,116,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,97,115,32,119,101,108,108,32,97,110,100,32,100,101,108,101,116,101,32,116,104,101,32,100,111,115,98,111,120,46,99,111,110,102,46,0,0,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,100,111,115,98,111,120,46,99,111,110,102,32,101,120,105,115,116,115,32,105,110,32,99,117,114,114,101,110,116,32,119,111,114,107,105,110,103,32,100,105,114,101,99,116,111,114,121,46,10,84,104,105,115,32,119,105,108,108,32,111,118,101,114,114,105,100,101,32,116,104,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,32,97,116,32,114,117,110,116,105,109,101,46,0,67,111,110,102,105,103,32,115,121,115,116,101,109,32,109,101,115,115,101,100,32,117,112,46,0,0,0,0,0,0,0,0,99,97,110,39,116,32,102,105,110,100,32,101,100,105,116,111,114,40,115,41,32,115,112,101,99,105,102,105,101,100,32,97,116,32,116,104,101,32,99,111,109,109,97,110,100,32,108,105,110,101,46,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,0,0,4,0,4,0,0,0,0,0,4,0,4,0,0,0,4,0,0,0,0,0,4,0,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,112,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,116,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,120,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,124,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,96,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,100,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,104,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,108,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,97,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,101,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,105,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,109,210,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,112,210,176,1,116,210,176,1,120,210,176,1,124,210,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,97,210,176,1,101,210,176,1,105,210,176,1,109,210,176,1,75,67,70,0,1,1,46,72,101,110,114,105,113,117,101,32,80,101,114,111,110,255,68,79,83,32,99,111,100,101,112,97,103,101,115,32,45,32,108,105,98,114,97,114,121,32,35,51,32,111,102,32,51,108,2,4,0,0,65,90,5,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,98,235,89,1,0,0,0,0,98,235,164,0,0,0,0,0,98,227,94,2,0,0,0,0,98,227,147,1,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,1,0,39,35,5,3,3,0,160,36,78,6,1,1,0,58,8,2,3,0,0,38,9,2,1,0,59,42,10,2,1,0,63,123,11,2,1,0,37,125,41,3,0,41,40,93,91,43,2,0,44,124,92,51,2,3,0,0,60,52,2,3,0,0,62,53,2,0,46,63,47,0,7,1,1,0,44,8,1,1,0,46,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,42,4,31,0,0,0,0,120,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,0,7,1,1,0,243,8,1,1,0,241,17,67,0,245,244,119,87,26,65,0,252,251,27,65,0,247,246,39,65,0,254,253,40,65,0,249,248,51,65,0,243,242,52,193,0,241,52,240,0,54,4,31,0,0,0,0,121,0,7,1,1,0,44,8,1,1,0,46,16,67,0,106,74,169,137,17,67,0,253,89,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,67,0,104,252,233,153,25,65,0,167,135,26,65,0,229,149,27,67,0,243,242,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,245,244,237,157,42,4,31,0,0,0,0,122,44,67,0,247,246,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,67,0,249,248,236,156,51,67,4,161,129,0,62,52,195,0,241,52,240,0,238,52,158,52,0,54,4,31,0,0,0,0,123,0,236,193,4,19,0,0,66,76,44,0,0,66,89,44,207,1,66,76,44,207,1,66,89,11,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,81,3,202,1,0,0,0,0,81,3,224,0,0,0,0,0,107,4,200,2,0,0,0,0,107,4,223,1,0,0,0,0,104,3,180,3,0,0,0,0,104,3,215,2,0,0,0,0,87,3,164,4,0,0,0,0,87,3,201,3,0,0,0,0,90,3,217,0,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,207,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,10,2,3,0,0,174,11,2,3,0,0,175,26,2,3,0,0,91,27,2,3,0,0,93,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,53,2,3,0,0,47,0,18,66,3,0,0,213,0,3,1,1,0,34,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,10,2,7,0,0,160,11,2,7,0,0,160,16,65,0,169,137,17,65,0,230,150,18,66,0,227,147,251,19,65,0,170,138,20,67,0,165,133,243,242,21,65,0,173,141,22,67,0,163,131,253,252,23,67,0,232,152,233,153,24,65,0,247,246,25,65,0,167,135,26,65,0,229,149,27,1,0,39,39,30,65,0,228,148,31,67,0,235,155,234,154,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,237,157,245,244,41,193,0,241,41,240,0,42,4,31,0,0,0,0,120,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,67,0,249,248,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,7,0,0,160,18,66,3,0,0,251,54,4,31,0,0,0,0,121,0,3,1,1,0,34,5,2,1,0,59,251,7,1,1,0,58,8,1,1,0,63,10,2,7,0,0,160,11,2,7,0,0,160,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,67,0,165,133,243,242,21,65,0,173,141,22,67,0,163,131,253,252,23,67,0,232,152,233,153,24,65,0,247,246,25,65,0,167,135,26,65,0,229,149,27,1,0,39,39,30,65,0,228,148,31,67,0,235,155,234,154,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,237,157,245,244,41,193,0,241,41,240,0,42,4,31,0,0,0,0,122,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,67,0,249,248,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,3,0,0,251,54,4,31,0,0,0,0,123,0,3,1,1,0,34,4,1,1,0,239,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,16,65,0,189,190,17,65,0,164,165,18,66,0,231,232,207,19,65,0,198,199,20,67,0,168,169,134,135,21,65,0,212,213,22,65,0,172,173,23,67,0,245,246,249,250,24,65,0,152,153,25,65,0,243,244,26,65,0,181,182,27,1,0,39,39,30,65,0,170,171,31,67,0,241,242,158,159,32,65,0,235,236,33,65,0,160,161,34,65,0,216,221,35,65,0,225,226,36,65,0,214,215,37,65,0,208,209,38,65,0,166,167,39,65,0,233,234,40,65,0,247,248,41,65,0,132,133,42,4,31,0,0,0,0,124,43,1,1,0,47,44,193,0,222,44,224,0,45,65,0,251,252,46,65,0,227,228,47,65,0,210,211,48,67,0,138,139,183,184,49,65,0,229,230,50,65,0,237,238,51,65,0,162,163,52,65,0,156,157,53,1,0,46,44,0,5,2,7,0,0,160,18,66,3,0,0,207,54,4,31,0,0,0,0,125,0,3,1,1,0,34,4,1,1,0,239,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,65,0,189,190,17,65,0,164,165,18,65,0,231,232,19,65,0,198,199,20,67,0,168,169,134,135,21,65,0,212,213,22,65,0,172,173,23,67,0,245,246,249,250,24,65,0,152,153,25,65,0,243,244,26,65,0,181,182,27,1,0,39,39,30,65,0,170,171,31,67,0,241,242,158,159,32,65,0,235,236,33,65,0,160,161,34,65,0,216,221,35,65,0,225,226,36,65,0,214,215,37,65,0,208,209,38,65,0,166,167,39,65,0,233,234,40,65,0,247,248,41,65,0,132,133,42,4,31,0,0,0,0,126,43,1,1,0,47,44,193,0,222,44,224,0,45,65,0,251,252,46,65,0,227,228,47,65,0,210,211,48,67,0,138,139,183,184,49,65,0,229,230,50,65,0,237,238,51,65,0,162,163,52,65,0,156,157,53,1,0,46,44,0,54,4,31,0,0,0,0,127,0,67,8,2,4,0,0,66,78,2,4,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,117,68,0,110,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,65,0,38,49,3,66,0,130,50,126,4,66,0,34,51,35,5,66,1,203,52,123,6,68,8,40,53,91,0,27,7,68,8,45,54,124,0,31,8,66,4,138,55,200,9,68,8,95,56,92,0,28,10,66,0,135,57,94,11,66,0,133,48,64,12,68,8,41,248,93,0,29,13,66,3,0,0,125,16,197,0,97,30,65,30,145,30,146,30,1,30,0,30,17,197,0,122,44,90,44,132,44,142,44,26,44,0,44,18,67,0,101,69,198,199,19,3,3,0,0,148,153,21,65,0,121,89,22,65,0,117,85,23,67,0,105,73,225,238,24,67,0,111,79,228,229,25,3,3,0,0,247,239,26,68,15,201,202,0,0,30,27,67,6,36,160,0,213,30,197,0,113,16,81,16,0,16,0,16,17,16,0,16,31,3,3,0,0,249,221,32,3,3,0,0,168,173,38,3,3,0,0,171,172,39,197,0,109,50,77,50,0,50,0,50,13,50,0,50,40,65,2,151,204,41,65,0,158,159,43,67,0,155,157,42,230,44,197,0,119,17,87,17,0,17,0,17,23,17,0,17,46,65,0,99,67,49,67,0,110,78,164,165,50,65,0,44,63,51,67,0,59,46,60,174,52,67,0,58,47,62,175,53,65,0,33,245,57,0,0,32,86,65,0,60,62,0,96,15,97,133,101,138,158,208,105,141,111,149,155,250,117,151,65,183,69,212,159,209,73,222,79,227,157,251,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,39,19,97,160,101,130,158,241,105,161,111,162,155,236,117,163,110,156,99,135,65,181,69,144,159,242,73,214,79,224,157,237,85,233,78,207,67,128,32,39,37,15,97,134,101,166,158,231,105,169,111,189,155,252,117,244,65,143,69,167,159,232,73,184,79,190,157,253,85,246,32,37,0,205,75,3,19,0,0,69,84,44,0,0,69,69,44,198,1,69,84,44,198,1,69,69,6,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,7,3,24,1,64,1,0,0,82,3,209,2,214,2,0,0,90,3,192,2,214,2,0,0,91,3,49,2,83,2,0,0,92,4,181,1,196,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,3,1,0,34,64,64,4,3,3,0,0,156,156,5,3,1,0,207,36,36,7,1,1,0,38,8,3,1,0,47,123,123,9,4,1,0,40,91,91,27,10,4,1,0,41,93,93,29,11,3,1,0,61,125,125,12,4,0,43,63,92,92,28,13,1,3,203,200,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,129,154,27,67,0,228,229,245,245,30,65,0,97,65,31,65,0,115,83,39,65,0,148,153,40,68,4,132,142,202,94,30,41,1,3,204,201,43,3,0,39,42,171,171,44,65,0,122,90,46,65,0,99,67,49,65,0,110,78,51,2,1,0,59,60,52,2,1,0,58,62,53,4,0,45,95,124,124,31,57,0,0,32,86,3,0,60,62,124,124,0,5,1,1,0,159,19,65,0,114,82,31,67,3,0,0,213,190,34,65,0,103,71,37,65,0,107,75,38,65,0,108,76,44,67,3,0,0,216,207,0,96,11,97,131,101,137,105,140,111,147,117,215,65,160,69,237,73,161,79,226,85,199,32,96,126,3,111,228,79,229,32,126,94,19,97,208,101,210,105,212,117,214,103,133,107,233,108,235,110,236,114,139,65,181,69,183,73,189,85,198,71,149,75,232,76,234,78,238,82,138,32,94,239,13,99,135,101,130,110,231,111,162,115,152,122,165,67,128,69,144,78,227,79,224,83,151,90,141,32,239,39,7,99,209,115,213,122,216,67,182,83,190,90,207,32,39,0,31,67,3,0,0,208,209,44,67,3,0,0,231,232,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
  /* memory initializer */ allocate([150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,118,5,115,208,122,231,83,209,90,232,32,118,0,6,2,3,0,0,213,18,66,3,0,0,213,31,67,3,0,0,249,221,43,3,15,0,0,160,160,44,67,3,0,0,247,239,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,39,118,5,115,249,122,247,83,221,90,239,32,118,0,6,2,3,0,0,213,18,66,3,0,0,213,41,0,1,160,0,41,0,1,160,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,0,134,224,1,4,0,0,70,79,4,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,82,3,0,0,252,0,0,0,90,3,239,0,252,0,0,0,93,3,119,1,152,1,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,5,2,1,0,207,36,7,1,1,0,38,8,2,1,0,47,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,1,0,43,63,13,2,3,203,200,124,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,66,4,134,143,204,27,66,4,208,209,201,30,65,0,97,65,39,65,0,145,146,40,67,4,155,157,202,30,41,1,0,171,245,43,1,0,39,42,46,65,0,99,67,49,65,0,110,78,50,66,3,0,0,230,51,2,1,0,59,60,52,2,1,0,58,62,53,3,0,45,95,92,31,57,0,0,32,86,3,0,60,62,92,28,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,1,3,0,160,13,0,1,202,26,66,7,0,0,203,27,66,0,140,139,126,40,66,7,0,0,201,41,1,0,171,21,0,96,3,97,133,101,138,32,96,94,5,97,131,101,136,111,147,117,150,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,152,65,164,69,144,73,165,79,166,85,167,89,151,32,39,34,8,97,132,101,137,111,148,117,129,65,142,79,153,85,154,32,34,0,251,94,1,4,0,0,72,89,3,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,3,80,1,0,0,0,0,131,3,68,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,67,0,165,164,49,33,3,67,0,231,230,50,64,4,67,0,147,146,51,35,5,67,0,161,160,52,36,6,67,0,169,168,53,37,7,66,0,233,232,54,8,195,0,241,8,240,0,55,126,38,126,9,67,0,243,242,56,42,10,66,0,141,140,57,11,66,0,163,162,48,13,3,0,40,41,61,43,16,65,0,247,246,17,65,0,131,130,18,65,0,235,234,19,65,0,167,166,20,193,0,225,20,224,0,21,65,0,245,244,22,65,0,157,156,23,65,0,143,142,24,65,0,145,144,25,65,0,155,154,26,67,0,251,250,91,123,27,67,0,253,252,93,125,30,65,0,237,236,31,65,0,133,132,32,65,0,137,136,33,65,0,129,128,34,65,0,171,170,35,65,0,149,148,36,65,0,239,238,37,65,0,159,158,38,65,0,229,228,39,1,0,58,221,40,2,0,39,254,34,42,4,31,0,0,0,0,120,43,1,0,222,21,44,65,0,135,134,45,65,0,227,226,46,65,0,139,138,47,65,0,151,150,48,65,0,249,248,49,65,0,153,152,50,65,0,173,172,51,2,1,0,174,60,52,2,1,0,175,62,53,3,0,223,220,47,63,0,54,4,31,0,0,0,0,121,0,45,96,3,4,0,0,75,65,7,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,181,233,120,1,0,0,0,0,181,233,167,0,0,0,0,0,181,237,85,2,0,0,0,0,181,237,129,1,0,0,0,0,56,117,76,3,0,0,0,0,56,117,94,2,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,26,2,3,0,0,91,27,2,3,0,0,93,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,53,2,3,0,0,47,0,3,1,1,0,34,4,1,1,0,37,5,1,1,0,59,6,1,1,0,58,7,1,1,0,44,8,1,1,0,46,16,1,0,150,150,17,1,0,154,154,18,1,0,147,147,19,1,0,137,137,20,1,0,132,132,21,1,0,140,140,22,1,0,130,130,23,1,0,152,152,24,1,0,156,156,25,1,0,134,134,26,1,0,158,158,27,1,0,155,155,30,1,0,148,148,31,1,0,135,135,32,1,0,133,133,33,1,0,128,128,34,1,0,142,142,35,1,0,144,144,36,1,0,141,141,37,1,0,138,138,38,1,0,131,131,39,1,0,143,143,40,1,0,151,151,41,1,0,162,162,42,4,31,0,0,0,0,120,43,1,0,160,160,44,1,0,157,157,45,1,0,153,153,46,1,0,145,145,47,1,0,139,139,48,1,0,136,136,49,1,0,146,146,50,1,0,149,149,51,1,0,129,129,52,1,0,159,159,0,54,4,31,0,0,0,0,121,0,3,1,1,0,34,4,1,1,0,37,5,1,1,0,59,6,1,1,0,58,7,1,1,0,44,8,1,1,0,46,16,65,0,230,150,17,65,0,234,154,18,65,0,227,147,19,65,0,169,137,20,65,0,164,132,21,65,0,172,140,22,65,0,162,130,23,65,0,232,152,24,65,0,236,156,25,65,0,166,134,26,65,0,238,158,27,65,0,235,155,30,65,0,228,148,31,65,0,167,135,32,65,0,165,133,33,65,0,160,128,34,65,0,174,142,35,193,0,224,0,144,35,36,65,0,173,141,37,65,0,170,138,38,65,0,163,131,39,65,0,175,143,40,65,0,231,151,41,16,0,0,42,4,31,0,0,0,0,122,43,193,0,240,43,240,0,44,65,0,237,157,45,65,0,233,153,46,65,0,225,145,47,65,0,171,139,48,65,0,168,136,49,65,0,226,146,50,65,0,229,149,51,65,0,161,129,52,65,0,239,159,0,54,4,31,0,0,0,0,123,0,3,1,1,0,34,4,1,1,0,37,5,1,1,0,59,6,1,1,0,58,7,1,1,0,44,8,1,1,0,46,16,65,0,169,137,17,67,0,230,150,246,247,18,67,0,227,147,211,212,19,67,0,170,138,209,210,20,66,0,165,133,253,21,65,0,173,141,22,67,0,163,131,181,182,23,65,0,232,152,24,65,0,233,153,25,67,0,167,135,207,208,26,67,0,229,149,213,214,27,67,0,234,154,244,245,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,250,251,34,67,0,175,143,215,216,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,183,184,40,66,0,237,157,254,41,193,0,241,41,240,0,42,4,31,0,0,0,0,124,44,67,0,239,159,198,199,45,67,0,231,151,189,190,46,67,0,225,145,248,249,47,65,0,172,140,48,65,0,168,136,49,67,0,226,146,242,243,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,0,6,2,3,0,0,253,54,4,31,0,0,0,0,125,0,188,111,1,4,0,0,75,75,3,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,227,50,1,0,0,0,0,40,227,68,0,65,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,1,0,252,35,5,2,5,0,59,160,7,2,1,0,58,94,8,2,1,0,63,38,9,2,3,0,0,36,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,66,0,229,149,91,27,66,0,234,154,93,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,131,3,200,41,0,41,241,41,240,0,42,4,31,0,0,0,0,120,43,2,1,0,47,124,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,66,0,161,129,60,52,66,0,238,158,62,53,1,0,46,44,57,0,0,32,0,18,2,3,0,0,253,54,4,31,0,0,0,0,121,0,96,19,160,209,163,211,168,245,169,247,170,213,173,215,174,243,227,221,229,223,128,208,131,210,136,244,137,246,138,212,141,214,142,242,147,220,149,222,32,96,0,25,68,1,4,0,0,75,89,3,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,227,48,1,0,0,0,0,40,227,68,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,1,0,252,35,5,2,5,0,59,160,7,2,1,0,58,94,8,2,1,0,63,38,9,2,3,0,0,36,16,65,0,169,137,17,65,0,230,150,18,67,0,227,147,221,220,19,65,0,170,138,20,66,0,165,133,253,21,67,0,173,141,215,214,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,66,0,229,149,91,27,66,0,234,154,93,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,243,242,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,120,43,2,1,0,47,124,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,66,0,161,129,60,52,66,0,238,158,62,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,57,96,5,9,0,0,76,84,44,212,0,76,84,11,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,7,3,196,0,0,0,0,0,2,3,242,0,0,0,0,0,5,3,32,1,0,0,0,0,6,3,196,0,0,0,0,0,9,3,80,1,196,1,0,0,10,3,85,2,199,2,0,0,3,3,88,3,0,0,0,0,3,3,144,3,0,0,0,0,4,3,87,4,0,0,0,0,4,3,141,4,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,3,3,0,0,49,33,3,3,3,0,0,50,64,4,3,3,0,0,51,35,5,3,3,0,0,52,36,6,3,3,0,0,53,37,7,3,3,0,0,54,94,8,3,3,0,0,55,38,9,3,3,0,0,56,42,13,3,3,0,0,61,43,0,2,65,0,208,181,3,65,0,209,182,4,65,0,210,183,5,65,0,211,184,6,65,0,212,189,7,65,0,213,190,8,65,0,214,198,9,65,0,215,199,13,65,0,216,207,0,2,65,0,133,143,3,65,0,135,128,4,65,0,138,139,5,65,0,130,144,6,65,0,141,173,7,65,0,158,159,8,65,0,151,167,9,65,0,150,166,13,65,0,145,146,0,2,65,0,221,220,3,65,0,223,222,4,193,0,241,4,240,0,5,65,0,243,242,6,65,0,245,244,7,65,0,247,246,8,65,0,249,248,9,65,0,251,250,13,65,0,253,252,0,2,65,0,221,220,3,65,0,223,222,4,193,0,241,4,240,0,5,65,0,243,242,6,65,0,245,244,7,65,0,247,246,8,65,0,249,248,9,65,0,251,250,13,65,0,253,252,18,65,0,101,69,19,65,0,114,82,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,36,65,2,106,0,38,65,0,108,76,40,0,1,202,41,1,3,200,201,49,65,0,110,78,50,65,0,109,77,57,0,0,32,0,96,11,97,131,101,165,105,233,111,236,117,136,65,160,69,141,73,232,79,238,85,173,32,96,126,33,97,134,221,181,101,133,241,214,243,139,105,159,245,231,108,230,109,190,110,212,111,228,114,175,117,198,249,239,251,184,121,164,65,143,220,189,69,149,240,156,242,138,73,208,244,227,76,166,77,167,78,168,79,229,82,174,85,158,248,171,250,169,89,163,32,126,39,25,97,135,221,137,101,130,241,216,243,155,105,140,245,235,111,162,117,152,249,172,251,145,121,147,65,128,220,237,69,144,240,150,242,157,73,161,244,234,79,224,85,151,248,170,250,146,89,226,32,39,0,2,65,0,208,181,3,65,0,209,182,4,65,0,210,183,5,65,0,211,184,6,65,0,212,189,7,65,0,213,190,8,65,0,214,198,9,65,0,215,199,13,65,0,216,207,18,65,0,101,69,19,65,0,114,82,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,36,65,2,106,0,38,65,0,108,76,40,0,1,202,41,1,3,200,201,49,65,0,110,78,50,65,0,109,77,57,0,0,32,0,96,11,97,131,101,165,105,233,111,236,117,136,65,160,69,141,73,232,79,238,85,173,32,96,126,33,97,134,208,241,101,133,210,252,211,139,105,159,212,231,108,230,109,245,110,251,111,228,114,175,117,246,214,239,215,243,121,164,65,143,181,244,69,149,183,156,184,138,73,248,189,227,76,166,77,167,78,168,79,229,82,174,85,158,198,171,199,169,89,163,32,126,39,25,97,135,208,137,101,130,210,253,211,155,105,140,212,235,111,162,117,152,214,172,215,145,121,147,65,128,181,237,69,144,183,150,184,157,73,161,189,234,79,224,85,151,198,170,199,146,89,226,32,39,0,2,65,0,221,220,3,65,0,223,222,4,193,0,241,4,240,0,5,65,0,243,242,6,65,0,245,244,7,65,0,247,246,8,65,0,249,248,9,65,0,251,250,13,65,0,253,252,54,4,31,0,0,0,0,127,0,2,1,3,160,160,3,65,0,231,151,4,1,3,160,160,5,65,0,237,157,6,1,3,160,160,7,65,0,232,152,8,65,0,238,158,9,1,3,160,160,13,65,0,166,134,16,65,0,239,159,17,65,0,233,153,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,67,0,234,154,91,123,27,67,0,236,156,93,125,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,42,4,31,0,0,0,0,126,44,65,0,167,135,45,16,0,0,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,2,65,0,208,181,3,65,0,209,182,4,65,0,210,183,5,65,0,211,184,6,65,0,212,189,7,65,0,213,190,8,65,0,214,198,9,65,0,215,199,13,65,0,216,207,54,4,31,0,0,0,0,129,0,2,1,3,160,160,3,65,0,231,151,4,193,0,241,4,240,0,5,65,0,237,157,6,1,3,160,160,7,65,0,232,152,8,65,0,238,158,9,1,3,160,160,13,65,0,166,134,16,65,0,239,159,17,65,0,233,153,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,67,0,234,154,91,123,27,67,0,236,156,93,125,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,42,4,31,0,0,0,0,128,44,65,0,167,135,45,16,0,0,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,193,154,3,4,210,0,76,84,9,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,7,3,0,0,0,0,0,0,2,3,187,0,0,0,0,0,5,3,2,1,0,0,0,0,6,3,76,1,0,0,0,0,3,3,84,1,0,0,0,0,3,3,167,1,0,0,0,0,4,3,113,2,0,0,0,0,4,3,192,2,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,16,67,3,0,0,215,199,17,67,3,0,0,211,184,18,67,3,0,0,210,183,22,67,3,0,0,214,198,23,67,3,0,0,212,189,30,67,3,0,0,208,181,31,67,3,0,0,213,190,40,3,3,0,0,242,166,44,67,3,0,0,216,207,46,67,3,0,0,209,182,0,16,67,3,0,0,150,166,17,67,3,0,0,130,144,18,67,3,0,0,138,139,22,67,3,0,0,151,167,23,67,3,0,0,141,173,30,67,3,0,0,133,143,31,67,3,0,0,158,159,40,3,3,0,0,169,157,44,67,3,0,0,145,146,46,67,3,0,0,135,128,0,16,67,3,0,0,251,250,17,67,3,0,0,243,242,18,195,0,101,18,69,18,241,18,240,0,22,67,3,0,0,249,248,23,67,3,0,0,245,244,30,67,3,0,0,221,220,31,67,3,0,0,247,246,40,2,3,0,0,183,44,67,3,0,0,253,252,46,67,3,0,0,223,222,0,40,3,15,0,0,160,160,0,16,67,3,0,0,251,250,17,67,3,0,0,243,242,18,195,0,101,18,69,18,241,18,240,0,22,67,3,0,0,249,248,23,67,3,0,0,245,244,30,67,3,0,0,221,220,31,67,3,0,0,247,246,40,3,15,0,0,160,160,44,67,3,0,0,253,252,46,67,3,0,0,223,222,54,4,31,0,0,0,0,125,0,12,67,0,234,154,45,95,13,67,0,236,156,61,43,16,67,12,238,158,160,160,17,67,12,237,157,160,160,18,67,12,165,133,160,160,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,67,12,227,147,160,160,23,67,12,168,136,160,160,24,65,0,174,142,25,65,0,175,143,26,67,0,231,151,91,123,27,67,0,232,152,93,125,30,67,12,160,128,160,160,31,67,12,225,145,160,160,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,40,67,0,239,159,39,34,42,4,31,0,0,0,0,124,43,67,0,166,134,92,124,44,67,12,167,135,160,160,45,65,0,233,153,46,68,28,230,150,160,0,60,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,16,67,3,0,0,215,199,17,67,3,0,0,211,184,18,67,3,0,0,210,183,22,67,3,0,0,214,198,23,67,3,0,0,212,189,30,67,3,0,0,208,181,31,67,3,0,0,213,190,40,3,3,0,0,244,245,44,67,3,0,0,216,207,46,67,3,0,0,209,182,54,4,31,0,0,0,0,127,0,12,67,0,234,154,45,95,13,67,0,236,156,61,43,16,67,12,238,158,160,160,17,67,12,237,157,160,160,18,67,12,165,133,160,160,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,67,12,227,147,160,160,23,67,12,168,136,160,160,24,65,0,174,142,25,65,0,175,143,26,67,0,231,151,91,123,27,67,0,232,152,93,125,30,67,12,160,128,160,160,31,67,12,225,145,160,160,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,40,67,0,239,159,39,34,41,195,0,241,41,240,0,96,41,126,41,42,4,31,0,0,0,0,126,43,67,0,166,134,92,124,44,67,12,167,135,160,160,45,65,0,233,153,46,68,28,230,150,160,0,60,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,111,136,5,4,211,0,76,84,11,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,7,3,0,0,0,0,0,0,2,3,19,1,0,0,0,0,5,3,70,1,0,0,0,0,6,3,123,1,0,0,0,0,3,3,129,1,0,0,0,0,3,3,194,1,0,0,0,0,4,3,124,2,0,0,0,0,4,3,183,2,0,0,0,0,9,3,115,3,237,3,0,0,10,3,126,4,242,4,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,1,0,33,49,3,2,0,34,50,64,4,2,0,47,51,35,5,2,0,59,52,36,6,2,0,58,53,37,7,2,0,44,54,94,8,2,0,46,55,38,9,2,0,63,56,42,10,1,0,40,57,11,1,0,41,48,12,1,0,95,45,13,1,0,43,61,16,67,0,208,181,113,81,17,67,0,216,207,119,87,26,67,0,212,189,91,123,27,3,0,242,166,93,125,39,67,0,214,198,59,58,40,67,0,211,184,39,34,43,1,0,124,92,45,67,0,215,199,120,88,51,67,0,209,182,44,60,52,67,0,213,190,46,62,53,67,0,210,183,47,63,0,16,65,0,133,143,17,65,0,145,146,26,65,0,141,173,27,1,0,169,157,39,65,0,151,167,40,65,0,130,144,45,65,0,150,166,51,65,0,135,128,52,65,0,158,159,53,65,0,138,139,0,16,65,0,221,220,17,65,0,253,252,26,65,0,245,244,27,1,0,183,166,39,65,0,249,248,40,65,0,243,242,45,65,0,251,250,51,65,0,223,222,52,65,0,247,246,53,193,0,241,53,240,0,0,27,1,3,160,160,0,16,65,0,221,220,17,65,0,253,252,26,65,0,245,244,27,1,3,160,160,39,65,0,249,248,40,65,0,243,242,45,65,0,251,250,51,65,0,223,222,52,65,0,247,246,53,193,0,241,53,240,0,54,4,31,0,0,0,0,125,86,16,0,0,0,16,67,12,239,159,160,160,17,67,12,166,134,160,160,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,234,154,27,65,0,236,156,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,238,158,40,65,0,237,157,42,4,31,0,0,0,0,124,44,65,0,167,135,45,67,12,233,153,160,160,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,65,0,231,151,52,65,0,232,152,53,1,3,160,160,86,16,0,0,0,16,65,0,208,181,17,65,0,216,207,26,65,0,212,189,27,1,0,244,245,39,65,0,214,198,40,65,0,211,184,45,65,0,215,199,51,65,0,209,182,52,65,0,213,190,53,65,0,210,183,54,4,31,0,0,0,0,127,0,16,67,12,239,159,160,160,17,67,12,166,134,160,160,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,234,154,27,65,0,236,156,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,238,158,40,65,0,237,157,42,4,31,0,0,0,0,126,44,65,0,167,135,45,67,12,233,153,160,160,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,65,0,231,151,52,65,0,232,152,53,193,0,241,53,240,0,86,16,0,0,0,16,65,0,221,220,17,65,0,253,252,18,65,0,101,69,19,65,0,114,82,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,245,244,27,1,0,213,183,30,65,0,97,65,36,65,2,106,0,38,65,0,108,76,39,65,0,249,248,40,65,0,243,242,41,2,7,200,201,202,45,65,0,251,250,49,65,0,110,78,50,65,0,109,77,51,65,0,223,222,52,65,0,247,246,53,193,0,241,53,240,0,57,0,0,32,86,16,0,0,0,96,11,97,131,101,165,105,233,111,236,117,136,65,160,69,141,73,232,79,238,85,173,32,96,126,33,97,134,221,181,101,133,241,214,243,139,105,159,245,231,108,230,109,190,110,212,111,228,114,175,117,198,249,239,251,184,121,164,65,143,220,189,69,149,240,156,242,138,73,208,244,227,76,166,77,167,78,168,79,229,82,174,85,158,248,171,250,169,89,163,32,126,39,25,97,135,221,137,101,130,241,216,243,155,105,140,245,235,111,162,117,152,249,172,251,145,121,147,65,128,220,237,69,144,240,150,242,157,73,161,244,234,79,224,85,151,248,170,250,146,89,226,32,39,0,16,65,0,208,181,17,65,0,216,207,18,65,0,101,69,19,65,0,114,82,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,212,189,27,1,0,247,242,30,65,0,97,65,36,65,2,106,0,38,65,0,108,76,39,65,0,214,198,40,65,0,211,184,41,2,7,200,201,202,45,65,0,215,199,49,65,0,110,78,50,65,0,109,77,51,65,0,209,182,52,65,0,213,190,53,65,0,210,183,57,0,0,32,0,96,11,97,131,101,165,105,233,111,236,117,136,65,160,69,141,73,232,79,238,85,173,32,96,126,33,97,134,208,241,101,133,210,252,211,139,105,159,212,231,108,230,109,245,110,251,111,228,114,175,117,246,214,239,215,243,121,164,65,143,181,244,69,149,183,156,184,138,73,248,189,227,76,166,77,167,78,168,79,229,82,174,85,158,198,171,199,169,89,163,32,126,39,25,97,135,208,137,101,130,210,253,211,155,105,140,212,235,111,162,117,152,214,172,215,145,121,147,65,128,181,237,69,144,183,150,184,157,73,161,189,234,79,224,85,151,198,170,199,146,89,226,32,39,0,25,34,6,4,221,0,76,84,11,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,7,3,0,0,0,0,0,0,2,3,64,1,0,0,0,0,3,3,136,1,0,0,0,0,3,3,218,1,0,0,0,0,4,3,193,2,0,0,0,0,4,3,233,2,0,0,0,0,5,3,210,3,0,0,0,0,6,3,22,4,0,0,0,0,9,3,54,4,183,4,0,0,10,3,72,5,140,5,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,0,33,49,64,3,3,0,45,50,95,31,4,2,0,47,51,35,5,2,0,59,52,36,6,2,0,58,53,245,7,2,0,44,54,94,8,2,0,46,55,38,9,2,0,61,56,42,10,3,0,40,57,91,27,11,3,0,41,48,93,29,12,2,0,63,43,39,13,196,0,120,45,88,45,37,131,24,45,0,131,16,65,0,208,181,17,65,0,216,207,26,66,0,212,189,123,27,196,0,119,17,87,17,125,17,23,17,0,17,33,65,0,213,190,39,65,0,214,198,40,66,0,211,184,34,41,2,0,96,126,239,43,196,0,113,16,81,16,124,16,17,16,0,16,45,65,0,215,199,51,66,0,209,182,247,52,196,0,102,33,70,33,242,33,6,33,0,33,53,67,0,210,183,92,28,57,0,0,32,86,2,0,60,62,45,0,6,2,3,0,0,21,16,65,0,133,143,17,65,0,145,146,26,65,0,141,173,33,65,0,158,159,39,65,0,151,167,40,65,0,130,144,41,2,7,0,0,160,45,65,0,150,166,51,66,0,135,128,157,52,196,0,102,33,70,33,169,33,6,33,0,33,53,65,0,138,139,0,6,2,3,0,0,21,16,65,0,221,220,17,65,0,253,252,26,65,0,245,244,33,65,0,247,246,39,65,0,249,248,40,65,0,243,242,41,2,7,0,0,160,45,65,0,251,250,51,66,4,223,222,160,52,196,4,102,33,70,33,160,33,6,33,0,33,53,193,0,241,53,240,0,54,4,31,0,0,0,0,123,0,6,2,3,0,0,21,13,132,3,160,45,160,45,37,131,24,45,0,131,16,65,0,239,159,17,65,0,166,134,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,234,154,27,196,0,236,17,156,17,125,17,23,17,0,17,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,232,152,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,238,158,40,65,0,237,157,41,2,7,0,0,160,42,4,31,0,0,0,0,122,43,132,3,160,16,160,16,0,16,17,16,0,16,44,65,0,167,135,45,65,0,233,153,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,66,4,231,151,160,52,196,4,228,33,148,33,160,33,6,33,0,33,53,1,3,160,160,0,6,2,3,0,0,21,41,2,7,0,0,160,51,66,3,0,0,244,52,196,0,102,33,70,33,245,33,6,33,0,33,54,4,31,0,0,0,0,125,0,6,2,3,0,0,21,13,132,3,160,45,160,45,37,131,24,45,0,131,16,65,0,239,159,17,65,0,166,134,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,234,154,27,196,0,236,17,156,17,125,17,23,17,0,17,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,232,152,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,238,158,40,65,0,237,157,41,2,7,0,0,160,42,4,31,0,0,0,0,124,43,132,3,160,16,160,16,0,16,17,16,0,16,44,65,0,167,135,45,65,0,233,153,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,66,0,231,151,244,52,196,0,228,33,148,33,245,33,6,33,0,33,53,193,0,241,53,240,0,0,6,2,3,0,0,190,16,65,0,221,220,17,65,0,253,252,26,65,0,245,244,33,65,0,247,246,39,65,0,249,248,40,65,0,243,242,45,65,0,251,250,51,66,0,223,222,213,52,196,0,102,33,70,33,183,33,6,33,0,33,53,193,0,241,53,240,0,0,6,2,3,0,0,21,41,2,7,0,0,160,51,66,7,0,0,160,52,196,4,102,33,70,33,160,33,6,33,0,33,0,6,2,3,0,0,21,16,65,0,221,220,17,65,0,253,252,18,65,0,101,69,19,65,0,114,82,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,245,244,30,65,0,97,65,33,65,0,247,246,36,65,2,106,0,38,65,0,108,76,39,65,0,249,248,40,65,0,243,242,41,2,7,200,201,202,45,65,0,251,250,49,65,0,110,78,50,65,0,109,77,51,66,0,223,222,213,52,196,0,102,33,70,33,183,33,6,33,0,33,53,193,0,241,53,240,0,0,96,11,97,131,101,165,105,233,111,236,117,136,65,160,69,141,73,232,79,238,85,173,32,96,126,33,97,134,221,181,101,133,241,214,243,139,105,159,245,231,108,230,109,190,110,212,111,228,114,175,117,198,249,239,251,184,121,164,65,143,220,189,69,149,240,156,242,138,73,208,244,227,76,166,77,167,78,168,79,229,82,174,85,158,248,171,250,169,89,163,32,126,39,25,97,135,221,137,101,130,241,216,243,155,105,140,245,235,111,162,117,152,249,172,251,145,121,147,65,128,220,237,69,144,240,150,242,157,73,161,244,234,79,224,85,151,248,170,250,146,89,226,32,39,0,6,2,3,0,0,21,18,65,0,101,69,19,65,0,114,82,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,36,65,2,106,0,38,65,0,108,76,41,2,7,200,201,202,49,65,0,110,78,50,65,0,109,77,0,96,11,97,131,101,165,105,233,111,236,117,136,65,160,69,141,73,232,79,238,85,173,32,96,126,33,97,134,208,241,101,133,210,252,211,139,105,159,212,231,108,230,109,245,110,251,111,228,114,175,117,246,214,239,215,243,121,164,65,143,181,244,69,149,183,156,184,138,73,248,189,227,76,166,77,167,78,168,79,229,82,174,85,158,198,171,199,169,89,163,32,126,39,25,97,135,208,137,101,130,210,253,211,155,105,140,212,235,111,162,117,152,214,172,215,145,121,147,65,128,181,237,69,144,183,150,184,157,73,161,189,234,79,224,85,151,198,170,199,146,89,226,32,39,0,6,90,8,4,200,1,76,84,15,2,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,0,0,0,0,0,7,3,27,1,0,0,0,0,7,3,35,1,0,0,0,0,5,3,148,1,0,0,0,0,5,3,216,1,0,0,0,0,2,3,96,2,0,0,0,0,2,3,164,2,0,0,0,0,6,3,51,3,0,0,0,0,6,3,113,3,0,0,0,0,3,3,249,3,0,0,0,0,3,3,132,4,0,0,0,0,3,3,47,5,0,0,0,0,4,3,51,6,0,0,0,0,4,3,168,6,0,0,0,0,4,3,79,7,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,172,3,2,3,0,0,171,4,2,3,0,0,243,5,2,3,0,0,159,6,2,3,0,0,150,7,2,3,0,0,248,8,2,3,0,0,245,9,2,3,0,0,158,10,2,3,0,0,174,11,2,3,0,0,175,13,2,3,0,0,241,16,66,3,0,0,251,17,66,3,0,0,253,18,66,3,0,0,252,19,66,3,0,0,169,31,66,3,0,0,225,38,66,3,0,0,156,49,66,3,0,0,170,52,2,3,0,0,250,53,2,3,0,0,246,86,2,0,253,252,251,0,54,3,15,0,0,0,121,0,2,1,0,33,49,3,1,0,34,50,4,1,0,47,51,5,1,0,59,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,63,56,10,1,0,40,57,11,1,0,41,48,13,1,0,43,61,16,65,0,208,181,17,65,0,216,207,26,65,0,212,189,27,1,0,247,242,39,65,0,214,198,40,65,0,211,184,42,3,15,0,0,0,120,45,65,0,215,199,51,65,0,209,182,52,65,0,213,190,53,65,0,210,183,0,4,2,3,0,0,184,7,2,3,0,0,208,8,2,3,0,0,190,13,2,3,0,0,181,16,66,3,0,0,212,17,66,3,0,0,216,18,66,3,0,0,214,52,2,3,0,0,211,53,2,3,0,0,198,54,3,15,0,0,0,123,86,2,0,216,214,212,0,2,1,0,33,49,3,1,0,34,50,4,2,0,47,51,184,5,1,0,59,52,6,1,0,58,53,7,2,0,44,54,208,8,2,0,46,55,190,9,1,0,63,56,10,1,0,40,57,11,1,0,41,48,13,2,0,43,61,181,16,66,0,221,220,212,17,66,0,253,252,216,18,66,3,0,0,214,26,65,0,245,244,27,1,0,213,183,39,65,0,249,248,40,65,0,243,242,42,3,15,0,0,0,122,45,65,0,251,250,51,65,0,223,222,52,66,0,247,246,211,53,194,0,241,53,240,0,198,53,86,2,0,216,214,212,0,4,2,7,0,0,160,5,2,7,0,0,160,6,2,3,0,0,155,8,2,3,0,0,21,9,2,7,0,0,160,16,66,7,0,0,160,18,66,7,0,0,160,19,66,7,0,0,160,38,66,7,0,0,160,54,3,15,0,0,0,125,86,2,7,0,160,160,0,2,1,0,33,49,3,1,0,34,50,4,2,4,47,51,160,5,2,4,59,52,160,6,2,0,58,53,155,7,1,0,44,54,8,2,0,46,55,21,9,2,4,63,56,160,10,1,0,40,57,11,1,0,41,48,13,1,0,43,61,16,66,4,133,143,160,17,65,0,145,146,18,66,7,0,0,160,19,66,7,0,0,160,26,65,0,141,173,27,1,0,157,169,38,66,7,0,0,160,39,65,0,151,167,40,65,0,130,144,42,3,15,0,0,0,124,45,65,0,150,166,51,65,0,135,128,52,65,0,158,159,53,65,0,138,139,86,2,7,0,160,160,0,4,2,7,0,0,160,5,2,7,0,0,160,6,2,3,0,0,155,8,2,3,0,0,21,9,2,7,0,0,160,16,66,7,0,0,160,18,66,7,0,0,160,19,66,7,0,0,160,54,3,15,0,0,0,127,86,2,6,253,160,160,0,2,1,0,33,49,3,1,0,34,50,4,2,4,47,51,160,5,2,4,59,52,160,6,2,0,58,53,155,7,1,0,44,54,8,2,0,46,55,21,9,2,4,63,56,160,10,1,0,40,57,11,1,0,41,48,13,1,0,43,61,16,66,4,208,181,160,17,65,0,216,207,18,66,7,0,0,160,19,66,7,0,0,160,26,65,0,212,189,27,16,0,0,39,65,0,214,198,40,65,0,211,184,42,3,15,0,0,0,126,45,65,0,215,199,51,65,0,209,182,52,65,0,213,190,53,65,0,210,183,86,2,7,0,160,160,0,2,2,7,0,0,160,3,2,7,0,0,160,4,2,7,0,0,160,5,2,7,0,0,160,6,2,7,0,0,160,7,2,7,0,0,160,8,2,3,0,0,21,9,2,7,0,0,160,10,2,7,0,0,160,11,2,7,0,0,160,13,2,7,0,0,160,16,66,7,0,0,160,17,66,7,0,0,160,18,66,7,0,0,160,19,66,7,0,0,160,29,3,15,0,0,0,130,31,66,7,0,0,160,38,66,7,0,0,160,49,66,7,0,0,160,52,2,7,0,0,160,53,2,7,0,0,160,54,3,15,0,0,0,129,86,16,0,0,0,2,2,4,33,49,160,3,2,4,34,50,160,4,2,4,47,51,160,5,2,4,59,52,160,6,2,4,58,53,160,7,2,4,44,54,160,8,2,0,46,55,21,9,2,4,63,56,160,10,2,4,40,57,160,11,2,4,41,48,160,13,2,4,43,61,160,16,66,4,221,220,160,17,66,4,253,252,160,18,66,7,0,0,160,19,66,7,0,0,160,26,65,0,245,244,27,16,0,0,29,3,15,0,0,0,130,31,66,7,0,0,160,38,66,7,0,0,160,39,65,0,249,248,40,65,0,243,242,42,3,15,0,0,0,128,45,65,0,251,250,49,66,7,0,0,160,51,65,0,223,222,52,66,4,247,246,160,53,194,4,241,53,240,0,160,53,86,16,0,0,0,2,2,4,33,49,160,3,2,4,34,50,160,4,2,4,47,51,160,5,2,4,59,52,160,6,2,4,58,53,160,7,2,4,44,54,160,8,2,0,46,55,21,9,2,4,63,56,160,10,2,4,40,57,160,11,2,4,41,48,160,13,2,4,43,61,160,16,66,4,239,159,160,17,66,4,166,134,160,18,66,4,165,133,160,19,194,4,224,0,144,19,160,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,234,154,27,65,0,236,156,30,65,0,160,128,31,66,4,225,145,160,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,66,4,171,139,160,39,65,0,238,158,40,65,0,237,157,42,3,15,0,0,0,128,44,65,0,167,135,45,65,0,233,153,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,66,4,173,141,160,50,65,0,172,140,51,65,0,231,151,52,66,4,232,152,160,53,16,0,0,54,3,15,0,0,0,129,86,16,0,0,0,2,2,7,0,0,160,3,2,7,0,0,160,4,2,7,0,0,160,5,2,7,0,0,160,6,2,7,0,0,160,8,2,3,0,0,21,9,2,7,0,0,160,10,2,7,0,0,160,11,2,7,0,0,160,13,2,7,0,0,160,16,66,7,0,0,160,18,66,7,0,0,160,19,66,7,0,0,160,29,3,15,0,0,0,133,31,66,7,0,0,160,38,66,7,0,0,160,49,66,7,0,0,160,54,3,15,0,0,0,132,86,2,7,0,160,160,0,2,2,4,33,49,160,3,2,4,34,50,160,4,2,4,47,51,160,5,2,4,59,52,160,6,2,4,58,53,160,7,1,0,44,54,8,2,0,46,55,21,9,2,4,63,56,160,10,2,4,40,57,160,11,2,4,41,48,160,13,2,4,43,61,160,16,66,4,208,181,160,17,65,0,216,207,18,66,7,0,0,160,19,66,7,0,0,160,26,65,0,212,189,27,1,0,244,245,29,3,15,0,0,0,133,31,66,7,0,0,160,38,66,7,0,0,160,39,65,0,214,198,40,65,0,211,184,42,3,15,0,0,0,131,45,65,0,215,199,49,66,7,0,0,160,51,65,0,209,182,52,65,0,213,190,53,65,0,210,183,86,2,7,0,160,160,0,2,2,4,33,49,160,3,2,4,34,50,160,4,2,4,47,51,160,5,2,4,59,52,160,6,2,4,58,53,160,7,1,0,44,54,8,2,0,46,55,21,9,2,4,63,56,160,10,2,4,40,57,160,11,2,4,41,48,160,13,2,4,43,61,160,16,66,4,239,159,160,17,65,0,166,134,18,66,4,165,133,160,19,194,4,224,0,144,19,160,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,234,154,27,65,0,236,156,30,65,0,160,128,31,66,4,225,145,160,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,66,4,171,139,160,39,65,0,238,158,40,65,0,237,157,42,3,15,0,0,0,131,44,65,0,167,135,45,65,0,233,153,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,66,4,173,141,160,50,65,0,172,140,51,65,0,231,151,52,65,0,232,152,53,193,0,241,53,240,0,54,3,15,0,0,0,132,86,2,7,0,160,160,0,128,138,4,4,0,0,76,86,7,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,7,3,209,0,31,1,0,0,2,3,100,1,206,1,0,0,5,3,239,1,61,2,0,0,93,4,130,2,208,2,0,0,98,239,21,3,0,0,0,0,98,239,160,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
  /* memory initializer */ allocate([8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,255,3,2,3,0,0,174,4,2,3,0,0,175,9,3,7,0,0,0,158,18,67,0,101,69,137,237,22,65,0,117,85,23,67,3,0,0,140,161,24,67,0,111,79,228,229,30,67,0,97,65,131,160,31,65,0,115,83,34,67,3,0,0,133,149,40,3,15,0,0,202,203,41,2,3,0,201,45,43,2,1,200,124,92,44,65,0,122,90,46,65,0,99,67,49,65,0,110,78,57,0,0,32,0,5,3,7,0,0,0,245,6,3,7,0,0,0,248,8,3,7,0,0,0,241,19,67,3,0,0,139,138,22,67,3,0,0,215,199,31,67,3,0,0,213,190,37,67,3,0,0,233,232,38,67,3,0,0,235,234,44,67,3,0,0,216,207,46,67,3,0,0,209,182,49,67,3,0,0,236,238,0,248,7,97,134,101,211,122,164,65,143,69,184,90,163,32,248,126,3,111,228,79,229,32,126,239,13,99,135,101,130,110,231,111,162,115,152,122,165,67,128,69,144,78,227,79,224,83,151,90,141,32,239,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,0,5,3,7,0,0,0,21,6,3,7,0,0,0,248,8,3,7,0,0,0,241,9,3,15,0,0,0,160,18,67,3,0,0,136,137,22,67,3,0,0,150,166,24,67,3,0,0,147,149,31,67,3,0,0,158,159,34,67,3,0,0,152,168,37,67,3,0,0,162,163,38,67,3,0,0,134,156,40,3,15,0,0,160,202,44,67,3,0,0,145,146,46,67,3,0,0,135,128,49,67,3,0,0,164,165,0,250,3,101,130,69,144,32,250,126,3,111,147,79,149,32,126,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,0,5,3,7,0,0,0,190,6,3,7,0,0,0,208,8,3,7,0,0,0,181,19,67,3,0,0,139,138,22,67,3,0,0,251,250,31,67,3,0,0,247,246,37,67,3,0,0,233,232,38,67,3,0,0,235,234,44,67,3,0,0,253,252,46,67,3,0,0,223,222,49,67,3,0,0,236,238,0,211,7,97,134,101,243,122,164,65,143,69,242,90,163,32,211,126,3,111,228,79,229,32,126,239,13,99,135,101,130,110,231,111,162,115,152,122,165,67,128,69,144,78,227,79,224,83,151,90,141,32,239,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,0,5,3,7,0,0,0,21,6,3,7,0,0,0,248,8,3,7,0,0,0,241,19,67,3,0,0,251,252,22,67,3,0,0,150,234,31,67,3,0,0,231,230,37,67,3,0,0,233,232,38,67,3,0,0,236,156,44,67,3,0,0,167,166,46,67,3,0,0,159,172,49,67,3,0,0,239,238,0,248,7,97,134,101,138,122,146,65,143,69,170,90,145,32,248,126,3,111,228,79,229,32,126,39,13,99,135,101,130,110,155,111,162,115,152,122,171,67,128,69,144,78,227,79,224,83,151,90,141,32,39,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,0,3,2,7,0,0,160,4,2,7,0,0,160,5,3,7,0,0,0,21,9,3,15,0,0,0,160,18,195,0,101,18,69,18,241,18,240,0,22,67,3,0,0,221,222,23,67,3,0,0,216,215,24,67,15,0,0,160,160,30,67,3,0,0,198,181,31,67,3,0,0,253,208,34,67,3,0,0,214,242,37,67,3,0,0,243,244,38,67,3,0,0,245,246,40,3,15,0,0,160,160,41,1,1,0,126,43,0,1,160,44,67,3,0,0,247,248,46,67,3,0,0,210,211,49,67,3,0,0,183,252,54,4,31,0,0,0,0,125,0,3,2,7,0,0,160,4,2,7,0,0,160,5,3,7,0,0,0,21,9,3,15,0,0,0,160,16,65,0,239,159,17,65,0,232,152,18,67,12,165,133,160,160,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,235,155,22,65,0,227,147,23,67,12,168,136,160,160,24,67,12,174,142,160,160,25,65,0,175,143,26,67,0,237,157,91,123,27,67,0,238,158,93,125,30,67,12,160,128,160,160,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,67,12,163,131,160,160,35,65,0,229,149,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,231,151,40,67,0,236,156,39,34,41,67,0,234,154,96,126,42,4,31,0,0,0,0,124,43,67,0,233,153,92,124,44,65,0,167,135,45,65,0,166,134,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,2,3,0,0,59,52,2,3,0,0,58,0,12,253,5,4,199,1,76,86,12,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,7,3,146,0,0,0,0,0,7,3,155,0,0,0,0,0,2,3,122,1,0,0,0,0,2,3,136,1,0,0,0,0,5,3,94,2,0,0,0,0,5,3,107,2,0,0,0,0,93,4,74,3,0,0,0,0,93,4,88,3,0,0,0,0,98,239,55,4,0,0,0,0,98,239,81,4,0,0,0,0,98,239,39,5,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,43,1,0,248,167,0,54,4,31,0,0,0,0,121,0,3,1,1,0,174,4,1,1,0,175,5,1,1,0,245,7,1,1,0,47,9,1,1,0,158,13,65,0,102,70,16,65,0,215,199,17,65,0,103,71,18,65,0,106,74,19,67,3,0,0,139,138,20,65,0,109,77,21,65,0,118,86,22,65,0,110,78,23,65,0,122,90,24,65,0,137,237,25,65,0,209,182,26,65,0,216,207,27,65,0,104,72,30,65,0,213,190,31,65,0,117,85,32,65,0,115,83,33,65,0,105,73,34,65,0,108,76,35,65,0,100,68,36,65,0,97,65,37,65,0,116,84,38,65,0,101,69,39,65,0,99,67,40,1,0,39,248,41,1,0,45,63,42,4,31,0,0,0,0,120,43,65,0,233,232,44,65,0,236,238,45,65,0,98,66,46,65,0,140,161,47,65,0,107,75,48,65,0,112,80,49,67,0,111,79,147,226,50,65,0,131,160,51,1,1,0,59,52,1,1,0,58,53,65,0,235,234,86,65,0,133,149,0,43,1,3,0,160,54,4,31,0,0,0,0,123,0,3,1,1,0,174,4,1,1,0,175,5,1,1,0,21,7,1,1,0,47,9,1,3,0,160,13,65,0,102,70,16,65,0,150,166,17,65,0,103,71,18,65,0,106,74,20,65,0,109,77,21,65,0,118,86,22,65,0,110,78,23,65,0,122,90,24,65,0,136,137,25,65,0,135,128,26,65,0,145,146,27,65,0,104,72,30,65,0,158,159,31,65,0,117,85,32,65,0,115,83,33,65,0,105,73,34,65,0,108,76,35,65,0,100,68,36,65,0,97,65,37,65,0,116,84,38,65,0,101,69,39,65,0,99,67,40,1,0,39,248,41,1,0,45,63,42,4,31,0,0,0,0,122,43,65,0,162,163,44,65,0,164,165,45,65,0,98,66,46,65,0,140,161,47,65,0,107,75,48,65,0,112,80,49,65,0,111,79,50,65,0,131,160,51,1,1,0,59,52,1,1,0,58,53,65,0,134,156,86,65,0,152,168,0,43,0,0,208,54,4,31,0,0,0,0,125,0,3,1,1,0,174,4,1,1,0,175,5,1,1,0,190,7,1,1,0,47,9,1,1,0,158,13,65,0,102,70,16,65,0,251,250,17,65,0,103,71,18,65,0,106,74,19,67,3,0,0,139,138,20,65,0,109,77,21,65,0,118,86,22,65,0,110,78,23,65,0,122,90,24,65,0,137,237,25,65,0,223,222,26,65,0,253,252,27,65,0,104,72,30,65,0,247,246,31,65,0,117,85,32,65,0,115,83,33,65,0,105,73,34,65,0,108,76,35,65,0,100,68,36,65,0,97,65,37,65,0,116,84,38,65,0,101,69,39,65,0,99,67,40,1,0,39,208,41,1,0,45,63,42,4,31,0,0,0,0,124,43,65,0,233,232,44,65,0,236,238,45,65,0,98,66,46,65,0,140,161,47,65,0,107,75,48,65,0,112,80,49,67,0,111,79,147,226,50,65,0,131,160,51,1,1,0,59,52,1,1,0,58,53,65,0,235,234,86,65,0,133,149,0,43,1,3,0,160,54,4,31,0,0,0,0,127,0,3,1,1,0,174,4,1,1,0,175,5,1,1,0,21,7,1,1,0,47,9,1,1,0,158,13,65,0,102,70,16,65,0,150,234,17,65,0,103,71,18,65,0,106,74,19,67,0,114,82,251,252,20,65,0,109,77,21,65,0,118,86,22,65,0,110,78,23,65,0,122,90,24,65,0,137,237,25,65,0,159,172,26,65,0,167,166,27,65,0,104,72,30,65,0,231,230,31,65,0,117,85,32,65,0,115,83,33,65,0,105,73,34,65,0,108,76,35,65,0,100,68,36,65,0,97,65,37,65,0,116,84,38,65,0,101,69,39,65,0,99,67,40,1,0,39,248,41,1,0,45,63,42,4,31,0,0,0,0,126,43,65,0,233,232,44,65,0,239,238,45,65,0,98,66,46,65,0,140,161,47,65,0,107,75,48,65,0,112,80,49,67,0,111,79,147,226,50,65,0,131,160,51,1,1,0,59,52,1,1,0,58,53,65,0,236,156,86,65,0,133,149,0,29,4,31,0,0,0,0,130,40,1,3,0,160,43,16,0,0,54,4,31,0,0,0,0,129,0,5,1,1,0,21,7,1,1,0,47,13,65,0,102,70,16,65,0,221,222,17,65,0,103,71,18,65,0,106,74,19,65,0,114,82,20,65,0,109,77,21,65,0,118,86,22,65,0,110,78,23,65,0,122,90,24,193,0,241,24,240,0,25,65,0,210,211,26,65,0,247,248,27,65,0,104,72,29,4,31,0,0,0,0,130,30,65,0,253,208,31,65,0,117,85,32,65,0,115,83,33,65,0,105,73,34,65,0,108,76,35,65,0,100,68,36,65,0,97,65,37,65,0,116,84,38,65,0,101,69,39,65,0,99,67,40,1,3,0,160,41,1,0,45,63,42,4,31,0,0,0,0,128,43,65,0,243,244,44,65,0,183,252,45,65,0,98,66,46,65,0,216,215,47,65,0,107,75,48,65,0,112,80,49,65,0,111,79,50,65,0,198,181,51,1,1,0,59,52,1,1,0,58,53,65,0,245,246,86,65,0,214,242,0,5,1,1,0,21,7,1,1,0,47,13,65,0,228,148,16,65,0,238,158,17,65,0,163,131,18,65,0,169,137,19,193,0,224,0,144,19,20,65,0,172,140,21,65,0,162,130,22,65,0,173,141,23,65,0,167,135,24,65,0,237,157,25,65,0,231,151,26,65,0,166,134,27,65,0,229,149,30,65,0,232,152,31,65,0,227,147,32,65,0,225,145,33,65,0,168,136,34,65,0,171,139,35,65,0,164,132,36,65,0,160,128,37,65,0,226,146,38,65,0,165,133,39,65,0,230,150,40,1,3,0,160,41,1,0,45,63,42,4,31,0,0,0,0,128,43,65,0,234,154,44,65,0,233,153,45,65,0,161,129,46,65,0,235,155,47,65,0,170,138,48,65,0,175,143,49,65,0,174,142,50,65,0,239,159,51,1,1,0,59,52,1,1,0,58,53,65,0,236,156,54,4,31,0,0,0,0,129,0,236,103,3,9,0,0,77,75,44,193,1,77,75,8,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,104,3,235,1,0,0,0,0,104,3,44,1,0,0,0,0,87,3,78,3,0,0,0,0,87,3,144,2,0,0,0,0,90,3,37,1,0,0,0,0,82,3,0,0,0,0,0,0,57,117,0,2,83,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,126,3,1,1,0,34,4,4,9,0,35,94,0,30,7,1,1,0,38,8,2,1,0,47,96,9,1,1,0,40,10,1,1,0,41,11,1,1,0,61,12,1,0,39,63,13,1,0,43,42,16,66,3,0,0,92,17,66,3,0,0,124,21,197,0,122,44,90,44,0,44,0,44,26,44,0,44,33,66,3,0,0,91,34,66,3,0,0,93,39,4,12,94,94,0,0,30,40,1,0,245,245,41,4,12,92,124,0,0,28,43,1,0,64,64,44,197,0,121,21,89,21,0,21,0,21,25,21,0,21,47,66,3,0,0,64,48,66,3,0,0,123,49,66,3,0,0,125,51,1,0,44,59,52,1,0,46,58,53,4,12,45,95,0,0,31,86,1,0,60,62,0,18,66,3,0,0,213,0,16,65,0,144,145,17,65,0,146,147,18,66,0,168,169,207,19,65,0,225,226,20,65,0,229,230,21,197,0,243,44,244,44,0,44,0,44,26,44,0,44,22,65,0,231,232,23,65,0,183,184,24,65,0,214,215,25,65,0,216,221,26,66,0,245,246,129,27,66,0,130,131,128,30,65,0,160,161,31,65,0,227,228,32,65,0,166,167,33,65,0,170,171,34,65,0,172,173,35,65,0,181,182,36,65,0,142,143,37,65,0,198,199,38,65,0,208,209,39,66,0,251,252,149,40,66,0,150,151,148,42,5,63,0,0,0,0,0,120,43,65,0,233,234,44,197,0,136,21,137,21,0,21,0,21,25,21,0,21,45,65,0,154,155,46,65,0,164,165,47,65,0,235,236,48,65,0,162,163,49,65,0,212,213,50,66,0,210,211,253,0,18,66,3,0,0,207,40,1,0,253,253,54,5,63,0,0,0,0,0,121,0,3,1,3,0,200,12,0,1,201,18,66,0,101,69,213,21,197,0,122,44,90,44,0,44,0,44,26,44,0,44,22,65,0,117,85,23,67,0,105,73,141,152,24,65,0,111,79,30,65,0,97,65,31,67,0,115,83,159,158,34,67,0,103,71,167,166,39,1,3,202,202,46,67,0,99,67,135,128,57,0,0,32,0,34,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,34,39,5,99,134,103,208,67,143,71,209,32,39,94,13,97,131,99,172,105,140,115,231,117,150,122,168,65,182,67,173,73,215,83,230,85,234,90,169,32,94,0,16,65,0,144,145,17,65,0,146,147,18,65,0,168,169,19,65,0,225,226,20,65,0,229,230,21,197,0,243,44,244,44,0,44,0,44,26,44,0,44,22,65,0,231,232,23,65,0,183,184,24,65,0,214,215,25,65,0,216,221,26,66,0,245,246,129,27,66,0,130,131,128,30,65,0,160,161,31,65,0,227,228,32,65,0,166,167,33,65,0,170,171,34,65,0,172,173,35,65,0,181,182,36,65,0,142,143,37,65,0,198,199,38,65,0,208,209,39,66,0,251,252,149,40,66,0,150,151,148,42,5,63,0,0,0,0,0,122,43,65,0,233,234,44,197,0,136,21,137,21,0,21,0,21,25,21,0,21,45,65,0,154,155,46,65,0,164,165,47,65,0,235,236,48,65,0,162,163,49,65,0,212,213,50,66,0,210,211,253,0,40,1,0,253,253,54,5,63,0,0,0,0,0,123,0,72,97,1,9,0,0,77,78,44,0,0,77,79,3,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,227,72,1,0,0,0,0,40,227,68,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,0,252,49,33,3,2,0,45,50,64,4,2,0,34,51,35,5,2,0,36,52,59,6,1,0,58,53,7,2,0,46,54,94,8,3,0,95,55,38,31,9,2,0,44,56,42,10,2,0,37,57,40,11,2,0,63,48,41,12,66,0,165,133,253,13,65,0,233,153,16,65,0,228,148,17,65,0,230,150,18,65,0,227,147,19,65,0,166,134,20,65,0,237,157,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,221,220,25,65,0,167,135,26,66,0,170,138,91,27,66,0,234,154,93,30,65,0,169,137,31,65,0,235,155,32,65,0,161,129,33,65,0,243,242,34,65,0,160,128,35,65,0,229,149,36,193,0,224,0,144,35,37,65,0,174,142,38,65,0,171,139,39,65,0,164,132,40,66,0,175,143,39,41,1,0,61,43,42,4,31,0,0,0,0,120,44,65,0,239,159,45,65,0,231,151,46,193,0,241,46,240,0,47,65,0,225,145,48,65,0,172,140,49,65,0,168,136,50,65,0,226,146,51,66,0,236,156,60,52,66,0,162,130,62,53,66,0,238,158,47,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,87,168,0,9,0,0,77,84,44,0,0,77,76,2,3,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,3,60,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,3,0,0,124,3,1,1,0,34,4,2,3,0,160,156,18,67,3,0,0,138,212,22,67,3,0,0,151,235,23,67,3,0,0,141,222,24,67,3,0,0,149,227,26,67,0,229,228,91,123,27,67,0,232,231,93,125,30,67,3,0,0,133,183,40,1,1,0,64,41,66,0,145,146,96,43,1,0,35,126,53,4,11,0,0,92,0,28,86,67,0,190,189,92,124,0,49,126,0,9,47,0,77,84,44,47,0,77,76,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,3,52,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,18,3,3,0,0,138,212,22,3,3,0,0,151,235,23,3,3,0,0,141,222,24,3,3,0,0,149,227,26,67,0,229,228,91,123,27,67,0,232,231,93,125,30,3,3,0,0,133,183,41,67,0,145,146,96,126,43,67,0,190,189,92,124,0,176,244,1,4,0,0,78,69,2,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,117,68,0,138,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,65,0,38,49,3,66,4,130,50,201,4,66,0,34,51,35,5,66,0,39,52,123,6,68,8,40,53,91,0,27,7,68,8,45,54,124,0,31,8,66,4,138,55,200,9,68,8,95,56,92,0,28,10,66,0,135,57,94,11,66,0,133,48,64,12,68,8,41,248,93,0,29,13,66,3,0,0,125,16,197,0,97,30,65,30,145,30,146,30,1,30,0,30,17,197,0,122,44,90,44,247,44,239,44,26,44,0,44,18,67,0,101,69,225,238,20,3,3,0,0,158,159,21,67,0,121,89,236,237,22,65,0,117,85,23,65,0,105,73,24,67,0,111,79,171,172,26,68,15,202,203,0,0,30,27,67,0,36,156,207,213,30,197,0,113,16,81,16,132,16,142,16,17,16,0,16,31,67,0,115,83,141,222,32,3,3,0,0,149,227,33,3,3,0,0,208,209,34,67,0,103,71,168,173,36,65,0,106,74,37,3,3,0,0,231,232,38,3,3,0,0,155,157,39,197,0,109,50,77,50,0,50,0,50,13,50,0,50,40,65,0,151,37,41,65,0,130,144,43,65,0,42,230,44,197,0,119,17,87,17,0,17,0,17,23,17,0,17,46,3,3,0,0,135,128,48,3,3,0,0,241,242,49,67,0,110,78,250,251,50,67,0,44,63,252,253,51,67,0,59,46,60,174,52,67,0,58,47,62,175,53,65,0,33,245,57,0,0,32,86,65,0,60,62,0,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,126,13,97,198,101,189,105,169,111,228,117,244,110,164,65,199,69,190,73,184,79,229,85,246,78,165,32,126,94,17,97,131,101,136,105,140,111,147,117,150,103,134,106,166,115,249,65,182,69,210,73,215,79,226,85,234,71,143,74,167,83,221,32,94,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,0,81,32,1,4,0,0,78,71,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,117,52,0,178,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,5,3,1,0,225,36,156,6,2,3,0,0,213,7,1,3,0,202,17,67,3,0,0,189,190,18,67,0,101,69,241,242,21,67,3,0,0,247,239,22,67,0,117,85,158,159,23,67,0,105,73,155,157,24,67,0,111,79,252,253,25,67,3,0,0,250,251,30,65,0,97,65,31,65,0,115,83,32,67,3,0,0,208,209,36,67,3,0,0,148,153,37,67,3,0,0,231,232,40,0,1,203,41,1,3,200,201,48,67,3,0,0,198,199,49,67,0,110,78,164,165,57,0,0,32,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,13,101,166,105,132,110,228,111,168,115,249,117,134,69,167,73,142,78,229,79,169,83,221,85,143,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,13,97,160,101,130,105,161,110,236,111,162,117,163,65,181,69,144,73,214,78,237,79,224,85,233,32,39,0,223,252,1,4,0,0,80,72,4,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,90,3,34,1,41,1,0,0,82,3,0,0,41,1,0,0,181,1,160,1,172,1,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,1,0,166,124,3,2,1,0,34,64,4,2,1,0,47,35,5,2,1,0,40,172,6,2,1,0,41,171,7,2,1,0,173,170,8,3,1,0,33,95,31,9,2,1,0,168,35,10,2,1,0,63,245,11,3,3,0,160,92,28,12,2,0,45,43,42,13,2,7,204,204,201,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,2,0,246,158,91,27,2,3,200,200,93,30,66,0,97,65,36,31,66,3,0,0,38,32,66,3,0,0,64,33,66,3,0,0,91,34,66,3,0,0,93,35,66,3,0,0,124,36,66,3,0,0,156,37,66,3,0,0,241,39,66,0,164,165,126,40,66,0,135,128,123,41,3,0,39,250,92,28,43,66,3,203,203,125,46,65,0,99,67,49,65,0,110,78,51,2,1,0,59,60,52,2,5,0,58,202,53,2,0,61,37,62,57,0,0,32,86,1,0,60,62,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,10,2,3,0,0,21,26,1,3,0,160,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,7,97,160,101,130,105,161,111,162,117,163,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,216,181,0,9,0,0,83,81,44,196,1,83,81,5,2,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,84,3,148,0,0,0,0,0,90,3,141,0,0,0,0,0,82,3,0,0,0,0,0,0,181,1,160,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,1,1,0,34,4,1,1,0,245,8,2,3,0,0,123,9,2,3,0,0,125,10,3,3,0,0,91,27,11,3,3,0,0,93,29,26,65,0,137,211,27,1,0,39,64,40,65,0,135,128,41,2,0,96,170,124,43,3,0,35,126,92,28,0,18,66,3,0,0,213,0,18,66,3,0,0,170,41,1,3,0,160,0,4,1,1,0,21,26,65,2,137,160,0,168,97,3,4,192,1,83,81,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,84,3,48,2,155,2,0,0,82,3,0,0,54,1,0,0,90,3,47,1,54,1,0,0,181,1,189,1,213,1,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,7,0,0,200,3,1,1,0,34,4,3,7,0,0,201,30,6,2,7,0,0,202,8,2,7,0,0,203,9,2,3,0,0,250,10,2,7,0,0,204,12,2,7,0,0,205,13,2,7,0,0,206,16,66,3,0,0,92,17,66,3,0,0,124,18,65,0,101,69,21,196,0,122,44,90,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,66,0,135,128,246,27,2,0,64,39,158,30,65,0,97,65,33,66,3,0,0,91,34,66,3,0,0,93,39,66,0,137,211,36,40,3,0,91,123,225,27,41,3,4,92,124,0,28,43,3,0,93,125,207,29,44,196,0,121,21,89,21,0,21,25,21,0,21,46,65,0,99,67,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,245,51,2,1,0,59,60,52,2,1,0,58,62,57,0,0,32,86,1,0,60,62,0,18,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,27,2,7,0,0,160,39,65,2,137,160,43,2,7,0,0,160,50,66,3,0,0,21,0,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,248,3,97,134,65,143,32,248,96,6,97,133,101,138,105,141,111,149,117,151,32,96,39,7,97,160,101,130,105,161,111,162,117,163,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,2,2,3,0,0,126,3,2,7,0,0,200,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,0,0,209,18,66,3,0,0,170,19,65,0,114,82,20,65,0,116,84,31,66,0,115,83,208,32,66,0,100,68,209,37,66,3,0,0,136,38,66,0,108,76,157,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,7,85,1,4,0,0,84,74,3,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,117,65,1,0,0,0,0,50,117,68,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,1,0,252,35,5,2,5,0,59,160,7,2,1,0,58,94,8,2,1,0,63,38,9,2,3,0,0,36,12,67,0,243,242,45,95,13,67,0,247,246,61,43,16,65,0,169,137,17,67,0,249,248,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,67,0,251,250,233,153,25,65,0,167,135,26,66,0,229,149,91,27,66,0,234,154,93,30,65,0,228,148,31,67,0,222,221,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,120,43,2,1,0,47,124,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,67,0,245,244,236,156,51,66,0,161,129,60,52,66,0,238,158,62,53,2,0,46,44,47,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,82,111,1,4,0,0,84,77,4,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,84,3,105,0,0,0,0,0,98,231,97,1,0,0,0,0,98,231,160,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,26,3,3,0,0,91,123,27,3,3,0,0,93,125,41,3,3,0,0,96,126,43,3,3,0,0,92,124,0,16,67,0,132,142,113,81,18,66,3,0,0,170,26,65,0,229,213,27,65,0,148,153,41,65,0,167,166,43,65,0,173,184,45,67,0,236,237,120,88,46,67,0,135,128,99,67,47,67,0,129,154,118,86,0,12,195,0,241,12,240,0,45,130,95,130,13,67,0,235,155,61,43,16,65,0,243,242,17,65,0,162,130,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,169,137,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,251,250,27,65,0,245,244,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,40,67,0,237,157,39,34,41,65,0,249,248,42,4,31,0,0,0,0,121,43,65,0,232,152,44,65,0,167,135,45,65,0,239,159,46,65,0,231,151,47,65,0,247,246,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,53,67,0,238,158,47,63,0,54,4,31,0,0,0,0,122,0,133,131,6,9,0,0,85,82,44,0,0,85,65,15,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,80,3,210,1,0,0,0,0,80,3,244,0,0,0,0,0,101,4,196,2,0,0,0,0,101,4,231,1,0,0,0,0,81,3,172,3,0,0,0,0,81,3,211,2,0,0,0,0,107,4,153,4,0,0,0,0,107,4,193,3,0,0,0,0,40,3,127,5,0,0,0,0,40,3,168,4,0,0,0,0,98,3,106,6,0,0,0,0,98,3,148,5,0,0,0,0,90,3,237,0,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,207,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,26,2,3,0,0,91,27,2,3,0,0,93,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,53,2,3,0,0,47,0,18,66,3,0,0,213,0,3,1,1,0,34,4,1,1,0,252,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,67,0,163,131,243,242,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,249,248,30,65,0,228,148,31,65,0,247,246,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,245,244,41,193,0,241,41,240,0,42,4,31,0,0,0,0,120,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,86,65,0,243,242,0,5,2,7,0,0,160,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,3,1,1,0,34,4,1,1,0,252,5,2,1,0,59,253,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,67,0,163,131,243,242,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,249,248,30,65,0,228,148,31,65,0,247,246,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,245,244,41,193,0,241,41,240,0,42,4,31,0,0,0,0,122,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,86,65,0,243,242,0,5,2,3,0,0,253,54,4,31,0,0,0,0,123,0,3,1,1,0,34,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,251,21,65,0,173,141,22,67,0,163,131,253,252,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,245,244,30,65,0,228,148,31,65,0,249,248,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,193,0,241,41,240,0,42,4,31,0,0,0,0,124,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,86,65,0,253,252,0,5,2,7,0,0,160,18,66,3,0,0,251,54,4,31,0,0,0,0,125,0,3,1,1,0,34,5,2,1,0,59,251,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,67,0,163,131,253,252,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,245,244,30,65,0,228,148,31,65,0,249,248,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,193,0,241,41,240,0,42,4,31,0,0,0,0,126,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,86,65,0,253,252,0,5,2,3,0,0,251,54,4,31,0,0,0,0,127,0,3,1,1,0,34,4,1,1,0,252,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,245,244,30,65,0,228,148,31,65,0,105,73,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,193,0,241,41,240,0,42,4,31,0,0,0,0,128,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,7,0,0,160,18,2,3,0,0,253,54,4,31,0,0,0,0,129,0,3,1,1,0,34,4,1,1,0,252,5,2,1,0,59,253,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,245,244,30,65,0,228,148,31,65,0,105,73,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,193,0,241,41,240,0,42,4,31,0,0,0,0,130,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,3,0,0,253,54,4,31,0,0,0,0,131,0,81,7,7,9,209,1,85,82,44,209,1,85,65,15,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,80,3,231,1,0,0,0,0,80,3,240,0,0,0,0,0,101,4,236,2,0,0,0,0,101,4,246,1,0,0,0,0,81,3,236,3,0,0,0,0,81,3,245,2,0,0,0,0,107,4,241,4,0,0,0,0,107,4,251,3,0,0,0,0,40,3,240,5,0,0,0,0,40,3,250,4,0,0,0,0,98,3,244,6,0,0,0,0,98,3,255,5,0,0,0,0,90,3,233,0,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,36,7,2,3,0,0,94,8,2,3,0,0,38,9,3,3,0,0,42,31,13,3,7,0,0,0,28,26,2,3,0,0,91,27,2,3,0,0,93,51,2,3,0,0,60,52,2,3,0,0,62,0,18,66,3,0,0,213,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,243,242,30,65,0,228,148,31,65,0,168,136,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,245,244,41,1,0,96,43,42,4,31,0,0,0,0,120,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,247,246,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,65,0,249,248,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,243,242,30,65,0,228,148,31,65,0,168,136,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,245,244,41,1,0,96,43,42,4,31,0,0,0,0,122,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,247,246,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,65,0,249,248,0,54,4,31,0,0,0,0,123,0,2,1,0,33,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,251,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,253,252,30,65,0,228,148,31,65,0,168,136,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,1,0,96,43,42,4,31,0,0,0,0,124,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,249,248,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,65,0,245,244,0,18,66,3,0,0,251,54,4,31,0,0,0,0,125,0,2,1,0,33,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,253,252,30,65,0,228,148,31,65,0,168,136,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,1,0,96,43,42,4,31,0,0,0,0,126,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,249,248,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,65,0,245,244,0,54,4,31,0,0,0,0,127,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20482);
  /* memory initializer */ allocate([65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,16,0,0,30,65,0,228,148,31,65,0,168,136,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,1,0,96,43,42,4,31,0,0,0,0,128,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,105,73,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,65,0,245,244,0,18,2,3,0,0,253,54,4,31,0,0,0,0,129,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,16,0,0,30,65,0,228,148,31,65,0,168,136,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,243,242,41,1,0,96,43,42,4,31,0,0,0,0,130,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,105,73,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,65,0,245,244,0,54,4,31,0,0,0,0,131,0,254,152,9,9,0,0,85,88,44,103,0,85,88,9,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,90,3,168,0,173,3,0,0,82,3,168,1,173,3,0,0,181,1,162,2,94,3,0,0,69,117,40,4,143,4,0,0,71,117,20,5,163,5,0,0,72,117,56,6,190,6,0,0,73,117,79,7,6,8,0,0,74,117,131,8,241,8,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,7,1,3,0,202,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,40,1,3,203,204,41,1,3,200,201,46,65,0,99,67,49,65,0,110,78,57,0,0,32,0,2,3,3,0,0,173,251,3,2,3,0,0,253,4,2,3,0,0,252,5,3,3,0,0,207,156,6,2,3,0,0,213,7,2,3,0,0,172,8,2,3,0,0,171,9,2,3,0,0,243,12,2,3,0,0,190,13,3,3,0,0,158,246,16,3,3,0,0,132,142,17,3,3,0,0,134,143,18,3,3,0,0,130,144,19,2,3,0,0,169,20,3,3,0,0,231,232,21,3,3,0,0,129,154,22,3,3,0,0,163,233,23,3,3,0,0,161,214,24,131,3,0,24,0,24,162,24,224,0,25,3,3,0,0,148,153,26,2,3,0,0,174,27,2,3,0,0,175,30,3,3,0,0,160,181,31,3,3,0,0,225,245,32,3,3,0,0,208,209,33,2,3,0,0,159,38,3,3,0,0,155,157,39,3,3,0,0,244,248,40,3,3,0,0,239,249,41,2,3,0,0,238,43,3,3,0,0,170,221,44,3,3,0,0,145,146,46,3,3,0,0,184,189,49,3,3,0,0,164,165,50,2,3,0,0,230,51,3,3,0,0,135,128,52,2,3,0,0,250,53,2,3,0,0,168,0,2,3,3,0,0,173,251,3,2,3,0,0,253,4,2,3,0,0,252,5,3,3,0,0,207,156,7,2,3,0,0,172,8,2,3,0,0,171,9,2,3,0,0,243,12,2,3,0,0,190,13,3,3,0,0,158,246,16,3,3,0,0,132,142,17,3,3,0,0,134,143,18,3,3,0,0,130,144,19,2,3,0,0,169,20,3,3,0,0,231,232,21,3,3,0,0,129,154,22,3,3,0,0,163,233,23,3,3,0,0,161,214,24,131,3,0,24,0,24,162,24,224,0,25,3,3,0,0,148,153,26,2,3,0,0,174,27,2,3,0,0,175,30,3,3,0,0,160,181,31,3,3,0,0,225,245,32,3,3,0,0,208,209,33,2,3,0,0,159,38,3,3,0,0,155,157,39,3,3,0,0,244,248,40,3,3,0,0,239,249,41,2,3,0,0,238,43,3,3,0,0,170,221,44,3,3,0,0,145,146,46,3,3,0,0,184,189,49,3,3,0,0,164,165,50,2,3,0,0,230,51,3,3,0,0,135,128,52,2,3,0,0,250,53,2,3,0,0,168,0,2,2,3,0,0,173,3,2,3,0,0,253,5,3,7,0,0,0,156,7,2,3,0,0,172,8,2,3,0,0,171,12,2,3,0,0,157,13,3,7,0,0,0,246,16,3,3,0,0,132,142,17,3,3,0,0,134,143,18,3,3,0,0,130,144,21,3,3,0,0,129,154,22,2,3,0,0,163,23,2,3,0,0,161,24,2,3,0,0,162,25,3,3,0,0,148,153,26,2,3,0,0,174,27,2,3,0,0,175,30,2,3,0,0,160,31,3,3,0,0,225,21,33,2,3,0,0,159,39,3,3,0,0,20,248,43,2,3,0,0,170,44,3,3,0,0,145,146,46,3,7,0,0,0,155,49,3,3,0,0,164,165,50,2,3,0,0,230,51,3,3,0,0,135,128,52,2,3,0,0,250,53,2,3,0,0,168,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,39,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,34,0,5,3,3,0,0,207,156,6,2,3,0,0,213,12,2,3,0,0,190,17,3,3,0,0,134,143,19,2,3,0,0,169,24,3,3,0,0,171,172,26,2,3,204,0,174,27,2,3,205,0,175,30,3,3,0,0,145,146,31,3,7,0,0,0,245,38,65,0,108,76,39,3,3,0,0,244,248,40,1,2,39,203,43,3,3,0,0,170,221,46,3,3,0,0,184,189,50,66,0,109,77,230,0,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,126,9,97,198,110,164,111,228,117,231,65,199,78,165,79,229,85,232,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,39,13,97,238,101,208,105,246,110,236,111,250,117,252,65,239,69,209,73,247,78,237,79,251,85,253,32,91,45,11,99,135,108,155,109,158,110,166,111,241,67,128,76,157,77,159,78,167,79,242,32,93,0,2,3,7,0,0,0,251,3,2,3,0,0,253,4,2,3,0,0,252,5,3,3,0,0,207,156,6,2,3,0,0,213,13,3,7,0,0,0,246,17,65,0,119,87,20,65,0,116,84,24,3,3,0,0,171,172,26,2,3,0,0,166,27,2,3,0,0,167,30,3,3,0,0,145,146,31,67,0,115,83,225,245,32,65,0,100,68,36,2,3,0,0,242,38,65,0,108,76,39,3,3,0,0,244,248,41,2,3,0,0,238,43,2,3,0,0,170,49,3,3,0,0,189,190,50,2,3,0,0,230,51,2,3,0,0,174,52,2,3,0,0,175,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,23,97,131,101,136,105,140,111,147,117,150,119,247,115,249,100,208,108,155,110,158,116,231,65,182,69,210,73,215,79,226,85,234,83,221,87,239,68,209,76,157,78,159,84,232,32,94,39,13,97,160,101,130,105,161,111,162,117,163,99,135,65,181,69,144,73,214,79,224,85,233,67,128,32,39,34,15,97,132,101,137,105,139,110,169,111,148,117,129,121,152,65,142,69,211,73,216,78,184,79,153,85,154,89,243,32,34,0,2,2,3,0,0,173,6,2,3,0,0,213,18,3,3,0,0,250,251,21,3,3,0,0,236,237,24,3,3,0,0,171,172,26,67,0,134,143,91,123,27,67,0,155,157,93,125,30,3,3,0,0,145,146,31,3,7,0,0,0,245,32,3,3,0,0,208,209,34,3,3,0,0,169,184,36,3,3,0,0,189,190,39,3,7,0,0,0,248,43,2,7,0,0,205,48,3,3,0,0,231,232,49,3,3,0,0,166,167,50,2,3,0,0,230,51,2,3,0,0,174,52,2,3,0,0,175,53,2,3,0,0,168,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,5,97,198,110,164,65,199,78,165,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,13,97,160,101,130,105,161,111,162,117,163,99,135,65,181,69,144,73,214,79,224,85,233,67,128,32,39,34,17,97,132,101,137,134,241,105,139,111,148,155,158,117,129,121,152,65,142,69,211,143,242,73,216,79,153,157,159,85,154,89,243,32,34,170,9,97,156,105,244,111,225,155,252,65,207,73,246,79,238,157,253,32,170,0,5,2,3,0,0,207,6,2,3,0,0,213,17,3,3,0,0,148,153,18,3,3,0,0,134,143,19,3,3,0,0,156,230,21,3,3,0,0,236,237,22,3,3,0,0,225,238,23,3,3,0,0,132,142,24,3,3,0,0,171,172,25,3,3,0,0,155,157,26,2,3,0,0,166,27,2,3,0,0,167,30,3,3,0,0,145,146,31,3,7,0,0,0,245,32,3,3,0,0,208,209,33,3,3,0,0,159,158,34,3,3,0,0,169,184,35,3,3,0,0,189,190,36,3,3,0,0,247,239,39,3,7,0,0,0,248,43,2,3,0,0,170,46,3,3,0,0,250,251,47,3,3,0,0,249,221,48,3,3,0,0,231,232,49,3,3,0,0,168,173,51,2,3,0,0,174,52,2,3,0,0,175,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,13,97,198,101,252,105,241,111,228,117,244,110,164,65,199,69,253,73,242,79,229,85,246,78,165,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,13,97,160,101,130,105,161,111,162,117,163,99,135,65,181,69,144,73,214,79,224,85,233,67,128,32,39,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,0,2,2,3,0,0,173,5,3,3,0,0,207,156,6,2,3,0,0,213,16,2,3,0,0,166,24,3,3,0,0,171,172,25,2,3,0,0,167,26,67,0,158,159,91,123,27,67,0,155,157,93,125,30,3,3,0,0,145,146,31,3,7,0,0,0,245,39,3,7,0,0,0,248,41,2,7,0,0,205,43,2,3,0,0,170,50,2,3,0,0,230,51,2,3,0,0,174,52,2,3,0,0,175,53,2,3,0,0,168,0,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,15,97,131,101,136,158,208,105,140,111,147,155,250,117,150,65,182,69,210,159,209,73,215,79,226,157,251,85,234,32,94,39,17,97,160,101,130,158,241,105,161,111,162,155,236,117,163,99,135,65,181,69,144,159,242,73,214,79,224,157,237,85,233,67,128,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,238,13,97,134,101,189,158,231,105,169,111,244,155,252,65,143,69,190,159,232,73,184,79,246,157,253,32,238,0,73,77,1,4,0,0,85,90,3,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,243,57,1,0,0,0,0,98,243,68,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,1,0,252,35,5,2,1,0,59,253,7,2,1,0,58,94,8,2,1,0,63,38,9,2,3,0,0,36,12,67,0,243,242,45,95,13,67,0,249,248,61,43,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,67,0,247,246,233,153,25,65,0,167,135,26,66,0,229,149,91,27,66,0,234,154,93,30,65,0,228,148,31,67,0,245,244,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,65,0,241,240,42,4,31,0,0,0,0,120,43,2,1,0,47,124,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,66,0,161,129,60,52,66,0,238,158,62,53,1,0,46,44,0,5,2,3,0,0,253,54,4,31,0,0,0,0,121,0,56,190,1,9,0,0,86,73,44,205,1,86,73,2,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,117,52,0,175,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,2,67,0,229,197,49,33,3,67,0,226,194,50,64,4,67,0,234,202,51,35,5,67,0,244,212,52,36,6,3,3,200,200,53,37,7,3,3,201,201,54,94,8,3,3,202,202,55,38,9,3,3,203,203,56,42,10,3,3,204,204,57,40,11,195,0,240,0,208,11,48,129,41,129,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,67,0,223,191,91,123,27,67,0,189,180,93,125,30,65,0,97,65,57,0,0,32,0,96,25,97,224,229,162,226,165,101,232,234,171,105,236,111,242,244,176,189,182,117,249,223,215,121,207,65,192,197,130,194,133,69,200,202,139,73,204,79,210,212,144,180,150,85,217,191,187,89,159,32,96,34,25,97,228,229,198,226,166,101,235,234,172,105,239,111,246,244,177,189,183,117,252,223,216,121,214,65,196,197,2,194,134,69,203,202,140,73,155,79,153,212,145,180,151,85,156,191,188,89,20,32,34,126,25,97,227,229,199,226,231,101,168,234,173,105,238,111,245,244,178,189,222,117,251,223,230,121,219,65,195,197,5,194,6,69,136,202,141,73,206,79,160,212,146,180,179,85,157,191,255,89,25,32,126,39,25,97,225,229,161,226,164,101,233,234,170,105,237,111,243,244,175,189,190,117,250,223,209,121,253,65,193,197,129,194,132,69,201,202,138,73,205,79,211,212,143,180,149,85,218,191,186,89,221,32,39,46,25,97,213,229,163,226,167,101,169,234,174,105,184,111,247,244,181,189,254,117,248,223,241,121,220,65,128,197,131,194,135,69,137,202,142,73,152,79,154,212,147,180,148,85,158,191,185,89,30,32,46,0,92,0,0,0,0,0,0,0,0,75,67,70,0,1,1,46,72,101,110,114,105,113,117,101,32,80,101,114,111,110,255,68,79,83,32,99,111,100,101,112,97,103,101,115,32,45,32,108,105,98,114,97,114,121,32,35,50,32,111,102,32,51,170,2,9,0,0,66,71,44,186,1,66,71,7,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,104,3,153,1,0,0,0,0,104,3,174,0,0,0,0,0,87,3,151,2,0,0,0,0,87,3,174,1,0,0,0,0,90,3,167,0,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,207,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,26,2,3,0,0,91,27,2,3,0,0,93,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,0,18,66,3,0,0,213,0,3,1,1,0,63,4,1,1,0,43,5,2,5,0,34,160,7,1,1,0,61,8,1,1,0,58,9,1,1,0,47,10,3,5,0,95,0,31,11,1,1,0,239,12,1,1,0,73,13,1,0,46,86,16,1,0,44,242,17,65,0,231,232,18,66,0,168,169,207,19,65,0,183,184,20,65,0,245,246,21,65,0,249,250,22,65,0,198,199,23,65,0,227,228,24,65,0,166,167,25,65,0,243,244,26,65,0,164,165,27,1,0,59,253,30,65,0,237,238,31,193,0,222,31,224,0,32,65,0,160,161,33,65,0,214,215,34,65,0,233,234,35,65,0,172,173,36,65,0,229,230,37,65,0,212,213,38,65,0,235,236,39,65,0,210,211,40,65,0,251,252,42,4,31,0,0,0,0,120,43,1,0,41,40,44,65,0,156,157,45,65,0,189,190,46,65,0,158,159,47,65,0,247,248,48,65,0,170,171,49,65,0,181,182,50,65,0,216,221,51,65,0,225,226,52,65,0,208,209,53,65,0,162,163,0,5,2,7,0,0,160,18,66,3,0,0,207,54,4,31,0,0,0,0,121,0,3,1,1,0,63,4,1,1,0,43,5,1,1,0,34,7,1,1,0,61,8,1,1,0,58,9,1,1,0,47,10,3,5,0,95,0,31,11,1,1,0,239,12,1,1,0,73,13,1,0,46,86,16,1,0,44,242,17,65,0,231,232,18,65,0,168,169,19,65,0,183,184,20,65,0,245,246,21,65,0,249,250,22,65,0,198,199,23,65,0,227,228,24,65,0,166,167,25,65,0,243,244,26,65,0,164,165,27,1,0,59,253,30,65,0,237,238,31,193,0,222,31,224,0,32,65,0,160,161,33,65,0,214,215,34,65,0,233,234,35,65,0,172,173,36,65,0,229,230,37,65,0,212,213,38,65,0,235,236,39,65,0,210,211,40,65,0,251,252,42,4,31,0,0,0,0,122,43,1,0,41,40,44,65,0,156,157,45,65,0,189,190,46,65,0,158,159,47,65,0,247,248,48,65,0,170,171,49,65,0,181,182,50,65,0,216,221,51,65,0,225,226,52,65,0,208,209,53,65,0,162,163,0,54,4,31,0,0,0,0,123,0,36,114,6,4,241,0,66,71,7,4,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,104,3,97,4,0,0,0,0,104,3,120,2,0,0,0,0,87,3,99,6,0,0,0,0,87,3,126,4,0,0,0,0,90,3,104,2,0,0,0,0,82,3,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,1,0,33,49,3,1,0,34,50,4,1,0,35,51,5,1,0,207,52,6,1,0,37,53,7,1,0,38,54,8,1,0,39,55,9,1,0,40,56,10,1,0,41,57,11,1,0,36,48,12,1,0,61,45,13,2,0,95,95,31,16,197,0,106,36,74,36,10,36,0,36,0,36,0,36,17,197,0,99,46,67,46,3,46,0,46,0,46,0,46,18,197,0,117,22,85,22,21,22,0,22,0,22,0,22,19,197,0,107,37,75,37,11,37,0,37,0,37,0,37,20,197,0,101,18,69,18,5,18,0,18,0,18,0,18,21,197,0,110,49,78,49,14,49,0,49,0,49,0,49,22,197,0,103,34,71,34,7,34,0,34,0,34,0,34,23,2,0,91,91,27,24,2,0,93,93,29,25,197,0,122,44,90,44,26,44,0,44,0,44,0,44,26,197,0,104,35,72,35,8,35,0,35,0,35,0,35,27,4,4,125,123,0,42,58,30,197,0,102,33,70,33,6,33,0,33,0,33,0,33,31,197,0,121,21,89,21,25,21,0,21,0,21,0,21,32,197,0,119,17,87,17,23,17,0,17,0,17,0,17,33,197,0,97,30,65,30,1,30,0,30,0,30,0,30,34,197,0,112,25,80,25,16,25,0,25,0,25,0,25,35,197,0,114,19,82,19,18,19,0,19,0,19,0,19,36,197,0,111,24,79,24,15,24,0,24,0,24,0,24,37,197,0,108,38,76,38,12,38,0,38,0,38,0,38,38,197,0,100,32,68,32,4,32,0,32,0,32,0,32,39,197,0,118,47,86,47,22,47,0,47,0,47,0,47,40,2,0,92,124,28,41,1,0,43,59,43,1,0,62,46,44,2,0,64,94,30,45,197,0,115,31,83,31,19,31,0,31,0,31,0,31,46,197,0,109,50,77,50,13,50,0,50,0,50,0,50,47,197,0,105,23,73,23,9,23,0,23,0,23,0,23,48,197,0,116,20,84,20,20,20,0,20,0,20,0,20,49,197,0,120,45,88,45,24,45,0,45,0,45,0,45,50,197,0,98,48,66,48,2,48,0,48,0,48,0,48,51,16,0,0,52,1,0,60,44,53,1,0,63,47,86,197,0,113,16,81,16,17,16,0,16,0,16,0,16,0,20,197,0,101,18,69,18,5,18,213,18,0,18,0,18,0,5,0,1,160,13,67,4,158,159,0,95,16,197,0,189,36,190,36,10,36,0,36,0,36,0,36,17,197,0,164,46,165,46,3,46,0,46,0,46,0,46,18,197,0,231,22,232,22,21,22,0,22,0,22,0,22,19,197,0,198,37,199,37,11,37,0,37,0,37,0,37,20,197,0,168,18,169,18,5,18,207,18,0,18,0,18,21,197,0,212,49,213,49,14,49,0,49,0,49,0,49,22,197,0,172,34,173,34,7,34,0,34,0,34,0,34,23,67,4,245,246,0,91,24,67,4,249,250,0,93,25,197,0,243,44,244,44,26,44,0,44,0,44,0,44,26,197,0,181,35,182,35,8,35,0,35,0,35,0,35,27,4,4,42,58,0,125,123,30,197,0,170,33,171,33,6,33,0,33,0,33,0,33,31,197,0,241,21,242,21,25,21,0,21,0,21,0,21,32,197,0,235,17,236,17,23,17,0,17,0,17,0,17,33,197,0,160,30,161,30,1,30,0,30,0,30,0,30,34,197,0,216,25,221,25,16,25,0,25,0,25,0,25,35,197,0,225,19,226,19,18,19,0,19,0,19,0,19,36,197,0,214,24,215,24,15,24,0,24,0,24,0,24,37,197,0,208,38,209,38,12,38,0,38,0,38,0,38,38,197,0,166,32,167,32,4,32,0,32,0,32,0,32,39,197,0,233,47,234,47,22,47,0,47,0,47,0,47,40,68,4,247,248,0,92,124,41,4,7,0,0,0,152,153,42,5,63,0,0,0,0,0,120,43,4,7,0,0,0,132,133,44,68,4,251,252,0,64,94,45,197,0,227,31,228,31,19,31,0,31,0,31,0,31,46,197,0,210,50,211,50,13,50,0,50,0,50,0,50,47,197,0,183,23,184,23,9,23,0,23,0,23,0,23,48,197,0,229,20,230,20,20,20,0,20,0,20,0,20,49,197,0,237,45,238,45,24,45,0,45,0,45,0,45,50,197,0,162,48,163,48,2,48,0,48,0,48,0,48,51,68,4,156,157,0,134,135,52,4,7,0,0,0,138,139,53,4,7,0,0,0,140,141,86,197,0,222,16,224,0,17,16,0,16,0,16,0,16,0,5,0,1,160,20,197,0,101,18,69,18,5,18,207,18,0,18,0,18,54,5,63,0,0,0,0,0,121,0,13,67,4,158,159,0,95,16,197,0,189,36,190,36,10,36,0,36,0,36,0,36,17,197,0,164,46,165,46,3,46,0,46,0,46,0,46,18,197,0,231,22,232,22,21,22,0,22,0,22,0,22,19,197,0,198,37,199,37,11,37,0,37,0,37,0,37,20,197,0,168,18,169,18,5,18,0,18,0,18,0,18,21,197,0,212,49,213,49,14,49,0,49,0,49,0,49,22,197,0,172,34,173,34,7,34,0,34,0,34,0,34,23,67,4,245,246,0,91,24,67,4,249,250,0,93,25,197,0,243,44,244,44,26,44,0,44,0,44,0,44,26,197,0,181,35,182,35,8,35,0,35,0,35,0,35,27,4,4,42,58,0,125,123,30,197,0,170,33,171,33,6,33,0,33,0,33,0,33,31,197,0,241,21,242,21,25,21,0,21,0,21,0,21,32,197,0,235,17,236,17,23,17,0,17,0,17,0,17,33,197,0,160,30,161,30,1,30,0,30,0,30,0,30,34,197,0,216,25,221,25,16,25,0,25,0,25,0,25,35,197,0,225,19,226,19,18,19,0,19,0,19,0,19,36,197,0,214,24,215,24,15,24,0,24,0,24,0,24,37,197,0,208,38,209,38,12,38,0,38,0,38,0,38,38,197,0,166,32,167,32,4,32,0,32,0,32,0,32,39,197,0,233,47,234,47,22,47,0,47,0,47,0,47,40,68,4,247,248,0,92,124,41,4,7,0,0,0,152,153,42,5,63,0,0,0,0,0,122,43,4,7,0,0,0,132,133,44,68,4,251,252,0,64,94,45,197,0,227,31,228,31,19,31,0,31,0,31,0,31,46,197,0,210,50,211,50,13,50,0,50,0,50,0,50,47,197,0,183,23,184,23,9,23,0,23,0,23,0,23,48,197,0,229,20,230,20,20,20,0,20,0,20,0,20,49,197,0,237,45,238,45,24,45,0,45,0,45,0,45,50,197,0,162,48,163,48,2,48,0,48,0,48,0,48,51,68,4,156,157,0,134,135,52,4,7,0,0,0,138,139,53,4,7,0,0,0,140,141,86,197,0,222,16,224,0,17,16,0,16,0,16,0,16,0,54,5,63,0,0,0,0,0,123,0,18,231,2,9,0,0,67,69,44,185,1,67,69,5,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,67,117,114,1,226,1,0,0,67,117,151,0,0,0,0,0,59,117,206,2,0,0,0,0,59,117,243,1,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,13,2,3,0,0,61,26,2,3,0,0,91,27,2,3,0,0,93,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,0,3,1,1,0,34,4,1,1,0,252,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,13,1,0,254,43,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,120,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,3,0,0,253,16,67,3,0,0,214,213,18,67,3,0,0,190,189,22,65,0,117,85,24,67,0,111,79,222,221,26,67,0,249,248,91,123,27,67,0,210,209,93,125,30,67,0,97,65,199,198,31,67,3,0,0,251,250,34,67,3,0,0,182,181,41,0,1,200,44,67,3,0,0,216,215,45,67,3,0,0,212,211,46,67,3,0,0,208,207,49,67,3,0,0,184,183,54,4,31,0,0,0,0,121,57,0,0,32,0,96,7,97,243,111,245,117,247,65,242,79,244,85,246,32,96,0,3,1,1,0,34,4,1,1,0,252,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,13,1,0,254,43,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,122,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,123,0,194,25,3,4,187,1,67,69,5,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,67,117,138,1,250,1,0,0,67,117,145,0,0,0,0,0,59,117,5,3,0,0,0,0,59,117,11,2,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,36,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,42,26,2,3,0,0,91,27,2,3,0,0,93,51,2,3,0,0,60,52,2,3,0,0,62,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,120,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,5,2,3,0,0,253,16,67,3,0,0,214,213,18,67,3,0,0,190,189,22,65,0,117,85,24,67,0,111,79,222,221,26,67,0,249,248,91,123,27,67,0,210,209,93,125,30,67,0,97,65,199,198,31,67,3,0,0,251,250,34,67,3,0,0,182,181,41,0,1,200,44,67,3,0,0,216,215,45,67,3,0,0,212,211,46,67,3,0,0,208,207,49,67,3,0,0,184,183,54,4,31,0,0,0,0,121,57,0,0,32,0,96,7,97,243,111,245,117,247,65,242,79,244,85,246,32,96,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,2,0,254,43,124,42,4,31,0,0,0,0,122,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,123,0,200,88,4,19,0,0,71,75,44,0,0,69,76,44,63,1,71,75,44,63,1,69,76,9,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,101,3,58,2,0,0,0,0,101,3,121,1,73,2,0,0,225,2,36,3,0,0,0,0,225,2,126,2,45,3,0,0,83,3,10,4,0,0,0,0,83,3,90,3,19,4,0,0,90,3,247,0,254,0,0,0,82,3,0,0,254,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,1,1,0,34,7,1,1,0,38,8,1,1,0,47,9,1,1,0,40,10,1,1,0,41,11,1,1,0,61,12,1,0,39,63,13,1,0,43,42,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,39,1,3,203,204,40,1,3,202,201,41,3,4,92,124,0,28,43,1,1,200,64,46,65,0,99,67,49,65,0,110,78,51,2,0,44,59,60,52,2,0,46,58,62,53,3,4,45,95,0,31,57,0,0,32,86,1,0,60,62,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,4,1,1,0,156,7,1,1,0,137,12,1,1,0,248,16,1,0,136,142,17,1,0,237,138,18,66,0,222,168,135,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,26,1,1,0,174,27,1,1,0,175,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,2,7,200,201,202,40,1,0,140,139,41,1,0,171,241,42,4,31,0,0,0,0,120,43,1,0,153,154,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,86,1,0,245,151,0,18,66,3,0,0,135,54,4,31,0,0,0,0,121,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,5,227,160,242,251,173,145,209,150,32,249,247,3,227,161,242,252,32,247,0,12,1,1,0,248,16,1,0,249,81,17,1,0,170,87,18,65,0,156,132,19,65,0,168,144,20,65,0,171,146,21,65,0,172,147,22,65,0,159,135,23,65,0,160,136,24,65,0,166,142,25,65,0,167,143,30,65,0,152,128,31,65,0,169,145,32,65,0,155,131,33,65,0,173,148,34,65,0,154,130,35,65,0,158,134,36,65,0,165,141,37,65,0,161,137,38,65,0,162,138,39,1,3,200,201,41,1,0,96,241,42,4,31,0,0,0,0,122,43,1,0,253,124,44,65,0,157,133,45,65,0,174,149,46,65,0,175,150,47,193,0,224,0,151,47,48,65,0,153,129,49,65,0,164,140,50,65,0,163,139,86,1,0,21,124,0,54,4,31,0,0,0,0,123,0,39,15,152,225,156,226,158,227,160,229,166,230,172,231,224,233,128,234,132,235,134,236,136,237,142,238,147,239,151,240,32,39,34,5,160,228,172,232,136,244,147,245,32,34,0,12,1,1,0,248,16,16,0,0,17,1,0,237,124,18,65,0,222,168,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,26,1,1,0,174,27,1,1,0,175,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,2,7,200,201,202,41,1,0,171,241,42,4,31,0,0,0,0,124,43,1,0,92,124,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,86,1,0,245,124,0,54,4,31,0,0,0,0,125,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,3,227,160,242,251,32,249,39,3,227,161,242,252,32,39,0,66,190,4,9,220,0,71,75,44,220,0,69,76,9,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,101,3,221,1,0,0,0,0,101,3,251,0,52,2,0,0,225,2,58,3,0,0,0,0,225,2,105,2,121,3,0,0,83,3,92,4,0,0,0,0,83,3,166,3,131,4,0,0,90,3,244,0,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,253,4,2,1,0,126,252,5,2,3,0,0,156,6,2,3,0,0,245,7,2,1,0,38,20,8,1,1,0,47,9,2,1,0,40,207,10,2,1,0,41,221,11,2,1,0,61,248,12,2,0,39,63,241,13,2,0,93,91,171,26,2,0,43,42,174,27,2,0,125,123,175,39,1,0,39,96,40,16,0,0,41,3,4,92,124,0,28,43,2,0,35,64,170,51,2,0,44,59,60,52,2,0,46,58,62,53,3,4,45,95,0,31,57,0,0,32,86,1,0,60,62,0,18,66,3,0,0,213,0,3,2,3,0,0,153,4,2,1,0,156,154,5,2,3,0,0,156,6,2,3,0,0,245,7,2,3,0,0,20,9,2,7,0,0,160,10,2,3,0,0,138,11,2,3,0,0,248,12,2,3,0,0,241,13,2,3,0,0,171,16,1,0,59,58,17,1,0,237,126,18,66,0,222,168,135,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,2,7,200,201,202,40,2,7,201,202,202,41,1,0,171,241,42,4,31,0,0,0,0,120,43,2,3,0,0,137,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,66,0,250,213,151,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,0,3,2,3,0,0,153,4,2,3,0,0,154,5,2,3,0,0,156,6,2,3,0,0,245,7,2,3,0,0,20,9,2,7,0,0,160,10,2,3,0,0,138,11,2,3,0,0,248,12,2,3,0,0,241,13,2,3,0,0,171,18,66,3,0,0,135,43,2,3,0,0,137,47,66,0,250,213,151,54,4,31,0,0,0,0,121,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,5,227,160,242,251,173,145,209,150,32,249,247,3,227,161,242,252,32,247,0,4,2,7,0,0,160,5,2,7,0,0,160,6,2,3,0,0,21,9,2,7,0,0,160,10,2,7,0,0,160,13,2,7,0,0,160,16,16,0,0,17,1,0,170,126,18,65,0,156,132,19,65,0,168,144,20,65,0,171,146,21,65,0,172,147,22,65,0,159,135,23,65,0,160,136,24,65,0,166,142,25,65,0,167,143,26,2,7,0,0,160,27,2,7,0,0,160,30,65,0,152,128,31,65,0,169,145,32,65,0,155,131,33,65,0,173,148,34,65,0,154,130,35,65,0,158,134,36,65,0,165,141,37,65,0,161,137,38,65,0,162,138,39,1,3,200,201,40,1,3,201,201,41,1,0,92,241,42,4,31,0,0,0,0,122,43,2,5,0,248,160,44,65,0,157,133,45,65,0,174,149,46,65,0,175,150,47,193,0,224,0,151,47,48,65,0,153,129,49,65,0,164,140,50,65,0,163,139,0,4,2,7,0,0,160,5,2,7,0,0,160,6,2,3,0,0,21,9,2,7,0,0,160,10,2,7,0,0,160,13,2,7,0,0,160,26,2,7,0,0,160,27,2,7,0,0,160,43,2,7,0,0,160,54,4,31,0,0,0,0,123,0,39,15,152,225,156,226,158,227,160,229,166,230,172,231,224,233,128,234,132,235,134,236,136,237,142,238,147,239,151,240,32,39,34,5,160,228,172,232,136,244,147,245,32,34,0,3,2,7,0,0,160,4,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,16,16,0,0,17,1,2,237,160,18,65,0,222,168,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,2,7,200,201,202,40,2,7,201,202,202,42,4,31,0,0,0,0,124,43,2,7,0,0,160,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,0,3,2,7,0,0,160,4,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,43,2,7,0,0,160,54,4,31,0,0,0,0,125,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,3,227,160,242,251,32,249,39,3,227,161,242,252,32,39,0,112,36,6,9,203,1,71,75,44,203,1,69,76,9,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,101,3,204,3,0,0,0,0,101,3,18,3,11,4,0,0,225,2,7,5,0,0,0,0,225,2,64,4,218,4,0,0,83,3,249,5,0,0,0,0,83,3,34,5,200,5,0,0,90,3,176,1,151,2,0,0,82,3,207,0,151,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,253,7,2,3,0,0,20,11,2,3,0,0,248,12,2,3,0,0,241,16,1,0,59,58,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,2,3,0,0,174,27,2,3,0,0,175,30,65,0,97,65,39,1,3,200,201,46,65,0,99,67,49,65,0,110,78,57,0,0,32,0,2,3,3,0,0,173,251,4,2,3,0,0,252,5,3,3,0,0,207,156,7,2,3,0,202,172,8,2,3,0,0,171,9,2,3,0,0,243,11,2,7,0,0,160,12,2,3,0,0,190,13,3,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30722);
  /* memory initializer */ allocate([158,246,16,67,0,113,81,132,142,17,67,3,0,0,134,143,18,67,0,101,69,130,144,19,66,3,0,0,169,20,67,3,0,0,231,232,21,67,0,121,89,129,154,22,67,0,117,85,163,233,23,67,0,105,73,161,214,24,195,0,111,24,79,24,162,24,224,0,25,67,3,0,0,148,153,30,67,0,97,65,160,181,31,67,3,0,0,225,245,32,67,3,0,0,208,209,38,67,3,0,0,155,157,39,3,0,59,58,244,248,40,3,15,0,0,203,204,41,1,3,200,201,43,3,3,0,0,170,221,44,67,3,0,0,145,146,46,67,0,99,67,184,189,49,67,0,110,78,164,165,50,66,3,0,0,230,51,3,3,0,0,135,128,53,2,3,0,0,168,0,2,3,3,0,0,173,251,4,2,3,0,0,252,5,3,3,0,0,207,156,6,2,3,0,0,213,7,2,3,0,202,172,8,2,3,0,0,171,9,2,3,0,0,243,11,2,7,0,0,160,12,2,3,0,0,190,13,3,3,0,0,158,246,16,67,0,113,81,132,142,17,67,3,0,0,134,143,18,67,0,101,69,130,144,19,66,3,0,0,169,20,67,3,0,0,231,232,21,67,0,121,89,129,154,22,67,0,117,85,163,233,23,67,0,105,73,161,214,24,195,0,111,24,79,24,162,24,224,0,25,67,3,0,0,148,153,30,67,0,97,65,160,181,31,67,3,0,0,225,245,32,67,3,0,0,208,209,38,67,3,0,0,155,157,39,3,0,59,58,244,248,40,3,15,0,0,203,204,41,1,3,200,201,43,3,3,0,0,170,221,44,67,3,0,0,145,146,46,67,0,99,67,184,189,49,67,0,110,78,164,165,50,66,3,0,0,230,51,3,3,0,0,135,128,53,2,3,0,0,168,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,3,2,3,0,0,153,4,2,3,0,0,154,5,2,3,0,0,156,6,2,3,0,0,245,10,2,3,0,0,138,13,2,3,0,0,171,17,1,2,237,202,18,66,0,222,168,135,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,2,7,0,0,202,42,4,31,0,0,0,0,120,43,2,3,0,0,137,44,193,0,224,0,169,44,45,65,0,244,211,46,66,0,246,212,151,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,0,3,2,3,0,0,153,4,2,3,0,0,154,5,2,3,0,0,156,6,2,3,0,0,245,10,2,3,0,0,138,13,2,3,0,0,171,18,66,3,0,0,135,43,2,3,0,0,137,46,66,3,0,0,151,54,4,31,0,0,0,0,121,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,5,227,160,242,251,173,145,209,150,32,249,247,3,227,161,242,252,32,247,0,6,2,3,0,0,21,17,1,2,170,0,18,65,0,156,132,19,65,0,168,144,20,65,0,171,146,21,65,0,172,147,22,65,0,159,135,23,65,0,160,136,24,65,0,166,142,25,65,0,167,143,26,2,7,0,0,160,27,2,7,0,0,160,30,65,0,152,128,31,65,0,169,145,32,65,0,155,131,33,65,0,173,148,34,65,0,154,130,35,65,0,158,134,36,65,0,165,141,37,65,0,161,137,38,65,0,162,138,42,4,31,0,0,0,0,122,44,65,0,157,133,45,65,0,174,149,46,65,0,175,150,47,193,0,224,0,151,47,48,65,0,153,129,49,65,0,164,140,50,65,0,163,139,0,39,15,152,225,156,226,158,227,160,229,166,230,172,231,224,233,128,234,132,235,134,236,136,237,142,238,147,239,151,240,32,39,34,5,160,228,172,232,136,244,147,245,32,34,0,6,2,3,0,0,21,26,2,7,0,0,160,27,2,7,0,0,160,54,4,31,0,0,0,0,123,0,3,2,7,0,0,160,5,2,3,0,0,156,6,2,3,0,0,245,13,2,3,0,0,171,17,1,2,237,202,18,65,0,222,168,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,2,7,0,0,202,42,4,31,0,0,0,0,124,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,3,227,160,242,251,32,249,39,3,227,161,242,252,32,39,0,3,2,7,0,0,160,5,2,3,0,0,156,6,2,3,0,0,245,13,2,3,0,0,171,54,4,31,0,0,0,0,125,0,120,52,1,9,0,0,73,83,44,202,1,73,83,4,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,90,3,216,0,229,0,0,0,82,3,0,0,229,0,0,0,93,3,2,1,13,1,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,7,1,1,0,38,8,2,1,0,47,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,67,0,148,153,92,28,13,3,4,45,95,0,31,16,66,3,0,0,64,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,208,209,27,2,0,39,63,126,30,65,0,97,65,39,65,0,145,146,40,3,3,200,200,94,30,41,2,0,60,62,124,43,2,0,43,42,96,51,1,1,0,59,52,1,1,0,58,53,65,0,231,232,57,0,0,32,0,6,2,3,0,0,213,18,66,3,0,0,213,0,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,0,26,65,0,140,139,53,65,0,149,141,0,39,13,97,160,101,130,105,161,111,162,117,163,121,152,65,164,69,144,73,165,79,166,85,167,89,151,32,39,0,202,238,1,9,161,0,73,83,44,197,0,73,83,4,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,90,3,247,0,4,1,0,0,82,3,0,0,4,1,0,0,93,3,131,1,153,1,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,5,2,1,0,207,36,7,1,1,0,38,8,2,1,0,47,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,67,0,148,153,92,28,13,3,4,45,95,0,31,16,66,3,0,0,64,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,208,209,27,2,4,39,63,205,30,65,0,97,65,39,65,0,145,146,40,3,7,202,202,201,30,41,2,3,204,203,248,43,2,4,43,42,200,46,65,0,99,67,49,65,0,110,78,50,66,3,0,0,230,51,2,1,0,59,60,52,2,1,0,58,62,53,66,0,231,232,124,57,0,0,32,86,2,0,60,62,124,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,248,3,97,134,65,143,32,248,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,0,5,1,3,0,160,26,65,0,140,139,27,2,3,0,0,126,53,65,0,149,141,0,96,3,97,133,101,138,32,96,94,5,97,131,101,136,111,147,117,150,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,152,65,164,69,144,73,165,79,166,85,167,89,151,32,39,34,8,97,132,101,137,111,148,117,129,65,142,79,153,85,154,32,34,248,3,97,134,65,143,32,248,0,41,98,8,9,0,0,82,79,44,77,1,82,79,11,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,84,3,15,2,137,2,0,0,82,3,0,0,136,1,0,0,90,3,129,1,136,1,0,0,80,3,74,4,0,0,0,0,80,3,74,3,0,0,0,0,101,4,195,5,0,0,0,0,101,4,196,4,0,0,0,0,57,117,55,6,0,0,0,0,58,117,222,7,0,0,0,0,58,117,192,6,201,7,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,7,0,0,200,3,1,1,0,34,4,4,15,0,0,201,0,30,5,1,1,0,207,6,2,7,0,0,202,7,1,1,0,38,8,2,5,0,47,203,9,2,1,0,40,250,10,2,5,0,41,204,11,1,1,0,61,12,2,4,43,63,205,13,2,4,39,42,206,16,66,3,0,0,92,17,66,3,0,0,124,18,66,0,101,69,246,19,66,3,0,0,158,20,66,3,0,0,36,21,197,0,122,44,90,44,225,44,0,44,26,44,0,44,22,65,0,117,85,23,66,0,105,73,60,24,66,0,111,79,62,26,2,3,160,160,246,27,66,0,140,215,158,30,65,0,97,65,39,2,3,160,160,36,40,2,3,160,160,225,41,1,0,93,91,43,65,0,131,182,44,197,0,121,21,89,21,0,21,0,21,25,21,0,21,46,65,0,99,67,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,245,51,2,1,0,59,60,52,2,1,0,58,62,53,4,12,45,95,0,0,31,57,0,0,32,86,1,0,60,62,0,22,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,2,2,3,0,0,126,3,2,7,0,0,200,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,0,0,209,19,65,0,114,82,20,65,0,116,84,22,66,3,0,0,170,26,65,0,199,198,31,66,0,115,83,208,32,66,0,100,68,209,37,66,3,0,0,136,38,66,0,108,76,157,39,65,0,173,184,40,65,0,238,221,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,67,0,236,156,39,42,16,65,0,238,158,17,65,0,233,153,18,66,0,165,133,250,19,194,4,224,0,144,19,160,19,20,65,0,226,146,21,197,4,167,44,135,44,160,44,0,44,26,44,0,44,22,66,0,227,147,253,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,66,0,249,248,250,27,66,4,168,136,160,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,39,65,0,232,152,40,66,4,230,150,160,41,67,0,245,244,93,91,42,5,63,0,0,0,0,0,123,43,65,0,239,159,44,197,0,169,21,137,21,0,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,231,151,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,3,0,0,250,19,2,7,0,0,160,21,197,4,122,44,90,44,160,44,0,44,26,44,0,44,22,2,3,0,0,253,26,2,3,0,0,250,27,16,0,0,40,2,7,0,0,160,43,16,0,0,50,2,7,0,0,160,54,5,63,0,0,0,0,0,124,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,1,0,253,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,67,0,236,156,39,42,16,65,0,238,158,17,65,0,233,153,18,66,0,165,133,250,19,194,4,224,0,144,19,160,19,20,65,0,226,146,21,197,4,167,44,135,44,160,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,66,0,249,248,250,27,66,4,168,136,160,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,39,65,0,232,152,40,66,4,230,150,160,41,67,0,245,244,93,91,42,5,63,0,0,0,0,0,125,43,65,0,239,159,44,197,0,169,21,137,21,0,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,231,151,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,1,0,253,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,3,0,0,250,19,2,7,0,0,160,21,197,4,122,44,90,44,160,44,0,44,26,44,0,44,26,2,3,0,0,250,27,16,0,0,40,2,7,0,0,160,43,16,0,0,50,2,7,0,0,160,54,5,63,0,0,0,0,0,126,0,2,2,7,0,0,160,4,2,7,0,0,160,5,2,3,0,0,213,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,3,3,0,0,136,210,19,2,7,0,0,160,21,197,4,122,44,90,44,160,44,0,44,26,44,0,44,22,67,3,0,0,129,154,23,65,1,0,152,24,67,3,0,0,148,153,26,66,4,132,142,160,27,66,4,141,73,160,34,67,3,0,0,167,166,39,65,0,159,158,40,66,4,243,244,160,43,65,0,135,128,0,2,2,7,0,0,160,3,1,3,0,200,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,67,0,236,156,39,42,16,65,0,238,158,17,65,0,233,153,18,66,4,165,133,160,19,194,4,224,0,144,19,160,19,20,65,0,226,146,21,197,4,167,44,135,44,160,44,0,44,26,44,0,44,22,66,0,227,147,253,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,66,4,237,157,160,27,66,4,235,155,160,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,39,65,0,232,152,40,66,4,230,150,160,41,67,0,234,154,93,91,42,5,63,0,0,0,0,0,128,43,65,0,239,159,44,197,0,169,21,137,21,0,21,0,21,25,21,0,21,45,65,0,251,250,46,65,0,231,151,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,57,0,0,32,0,34,9,160,243,165,241,174,245,227,247,128,242,133,240,142,244,147,246,32,34,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,7,0,0,160,19,2,7,0,0,160,21,197,4,122,44,90,44,160,44,0,44,26,44,0,44,22,2,3,0,0,253,26,2,7,0,0,160,27,16,0,0,40,2,7,0,0,160,43,16,0,0,50,2,7,0,0,160,54,5,63,0,0,0,0,0,129,0,183,191,7,4,190,1,82,79,11,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,84,3,215,1,77,2,0,0,90,3,73,1,80,1,0,0,82,3,0,0,80,1,0,0,80,3,251,3,0,0,0,0,80,3,14,3,0,0,0,0,101,4,85,5,0,0,0,0,101,4,105,4,0,0,0,0,57,117,189,5,0,0,0,0,58,117,76,7,0,0,0,0,58,117,69,6,55,7,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,7,0,0,200,3,1,1,0,34,4,4,15,0,0,201,0,30,6,2,7,0,0,202,7,1,1,0,38,8,2,5,0,47,203,9,2,1,0,40,250,10,2,5,0,41,204,11,1,1,0,61,12,2,4,43,63,205,13,2,4,39,42,206,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,66,3,160,160,123,27,66,0,140,215,125,30,65,0,97,65,39,68,11,160,160,91,0,27,40,68,11,160,160,93,0,29,41,66,0,131,182,45,43,2,3,0,0,225,44,66,3,0,0,158,45,66,3,0,0,246,46,66,0,99,67,245,49,65,0,110,78,51,2,1,0,59,60,52,2,1,0,58,62,53,4,8,45,95,64,0,31,57,0,0,32,86,2,0,158,246,245,0,18,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,2,2,3,0,0,126,3,2,7,0,0,200,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,0,0,209,18,66,3,0,0,170,19,65,0,114,82,20,65,0,116,84,26,65,0,199,198,31,65,0,115,83,32,65,0,100,68,38,65,0,108,76,39,65,0,173,184,40,65,0,238,221,44,65,0,122,90,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,2,2,7,0,0,160,4,2,7,0,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,67,0,236,156,39,42,16,65,0,238,158,17,65,0,233,153,18,66,0,165,133,253,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,169,137,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,65,0,249,248,27,65,0,168,136,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,39,65,0,232,152,40,65,0,230,150,41,65,0,239,159,42,5,63,0,0,0,0,0,123,43,2,7,0,0,160,44,66,4,167,135,160,45,66,4,229,149,160,46,66,0,231,151,21,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,57,0,0,32,86,66,0,245,244,21,0,2,2,7,0,0,160,4,2,7,0,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,3,0,0,253,27,1,3,160,160,41,1,3,160,160,43,2,7,0,0,160,44,2,7,0,0,160,45,2,7,0,0,160,46,2,3,0,0,21,50,2,7,0,0,160,54,5,63,0,0,0,0,0,124,86,2,3,160,160,21,0,2,2,7,0,0,160,4,2,7,0,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,67,0,236,156,39,42,16,65,0,238,158,17,65,0,233,153,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,169,137,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,65,0,249,248,27,65,0,168,136,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,39,65,0,232,152,40,65,0,230,150,41,65,0,239,159,42,5,63,0,0,0,0,0,125,43,2,7,0,0,160,44,66,4,167,135,160,45,66,4,229,149,160,46,66,0,231,151,21,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,57,0,0,32,86,66,0,245,244,21,0,2,2,7,0,0,160,4,2,7,0,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,27,1,3,160,160,41,1,3,160,160,43,2,7,0,0,160,44,2,7,0,0,160,45,2,7,0,0,160,46,2,3,0,0,21,50,2,7,0,0,160,54,5,63,0,0,0,0,0,126,86,2,3,160,160,21,0,2,2,7,0,0,160,4,2,7,0,0,160,5,2,3,0,0,213,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,3,3,0,0,136,210,22,67,3,0,0,129,154,23,65,1,0,152,24,67,3,0,0,148,153,26,65,0,132,142,27,65,0,141,73,34,67,3,0,0,167,166,39,65,0,159,158,40,65,0,243,244,41,1,3,160,160,43,2,7,0,0,160,44,2,7,0,0,160,45,2,7,0,0,160,86,65,0,135,128,0,2,2,7,0,0,160,3,1,3,0,200,4,2,7,0,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,67,0,236,156,39,42,16,65,0,238,158,17,65,0,233,153,18,66,0,165,133,253,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,169,137,22,65,0,227,147,23,65,0,168,136,24,65,0,174,142,25,65,0,175,143,26,65,0,237,157,27,65,0,235,155,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,163,131,35,65,0,229,149,36,65,0,166,134,37,65,0,170,138,38,65,0,171,139,39,65,0,232,152,40,65,0,230,150,41,65,0,239,159,42,5,63,0,0,0,0,0,128,43,2,7,0,0,160,44,66,4,167,135,160,45,66,4,251,250,160,46,66,0,231,151,21,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,57,0,0,32,86,66,0,234,154,21,0,34,9,160,243,165,241,174,245,227,247,128,242,133,240,142,244,147,246,32,34,0,2,2,7,0,0,160,4,2,7,0,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,3,0,0,253,27,1,3,160,160,41,1,3,160,160,43,2,7,0,0,160,44,2,7,0,0,160,45,2,7,0,0,160,46,2,3,0,0,21,50,2,7,0,0,160,54,5,63,0,0,0,0,0,129,86,2,3,160,160,21,0,213,110,4,9,0,0,82,85,44,185,1,82,85,12,2,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,40,3,171,1,0,0,0,0,40,3,213,0,0,0,0,0,98,3,148,2,0,0,0,0,98,3,191,1,0,0,0,0,104,3,118,3,0,0,0,0,104,3,162,2,0,0,0,0,87,3,92,4,0,0,0,0,87,3,138,3,0,0,0,0,90,3,199,0,0,0,0,0,82,3,0,0,0,0,0,0,181,1,206,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,207,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,26,2,3,0,0,91,27,2,3,0,0,93,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,0,18,66,3,0,0,213,0,5,2,7,0,0,160,0,3,1,1,0,34,4,1,1,0,252,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,3,15,0,0,0,120,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,7,0,0,160,18,66,3,0,0,253,54,3,15,0,0,0,121,0,3,1,1,0,34,4,1,1,0,252,5,2,1,0,59,253,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,3,15,0,0,0,122,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,5,2,3,0,0,253,54,3,15,0,0,0,123,0,3,1,1,0,34,4,1,1,0,239,5,2,5,0,59,160,7,1,1,0,58,8,1,1,0,63,16,65,0,189,190,17,65,0,164,165,18,65,0,231,232,19,65,0,198,199,20,66,0,168,169,207,21,65,0,212,213,22,65,0,172,173,23,65,0,245,246,24,65,0,249,250,25,65,0,243,244,26,65,0,181,182,27,65,0,158,159,30,65,0,170,171,31,65,0,241,242,32,65,0,235,236,33,65,0,160,161,34,65,0,216,221,35,65,0,225,226,36,65,0,214,215,37,65,0,208,209,38,65,0,166,167,39,65,0,233,234,40,65,0,247,248,41,65,0,132,133,42,3,15,0,0,0,124,43,1,1,0,47,44,193,0,222,44,224,0,45,65,0,251,252,46,65,0,227,228,47,65,0,210,211,48,65,0,183,184,49,65,0,229,230,50,65,0,237,238,51,65,0,162,163,52,65,0,156,157,53,1,0,46,44,0,5,2,7,0,0,160,18,66,3,0,0,207,54,3,15,0,0,0,125,0,3,1,1,0,34,4,1,1,0,239,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,65,0,189,190,17,65,0,164,165,18,65,0,231,232,19,65,0,198,199,20,65,0,168,169,21,65,0,212,213,22,65,0,172,173,23,65,0,245,246,24,65,0,249,250,25,65,0,243,244,26,65,0,181,182,27,65,0,158,159,30,65,0,170,171,31,65,0,241,242,32,65,0,235,236,33,65,0,160,161,34,65,0,216,221,35,65,0,225,226,36,65,0,214,215,37,65,0,208,209,38,65,0,166,167,39,65,0,233,234,40,65,0,247,248,41,65,0,132,133,42,3,15,0,0,0,126,43,1,1,0,47,44,193,0,222,44,224,0,45,65,0,251,252,46,65,0,227,228,47,65,0,210,211,48,65,0,183,184,49,65,0,229,230,50,65,0,237,238,51,65,0,162,163,52,65,0,156,157,53,1,0,46,44,0,54,3,15,0,0,0,127,0,50,235,4,4,187,1,82,85,12,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,40,3,209,1,0,0,0,0,40,3,216,0,0,0,0,0,98,3,216,2,0,0,0,0,98,3,224,1,0,0,0,0,104,3,216,3,0,0,0,0,104,3,225,2,0,0,0,0,87,3,221,4,0,0,0,0,87,3,231,3,0,0,0,0,90,3,209,0,0,0,0,0,82,3,0,0,0,0,0,0,181,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,36,7,2,3,0,0,94,8,2,3,0,0,38,9,3,3,0,0,42,31,13,3,7,0,0,0,28,26,2,3,0,0,91,27,2,3,0,0,93,51,2,3,0,0,60,52,2,3,0,0,62,0,18,66,3,0,0,213,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,120,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,65,0,165,133,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,122,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,54,4,31,0,0,0,0,123,0,2,1,0,239,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,189,190,17,65,0,164,165,18,65,0,231,232,19,65,0,198,199,20,66,0,168,169,207,21,65,0,212,213,22,65,0,172,173,23,65,0,245,246,24,65,0,249,250,25,65,0,243,244,26,65,0,181,182,27,65,0,158,159,30,65,0,170,171,31,65,0,241,242,32,65,0,235,236,33,65,0,160,161,34,65,0,216,221,35,65,0,225,226,36,65,0,214,215,37,65,0,208,209,38,65,0,166,167,39,65,0,233,234,40,65,0,247,248,41,1,0,124,43,42,4,31,0,0,0,0,124,43,1,0,41,40,44,193,0,222,44,224,0,45,65,0,251,252,46,65,0,227,228,47,65,0,210,211,48,65,0,183,184,49,65,0,229,230,50,65,0,237,238,51,65,0,162,163,52,65,0,156,157,53,65,0,132,133,0,18,66,3,0,0,207,54,4,31,0,0,0,0,125,0,2,1,0,239,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,189,190,17,65,0,164,165,18,65,0,231,232,19,65,0,198,199,20,65,0,168,169,21,65,0,212,213,22,65,0,172,173,23,65,0,245,246,24,65,0,249,250,25,65,0,243,244,26,65,0,181,182,27,65,0,158,159,30,65,0,170,171,31,65,0,241,242,32,65,0,235,236,33,65,0,160,161,34,65,0,216,221,35,65,0,225,226,36,65,0,214,215,37,65,0,208,209,38,65,0,166,167,39,65,0,233,234,40,65,0,247,248,41,1,0,124,43,42,4,31,0,0,0,0,126,43,1,0,41,40,44,193,0,222,44,224,0,45,65,0,251,252,46,65,0,227,228,47,65,0,210,211,48,65,0,183,184,49,65,0,229,230,50,65,0,237,238,51,65,0,162,163,52,65,0,156,157,53,65,0,132,133,0,54,4,31,0,0,0,0,127,0,187,254,7,9,0,0,82,88,44,185,1,82,88,15,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,59,117,216,1,0,0,0,0,59,117,234,0,0,0,0,0,60,117,219,2,0,0,0,0,60,117,231,1,0,0,0,0,61,117,218,3,0,0,0,0,61,117,234,2,0,0,0,0,62,117,209,4,0,0,0,0,62,117,233,3,0,0,0,0,63,117,202,5,0,0,0,0,63,117,224,4,0,0,0,0,64,117,199,6,0,0,0,0,64,117,217,5,0,0,0,0,65,117,180,7,0,0,0,0,65,117,214,6,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,36,12,3,3,0,0,91,123,26,3,3,0,0,91,123,27,3,3,0,0,93,125,43,2,3,0,0,124,51,2,3,0,0,60,52,2,3,0,0,62,0,3,1,1,0,34,4,1,1,0,252,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,13,2,2,254,0,61,16,65,0,169,137,17,67,0,230,150,247,246,18,67,0,227,147,184,181,19,67,0,170,138,209,207,20,66,0,165,133,253,21,67,0,173,141,251,250,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,67,0,229,149,198,190,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,213,212,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,249,248,40,67,0,237,157,243,242,41,193,0,241,41,240,0,42,4,31,0,0,0,0,120,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,3,1,1,0,34,4,1,1,0,252,5,2,1,0,59,253,7,1,1,0,58,8,1,1,0,63,16,67,0,169,137,210,209,17,67,0,230,150,182,181,18,67,0,227,147,247,246,19,67,0,170,138,214,213,20,67,0,165,133,251,250,21,67,0,173,141,212,211,22,67,0,163,131,216,215,23,67,0,232,152,184,183,24,65,0,233,153,25,65,0,167,135,26,67,0,229,149,190,189,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,195,0,224,0,144,35,249,35,248,35,36,67,0,174,142,243,242,37,67,0,171,139,245,244,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,122,43,1,1,0,47,44,65,0,239,159,45,67,0,231,151,199,198,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,208,207,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,123,0,3,1,1,0,34,4,1,1,0,252,5,2,1,0,59,253,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,67,0,230,150,212,211,18,67,0,227,147,184,181,19,67,0,170,138,199,189,20,67,0,165,133,247,246,21,67,0,173,141,251,250,22,67,0,163,131,183,182,23,65,0,232,152,24,65,0,233,153,25,67,0,167,135,214,213,26,67,0,229,149,198,190,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,210,209,40,67,0,237,157,208,207,41,193,0,241,41,240,0,42,4,31,0,0,0,0,124,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,67,0,225,145,216,215,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,125,0,3,1,1,0,34,4,1,1,0,252,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,67,0,227,147,247,246,19,65,0,170,138,20,66,0,165,133,253,21,67,0,173,141,213,212,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,67,0,167,135,198,190,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,67,0,235,155,251,250,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,184,181,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,126,43,1,1,0,47,44,65,0,239,159,45,67,0,231,151,209,207,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,249,248,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,127,0,3,1,1,0,34,4,1,1,0,252,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,67,0,169,137,222,221,17,65,0,230,150,18,67,0,227,147,247,246,19,67,0,170,138,213,212,20,66,0,165,133,253,21,67,0,173,141,209,207,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,251,250,40,67,0,237,157,198,190,41,193,0,241,41,240,0,42,4,31,0,0,0,0,128,43,1,1,0,47,44,67,0,239,159,184,181,45,67,0,231,151,249,248,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,129,0,3,1,1,0,34,4,1,1,0,252,5,2,1,0,59,253,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,67,0,227,147,247,246,19,65,0,170,138,20,67,0,165,133,221,220,21,67,0,173,141,223,222,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40963);
  /* memory initializer */ allocate([65,0,234,154,30,65,0,228,148,31,67,0,235,155,251,250,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,237,157,198,190,41,195,0,241,41,240,0,184,41,181,41,42,4,31,0,0,0,0,130,43,1,1,0,47,44,67,0,239,159,213,212,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,249,248,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,67,0,238,158,209,207,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,131,0,3,1,1,0,34,4,1,1,0,252,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,67,0,173,141,184,181,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,237,157,198,190,41,193,0,241,41,240,0,42,4,31,0,0,0,0,132,43,1,1,0,47,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,209,207,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,22,67,3,0,0,247,246,24,67,3,0,0,245,244,30,67,3,0,0,243,242,31,67,3,0,0,251,250,44,67,3,0,0,213,212,45,67,3,0,0,222,221,46,67,3,0,0,249,248,54,4,31,0,0,0,0,133,0,146,224,8,4,187,1,82,88,15,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,0,0,0,0,59,117,237,1,0,0,0,0,59,117,225,0,0,0,0,0,60,117,19,3,0,0,0,0,60,117,252,1,0,0,0,0,61,117,53,4,0,0,0,0,61,117,34,3,0,0,0,0,62,117,79,5,0,0,0,0,62,117,68,4,0,0,0,0,63,117,107,6,0,0,0,0,63,117,94,5,0,0,0,0,64,117,139,7,0,0,0,0,64,117,122,6,0,0,0,0,65,117,155,8,0,0,0,0,65,117,154,7,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,36,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,42,26,2,3,0,0,91,27,2,3,0,0,93,51,2,3,0,0,60,52,2,3,0,0,62,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,67,0,230,150,247,246,18,67,0,227,147,184,181,19,67,0,170,138,209,207,20,66,0,165,133,253,21,67,0,173,141,251,250,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,67,0,229,149,198,190,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,213,212,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,249,248,40,67,0,237,157,243,242,41,2,0,254,43,124,42,4,31,0,0,0,0,120,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,2,0,34,52,253,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,67,0,169,137,210,209,17,67,0,230,150,182,181,18,67,0,227,147,247,246,19,67,0,170,138,214,213,20,67,0,165,133,251,250,21,67,0,173,141,212,211,22,67,0,163,131,216,215,23,67,0,232,152,184,183,24,65,0,233,153,25,65,0,167,135,26,67,0,229,149,190,189,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,195,0,224,0,144,35,249,35,248,35,36,67,0,174,142,243,242,37,67,0,171,139,245,244,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,122,43,1,0,41,40,44,65,0,239,159,45,67,0,231,151,199,198,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,208,207,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,123,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,2,0,34,52,253,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,67,0,230,150,212,211,18,67,0,227,147,184,181,19,67,0,170,138,199,189,20,67,0,165,133,247,246,21,67,0,173,141,251,250,22,67,0,163,131,183,182,23,65,0,232,152,24,65,0,233,153,25,67,0,167,135,214,213,26,67,0,229,149,198,190,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,210,209,40,67,0,237,157,208,207,41,1,0,124,43,42,4,31,0,0,0,0,124,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,67,0,225,145,216,215,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,125,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,67,0,227,147,247,246,19,65,0,170,138,20,66,0,165,133,253,21,67,0,173,141,213,212,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,67,0,167,135,198,190,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,67,0,235,155,251,250,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,184,181,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,126,43,1,0,41,40,44,65,0,239,159,45,67,0,231,151,209,207,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,249,248,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,127,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,67,0,169,137,222,221,17,65,0,230,150,18,67,0,227,147,247,246,19,67,0,170,138,213,212,20,66,0,165,133,253,21,67,0,173,141,209,207,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,67,0,166,134,251,250,40,67,0,237,157,198,190,41,1,0,124,43,42,4,31,0,0,0,0,128,43,1,0,41,40,44,67,0,239,159,184,181,45,67,0,231,151,249,248,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,129,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,2,0,34,52,253,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,67,0,227,147,247,246,19,65,0,170,138,20,67,0,165,133,221,220,21,67,0,173,141,223,222,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,67,0,235,155,251,250,32,65,0,162,130,33,67,0,160,128,243,242,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,237,157,198,190,41,1,0,124,43,42,4,31,0,0,0,0,130,43,1,0,41,40,44,67,0,239,159,213,212,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,249,248,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,67,0,238,158,209,207,53,195,0,241,53,240,0,184,53,181,53,0,18,66,3,0,0,253,54,4,31,0,0,0,0,131,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,67,0,173,141,184,181,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,67,0,174,142,245,244,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,67,0,237,157,198,190,41,1,0,124,43,42,4,31,0,0,0,0,132,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,67,0,168,136,209,207,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,18,66,3,0,0,253,22,67,3,0,0,247,246,24,67,3,0,0,245,244,30,67,3,0,0,243,242,31,67,3,0,0,251,250,44,67,3,0,0,213,212,45,67,3,0,0,222,221,46,67,3,0,0,249,248,54,4,31,0,0,0,0,133,0,77,78,3,9,0,0,84,82,44,179,0,84,82,5,4,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,89,3,187,1,221,1,0,0,85,3,96,2,183,2,0,0,90,3,0,0,68,1,0,0,82,3,61,1,68,1,0,0,0,8,0,64,0,0,0,0,4,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,62,3,2,1,0,39,156,4,3,3,0,200,35,30,5,2,1,0,43,36,6,2,3,0,0,171,7,1,1,0,38,8,2,1,0,47,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,3,0,42,63,92,28,13,3,0,45,95,124,31,16,66,3,0,0,64,18,66,0,101,69,213,19,66,3,0,0,244,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,25,66,3,0,0,156,26,2,7,160,160,201,27,66,4,129,154,202,30,68,8,97,65,145,0,146,31,66,3,0,0,225,39,2,7,160,160,203,40,197,0,105,23,73,23,0,23,9,23,0,23,0,23,41,2,0,34,130,60,43,2,4,44,59,204,44,66,3,0,0,174,45,66,3,0,0,175,49,65,0,110,78,51,66,0,148,153,60,52,66,0,135,128,62,53,2,0,46,58,124,57,0,0,32,86,2,0,60,62,124,0,18,66,7,0,0,160,0,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,0,23,68,10,141,0,105,0,152,26,65,0,167,166,39,65,0,159,158,40,197,0,105,23,152,23,0,23,9,23,0,23,0,23,0,94,13,97,131,101,136,141,140,105,140,111,147,117,150,65,182,69,210,73,215,152,215,79,226,85,234,32,94,249,14,97,132,101,137,141,139,105,139,111,148,117,129,121,237,65,142,69,211,73,216,152,216,79,153,85,154,32,249,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,239,13,97,160,101,130,141,161,105,161,111,162,117,163,65,181,69,144,73,214,152,214,79,224,85,233,32,239,96,13,97,133,101,138,141,236,105,236,111,149,117,151,65,183,69,212,73,222,152,222,79,227,85,235,32,96,0,18,66,7,0,0,160,19,66,3,0,0,20,22,68,11,0,0,237,0,236,23,68,10,213,0,105,0,152,26,65,0,167,166,30,68,31,0,0,160,0,160,31,65,0,115,83,34,65,0,103,71,35,65,0,104,72,36,65,0,106,74,39,65,0,173,184,40,197,0,105,23,152,23,0,23,9,23,0,23,0,23,46,65,0,99,67,0,94,23,97,131,99,134,101,136,103,155,104,169,213,140,105,140,106,159,111,147,115,199,117,150,65,182,67,143,69,210,71,157,72,168,73,215,152,215,74,172,79,226,83,198,85,234,32,94,249,13,97,132,101,137,213,139,105,139,111,148,117,129,65,142,69,211,73,216,152,216,79,153,85,154,32,249,126,3,110,164,78,165,32,126,239,13,97,160,101,130,213,161,105,161,111,162,117,163,65,181,69,144,73,214,152,214,79,224,85,233,32,239,96,13,97,133,101,138,213,141,105,141,111,149,117,151,65,183,69,212,73,222,152,222,79,227,85,235,32,96,0,80,11,5,4,184,1,84,82,5,4,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,89,3,236,2,66,3,0,0,85,3,197,3,121,4,0,0,82,3,101,2,117,2,0,0,90,3,0,0,117,2,0,0,0,8,0,64,0,0,0,0,4,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,11,0,0,251,0,173,3,2,1,0,34,253,4,4,3,0,200,35,30,252,5,4,11,0,0,172,0,207,6,2,3,0,0,171,7,2,1,0,38,243,8,2,1,0,39,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,4,0,47,63,92,28,168,13,3,0,45,95,124,31,16,197,0,102,33,70,33,64,33,6,33,0,33,0,33,17,197,0,103,34,71,34,0,34,7,34,0,34,0,34,18,16,0,0,19,197,0,105,23,73,23,244,23,9,23,169,23,0,23,20,197,0,111,24,79,24,0,24,15,24,0,24,0,24,21,197,0,100,32,68,32,190,32,4,32,0,32,0,32,22,197,0,114,19,82,19,0,19,18,19,0,19,0,19,23,197,0,110,49,78,49,0,49,14,49,0,49,0,49,24,197,0,104,35,72,35,155,35,8,35,157,35,0,35,25,66,3,0,0,156,26,197,4,113,16,81,16,201,16,17,16,0,16,0,16,27,197,4,119,17,87,17,202,17,23,17,0,17,0,17,30,197,0,117,22,85,22,145,22,21,22,146,22,0,22,31,197,0,105,23,73,23,225,23,9,23,245,23,0,23,32,197,0,101,18,69,18,213,18,5,18,0,18,0,18,33,197,0,97,30,65,30,0,30,1,30,166,30,0,30,34,65,0,129,154,35,197,0,116,20,84,20,0,20,20,20,0,20,0,20,36,197,0,107,37,75,37,0,37,11,37,0,37,0,37,37,197,0,109,50,77,50,0,50,13,50,0,50,0,50,39,197,4,121,21,89,21,203,21,25,21,0,21,0,21,40,16,0,0,41,2,0,43,42,170,43,197,4,120,45,88,45,204,45,24,45,0,45,0,45,44,197,0,106,36,74,36,174,36,10,36,60,36,0,36,45,68,8,148,153,175,0,62,46,197,0,118,47,86,47,189,47,22,47,184,47,0,47,47,197,0,99,46,67,46,60,46,3,46,0,46,0,46,48,66,0,135,128,62,49,197,0,122,44,90,44,124,44,26,44,0,44,0,44,50,197,0,115,31,83,31,230,31,19,31,167,31,0,31,51,197,0,98,48,66,48,158,48,2,48,0,48,0,48,52,2,1,0,58,246,53,2,0,44,59,45,57,0,0,32,86,3,0,60,62,124,28,0,32,197,4,101,18,69,18,160,18,5,18,0,18,0,18,0,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,0,18,65,0,167,166,19,197,0,141,23,73,23,244,23,9,23,169,23,0,23,31,197,0,105,23,152,23,225,23,9,23,245,23,0,23,33,197,16,97,30,65,30,0,30,1,30,160,30,0,30,40,65,0,159,158,50,197,16,115,31,83,31,230,31,19,31,160,31,0,31,51,197,0,98,48,66,48,232,48,2,48,0,48,0,48,0,94,13,97,131,101,136,141,140,105,140,111,147,117,150,65,182,69,210,73,215,152,215,79,226,85,234,32,94,249,14,97,132,101,137,141,139,105,139,111,148,117,129,121,237,65,142,69,211,73,216,152,216,79,153,85,154,32,249,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,239,13,97,160,101,130,141,161,105,161,111,162,117,163,65,181,69,144,73,214,152,214,79,224,85,233,32,239,96,13,97,133,101,138,141,236,105,236,111,149,117,151,65,183,69,212,73,222,152,222,79,227,85,235,32,96,0,2,4,31,0,0,160,0,160,5,2,7,0,0,160,7,2,7,0,0,160,12,4,31,0,0,0,0,160,18,65,0,167,166,19,197,20,213,23,73,23,160,23,9,23,160,23,0,23,21,197,4,100,32,68,32,160,32,4,32,0,32,0,32,24,197,20,104,35,72,35,160,35,8,35,160,35,0,35,30,197,0,117,22,85,22,237,22,21,22,236,22,0,22,31,197,0,105,23,152,23,225,23,9,23,245,23,0,23,32,197,4,101,18,69,18,160,18,5,18,0,18,0,18,33,197,16,97,30,65,30,0,30,1,30,160,30,0,30,40,65,0,173,184,41,2,7,0,0,160,46,197,20,118,47,86,47,160,47,22,47,160,47,0,47,50,197,16,115,31,83,31,230,31,19,31,160,31,0,31,0,94,23,97,131,99,134,101,136,103,155,104,169,213,140,105,140,106,159,111,147,115,199,117,150,65,182,67,143,69,210,71,157,72,168,73,215,152,215,74,172,79,226,83,198,85,234,32,94,249,13,97,132,101,137,213,139,105,139,111,148,117,129,65,142,69,211,73,216,152,216,79,153,85,154,32,249,126,3,110,164,78,165,32,126,239,13,97,160,101,130,213,161,105,161,111,162,117,163,65,181,69,144,73,214,152,214,79,224,85,233,32,239,96,13,97,133,101,138,213,141,105,141,111,149,117,151,65,183,69,212,73,222,152,222,79,227,85,235,32,96,0,47,196,2,4,0,0,84,84,5,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,61,117,107,1,0,0,0,0,61,117,139,0,0,0,0,0,66,117,76,2,162,2,0,0,66,117,122,1,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,5,2,3,0,0,36,7,2,3,0,0,94,8,2,3,0,0,91,9,2,3,0,0,93,10,2,3,0,0,123,11,2,3,0,0,125,51,2,3,0,0,60,52,2,3,0,0,62,0,3,1,1,0,34,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,67,0,245,244,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,67,0,208,207,233,153,25,65,0,167,135,26,65,0,229,149,27,67,0,184,181,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,67,0,251,250,166,134,40,65,0,237,157,41,195,0,198,41,190,41,241,41,240,0,42,4,31,0,0,0,0,120,43,2,1,0,47,124,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,67,0,210,209,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,18,66,3,0,0,253,54,4,31,0,0,0,0,121,0,3,1,1,0,34,5,1,1,0,59,7,1,1,0,58,8,1,1,0,63,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,193,0,241,41,240,0,42,4,31,0,0,0,0,122,43,2,1,0,47,124,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,1,0,46,44,0,7,3,3,0,0,199,198,18,66,0,101,69,253,22,67,0,117,85,247,246,23,67,0,105,189,190,73,24,67,0,111,79,245,244,30,67,0,97,65,243,242,31,67,3,0,0,251,250,34,67,3,0,0,182,181,40,0,1,200,46,67,3,0,0,249,248,49,67,3,0,0,184,183,54,4,31,0,0,0,0,123,57,0,0,32,0,39,13,97,208,101,210,190,212,105,212,111,214,117,216,65,207,69,209,73,211,189,211,79,213,85,215,32,39,0,23,24,3,4,187,1,84,84,5,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,66,117,138,1,224,1,0,0,66,117,145,0,0,0,0,0,61,117,4,3,0,0,0,0,61,117,253,1,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,3,0,0,64,4,2,3,0,0,35,5,2,3,0,0,36,7,2,3,0,0,94,8,2,3,0,0,38,9,2,3,0,0,42,26,2,3,0,0,91,27,2,3,0,0,93,51,2,3,0,0,60,52,2,3,0,0,62,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,65,0,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,65,0,233,153,25,65,0,167,135,26,65,0,229,149,27,65,0,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,65,0,166,134,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,120,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,65,0,236,156,51,65,0,161,129,52,65,0,238,158,53,193,0,241,53,240,0,0,7,3,3,0,0,199,198,18,66,0,101,69,253,22,67,0,117,85,247,246,23,67,0,105,189,190,73,24,67,0,111,79,245,244,30,67,0,97,65,243,242,31,67,3,0,0,251,250,34,67,3,0,0,182,181,40,0,1,200,46,67,3,0,0,249,248,49,67,3,0,0,184,183,54,4,31,0,0,0,0,121,57,0,0,32,0,39,13,97,208,101,210,190,212,105,212,111,214,117,216,65,207,69,209,73,211,189,211,79,213,85,215,32,39,0,2,1,0,252,49,3,1,0,45,50,4,1,0,47,51,5,1,0,34,52,6,1,0,58,53,7,1,0,44,54,8,1,0,46,55,9,1,0,95,56,10,1,0,63,57,11,1,0,37,48,12,1,0,33,61,13,1,0,59,92,16,65,0,169,137,17,67,0,245,244,230,150,18,65,0,227,147,19,65,0,170,138,20,66,0,165,133,253,21,65,0,173,141,22,65,0,163,131,23,65,0,232,152,24,67,0,208,207,233,153,25,65,0,167,135,26,65,0,229,149,27,67,0,184,181,234,154,30,65,0,228,148,31,65,0,235,155,32,65,0,162,130,33,65,0,160,128,34,65,0,175,143,35,193,0,224,0,144,35,36,65,0,174,142,37,65,0,171,139,38,65,0,164,132,39,67,0,251,250,166,134,40,65,0,237,157,41,1,0,124,43,42,4,31,0,0,0,0,122,43,1,0,41,40,44,65,0,239,159,45,65,0,231,151,46,65,0,225,145,47,65,0,172,140,48,65,0,168,136,49,65,0,226,146,50,67,0,210,209,236,156,51,65,0,161,129,52,65,0,238,158,53,195,0,198,53,190,53,241,53,240,0,0,18,66,3,0,0,253,54,4,31,0,0,0,0,123,0,175,114,4,19,0,0,89,67,44,0,0,83,82,44,118,0,89,67,44,118,0,83,82,11,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,104,3,218,1,0,0,0,0,104,3,27,1,176,2,0,0,87,3,167,2,0,0,0,0,87,3,239,1,176,2,0,0,80,3,121,3,0,0,0,0,80,3,189,2,0,0,0,0,101,4,79,4,0,0,0,0,101,4,142,3,0,0,0,0,90,3,20,1,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,5,2,3,0,0,207,7,2,1,0,38,94,8,2,1,0,47,38,9,2,1,0,40,36,10,2,1,0,41,60,11,2,1,0,61,62,12,1,0,39,63,13,1,0,43,42,21,196,0,122,44,90,44,0,44,26,44,0,44,26,2,3,0,0,91,27,2,0,92,92,93,39,3,4,94,94,0,30,40,3,4,93,125,0,29,41,1,0,73,86,43,2,0,64,64,124,44,196,0,121,21,89,21,0,21,25,21,0,21,51,2,0,44,59,60,52,2,0,46,58,62,53,3,0,45,95,47,31,57,0,0,32,86,1,0,60,62,0,18,66,3,0,0,213,0,5,2,7,0,0,160,12,0,1,200,16,65,0,144,145,17,65,0,146,147,18,66,0,168,169,207,19,65,0,225,226,20,65,0,229,230,21,196,0,243,44,244,44,0,44,26,44,0,44,22,65,0,231,232,23,65,0,183,184,24,65,0,214,215,25,65,0,216,221,26,65,0,245,246,27,65,0,128,129,30,65,0,160,161,31,65,0,227,228,32,65,0,166,167,33,65,0,170,171,34,65,0,172,173,35,65,0,181,182,36,65,0,142,143,37,65,0,198,199,38,65,0,208,209,39,65,0,251,252,40,65,0,148,149,42,4,31,0,0,0,0,120,43,65,0,233,234,44,196,0,136,21,137,21,0,21,25,21,0,21,45,65,0,154,155,46,65,0,164,165,47,65,0,235,236,48,65,0,162,163,49,65,0,212,213,50,65,0,210,211,0,5,2,7,0,0,160,18,66,3,0,0,207,54,4,31,0,0,0,0,121,0,12,0,1,200,16,65,0,144,145,17,65,0,146,147,18,65,0,168,169,19,65,0,225,226,20,65,0,229,230,21,196,0,243,44,244,44,0,44,26,44,0,44,22,65,0,231,232,23,65,0,183,184,24,65,0,214,215,25,65,0,216,221,26,65,0,245,246,27,65,0,128,129,30,65,0,160,161,31,65,0,227,228,32,65,0,166,167,33,65,0,170,171,34,65,0,172,173,35,65,0,181,182,36,65,0,142,143,37,65,0,198,199,38,65,0,208,209,39,65,0,251,252,40,65,0,148,149,42,4,31,0,0,0,0,122,43,65,0,233,234,44,196,0,136,21,137,21,0,21,25,21,0,21,45,65,0,154,155,46,65,0,164,165,47,65,0,235,236,48,65,0,162,163,49,65,0,212,213,50,65,0,210,211,0,54,4,31,0,0,0,0,123,0,39,5,172,130,198,150,173,131,199,151,32,39,0,16,65,0,239,159,17,65,0,249,248,18,66,0,165,133,253,19,193,0,224,0,144,19,20,65,0,226,146,21,196,0,167,44,135,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,65,0,232,152,27,65,0,235,155,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,231,151,40,65,0,238,158,41,65,0,236,156,42,4,31,0,0,0,0,124,43,65,0,166,134,44,196,0,168,21,136,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,5,2,7,0,0,160,18,66,3,0,0,253,54,4,31,0,0,0,0,125,0,5,2,3,0,0,253,16,65,0,239,159,17,65,0,249,248,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,196,0,167,44,135,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,65,0,232,152,27,65,0,235,155,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,231,151,40,65,0,238,158,41,65,0,236,156,42,4,31,0,0,0,0,126,43,65,0,166,134,44,196,0,168,21,136,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,5,2,3,0,0,253,54,4,31,0,0,0,0,127,0,174,106,4,9,194,1,89,67,44,194,1,83,82,11,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0,0,0,0,0,104,3,238,1,0,0,0,0,104,3,52,1,0,0,0,0,87,3,187,2,0,0,0,0,87,3,2,2,0,0,0,0,80,3,133,3,0,0,0,0,80,3,201,2,0,0,0,0,101,4,83,4,0,0,0,0,101,4,152,3,0,0,0,0,90,3,45,1,0,0,0,0,82,3,0,0,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,126,3,1,1,0,34,4,3,1,0,35,94,30,7,1,1,0,38,8,2,1,0,47,96,9,1,1,0,40,10,1,1,0,41,11,1,1,0,61,12,1,0,39,63,13,1,0,43,42,16,66,3,0,0,92,17,66,3,0,0,124,21,196,0,122,44,90,44,0,44,26,44,0,44,33,66,3,0,0,91,34,66,3,0,0,93,39,3,4,94,94,0,30,40,1,0,245,245,41,3,4,92,124,0,28,43,1,0,64,64,44,196,0,121,21,89,21,0,21,25,21,0,21,47,66,3,0,0,64,48,66,3,0,0,123,49,66,3,0,0,125,51,1,0,44,59,52,1,0,46,58,53,3,4,45,95,0,31,86,1,0,60,62,0,18,66,3,0,0,213,0,16,65,0,144,145,17,65,0,146,147,18,66,0,168,169,207,19,65,0,225,226,20,65,0,229,230,21,196,0,243,44,244,44,0,44,26,44,0,44,22,65,0,231,232,23,65,0,183,184,24,65,0,214,215,25,65,0,216,221,26,66,0,245,246,131,27,66,0,128,129,130,30,65,0,160,161,31,65,0,227,228,32,65,0,166,167,33,65,0,170,171,34,65,0,172,173,35,65,0,181,182,36,65,0,142,143,37,65,0,198,199,38,65,0,208,209,39,66,0,251,252,151,40,66,0,148,149,150,42,4,31,0,0,0,0,120,43,65,0,233,234,44,196,0,136,21,137,21,0,21,25,21,0,21,45,65,0,154,155,46,65,0,164,165,47,65,0,235,236,48,65,0,162,163,49,65,0,212,213,50,66,0,210,211,253,0,18,66,3,0,0,207,40,1,0,253,253,54,4,31,0,0,0,0,121,0,16,65,0,144,145,17,65,0,146,147,18,65,0,168,169,19,65,0,225,226,20,65,0,229,230,21,196,0,243,44,244,44,0,44,26,44,0,44,22,65,0,231,232,23,65,0,183,184,24,65,0,214,215,25,65,0,216,221,26,66,0,245,246,131,27,66,0,128,129,130,30,65,0,160,161,31,65,0,227,228,32,65,0,166,167,33,65,0,170,171,34,65,0,172,173,35,65,0,181,182,36,65,0,142,143,37,65,0,198,199,38,65,0,208,209,39,66,0,251,252,151,40,66,0,148,149,150,42,4,31,0,0,0,0,122,43,65,0,233,234,44,196,0,136,21,137,21,0,21,25,21,0,21,45,65,0,154,155,46,65,0,164,165,47,65,0,235,236,48,65,0,162,163,49,65,0,212,213,50,66,0,210,211,253,0,40,1,0,253,253,54,4,31,0,0,0,0,123,0,16,65,0,239,159,17,65,0,249,248,18,66,0,165,133,253,19,193,0,224,0,144,19,20,65,0,226,146,21,196,0,167,44,135,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,65,0,232,152,27,65,0,235,155,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,231,151,40,65,0,238,158,41,65,0,236,156,42,4,31,0,0,0,0,124,43,65,0,166,134,44,196,0,168,21,136,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,18,66,3,0,0,253,40,16,0,0,54,4,31,0,0,0,0,125,0,16,65,0,239,159,17,65,0,249,248,18,65,0,165,133,19,193,0,224,0,144,19,20,65,0,226,146,21,196,0,167,44,135,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,65,0,232,152,27,65,0,235,155,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,231,151,40,65,0,238,158,41,65,0,236,156,42,4,31,0,0,0,0,126,43,65,0,166,134,44,196,0,168,21,136,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,0,40,16,0,0,54,4,31,0,0,0,0,127,0,175,0,0,0,75,67,70,0,1,1,46,72,101,110,114,105,113,117,101,32,80,101,114,111,110,255,68,79,83,32,99,111,100,101,112,97,103,101,115,32,45,32,108,105,98,114,97,114,121,32,35,49,32,111,102,32,51,160,3,14,0,0,66,69,44,120,0,66,69,44,120,0,70,82,6,4,44,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,90,3,15,3,22,3,0,0,91,3,94,1,150,1,0,0,82,3,0,0,22,3,0,0,181,1,19,2,30,2,0,0,55,117,109,2,186,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,66,0,38,49,124,3,66,0,130,50,64,4,66,0,34,51,35,5,65,0,39,52,6,65,0,40,53,7,66,0,245,54,94,8,65,0,138,55,9,65,0,33,56,10,66,0,135,57,123,11,66,0,133,48,125,12,65,0,41,248,13,68,12,45,95,0,0,31,16,197,0,97,30,65,30,0,30,0,30,1,30,0,30,17,197,0,122,44,90,44,0,44,0,44,26,44,0,44,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,66,3,202,204,91,27,66,0,36,42,93,30,197,0,113,16,81,16,0,16,0,16,17,16,0,16,39,197,0,109,50,77,50,0,50,0,50,13,50,0,50,40,67,12,151,37,203,203,41,65,0,253,252,43,67,12,230,156,200,200,44,197,0,119,17,87,17,0,17,0,17,23,17,0,17,46,65,0,99,67,49,65,0,110,78,50,68,8,44,63,92,0,28,51,66,0,59,46,60,52,66,0,58,47,62,53,67,12,61,43,201,201,57,0,0,32,86,68,8,60,62,92,0,28,0,16,197,0,97,30,65,30,145,30,146,30,1,30,0,30,18,66,3,0,0,213,24,67,3,0,0,171,172,31,66,3,0,0,225,44,197,0,119,17,87,17,174,17,0,17,23,17,0,17,45,66,3,0,0,175,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,0,7,65,2,21,0,41,65,3,0,160,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,5,66,3,0,0,213,16,197,0,97,30,65,30,134,30,143,30,1,30,0,30,17,197,0,122,44,90,44,145,44,146,44,26,44,0,44,18,67,3,0,0,228,229,24,67,3,0,0,171,172,43,65,3,0,160,44,197,0,119,17,87,17,174,17,0,17,23,17,0,17,45,66,3,0,0,175,0,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,126,3,110,164,78,165,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,5,99,135,101,130,67,128,69,144,32,39,34,11,97,132,101,137,105,139,117,129,121,152,65,142,69,211,73,216,85,154,89,243,32,34,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,247,231,1,9,0,0,66,82,44,19,1,66,82,4,3,44,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,90,3,93,1,102,1,0,0,82,3,0,0,102,1,0,0,181,1,249,0,18,1,0,0,0,8,0,64,0,0,0,0,4,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,2,2,3,0,0,251,3,2,3,0,0,253,4,2,3,0,0,252,5,2,3,0,0,156,6,2,3,0,0,189,7,2,3,0,204,170,8,2,3,0,0,47,9,2,3,0,0,124,10,2,3,0,0,63,11,2,3,0,0,248,13,2,3,0,0,245,16,66,3,0,0,47,17,66,3,0,0,63,18,66,0,101,69,248,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,1,3,203,200,27,3,0,91,123,166,27,30,65,0,97,65,39,65,0,135,128,40,3,7,201,202,0,30,41,1,0,39,34,43,3,0,93,125,167,29,49,65,0,110,78,53,3,0,59,58,92,28,57,0,0,32,115,2,0,47,63,248,126,1,0,46,46,0,2,2,7,0,0,160,4,2,7,0,0,160,6,2,3,0,0,155,13,2,3,0,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,7,97,160,101,130,105,161,111,162,117,163,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,18,68,15,0,0,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,250,86,1,4,18,1,66,82,4,1,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,90,3,207,0,214,0,0,0,82,3,0,0,214,0,0,0,181,1,121,0,128,0,0,0,0,8,0,0,0,0,0,0,7,1,3,0,202,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,40,2,3,203,204,249,41,1,3,200,201], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51203);
  /* memory initializer */ allocate([46,65,0,99,67,49,65,0,110,78,57,0,0,32,0,40,2,7,0,0,160,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,39,34,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,34,0,198,8,4,19,0,0,67,70,44,0,0,67,65,44,58,0,67,70,44,58,0,67,65,6,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,90,3,42,1,49,1,0,0,82,3,0,0,49,1,0,0,95,3,112,3,167,3,0,0,91,3,160,1,212,1,0,0,70,117,69,2,175,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,3,0,0,241,3,2,1,0,34,64,4,2,1,0,47,156,5,2,3,0,0,189,6,2,3,0,0,207,7,2,1,0,63,170,8,2,3,0,0,221,9,2,3,0,0,253,10,2,3,0,0,252,11,2,3,0,0,172,12,2,3,0,0,171,13,2,3,0,0,243,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,66,0,105,73,251,24,66,0,111,79,245,25,66,3,0,0,244,26,2,3,201,201,91,27,2,3,204,203,93,30,65,0,97,65,39,2,3,0,0,126,40,2,3,200,200,123,41,4,8,35,124,92,0,28,43,2,0,60,62,125,46,65,0,99,67,47,66,3,0,0,174,48,66,3,0,0,175,49,66,3,0,0,248,50,66,3,0,0,230,51,2,1,0,39,238,52,2,1,0,46,45,53,66,4,130,144,202,57,0,0,32,86,2,0,174,175,248,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,8,2,7,0,0,160,11,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,3,0,0,213,30,3,3,0,0,145,146,36,3,3,0,0,164,165,38,3,3,0,0,171,172,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,44,3,99,135,67,128,32,44,0,2,2,7,0,0,160,5,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,11,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,2,3,0,0,213,21,3,3,0,0,231,232,23,2,7,0,0,160,25,3,3,0,0,171,172,30,3,3,0,0,145,146,38,3,3,0,0,208,209,43,1,3,206,207,51,2,7,0,0,160,52,2,7,0,0,205,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,44,13,97,132,101,158,105,166,111,148,117,168,65,142,69,159,73,167,79,153,85,169,99,135,67,128,32,44,45,11,97,198,101,236,105,244,111,228,110,164,65,199,69,237,73,246,79,229,78,165,32,45,60,11,97,250,101,241,105,225,111,252,117,247,65,251,69,242,73,238,79,253,85,239,32,60,62,11,97,134,101,189,105,249,111,155,117,184,65,143,69,190,73,221,79,157,85,173,32,62,0,5,2,3,0,0,155,6,2,3,0,0,152,8,2,3,0,0,160,10,2,3,0,0,166,13,2,3,0,0,173,23,66,7,0,0,160,24,66,3,0,0,143,25,66,3,0,0,134,51,2,3,0,0,167,0,96,7,97,133,101,138,117,151,65,142,69,145,85,157,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,132,69,146,73,168,79,153,85,158,32,94,161,5,101,130,111,162,117,163,69,144,32,161,164,7,101,137,105,139,117,129,69,148,73,149,85,154,32,164,165,3,99,135,67,128,32,165,0,154,68,7,9,189,1,67,70,44,189,1,67,65,10,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,90,3,27,1,252,2,0,0,90,3,42,1,252,2,0,0,82,3,14,2,252,2,0,0,82,3,23,2,252,2,0,0,95,3,131,3,123,4,0,0,95,3,160,3,123,4,0,0,91,3,186,5,177,6,0,0,91,3,208,5,177,6,0,0,70,117,200,4,253,4,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,7,1,1,0,63,8,2,3,0,0,123,9,2,3,0,0,125,10,4,11,0,0,91,0,27,11,4,11,0,0,93,0,29,13,2,3,0,0,170,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,4,15,202,204,200,0,30,27,66,0,135,128,126,30,65,0,97,65,39,2,3,0,0,248,40,65,0,138,212,41,4,8,47,92,124,0,28,43,65,0,133,183,44,66,3,0,0,174,45,66,3,0,0,175,46,65,0,99,67,49,65,0,110,78,51,2,1,0,39,60,52,2,1,0,34,62,53,65,0,130,144,57,0,0,32,86,68,12,151,235,0,0,28,0,18,66,3,0,0,213,42,4,31,0,0,0,0,121,0,2,1,0,251,173,3,1,2,253,160,4,1,0,252,156,5,1,0,172,207,6,1,2,171,160,7,1,2,243,160,8,16,0,0,9,16,0,0,10,1,0,241,241,11,16,0,0,12,1,0,168,168,13,1,3,206,160,16,16,0,0,17,16,0,0,18,16,0,0,19,1,0,244,169,20,16,0,0,21,1,0,190,190,22,16,0,0,23,16,0,0,24,65,0,155,157,25,65,0,231,232,26,1,3,160,205,27,1,1,201,238,30,65,0,145,146,31,1,0,225,245,32,65,0,208,209,33,1,0,166,166,34,16,0,0,35,16,0,0,36,16,0,0,37,16,0,0,38,16,0,0,39,1,3,203,160,40,16,0,0,41,1,0,45,196,43,16,0,0,44,16,0,0,45,16,0,0,46,1,0,189,184,47,16,0,0,48,16,0,0,49,16,0,0,50,1,0,230,167,51,1,0,158,158,52,1,0,250,246,53,1,2,47,160,54,4,31,0,0,0,0,120,86,1,2,221,160,0,42,4,31,0,0,0,0,123,0,2,1,0,251,173,3,1,2,253,160,4,1,0,252,156,5,1,0,172,207,6,1,2,171,160,7,1,2,243,160,8,16,0,0,9,16,0,0,10,1,0,241,241,11,16,0,0,12,1,0,168,168,13,1,3,206,160,16,16,0,0,17,16,0,0,18,16,0,0,19,1,0,244,169,20,16,0,0,21,1,0,190,190,22,16,0,0,23,1,1,160,213,24,65,0,155,157,25,65,0,231,232,26,1,3,160,205,27,1,1,201,238,30,65,0,145,146,31,1,0,225,245,32,65,0,208,209,33,1,0,166,166,34,16,0,0,35,16,0,0,36,16,0,0,37,16,0,0,38,16,0,0,39,1,3,203,160,40,16,0,0,41,1,0,45,196,43,16,0,0,44,16,0,0,45,16,0,0,46,1,0,189,184,47,16,0,0,48,16,0,0,49,16,0,0,50,1,0,230,167,51,1,0,158,158,52,1,0,250,246,53,1,2,47,160,54,4,31,0,0,0,0,122,86,1,2,221,160,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,248,3,97,134,65,143,32,248,247,3,99,135,67,128,32,247,0,26,1,3,0,201,40,65,0,138,145,42,4,31,0,0,0,0,125,43,65,0,133,142,86,65,0,151,157,0,2,16,0,0,3,1,2,253,160,4,1,0,166,156,5,1,0,172,152,6,1,2,171,160,7,1,2,173,160,8,16,0,0,9,16,0,0,10,1,0,241,241,11,16,0,0,12,16,0,0,13,1,3,204,160,16,16,0,0,17,16,0,0,18,16,0,0,19,1,2,134,160,20,16,0,0,21,16,0,0,22,16,0,0,23,16,0,0,24,16,0,0,25,16,0,0,26,1,1,160,248,27,1,0,126,167,30,16,0,0,31,1,0,225,143,32,16,0,0,33,16,0,0,34,16,0,0,35,16,0,0,36,16,0,0,37,16,0,0,38,16,0,0,39,1,3,203,160,40,16,0,0,41,1,0,45,196,43,16,0,0,44,16,0,0,45,16,0,0,46,1,2,155,160,47,16,0,0,48,16,0,0,49,16,0,0,50,1,2,230,160,51,16,0,0,52,1,0,250,246,53,1,2,47,160,54,4,31,0,0,0,0,124,86,1,2,160,160,0,96,7,97,133,101,138,117,151,65,142,69,145,85,157,32,96,164,7,101,137,105,139,117,129,69,148,73,149,85,154,32,164,94,11,97,131,101,136,105,140,111,147,117,150,65,132,69,146,73,168,79,153,85,158,32,94,161,5,101,130,111,162,117,163,69,144,32,161,165,3,99,135,67,128,32,165,0,7,3,3,0,0,231,232,18,2,3,0,0,213,24,3,3,0,0,171,172,27,2,7,0,0,201,30,3,3,0,0,145,146,38,3,3,0,0,208,209,51,2,7,0,203,205,52,2,7,0,206,207,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,11,97,198,101,236,105,244,111,228,110,164,65,199,69,237,73,246,79,229,78,165,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,60,11,97,250,101,241,105,225,111,252,117,247,65,251,69,242,73,238,79,253,85,239,32,60,34,11,97,132,101,158,105,166,111,148,117,168,65,142,69,159,73,167,79,153,85,169,32,34,62,11,97,134,101,189,105,249,111,155,117,184,65,143,69,190,73,221,79,157,85,173,32,62,0,18,66,3,0,0,213,24,67,3,0,0,171,172,42,4,31,0,0,0,0,127,0,2,1,0,251,173,3,1,2,253,160,4,1,0,252,156,5,1,1,160,207,6,16,0,0,7,16,0,0,8,16,0,0,9,16,0,0,10,1,0,241,241,11,16,0,0,12,1,0,168,168,13,1,3,206,160,16,16,0,0,17,16,0,0,18,16,0,0,19,1,0,244,169,20,16,0,0,21,1,0,190,190,22,16,0,0,23,16,0,0,24,65,0,155,157,25,65,0,231,232,26,1,3,160,205,27,1,1,201,238,30,65,0,145,146,31,1,0,225,245,32,65,0,208,209,33,1,0,166,166,34,16,0,0,35,16,0,0,36,16,0,0,37,16,0,0,38,16,0,0,39,1,3,203,160,40,16,0,0,41,1,0,45,196,43,16,0,0,44,16,0,0,45,16,0,0,46,1,0,189,184,47,16,0,0,48,16,0,0,49,16,0,0,50,1,0,230,167,51,1,0,158,158,52,1,0,250,246,53,1,2,47,160,54,4,31,0,0,0,0,126,86,16,0,0,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,248,3,97,134,65,143,32,248,44,3,99,135,67,128,32,44,0,80,170,4,4,245,1,67,70,6,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,90,3,88,1,95,1,0,0,82,3,0,0,95,1,0,0,95,3,216,3,88,4,0,0,91,3,222,1,254,1,0,0,70,117,127,2,23,3,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,3,3,0,0,251,173,3,3,1,0,34,64,253,4,3,3,0,0,252,156,5,3,3,0,0,172,207,6,2,3,0,0,171,7,2,1,0,63,243,8,2,3,0,0,123,9,4,3,0,0,91,241,27,10,4,11,0,0,93,0,29,11,2,3,0,0,125,12,3,3,0,0,124,168,13,2,7,0,0,204,18,65,0,101,69,19,67,3,0,0,244,169,21,66,0,121,89,190,22,65,0,117,85,23,65,0,105,73,24,67,0,111,79,155,157,25,67,3,0,0,231,232,26,4,11,202,202,248,0,30,27,67,12,135,128,201,205,30,67,0,97,65,145,146,31,67,3,0,0,225,245,32,67,3,0,0,208,209,33,66,3,0,0,166,39,3,15,0,0,203,203,40,65,0,138,212,41,2,0,248,248,170,43,67,12,133,183,200,200,44,66,3,0,0,174,45,66,3,0,0,175,46,67,0,99,67,189,184,49,65,0,110,78,50,67,3,0,0,230,167,51,2,1,0,39,60,52,2,1,0,46,62,53,66,0,130,144,47,57,0,0,32,86,68,0,151,235,92,124,28,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,247,3,99,135,67,128,32,247,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,2,7,0,0,160,6,2,7,0,0,160,7,2,5,0,63,160,18,2,3,0,0,213,23,3,3,0,0,171,172,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,44,3,99,135,67,128,32,44,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,0,2,3,15,0,0,160,160,3,3,15,0,0,0,160,4,2,7,0,0,160,5,2,7,0,0,160,6,2,7,0,0,160,7,2,7,0,0,160,9,3,15,0,0,0,160,12,3,15,0,0,0,160,18,2,3,0,0,213,19,3,15,0,0,160,160,20,3,3,0,0,231,232,21,2,7,0,0,160,23,3,3,0,0,171,172,24,3,15,0,0,160,160,25,3,15,0,0,160,160,31,2,7,0,0,160,32,3,15,0,0,160,160,33,2,7,0,0,160,38,3,3,0,0,208,209,46,3,15,0,0,160,160,50,3,15,0,0,0,160,51,2,7,0,0,206,52,2,7,0,0,207,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,11,97,198,101,236,105,244,111,228,110,164,65,199,69,237,73,246,79,229,78,165,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,44,13,97,132,101,158,105,166,111,148,117,168,65,142,69,159,73,167,79,153,85,169,99,135,67,128,32,44,34,9,101,137,105,139,117,129,121,152,69,211,73,216,85,154,89,243,32,34,60,11,97,250,101,241,105,225,111,252,117,247,65,251,69,242,73,238,79,253,85,239,32,60,62,11,97,134,101,189,105,249,111,155,117,184,65,143,69,190,73,221,79,157,85,173,32,62,0,2,3,15,0,0,160,160,4,2,3,0,0,166,5,3,7,0,0,0,152,7,2,3,0,0,173,12,3,15,0,0,0,160,19,67,11,0,0,134,160,21,66,7,0,0,160,24,67,15,0,0,160,160,25,67,15,0,0,160,160,27,67,11,0,0,126,201,30,67,15,0,0,160,160,31,67,7,0,0,0,143,32,67,15,0,0,160,160,33,66,7,0,0,160,40,65,0,138,145,43,65,0,133,142,46,67,11,0,0,155,160,50,67,15,0,0,0,160,57,0,0,32,86,65,0,151,157,0,96,7,97,133,101,138,117,151,65,142,69,145,85,157,32,96,164,7,101,137,105,139,117,129,69,148,73,149,85,154,32,164,94,11,97,131,101,136,105,140,111,147,117,150,65,132,69,146,73,168,79,153,85,158,32,94,161,5,101,130,111,162,117,163,69,144,32,161,165,3,99,135,67,128,32,165,0,140,11,3,4,0,0,67,90,5,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,84,3,102,1,182,1,0,0,90,3,8,1,15,1,0,0,82,3,0,0,15,1,0,0,99,3,75,2,153,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,2,2,0,43,49,33,3,2,1,160,50,64,4,2,1,160,51,35,5,2,1,160,52,36,6,2,1,160,53,37,7,2,1,160,54,94,8,2,0,236,55,38,9,2,0,160,56,42,10,2,0,161,57,40,11,2,0,130,48,41,12,3,0,61,37,45,95,13,3,3,200,160,61,43,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,3,0,163,47,91,123,27,3,0,41,40,93,125,30,65,0,97,65,39,3,1,160,34,59,58,40,3,8,245,33,207,203,41,3,2,59,202,96,126,43,3,1,201,39,92,124,46,65,0,99,67,49,65,0,110,78,51,3,1,0,63,60,158,52,3,1,0,58,62,246,53,3,0,45,95,47,63,57,0,0,32,86,2,0,38,42,225,0,18,66,3,0,0,213,0,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,248,3,97,134,65,143,32,248,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,0,3,0,0,216,4,0,0,231,5,0,0,159,6,0,0,253,7,0,0,167,13,1,3,0,203,18,66,3,0,0,170,19,65,0,114,82,20,65,0,116,84,31,65,0,115,83,32,65,0,100,68,38,65,0,108,76,39,0,0,133,40,3,15,0,0,0,204,44,65,0,122,90,86,3,15,0,0,0,205,0,39,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,248,3,117,133,85,222,32,248,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,241,5,111,139,117,251,79,138,85,235,32,241,0,3,0,0,136,4,0,0,168,5,0,0,135,6,0,0,169,7,0,0,145,8,0,0,152,13,1,3,0,203,19,65,0,114,82,20,65,0,116,84,31,65,0,115,83,32,65,0,100,68,38,65,0,108,76,39,0,0,150,40,3,14,173,0,160,204,44,65,0,122,90,51,3,15,0,0,0,160,0,39,17,97,160,101,130,105,161,108,141,111,162,114,170,117,163,121,152,65,143,69,144,73,139,76,138,79,149,82,171,85,151,89,157,32,39,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,248,3,117,150,85,166,32,248,118,19,99,135,100,131,101,136,108,140,110,164,114,169,115,168,116,159,122,145,67,128,68,133,69,137,76,156,78,165,82,158,83,155,84,134,90,146,32,118,94,3,111,147,79,167,32,94,0,25,250,3,4,243,0,67,90,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,84,3,74,1,204,1,0,0,90,3,141,2,148,2,0,0,82,3,0,0,148,2,0,0,99,3,27,3,136,3,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,4,43,49,200,3,1,1,160,50,4,3,5,160,51,201,30,5,1,1,160,52,6,2,5,160,53,202,7,1,1,160,54,8,2,4,236,55,203,9,2,0,160,56,250,10,2,4,161,57,204,11,1,0,130,48,12,2,4,61,37,205,13,2,7,204,160,206,16,66,3,0,0,92,17,66,3,0,0,124,18,65,0,101,69,21,196,0,122,44,90,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,2,0,163,47,246,27,2,0,41,40,158,30,66,0,97,65,60,33,66,3,0,0,91,34,66,3,0,0,93,39,2,1,160,34,36,40,2,0,245,33,225,41,1,2,59,202,43,2,1,205,39,207,44,196,0,121,21,89,21,62,21,25,21,0,21,45,66,3,0,0,35,46,66,0,99,67,38,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,230,51,1,1,0,63,52,2,1,0,58,42,53,3,4,45,95,0,31,57,0,0,32,86,3,0,38,42,60,28,0,2,2,3,0,0,126,3,2,6,216,0,200,4,0,0,231,5,2,6,159,0,202,6,2,6,253,0,203,7,2,6,167,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,206,200,209,18,66,3,0,0,170,19,65,0,114,82,20,65,0,116,84,31,66,0,115,83,208,32,66,0,100,68,209,37,66,3,0,0,136,38,66,0,108,76,157,39,0,0,133,41,1,3,0,203,43,0,1,208,50,2,7,0,0,160,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,39,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,18,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,2,2,3,0,0,126,3,2,6,136,0,200,4,0,0,168,5,0,0,135,6,0,0,169,7,0,0,145,8,2,2,152,0,96,9,2,7,0,0,160,10,2,7,0,0,203,12,2,7,0,0,204,13,2,7,203,200,160,19,65,0,114,82,20,65,0,116,84,27,2,7,0,0,160,31,65,0,115,83,32,65,0,100,68,38,65,0,108,76,39,0,0,150,40,0,0,173,41,1,3,0,202,43,2,7,204,0,160,0,118,19,99,135,100,131,101,136,108,140,110,164,114,169,115,168,116,159,122,145,67,128,68,133,69,137,76,156,78,165,82,158,83,155,84,134,90,146,32,118,94,3,111,147,79,167,32,94,248,3,117,150,85,166,32,248,39,17,97,160,101,130,105,161,108,141,111,162,114,170,117,163,121,152,65,143,69,144,73,139,76,138,79,149,82,171,85,151,89,157,32,39,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,0,229,119,2,9,0,0,68,75,44,159,0,68,75,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,90,3,253,0,10,1,0,0,82,3,0,0,10,1,0,0,97,3,133,1,144,1,0,0,52,117,223,1,24,2,0,0,0,8,0,64,0,0,0,0,4,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,5,2,1,0,207,36,7,1,1,0,38,8,2,1,0,47,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,1,0,43,63,13,2,3,203,200,124,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,134,143,27,3,7,204,202,201,30,30,65,0,97,65,39,65,0,145,146,40,65,0,155,157,41,1,0,171,245,43,1,0,39,42,46,65,0,99,67,49,65,0,110,78,50,66,3,0,0,230,51,2,1,0,59,60,52,2,1,0,58,62,53,3,0,45,95,92,31,57,0,0,32,86,3,0,60,62,92,28,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,1,1,0,175,41,1,1,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,6,2,3,0,0,213,13,1,3,202,160,18,2,3,0,0,213,27,3,7,203,201,200,30,31,2,3,0,0,225,32,4,11,0,0,208,0,209,37,2,3,0,0,242,44,2,3,0,0,174,45,2,3,0,0,175,0,126,7,97,198,105,141,117,151,65,199,73,222,85,235,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,7,97,132,111,148,117,129,65,142,79,153,85,154,32,249,0,141,32,2,23,0,0,68,86,44,0,0,85,83,68,86,44,103,0,68,86,44,103,0,85,83,68,86,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,90,3,250,1,0,0,0,0,82,3,0,0,0,0,0,0,181,1,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,12,132,0,91,26,123,26,27,26,0,26,0,26,13,132,0,93,27,125,27,29,27,0,27,0,27,16,132,0,39,40,34,40,0,40,0,40,0,40,17,132,0,44,51,60,51,0,51,0,51,0,51,18,132,0,46,52,62,52,0,52,0,52,0,52,19,196,0,112,25,80,25,16,25,0,25,0,25,20,196,0,121,21,89,21,25,21,0,21,0,21,21,196,0,102,33,70,33,6,33,0,33,0,33,22,196,0,103,34,71,34,7,34,0,34,0,34,23,196,0,99,46,67,46,3,46,0,46,0,46,24,196,0,114,19,82,19,18,19,0,19,0,19,25,196,0,108,38,76,38,12,38,0,38,0,38,26,132,0,47,53,63,53,0,53,0,53,0,53,27,132,0,61,13,43,13,0,13,0,131,0,131,31,196,0,111,24,79,24,15,24,0,24,0,24,32,196,0,101,18,69,18,5,18,0,18,0,18,33,196,0,117,22,85,22,21,22,0,22,0,22,34,196,0,105,23,73,23,9,23,0,23,0,23,35,196,0,100,32,68,32,4,32,0,32,0,32,36,196,0,104,35,72,35,8,35,0,35,0,35,37,196,0,116,20,84,20,20,20,0,20,0,20,38,196,0,110,49,78,49,14,49,0,49,0,49,39,196,0,115,31,83,31,19,31,0,31,0,31,40,132,0,45,12,95,12,31,12,0,130,0,130,44,132,0,59,39,58,39,0,39,0,39,0,39,45,196,0,113,16,81,16,17,16,0,16,0,16,46,196,0,106,36,74,36,10,36,0,36,0,36,47,196,0,107,37,75,37,11,37,0,37,0,37,48,196,0,120,45,88,45,24,45,0,45,0,45,49,196,0,98,48,66,48,2,48,0,48,0,48,51,196,0,119,17,87,17,23,17,0,17,0,17,52,196,0,118,47,86,47,22,47,0,47,0,47,53,196,0,122,44,90,44,26,44,0,44,0,44,0,32,196,0,101,18,69,18,5,18,213,18,0,18,0,157,219,2,9,0,0,70,82,44,189,0,70,82,6,4,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,90,3,160,1,167,1,0,0,91,3,2,2,63,2,0,0,82,3,0,0,167,1,0,0,181,1,84,1,101,1,0,0,69,117,156,2,184,2,0,0,0,8,0,64,0,0,0,0,4,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,65,0,38,49,3,66,4,130,50,201,4,66,0,34,51,35,5,66,0,39,52,123,6,67,0,40,53,91,27,7,67,0,45,54,124,31,8,66,4,138,55,200,9,67,0,95,56,92,28,10,66,0,135,57,94,11,66,0,133,48,64,12,67,0,41,248,93,29,13,66,3,0,0,125,16,197,0,97,30,65,30,0,30,1,30,0,30,0,30,17,197,0,122,44,90,44,0,44,26,44,0,44,0,44,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,67,7,202,203,0,30,27,66,0,36,156,207,30,197,0,113,16,81,16,0,16,17,16,0,16,0,16,39,197,0,109,50,77,50,0,50,13,50,0,50,0,50,40,65,0,151,37,41,65,0,253,252,43,65,0,42,230,44,197,0,119,17,87,17,0,17,23,17,0,17,0,17,49,65,0,110,78,50,65,0,44,63,51,66,0,59,46,60,52,66,0,58,47,62,53,65,0,33,245,57,0,0,32,86,65,0,60,62,0,27,66,7,0,0,160,41,65,3,0,160,53,65,1,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,16,197,0,97,30,65,30,145,30,1,30,146,30,0,30,18,68,11,0,0,213,0,144,24,68,11,0,0,171,0,172,44,197,0,119,17,87,17,174,17,23,17,0,17,0,17,45,66,3,0,0,175,46,68,11,0,0,135,0,128,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,0,3,66,7,0,0,160,8,66,7,0,0,160,18,66,3,0,0,213,26,65,3,200,160,41,16,0,0,0,94,11,97,238,101,208,105,246,111,250,117,252,65,239,69,209,73,247,79,251,85,253,32,94,0,255,60,5,19,0,0,71,82,44,0,0,68,69,44,129,0,71,82,44,129,0,68,69,9,4,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0,0,0,0,90,3,79,1,86,1,0,0,82,3,0,0,86,1,0,0,91,3,167,1,235,1,0,0,181,1,64,2,71,2,0,0,84,3,120,2,252,2,0,0,85,3,93,3,122,3,0,0,57,117,151,3,3,4,0,0,68,117,88,4,147,4,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,124,3,2,1,0,34,253,4,2,1,0,245,252,7,1,1,0,38,8,2,1,0,47,123,9,4,9,0,40,91,0,27,10,4,9,0,41,93,0,29,11,2,1,0,61,125,12,4,8,225,63,92,0,28,13,1,3,202,200,16,66,3,0,0,64,18,65,0,101,69,21,197,0,122,44,90,44,0,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,129,154,27,2,0,43,42,126,30,65,0,97,65,39,65,0,148,153,40,65,0,132,142,41,4,13,201,248,0,0,30,43,1,0,35,39,44,197,0,121,21,89,21,60,21,0,21,25,21,0,21,45,66,3,0,0,62,46,65,0,99,67,49,66,3,0,0,35,50,66,3,0,0,230,51,1,1,0,59,52,1,1,0,58,53,4,12,45,95,0,0,31,57,0,0,32,86,2,0,60,62,124,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,0,3,1,3,0,203,9,3,7,0,0,0,174,10,3,7,0,0,0,175,18,2,3,0,0,213,24,3,3,0,0,171,172,30,3,3,0,0,134,143,39,3,3,0,0,155,157,40,3,3,0,0,145,146,46,3,3,0,0,135,128,49,3,3,0,0,164,165,0,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,7,97,160,101,130,111,162,65,181,69,144,79,224,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,0,4,2,5,0,21,160,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,0,3,2,7,0,0,160,4,2,7,0,0,160,5,2,3,0,0,170,9,3,7,0,0,0,174,10,3,7,0,0,0,175,13,1,3,200,160,18,3,3,0,0,169,168,19,65,0,114,82,20,65,0,116,84,21,197,0,122,44,90,44,190,44,189,44,26,44,0,44,22,3,3,0,0,251,235,23,3,3,0,0,133,222,24,3,3,0,0,139,138,30,3,3,0,0,165,164,31,65,0,115,83,32,67,0,100,68,208,209,38,67,0,108,76,136,157,41,0,1,201,49,65,0,110,78,50,2,7,0,0,160,0,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,94,21,99,159,100,212,101,216,108,150,110,229,111,147,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,79,226,82,252,83,230,84,155,90,166,32,94,0,13,16,0,0,31,65,0,115,83,34,65,0,103,71,35,65,0,104,72,36,65,0,106,74,41,0,1,200,0,94,13,99,134,103,155,104,169,106,159,115,199,117,237,67,143,71,157,72,168,74,172,83,198,85,236,32,94,0,3,2,7,0,0,160,4,2,7,0,0,160,12,0,1,160,13,0,1,200,18,2,3,0,0,213,19,65,0,114,82,20,65,0,116,84,23,3,3,0,0,139,216,25,65,0,112,80,30,3,3,0,0,198,199,31,65,0,115,83,32,65,0,100,68,34,65,0,103,71,35,65,0,104,72,37,65,0,107,75,38,65,0,108,76,40,3,3,0,0,145,146,41,0,1,201,49,65,0,110,78,50,2,7,0,0,160,0,239,11,99,134,103,208,114,232,115,250,122,170,67,143,71,209,82,246,83,251,90,171,32,239,94,29,99,172,100,138,101,136,103,221,104,189,105,140,107,133,108,242,110,228,112,157,114,253,115,231,116,156,122,168,67,173,68,212,69,210,71,222,72,190,73,215,75,183,76,241,78,229,80,225,82,252,83,230,84,155,90,169,32,94,0,2,2,7,0,0,204,3,1,3,0,203,18,66,3,0,0,213,23,67,3,0,0,158,159,24,67,3,0,0,171,172,27,2,7,0,0,205,30,67,3,0,0,134,143,39,67,3,0,0,155,157,40,67,3,0,0,145,146,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,13,97,131,101,136,105,140,111,147,117,150,121,189,65,182,69,210,73,215,79,226,85,234,89,190,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,124,11,97,135,101,208,105,231,111,249,117,247,65,128,69,209,73,232,79,221,85,239,32,124,126,7,101,198,111,164,148,228,69,199,79,165,153,229,32,126,0,200,198,8,9,197,1,71,82,44,197,1,68,69,12,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,0,0,0,0,90,3,93,1,117,3,0,0,90,3,108,1,117,3,0,0,82,3,108,2,117,3,0,0,82,3,117,2,117,3,0,0,181,1,252,3,5,5,0,0,181,1,10,4,5,5,0,0,84,3,1,6,123,6,0,0,85,3,220,6,3,7,0,0,91,3,96,5,156,5,0,0,57,117,32,7,145,7,0,0,68,117,230,7,39,8,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,3,0,0,124,3,2,1,0,34,253,4,2,1,0,245,252,7,1,1,0,38,8,2,1,0,47,123,9,4,9,0,40,91,0,27,10,4,9,0,41,93,0,29,11,2,1,0,61,125,12,4,8,225,63,92,0,28,13,2,7,203,200,206,16,66,3,0,0,64,18,65,0,101,69,21,197,0,122,44,90,44,0,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,129,154,27,2,4,43,42,201,30,65,0,97,65,39,65,0,148,153,40,65,0,132,142,41,4,12,39,248,202,0,30,44,197,0,121,21,89,21,60,21,0,21,25,21,0,21,45,66,3,0,0,62,46,65,0,99,67,49,66,0,110,78,35,50,66,3,0,0,230,51,1,1,0,59,52,1,1,0,58,53,4,12,45,95,0,0,31,57,0,0,32,0,18,66,3,0,0,213,42,4,31,0,0,0,0,121,0,2,1,0,251,173,3,1,2,253,160,4,1,0,252,156,5,1,0,172,207,6,1,2,171,160,7,1,2,243,160,8,1,2,123,160,9,1,2,91,160,10,1,0,93,241,11,1,0,125,248,12,1,0,92,168,13,1,3,206,160,16,1,2,64,160,17,16,0,0,18,16,0,0,19,1,0,244,169,20,65,0,231,232,21,133,2,190,44,160,44,0,44,0,44,26,44,0,44,22,16,0,0,23,16,0,0,24,65,0,155,157,25,16,0,0,26,1,3,204,205,27,1,1,201,238,30,65,0,145,146,31,1,0,225,245,32,65,0,208,209,33,1,2,166,160,34,16,0,0,35,16,0,0,36,16,0,0,37,1,2,38,160,38,1,3,200,160,39,1,3,203,160,40,1,3,202,160,41,1,0,170,221,43,16,0,0,44,133,0,174,21,60,21,60,21,0,21,25,21,0,21,45,1,0,175,62,46,1,0,189,184,47,16,0,0,48,16,0,0,49,1,2,35,160,50,1,0,230,167,51,1,2,158,160,52,1,0,250,246,53,16,0,0,54,4,31,0,0,0,0,120,86,16,0,0,0,42,4,31,0,0,0,0,123,0,2,1,0,251,173,3,1,2,253,160,4,1,0,252,156,5,1,0,172,207,6,1,2,171,160,7,1,2,243,160,8,1,2,123,160,9,1,2,91,160,10,1,0,93,241,11,1,0,125,248,12,1,0,92,168,13,1,3,206,160,16,1,2,64,160,17,16,0,0,18,16,0,0,19,1,0,244,169,20,65,0,231,232,21,133,2,190,44,160,44,0,44,0,44,26,44,0,44,22,16,0,0,23,16,0,0,24,65,0,155,157,25,16,0,0,26,1,3,204,205,27,1,1,201,238,30,65,0,145,146,31,1,0,225,245,32,65,0,208,209,33,1,2,166,160,34,16,0,0,35,16,0,0,36,16,0,0,37,1,2,38,160,38,1,3,200,160,39,1,3,203,160,40,1,3,202,160,41,1,0,170,221,43,16,0,0,44,133,0,174,21,60,21,60,21,0,21,25,21,0,21,45,1,0,175,62,46,1,0,189,184], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61443);
  /* memory initializer */ allocate([47,16,0,0,48,16,0,0,49,1,2,35,160,50,1,0,230,167,51,1,2,158,160,52,1,0,250,246,53,16,0,0,54,4,31,0,0,0,0,122,86,16,0,0,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,248,3,97,134,65,143,32,248,247,3,99,135,67,128,32,247,0,4,1,1,0,21,42,4,31,0,0,0,0,125,0,2,1,1,160,173,3,1,2,253,160,4,1,1,160,156,5,1,2,172,160,6,1,2,171,160,7,16,0,0,8,1,2,123,160,9,1,2,91,160,10,1,0,93,241,11,1,0,125,248,12,1,0,92,168,13,1,3,206,160,16,1,2,64,160,17,16,0,0,18,16,0,0,19,1,2,20,160,20,16,0,0,21,133,2,157,44,160,44,0,44,0,44,26,44,0,44,22,16,0,0,23,16,0,0,24,16,0,0,25,16,0,0,26,1,3,204,205,27,1,3,201,160,30,65,0,145,146,31,1,0,225,21,32,16,0,0,33,1,2,166,160,34,16,0,0,35,16,0,0,36,16,0,0,37,1,2,38,160,38,1,3,200,160,39,1,3,203,160,40,1,3,202,160,41,1,2,170,160,43,16,0,0,44,133,0,174,21,60,21,60,21,0,21,25,21,0,21,45,1,0,175,62,46,1,2,155,160,47,16,0,0,48,16,0,0,49,1,2,35,160,50,1,0,230,167,51,16,0,0,52,1,0,250,246,53,16,0,0,54,4,31,0,0,0,0,124,86,16,0,0,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,7,97,160,101,130,105,161,111,162,117,163,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,248,3,97,134,65,143,32,248,44,3,99,135,67,128,32,44,0,3,1,3,0,204,9,3,7,0,0,0,174,10,3,7,0,0,0,175,13,2,7,0,0,205,18,2,3,0,0,213,24,3,3,0,0,171,172,30,3,3,0,0,134,143,39,3,3,0,0,155,157,40,3,3,0,0,145,146,0,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,126,3,110,164,78,165,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,7,97,160,101,130,111,162,65,181,69,144,79,224,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,44,3,99,135,67,128,32,44,0,3,2,7,0,0,160,4,2,7,0,0,160,5,2,3,0,0,170,13,2,7,200,201,160,18,3,3,0,0,169,168,19,65,0,114,82,20,65,0,116,84,21,197,0,122,44,90,44,190,44,189,44,26,44,0,44,22,3,3,0,0,251,235,23,3,3,0,0,133,222,24,3,3,0,0,139,138,27,2,7,0,0,160,30,3,3,0,0,165,164,31,65,0,115,83,32,67,0,100,68,208,209,38,67,0,108,76,136,157,41,2,7,0,0,160,50,2,7,0,0,160,0,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,96,21,99,159,100,212,101,216,108,150,110,229,111,147,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,79,226,82,252,83,230,84,155,90,166,32,96,0,13,2,7,200,160,160,27,2,7,0,0,160,31,65,0,115,83,34,65,0,103,71,35,65,0,104,72,36,65,0,106,74,41,2,7,0,0,200,0,94,13,99,134,103,155,104,169,106,159,115,199,117,237,67,143,71,157,72,168,74,172,83,198,85,236,32,94,0,3,2,7,0,0,160,4,2,7,0,0,160,12,0,1,160,13,2,7,200,201,160,18,66,3,0,0,213,19,65,0,114,82,20,65,0,116,84,23,67,3,0,0,139,216,25,65,0,112,80,27,2,7,0,0,160,30,67,3,0,0,198,199,31,65,0,115,83,32,65,0,100,68,34,65,0,103,71,35,65,0,104,72,37,65,0,107,75,38,65,0,108,76,40,3,3,0,0,145,146,41,2,7,0,0,160,50,2,7,0,0,160,0,239,11,99,134,103,208,114,232,115,250,122,170,67,143,71,209,82,246,83,251,90,171,32,239,96,29,99,172,100,138,101,136,103,221,104,189,105,140,107,133,108,242,110,228,112,157,114,253,115,231,116,156,122,168,67,173,68,212,69,210,71,222,72,190,73,215,75,183,76,241,78,229,80,225,82,252,83,230,84,155,90,169,32,96,0,3,1,3,0,203,13,2,7,202,0,205,18,2,3,0,0,213,23,67,3,0,0,158,159,24,67,3,0,0,171,172,27,2,7,0,0,204,30,67,3,0,0,134,143,39,67,3,0,0,155,157,40,67,3,0,0,145,146,41,2,7,0,0,201,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,13,97,131,101,136,105,140,111,147,117,150,121,189,65,182,69,210,73,215,79,226,85,234,89,190,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,126,11,97,135,101,208,105,231,111,249,117,247,65,128,69,209,73,232,79,221,85,239,32,126,44,7,101,198,111,164,148,228,69,199,79,165,153,229,32,44,0,244,197,3,4,0,0,72,85,5,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,84,3,211,1,68,2,0,0,90,3,69,1,76,1,0,0,82,3,0,0,76,1,0,0,181,225,5,3,95,3,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,7,0,204,200,3,1,3,0,205,4,3,5,0,43,201,30,5,1,1,0,33,6,2,7,0,0,202,7,1,1,0,47,8,2,5,0,61,203,9,2,1,0,40,250,10,2,1,0,41,239,11,65,0,148,153,12,66,0,129,154,249,13,194,4,162,13,224,0,206,131,16,66,3,0,0,92,17,66,3,0,0,124,18,66,0,101,69,142,19,66,3,0,0,245,20,66,3,0,0,207,21,65,0,121,89,22,65,0,117,85,23,66,0,105,73,214,24,65,0,111,79,26,66,3,160,160,246,27,66,0,163,233,158,30,66,0,97,65,132,33,66,3,0,0,91,34,66,3,0,0,93,36,66,3,0,0,161,39,66,0,130,144,36,40,66,0,160,181,225,41,66,0,161,214,48,43,66,3,160,160,92,44,66,0,122,90,62,45,66,3,0,0,35,46,66,0,99,67,38,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,60,51,2,0,44,63,59,52,2,0,46,58,62,53,3,0,45,95,42,31,57,0,0,32,0,22,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,34,247,3,99,135,67,128,32,247,0,2,2,3,0,206,126,3,2,7,0,208,200,4,1,3,0,207,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,11,66,3,0,0,241,13,194,5,0,13,224,0,209,131,19,65,0,114,82,20,65,0,116,84,22,66,3,0,0,170,26,65,0,139,138,31,66,0,115,83,208,32,66,0,100,68,209,37,66,3,0,0,136,38,66,0,108,76,157,43,65,0,251,235,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,39,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,39,43,5,111,139,117,251,79,138,85,235,32,43,34,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,34,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,2,1,3,0,204,3,1,3,0,206,4,1,3,0,205,10,2,7,0,0,204,11,66,7,0,0,205,12,66,7,0,0,206,13,66,5,0,149,207,19,66,3,0,0,21,20,66,7,0,0,160,23,66,3,0,0,141,25,66,3,0,0,159,26,65,0,147,167,27,66,5,0,151,160,40,65,1,0,143,41,65,1,0,141,43,65,0,150,152,0,126,3,110,164,78,165,32,126,94,4,97,131,101,136,105,140,32,94,248,2,97,134,32,248,96,3,97,133,101,138,32,96,39,11,97,160,101,130,105,161,111,162,117,163,65,143,69,144,73,141,79,149,85,151,32,39,43,5,111,147,117,150,79,167,85,152,32,43,34,9,97,132,101,137,105,139,111,148,117,129,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,55,207,3,4,208,0,72,85,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,84,3,227,1,84,2,0,0,90,3,85,1,92,1,0,0,82,3,0,0,92,1,0,0,181,225,21,3,105,3,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,7,0,204,200,3,1,3,0,205,4,3,5,0,43,201,30,5,1,1,0,33,6,2,7,0,0,202,7,1,1,0,47,8,2,5,0,61,203,9,2,1,0,40,250,10,2,1,0,41,239,11,65,0,148,153,12,66,0,129,154,249,13,194,4,162,13,224,0,206,131,16,66,3,0,0,92,17,66,3,0,0,124,18,66,0,101,69,142,21,196,0,122,44,90,44,0,44,26,44,0,44,22,65,0,117,85,23,66,0,105,73,214,24,65,0,111,79,26,66,3,160,160,246,27,66,0,163,233,158,30,66,0,97,65,132,33,66,3,0,0,91,34,66,3,0,0,93,36,66,3,0,0,161,39,66,0,130,144,36,40,66,0,160,181,225,41,1,0,48,245,43,66,3,160,160,207,44,196,0,121,21,89,21,62,21,25,21,0,21,45,66,3,0,0,35,46,66,0,99,67,38,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,60,51,2,0,44,63,59,52,2,0,46,58,62,53,3,0,45,95,42,31,57,0,0,32,86,66,0,161,214,60,0,22,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,34,247,3,99,135,67,128,32,247,0,2,2,3,0,206,126,3,2,7,0,208,200,4,1,3,0,207,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,11,66,3,0,0,241,13,194,5,0,13,224,0,209,131,19,65,0,114,82,20,65,0,116,84,22,66,3,0,0,170,26,65,0,139,138,31,66,0,115,83,208,32,66,0,100,68,209,37,66,3,0,0,136,38,66,0,108,76,157,43,65,0,251,235,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,39,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,39,43,5,111,139,117,251,79,138,85,235,32,43,34,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,34,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,2,1,3,0,204,3,1,3,0,206,4,1,3,0,205,10,2,7,0,0,204,11,66,7,0,0,205,12,66,7,0,0,206,13,66,5,0,149,207,23,66,3,0,0,141,25,66,3,0,0,159,26,65,0,147,167,27,66,5,0,151,160,40,65,1,0,143,41,1,1,0,21,43,66,4,150,152,160,86,65,1,0,141,0,126,3,110,164,78,165,32,126,94,4,97,131,101,136,105,140,32,94,248,2,97,134,32,248,96,3,97,133,101,138,32,96,39,11,97,160,101,130,105,161,111,162,117,163,65,143,69,144,73,141,79,149,85,151,32,39,43,5,111,147,117,150,79,167,85,152,32,43,34,9,97,132,101,137,105,139,111,148,117,129,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,45,131,3,9,0,0,73,84,44,141,0,73,84,8,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,90,3,251,0,0,0,0,0,82,3,0,0,0,0,0,0,181,1,245,0,0,0,0,0,84,3,22,2,89,2,0,0,101,3,106,2,0,0,0,0,101,3,147,2,68,3,0,0,55,117,8,1,129,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,1,1,0,34,4,2,1,0,156,35,7,1,1,0,38,8,2,1,0,47,123,9,4,9,0,40,91,0,27,10,4,9,0,41,93,0,29,11,2,1,0,61,125,12,1,0,39,63,13,4,8,141,94,126,0,30,16,66,3,0,0,64,26,3,0,138,130,91,123,27,3,0,43,42,93,125,39,2,0,149,135,64,40,2,0,133,248,35,41,4,12,92,124,0,0,28,43,2,0,151,245,96,51,2,1,0,59,60,52,2,1,0,58,62,53,4,12,45,95,0,0,31,86,1,0,60,62,0,43,1,1,0,21,0,6,2,3,0,0,213,18,66,3,0,0,213,0,3,1,3,0,200,4,1,3,0,160,6,2,3,0,0,213,12,0,1,201,13,1,3,0,202,18,66,0,101,69,213,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,67,0,111,79,171,172,30,67,0,97,65,145,146,31,66,3,0,0,225,38,67,3,0,0,242,246,40,1,3,0,204,41,2,3,0,0,250,43,2,7,0,205,203,44,66,3,0,0,174,45,66,3,0,0,175,46,67,3,0,0,135,128,49,67,3,0,0,164,165,57,0,0,32,0,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,248,11,97,198,101,189,105,155,111,158,117,169,65,199,69,190,73,157,79,159,85,184,32,248,245,11,97,208,101,221,105,156,111,231,117,239,65,209,69,249,73,207,79,232,85,247,32,245,0,4,1,3,0,160,6,2,3,0,0,170,13,1,3,160,200,18,66,3,0,0,170,26,0,1,160,31,65,0,115,83,32,67,0,100,68,208,209,39,0,1,160,40,0,1,160,43,0,1,160,44,65,0,122,90,46,67,0,99,67,134,143,57,0,0,32,0,94,7,99,159,115,231,122,167,67,172,83,230,90,166,32,94,0,6,2,3,0,0,135,13,0,1,160,18,2,3,0,0,135,39,1,3,160,160,40,1,3,160,160,43,1,3,160,160,54,5,63,0,0,0,0,0,125,0,6,2,3,0,0,135,13,0,1,160,16,1,0,139,140,17,1,2,237,160,18,66,0,222,168,135,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,26,1,3,160,160,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,1,3,200,160,40,1,3,201,160,42,5,63,0,0,0,0,0,124,43,1,3,202,160,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,57,0,0,32,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,5,227,160,242,251,173,145,209,150,32,249,247,3,227,161,242,252,32,247,0,110,121,3,4,142,0,73,84,8,4,44,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,90,3,246,0,0,0,0,0,82,3,0,0,0,0,0,0,181,1,240,0,0,0,0,0,84,3,17,2,84,2,0,0,101,3,101,2,0,0,0,0,101,3,142,2,63,3,0,0,55,117,3,1,124,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,1,1,0,34,4,2,1,0,156,35,7,1,1,0,38,8,2,1,0,47,123,9,4,9,0,40,91,0,27,10,4,9,0,41,93,0,29,11,2,1,0,61,125,12,1,0,39,63,13,4,12,141,94,0,0,30,16,66,3,0,0,64,26,1,0,138,130,27,2,0,43,42,126,39,1,0,149,135,40,1,0,133,248,41,4,12,92,124,0,0,28,43,2,0,151,245,96,51,2,1,0,59,60,52,2,1,0,58,62,53,4,12,45,95,0,0,31,86,1,0,60,62,0,43,1,1,0,21,0,6,2,3,0,0,213,18,66,3,0,0,213,0,3,1,3,0,200,4,1,3,0,160,6,2,3,0,0,213,12,0,1,201,13,1,3,0,202,18,66,0,101,69,213,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,67,0,111,79,171,172,30,67,0,97,65,145,146,31,66,3,0,0,225,38,67,3,0,0,242,246,40,1,3,0,204,41,2,3,0,0,250,43,2,7,0,205,203,44,66,3,0,0,174,45,66,3,0,0,175,46,67,3,0,0,135,128,49,67,3,0,0,164,165,57,0,0,32,0,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,248,11,97,198,101,189,105,155,111,158,117,169,65,199,69,190,73,157,79,159,85,184,32,248,245,11,97,208,101,221,105,156,111,231,117,239,65,209,69,249,73,207,79,232,85,247,32,245,0,4,1,3,0,160,6,2,3,0,0,170,13,1,3,160,200,18,66,3,0,0,170,26,0,1,160,31,65,0,115,83,32,67,0,100,68,208,209,39,0,1,160,40,0,1,160,43,0,1,160,44,65,0,122,90,46,67,0,99,67,134,143,57,0,0,32,0,94,7,99,159,115,231,122,167,67,172,83,230,90,166,32,94,0,6,2,3,0,0,135,13,0,1,160,18,2,3,0,0,135,39,1,3,160,160,40,1,3,160,160,43,1,3,160,160,54,5,63,0,0,0,0,0,125,0,6,2,3,0,0,135,13,0,1,160,16,1,0,139,140,17,1,2,237,160,18,66,0,222,168,135,19,65,0,235,199,20,65,0,238,208,21,65,0,242,209,22,65,0,226,172,23,65,0,227,173,24,65,0,233,190,25,65,0,234,198,26,1,3,160,160,30,65,0,214,164,31,65,0,236,207,32,65,0,221,167,33,65,0,243,210,34,65,0,216,166,35,65,0,225,170,36,65,0,232,189,37,65,0,228,181,38,65,0,229,182,39,1,3,200,160,40,1,3,201,160,42,5,63,0,0,0,0,0,124,43,1,3,202,160,44,193,0,224,0,169,44,45,65,0,244,211,46,65,0,246,212,47,65,0,250,213,48,65,0,215,165,49,65,0,231,184,50,65,0,230,183,57,0,0,32,0,239,15,214,155,222,157,225,158,227,159,233,162,242,163,250,253,164,134,168,141,170,143,173,144,190,146,209,149,213,152,32,239,249,5,227,160,242,251,173,145,209,150,32,249,247,3,227,161,242,252,32,247,0,140,35,2,12,0,0,74,80,44,0,0,74,80,49,48,54,3,5,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,164,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,64,128,0,0,0,0,64,12,0,128,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,128,0,8,0,0,0,128,0,0,0,2,3,11,0,0,199,160,3,3,9,0,34,204,160,4,3,3,0,0,177,167,5,3,3,0,0,179,169,6,3,3,0,0,180,170,7,3,1,0,38,181,171,8,3,1,0,39,212,172,9,3,1,0,40,213,173,10,3,1,0,41,214,174,11,3,1,0,126,220,166,12,3,9,0,61,206,160,13,4,8,94,126,205,160,30,16,67,11,0,0,192,160,17,67,11,0,0,195,160,18,67,3,0,0,178,168,19,67,11,0,0,189,160,20,67,11,0,0,182,160,21,67,11,0,0,221,160,22,67,11,0,0,197,160,23,67,11,0,0,198,160,24,67,11,0,0,215,160,25,67,11,0,0,190,160,26,132,8,64,26,96,26,222,26,160,26,0,3,27,4,0,91,123,223,162,27,30,67,11,0,0,193,160,31,67,11,0,0,196,160,32,67,11,0,0,188,160,33,67,11,0,0,202,160,34,67,11,0,0,183,160,35,67,11,0,0,184,160,36,67,11,0,0,207,160,37,67,11,0,0,201,160,38,67,11,0,0,216,160,39,3,9,0,43,218,160,40,3,8,58,42,185,160,41,134,0,0,175,0,176,0,175,0,176,0,177,0,178,0,178,43,4,0,93,125,209,163,29,44,67,3,0,0,194,175,45,67,11,0,0,187,160,46,67,11,0,0,191,160,47,67,11,0,0,203,160,48,67,11,0,0,186,160,49,67,11,0,0,208,160,50,67,11,0,0,211,160,51,3,3,0,0,200,164,52,3,3,0,0,217,161,53,3,3,0,0,210,165,58,134,10,0,179,0,58,0,179,0,58,0,180,0,181,0,181,112,134,96,0,182,0,183,0,182,0,183,0,184,195,0,187,0,115,4,0,92,95,219,124,28,121,134,0,0,167,0,168,0,167,0,168,0,169,0,170,0,170,123,134,0,0,171,0,172,0,171,0,172,0,173,0,174,0,174,125,4,8,92,124,176,160,28,186,134,127,0,179,0,58,187,0,0,58,0,180,0,181,0,181,0,213,179,4,9,0,0,76,65,44,171,0,76,65,7,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,90,3,67,1,74,1,0,0,82,3,0,0,74,1,0,0,181,1,0,0,252,0,0,0,51,117,181,1,9,2,0,0,77,117,170,2,21,3,0,0,78,117,170,3,2,4,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,1,1,0,34,7,1,1,0,38,8,1,1,0,47,9,1,1,0,40,10,1,1,0,41,11,1,1,0,61,12,4,8,39,63,92,0,28,13,1,0,168,173,16,2,3,0,0,64,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,1,3,202,203,27,2,0,43,42,126,30,65,0,97,65,39,65,0,164,165,40,4,12,123,91,201,0,27,41,2,0,124,248,170,43,4,12,125,93,200,0,29,46,65,0,99,67,51,2,1,0,59,60,52,2,1,0,58,62,53,4,12,45,95,0,0,31,57,0,0,32,86,1,0,60,62,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,2,3,0,0,207,6,2,3,0,0,213,13,2,3,0,0,156,18,3,3,0,0,189,190,23,3,3,0,0,158,159,27,2,7,0,0,204,30,3,3,0,0,244,246,31,67,0,115,83,251,230,34,65,0,103,71,38,3,3,0,0,252,253,44,66,0,122,90,174,45,66,0,120,88,175,49,67,0,110,78,225,238,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,19,97,131,101,136,105,140,111,147,117,150,99,171,115,249,122,247,120,184,65,182,69,210,73,215,79,226,85,234,67,172,83,221,90,239,88,169,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,15,97,132,101,137,105,139,111,148,117,129,110,166,120,241,65,142,69,211,73,216,79,153,85,154,78,167,88,242,32,34,126,17,97,198,101,134,105,145,111,228,117,155,103,208,110,164,121,231,65,199,69,143,73,146,79,229,85,157,71,209,78,165,89,232,32,126,0,4,2,3,0,0,250,6,2,3,0,0,213,17,3,3,0,0,247,239,18,3,3,0,0,135,128,19,3,3,0,0,230,251,21,3,3,0,0,244,246,22,3,3,0,0,231,232,23,3,3,0,0,241,242,24,3,3,0,0,155,157,31,67,0,115,83,228,229,32,3,3,0,0,252,253,33,3,3,0,0,198,199,41,1,3,204,205,44,2,3,0,0,174,45,2,3,0,0,175,49,3,3,0,0,156,207,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,11,97,134,101,145,105,152,111,225,117,158,65,143,69,146,73,243,79,238,85,159,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,34,13,97,132,101,137,105,139,111,148,117,129,115,249,65,142,69,211,73,216,79,153,85,154,83,221,32,34,124,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,124,248,11,97,166,101,171,105,169,111,189,117,208,65,167,69,172,73,184,79,190,85,209,32,248,0,6,2,3,0,0,213,12,0,1,204,13,2,3,0,0,156,18,2,3,0,0,159,20,2,3,0,0,207,22,2,3,0,0,253,23,2,3,0,0,251,24,2,3,0,0,252,25,2,3,0,0,190,30,2,3,0,0,158,31,66,0,115,83,225,41,1,3,205,206,44,66,0,122,90,174,45,2,3,0,0,175,46,2,3,0,0,189,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,12,97,131,101,136,105,140,111,147,117,150,99,135,115,249,122,247,67,128,83,221,90,239,32,94,239,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,34,9,97,132,105,139,111,148,117,129,65,142,73,216,79,153,85,154,32,34,39,11,97,182,101,210,105,215,111,226,117,234,65,198,69,199,73,228,79,229,85,230,32,39,124,11,97,208,101,137,105,236,111,231,117,152,65,209,69,211,73,237,79,232,85,243,32,124,248,11,97,134,101,145,105,155,111,171,117,166,65,143,69,146,73,157,79,172,85,167,32,248,0,195,125,2,25,0,0,76,72,44,0,0,85,83,68,86,76,44,103,0,76,72,44,103,0,85,83,68,86,76,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,90,3,85,2,0,0,0,0,82,3,0,0,0,0,0,0,181,1,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,132,0,91,26,123,26,27,26,0,26,0,26,3,132,0,93,27,125,27,29,27,0,27,0,27,4,132,0,47,53,63,53,0,53,0,53,0,53,5,196,0,112,25,80,25,16,25,0,25,0,25,6,196,0,102,33,70,33,6,33,0,33,0,33,7,196,0,109,50,77,50,13,50,0,50,0,50,8,196,0,108,38,76,38,12,38,0,38,0,38,9,196,0,106,36,74,36,10,36,0,36,0,36,10,132,0,52,5,36,5,0,5,0,123,0,123,11,132,0,51,4,35,4,0,4,0,122,0,122,12,132,0,50,3,64,3,0,3,0,121,0,121,13,132,0,49,2,33,2,0,2,0,120,0,120,16,132,0,59,39,58,39,0,39,0,39,0,39,17,196,0,113,16,81,16,17,16,0,16,0,16,18,196,0,98,48,66,48,2,48,0,48,0,48,19,196,0,121,21,89,21,25,21,0,21,0,21,20,196,0,117,22,85,22,21,22,0,22,0,22,21,196,0,114,19,82,19,18,19,0,19,0,19,22,196,0,115,31,83,31,19,31,0,31,0,31,23,196,0,111,24,79,24,15,24,0,24,0,24,24,132,0,46,52,62,52,0,52,0,52,0,52,25,132,0,54,7,94,7,30,7,0,125,0,125,26,132,0,53,6,37,6,0,6,0,124,0,124,27,132,0,61,13,43,13,0,13,0,131,0,131,30,132,0,45,12,95,12,31,12,0,130,0,130,31,196,0,107,37,75,37,11,37,0,37,0,37,32,196,0,99,46,67,46,3,46,0,46,0,46,33,196,0,100,32,68,32,4,32,0,32,0,32,34,196,0,116,20,84,20,20,20,0,20,0,20,36,196,0,101,18,69,18,5,18,0,18,0,18,37,196,0,97,30,65,30,1,30,0,30,0,30,38,196,0,122,44,90,44,26,44,0,44,0,44,39,132,0,56,9,42,9,0,9,0,127,0,127,40,132,0,55,8,38,8,0,8,0,126,0,126,44,132,0,39,40,34,40,0,40,0,40,0,40,46,196,0,103,34,71,34,7,34,0,34,0,34,48,196,0,119,17,87,17,23,17,0,17,0,17,50,196,0,105,23,73,23,9,23,0,23,0,23,52,132,0,48,11,41,11,0,11,0,129,0,129,53,132,0,57,10,40,10,0,10,0,128,0,128,0,36,196,0,101,18,69,18,5,18,213,18,0,18,0,160,25,3,9,0,0,78,76,44,143,0,78,76,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,90,3,169,1,176,1,0,0,82,3,0,0,176,1,0,0,181,1,44,1,86,1,0,0,68,117,47,2,126,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,3,0,0,251,3,2,1,0,34,253,4,2,3,0,0,252,5,2,3,0,0,172,6,2,3,0,0,171,7,2,1,0,38,243,8,4,9,0,95,156,0,31,9,2,1,0,40,123,10,2,1,0,41,125,11,1,1,0,39,12,4,8,47,63,92,0,28,13,2,6,248,201,205,18,65,0,101,69,19,66,3,0,0,244,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,4,15,204,202,0,0,30,27,2,0,42,124,221,30,65,0,97,65,31,66,3,0,0,225,39,1,0,43,241,40,1,3,203,200,41,2,0,64,245,170,43,1,0,60,62,44,66,3,0,0,174,45,66,3,0,0,175,46,66,0,99,67,189,49,65,0,110,78,50,66,3,0,0,230,51,4,9,0,59,91,0,27,52,2,1,0,58,250,53,4,8,45,61,93,0,29,57,0,0,32,86,4,8,93,91,124,0,29,0,2,2,7,0,0,160,4,2,7,0,0,160,7,2,7,0,0,160,19,66,3,0,0,20,27,2,7,0,0,160,41,1,1,0,21,46,66,3,0,0,155,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,7,97,160,101,130,105,161,111,162,117,163,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,5,2,7,0,0,160,6,2,7,0,0,160,7,2,7,0,0,160,16,67,3,0,0,145,146,18,66,3,0,0,213,23,67,3,0,0,158,159,24,67,3,0,0,171,172,25,67,3,0,0,155,157,27,2,7,0,0,160,30,67,3,0,0,134,143,38,67,3,0,0,228,229,46,2,7,0,0,160,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,11,97,135,101,208,105,231,111,249,117,247,65,128,69,209,73,232,79,221,85,239,32,126,94,13,97,131,101,136,105,140,111,147,117,150,121,189,65,182,69,210,73,215,79,226,85,234,89,190,32,94,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,44,5,101,198,111,164,69,199,79,165,32,44,0,120,80,3,9,0,0,78,79,44,155,0,78,79,6,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,90,3,17,1,30,1,0,0,82,3,0,0,30,1,0,0,97,3,153,1,164,1,0,0,48,117,243,1,0,0,0,0,48,117,167,2,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,5,2,1,0,207,36,7,1,1,0,38,8,2,1,0,47,123,9,4,9,0,40,91,0,27,10,4,9,0,41,93,0,29,11,2,1,0,61,125,12,1,0,43,63,13,4,14,92,200,203,0,28,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,134,143,27,4,15,204,202,201,0,30,30,65,0,97,65,39,65,0,155,157,40,65,0,145,146,41,1,0,124,245,43,1,0,39,42,46,65,0,99,67,49,65,0,110,78,50,66,3,0,0,230,51,2,1,0,59,60,52,2,1,0,58,62,53,4,12,45,95,0,0,31,57,0,0,32,86,1,0,60,62,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,1,1,0,175,41,1,1,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,4,2,7,0,0,160,6,2,3,0,0,213,9,3,7,0,0,0,174,10,3,7,0,0,0,175,13,2,7,0,160,160,16,67,3,0,0,131,182,18,66,3,0,0,213,20,67,3,0,0,171,151,23,67,3,0,0,139,216,24,67,3,0,0,228,229,27,2,7,160,160,160,30,67,3,0,0,160,181,31,67,3,0,0,170,150,32,67,3,0,0,159,141,33,67,3,0,0,144,128,34,67,3,0,0,161,162,35,67,3,0,0,133,130,37,67,3,0,0,166,167,39,67,3,0,0,148,153,40,67,3,0,0,132,142,44,67,3,0,0,172,152,46,67,3,0,0,158,140,47,67,3,0,0,137,138,48,67,3,0,0,135,136,49,67,3,0,0,169,149,54,5,63,0,0,0,0,0,124,0,4,2,7,0,0,160,6,2,3,0,0,213,9,3,7,0,0,0,174,10,3,7,0,0,0,175,13,2,7,0,160,160,16,67,0,160,181,113,81,17,67,0,170,150,119,87,18,66,3,0,0,213,21,67,0,171,151,121,89,23,67,3,0,0,139,216,24,67,3,0,0,228,229,27,66,4,169,149,160,30,67,3,0,0,131,182,34,67,3,0,0,161,162,35,67,3,0,0,144,128,37,67,3,0,0,166,167,39,67,3,0,0,148,153,40,67,3,0,0,132,142,42,5,63,0,0,0,0,0,123,43,67,0,159,141,39,42,44,67,3,0,0,135,136,45,67,0,158,140,120,88,86,67,0,172,152,137,138,0,105,91,3,9,0,0,80,76,44,201,1,80,76,13,3,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,0,0,0,0,84,3,16,1,0,0,0,0,156,2,16,1,0,0,0,0,223,3,79,1,0,0,0,0,22,3,79,1,0,0,0,0,155,2,79,1,0,0,0,0,80,3,105,2,0,0,0,0,80,3,156,1,0,0,0,0,81,3,66,3,0,0,0,0,81,3,120,2,0,0,0,0,90,3,149,1,0,0,0,0,82,3,0,0,0,0,0,0,223,227,160,0,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,8,0,0,0,0,0,0,0,24,195,0,111,24,79,24,162,24,224,0,0,5,2,3,0,0,155,16,67,3,0,0,132,142,17,67,3,0,0,130,138,18,67,3,0,0,145,144,19,67,3,0,0,137,131,22,67,3,0,0,129,154,23,67,3,0,0,148,153,24,67,7,0,0,0,163,25,67,3,0,0,147,150,30,67,3,0,0,134,143,31,67,3,0,0,158,152,38,67,3,0,0,146,156,44,67,3,0,0,167,161,45,67,3,0,0,166,160,46,67,3,0,0,141,149,49,67,3,0,0,164,165,0,18,67,3,0,0,169,168,22,66,3,0,0,170,30,67,3,0,0,165,164,31,67,3,0,0,152,151,38,67,3,0,0,136,157,44,67,3,0,0,190,189,45,67,3,0,0,171,141,46,67,3,0,0,134,143,49,67,3,0,0,228,227,0,5,2,3,0,0,155,18,67,3,0,0,145,144,24,67,7,0,0,0,163,30,67,3,0,0,134,143,31,67,3,0,0,158,152,38,67,3,0,0,146,156,44,67,3,0,0,167,161,45,67,3,0,0,166,160,46,67,3,0,0,141,149,49,67,3,0,0,164,165,0,22,66,3,0,0,213,0,13,67,0,236,156,61,43,16,65,0,239,159,17,65,0,232,152,18,66,0,165,133,253,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,167,135,22,65,0,227,147,23,65,0,247,246,24,67,12,174,142,160,160,25,65,0,175,143,26,67,0,166,134,91,123,27,67,0,231,151,93,125,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,67,0,249,248,59,58,40,67,0,233,153,39,34,41,67,0,245,244,96,126,42,4,31,0,0,0,0,125,43,67,0,238,158,92,124,44,65,0,168,136,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,2,3,0,0,59,52,2,3,0,0,58,0,18,66,3,0,0,253,54,4,31,0,0,0,0,126,0,16,65,0,239,159,17,65,0,232,152,18,66,0,165,133,251,19,193,0,224,0,144,19,20,65,0,226,146,21,65,0,167,135,22,65,0,227,147,23,65,0,249,248,24,67,12,174,142,160,160,25,65,0,175,143,26,67,0,166,134,91,123,27,67,0,231,151,93,125,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,236,156,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,67,0,247,246,59,58,40,67,0,237,157,39,34,41,195,0,241,41,240,0,96,41,126,41,42,4,31,0,0,0,0,127,43,67,0,238,158,92,124,44,65,0,235,155,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,65,0,172,140,51,2,3,0,0,59,52,2,3,0,0,58,0,18,66,3,0,0,251,54,4,31,0,0,0,0,128,0,164,245,8,4,214,0,80,76,13,3,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,0,0,0,0,84,3,149,3,23,4,0,0,156,2,216,4,62,5,0,0,90,3,167,5,174,5,0,0,82,3,0,0,174,5,0,0,155,2,129,1,90,2,0,0,22,3,129,1,90,2,0,0,223,3,231,1,90,2,0,0,80,3,47,7,0,0,0,0,80,3,53,6,0,0,0,0,81,3,139,8,0,0,0,0,81,3,148,7,0,0,0,0,223,227,189,2,48,3,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,7,0,0,200,3,1,1,0,34,4,3,7,0,0,201,30,5,1,1,0,207,6,2,7,0,0,202,7,1,1,0,38,8,2,5,0,47,203,9,2,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71683);
  /* memory initializer */ allocate([0,40,250,10,2,5,0,41,204,11,1,1,0,61,12,2,4,43,63,205,13,2,4,39,42,206,16,66,3,0,0,92,17,66,3,0,0,124,18,65,0,101,69,21,196,0,122,44,90,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,66,3,160,160,246,27,67,3,160,160,158,27,30,65,0,97,65,33,66,3,0,0,91,34,66,3,0,0,93,39,67,3,160,160,36,29,40,66,3,160,160,225,41,16,0,0,43,65,2,162,160,44,196,0,121,21,89,21,0,21,25,21,0,21,46,65,0,99,67,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,245,51,2,1,0,59,60,52,2,1,0,58,62,53,3,4,45,95,0,31,57,0,0,32,86,1,0,60,62,0,2,2,3,0,0,126,4,2,7,0,0,200,5,1,3,0,160,6,2,3,0,0,248,7,2,7,0,0,201,8,2,7,0,0,202,9,2,7,0,0,203,10,2,7,0,0,204,12,2,7,0,0,205,13,2,7,0,0,206,26,65,0,167,164,27,66,4,158,141,160,31,65,0,115,83,39,65,0,146,156,40,65,0,134,145,41,1,3,201,203,43,65,1,0,166,50,66,3,0,0,21,0,2,2,3,0,0,126,4,2,7,0,0,200,5,1,3,0,160,6,2,3,0,0,248,7,2,7,0,0,201,8,2,7,0,0,202,9,2,7,0,0,203,10,2,7,0,0,204,12,2,7,0,0,205,13,2,7,0,0,206,21,196,0,122,44,90,44,155,44,26,44,0,44,26,65,0,167,164,27,66,4,158,141,160,31,65,0,115,83,39,65,0,146,156,40,65,0,134,145,41,1,3,201,203,43,65,1,0,166,50,66,3,0,0,168,0,94,6,97,131,101,136,105,140,111,147,117,150,32,94,126,5,97,134,101,145,65,143,69,144,32,126,96,4,97,133,101,138,117,151,32,96,250,3,122,167,90,161,32,250,39,12,99,141,101,130,110,164,111,162,115,158,122,166,67,149,78,165,79,163,83,152,90,160,32,39,34,9,97,132,101,137,105,139,111,148,117,129,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,2,2,7,0,0,200,4,2,7,0,0,201,5,1,3,0,160,6,2,3,0,0,248,7,2,7,0,0,202,8,2,7,0,0,203,9,2,7,0,0,204,10,2,7,0,0,205,12,2,7,0,0,206,13,2,7,0,0,207,21,196,0,122,44,90,44,155,44,26,44,0,44,26,65,0,167,164,27,66,4,158,141,160,31,65,0,115,83,39,65,0,146,156,40,65,0,134,145,41,1,3,202,204,43,65,1,0,166,50,66,3,0,0,168,0,126,3,97,132,65,142,32,126,94,5,101,136,105,140,111,147,79,150,32,94,44,5,97,134,101,145,65,143,69,144,32,44,96,6,97,133,111,148,117,151,79,153,85,154,32,96,250,3,122,167,90,161,32,250,39,13,99,141,101,130,110,164,111,162,115,158,122,166,67,149,69,138,78,165,79,163,83,152,90,160,32,39,34,4,101,137,105,139,69,131,32,34,45,3,99,135,67,128,32,44,0,2,2,3,0,0,126,3,2,7,0,0,200,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,0,0,209,19,65,0,114,82,20,65,0,116,84,22,66,3,0,0,170,26,65,0,190,228,27,65,0,152,134,31,66,0,115,83,208,32,66,0,100,68,209,38,65,0,108,76,39,65,0,136,157,40,65,0,165,169,41,1,3,204,205,43,65,1,0,171,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,2,2,3,0,0,126,4,2,7,0,0,200,5,1,3,0,160,6,2,3,0,0,248,7,2,7,0,0,201,8,2,7,0,0,202,9,2,7,0,0,203,10,2,7,0,0,204,12,2,7,0,0,205,13,2,7,0,0,206,26,65,0,190,228,27,66,4,152,134,160,31,65,0,115,83,39,65,0,136,157,40,65,0,165,169,41,1,3,201,203,43,65,1,0,171,50,66,3,0,0,21,0,94,5,97,131,105,140,111,147,117,150,32,94,126,5,97,165,101,169,65,164,69,168,32,126,96,4,97,133,101,138,111,149,32,96,250,3,122,190,90,189,32,250,39,16,97,160,99,134,101,130,105,161,110,228,111,162,115,152,117,163,122,171,67,143,69,144,78,227,79,224,83,151,90,141,32,39,34,9,97,132,101,137,105,139,111,148,117,129,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,22,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,16,65,0,239,159,17,65,0,232,152,18,66,0,165,133,253,19,193,0,224,0,144,19,20,65,0,226,146,21,196,0,167,44,135,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,247,246,24,65,0,174,142,25,65,0,175,143,26,66,4,166,134,160,27,66,4,231,151,160,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,243,242,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,249,248,40,66,4,233,153,160,41,65,0,245,244,42,4,31,0,0,0,0,127,43,65,0,238,158,44,196,0,168,21,136,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,86,65,0,236,156,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,66,3,0,0,253,26,16,0,0,27,2,7,160,160,160,39,1,3,160,160,40,16,0,0,41,16,0,0,43,16,0,0,50,2,7,0,0,160,54,4,31,0,0,0,0,128,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,16,65,0,239,159,17,65,0,232,152,18,66,0,165,133,251,19,193,0,224,0,144,19,20,65,0,226,146,21,196,0,167,44,135,44,0,44,26,44,0,44,22,65,0,227,147,23,65,0,249,248,24,65,0,174,142,25,65,0,175,143,26,66,4,166,134,160,27,66,4,231,151,160,30,65,0,160,128,31,65,0,225,145,32,65,0,164,132,33,65,0,228,148,34,65,0,236,156,35,65,0,163,131,36,65,0,169,137,37,65,0,170,138,38,65,0,171,139,39,65,0,247,246,40,66,4,237,157,160,41,193,0,241,41,240,0,42,4,31,0,0,0,0,129,43,65,0,238,158,44,196,0,235,21,155,21,0,21,25,21,0,21,45,65,0,229,149,46,65,0,230,150,47,65,0,162,130,48,65,0,161,129,49,65,0,173,141,50,66,4,172,140,160,0,2,2,7,0,0,160,4,2,7,0,0,160,5,1,3,0,160,6,2,7,0,0,160,8,2,7,0,0,160,9,2,7,0,0,160,10,2,7,0,0,160,12,2,7,0,0,160,13,2,7,0,0,160,18,66,3,0,0,251,26,16,0,0,27,2,7,160,160,160,39,1,3,160,160,40,16,0,0,41,16,0,0,43,16,0,0,50,2,7,0,0,160,54,4,31,0,0,0,0,130,0,180,209,1,9,0,0,80,79,44,163,0,80,79,4,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,90,3,227,0,240,0,0,0,82,3,0,0,240,0,0,0,92,3,103,1,110,1,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,5,2,3,0,0,245,7,1,1,0,38,8,2,1,0,47,123,9,3,1,0,40,91,27,10,3,1,0,41,93,29,11,2,1,0,61,125,12,1,0,39,63,13,1,0,174,175,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,2,4,43,42,204,27,1,3,203,200,30,65,0,97,65,39,65,0,135,128,40,1,0,167,166,41,3,4,92,124,0,28,43,3,7,201,202,0,30,49,65,0,110,78,51,2,1,0,59,60,52,2,1,0,58,62,53,3,4,45,95,0,31,57,0,0,32,86,2,4,60,62,204,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,2,3,0,0,21,0,96,11,97,133,101,138,105,141,111,149,117,151,65,145,69,146,73,152,79,169,85,157,32,96,126,7,97,132,110,164,111,148,65,142,78,165,79,153,32,126,94,7,97,131,101,136,111,147,65,143,69,137,79,140,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,134,69,144,73,139,79,159,85,150,32,39,34,3,117,129,85,154,32,34,0,224,112,2,25,0,0,82,72,44,0,0,85,83,68,86,82,44,103,0,82,72,44,103,0,85,83,68,86,82,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,90,3,72,2,0,0,0,0,82,3,0,0,0,0,0,0,181,1,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,6,196,0,106,36,74,36,10,36,0,36,0,36,7,196,0,108,38,76,38,12,38,0,38,0,38,8,196,0,109,50,77,50,13,50,0,50,0,50,9,196,0,102,33,70,33,6,33,0,33,0,33,10,196,0,112,25,80,25,16,25,0,25,0,25,11,132,0,47,53,63,53,0,53,0,53,0,53,12,132,0,91,26,123,26,27,26,0,26,0,26,13,132,0,93,27,125,27,29,27,0,27,0,27,16,132,0,53,6,37,6,0,6,0,125,0,125,17,132,0,54,7,94,7,30,7,0,126,0,126,18,196,0,113,16,81,16,17,16,0,16,0,16,19,132,0,46,52,62,52,0,52,0,52,0,52,20,196,0,111,24,79,24,15,24,0,24,0,24,21,196,0,114,19,82,19,18,19,0,19,0,19,22,196,0,115,31,83,31,19,31,0,31,0,31,23,196,0,117,22,85,22,21,22,0,22,0,22,24,196,0,121,21,89,21,25,21,0,21,0,21,25,196,0,98,48,66,48,2,48,0,48,0,48,26,132,0,59,39,58,39,0,39,0,39,0,39,27,132,0,61,13,43,13,0,13,0,131,0,131,30,132,0,55,8,38,8,0,8,0,127,0,127,31,132,0,56,9,42,9,0,9,0,128,0,128,32,196,0,122,44,90,44,26,44,0,44,0,44,33,196,0,97,30,65,30,1,30,0,30,0,30,34,196,0,101,18,69,18,5,18,0,18,0,18,36,196,0,116,20,84,20,20,20,0,20,0,20,37,196,0,100,32,68,32,4,32,0,32,0,32,38,196,0,99,46,67,46,3,46,0,46,0,46,39,196,0,107,37,75,37,11,37,0,37,0,37,40,132,0,45,12,95,12,31,12,0,130,0,130,44,132,0,57,10,40,10,0,10,0,128,0,128,45,132,0,48,11,41,11,0,11,0,129,0,129,46,196,0,120,45,88,45,24,45,0,45,0,45,47,132,0,44,51,60,51,0,51,0,51,0,51,48,196,0,105,23,73,23,9,23,0,23,0,23,50,196,0,119,17,87,17,23,17,0,17,0,17,51,196,0,118,47,86,47,22,47,0,47,0,47,52,196,0,103,34,71,34,7,34,0,34,0,34,53,132,0,39,40,34,40,0,40,0,40,0,40,0,34,196,0,101,18,69,18,5,18,213,18,0,18,0,195,64,3,9,0,0,83,70,44,150,0,83,70,5,5,0,0,0,0,5,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,90,3,235,1,244,1,0,0,82,3,0,0,244,1,0,0,181,1,124,1,156,1,0,0,91,3,111,2,185,2,0,0,64,64,12,0,0,0,0,0,64,0,12,64,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,9,0,43,43,0,124,3,4,9,0,34,34,0,64,4,4,9,0,42,42,0,35,5,4,9,0,135,135,0,248,6,4,15,0,0,0,0,245,7,4,9,0,38,38,0,170,8,4,9,0,47,47,0,221,9,4,9,0,40,40,0,189,10,2,1,0,41,41,11,2,1,0,61,61,12,4,16,39,63,63,39,203,13,5,31,202,200,200,202,201,30,18,3,0,101,69,101,69,21,134,0,122,44,90,44,122,44,90,44,0,44,26,44,0,44,22,3,0,117,85,117,85,23,3,0,105,73,105,73,24,3,0,111,79,111,79,26,4,0,138,129,154,212,91,27,4,9,204,33,33,204,93,30,3,0,97,65,97,65,31,4,15,0,0,0,0,225,39,3,0,130,148,153,144,40,4,0,133,132,142,183,123,41,3,0,245,248,248,245,43,4,0,36,156,156,36,125,44,134,0,121,21,89,21,121,21,89,21,0,21,25,21,0,21,46,3,0,99,67,99,67,49,3,0,110,78,110,78,50,4,15,0,0,0,0,230,51,4,9,0,59,59,0,60,52,4,9,0,58,58,0,62,53,5,0,45,95,95,45,92,31,57,3,6,32,0,0,32,86,5,0,60,62,62,60,92,28,0,6,4,15,0,0,0,0,21,8,4,31,0,0,0,0,160,9,4,15,0,0,0,0,155,41,3,6,21,0,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,18,4,15,0,0,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,8,4,31,0,0,0,0,160,16,4,15,0,0,0,0,146,18,4,15,0,0,0,0,213,23,4,15,0,0,0,0,172,24,4,15,0,0,0,0,171,30,4,15,0,0,0,0,145,44,134,0,121,21,89,21,121,21,89,21,174,21,25,21,0,21,45,4,15,0,0,0,0,175,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,0,99,123,2,19,0,0,83,71,44,0,0,83,68,44,150,0,83,71,44,150,0,83,68,4,5,0,0,0,0,5,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,90,3,227,1,236,1,0,0,82,3,0,0,236,1,0,0,181,1,116,1,148,1,0,0,64,64,12,0,0,0,0,0,64,0,12,64,0,0,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,4,9,0,43,43,0,124,3,4,9,0,34,34,0,64,4,4,9,0,42,42,0,35,5,4,9,0,135,135,0,248,6,4,15,0,0,0,0,245,7,4,9,0,38,38,0,170,8,4,9,0,47,47,0,221,9,4,9,0,40,40,0,189,10,2,1,0,41,41,11,2,1,0,61,61,12,4,16,39,63,63,39,203,13,5,31,202,200,200,202,201,30,18,3,0,101,69,101,69,21,134,0,122,44,90,44,122,44,90,44,0,44,26,44,0,44,22,3,0,117,85,117,85,23,3,0,105,73,105,73,24,3,0,111,79,111,79,26,4,0,129,138,212,154,91,27,4,9,204,33,33,204,93,30,3,0,97,65,97,65,31,4,15,0,0,0,0,225,39,3,0,148,130,144,153,40,4,0,132,133,183,142,123,41,3,0,245,248,248,245,43,4,0,36,156,156,36,125,44,134,0,121,21,89,21,121,21,89,21,0,21,25,21,0,21,46,3,0,99,67,99,67,49,3,0,110,78,110,78,50,4,15,0,0,0,0,230,51,4,9,0,59,59,0,60,52,4,9,0,58,58,0,62,53,5,0,45,95,95,45,92,31,57,3,6,32,0,0,32,86,5,0,60,62,62,60,92,28,0,6,4,15,0,0,0,0,21,8,4,31,0,0,0,0,160,9,4,15,0,0,0,0,155,41,3,6,21,0,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,18,4,15,0,0,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,239,240,3,9,0,0,83,75,44,245,0,83,75,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,84,3,73,1,193,1,0,0,90,3,130,2,137,2,0,0,82,3,0,0,137,2,0,0,99,3,16,3,121,3,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,2,2,4,43,49,200,3,1,1,160,50,4,3,5,160,51,201,30,5,1,1,160,52,6,2,5,160,53,202,7,1,1,160,54,8,2,4,236,55,203,9,2,0,160,56,250,10,2,4,161,57,204,11,1,0,130,48,12,2,4,61,37,205,13,2,7,204,160,206,16,66,3,0,0,92,17,66,3,0,0,124,18,65,0,101,69,21,196,0,122,44,90,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,25,66,3,0,0,39,26,2,0,163,47,246,27,2,0,132,40,158,30,66,0,97,65,60,33,66,3,0,0,91,34,66,3,0,0,93,39,2,0,147,34,36,40,2,0,245,33,225,41,1,2,59,202,43,2,1,160,41,207,44,196,0,121,21,89,21,62,21,25,21,0,21,45,66,3,0,0,35,46,66,0,99,67,38,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,51,1,1,0,63,52,2,1,0,58,42,53,3,4,45,95,0,31,57,0,0,32,86,2,0,38,42,60,0,2,2,3,0,0,126,3,2,6,150,0,200,4,0,0,231,5,2,6,159,0,202,6,2,6,156,0,203,7,2,6,167,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,206,200,209,18,66,3,0,0,170,19,65,0,114,82,20,65,0,116,84,31,66,0,115,83,208,32,66,0,100,68,209,37,66,3,0,0,136,38,66,0,108,76,157,41,1,3,0,203,43,0,0,229,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,18,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,39,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,2,2,3,0,0,126,3,2,6,140,0,200,4,0,0,168,5,0,0,135,6,0,0,159,7,0,0,145,8,2,2,152,0,96,9,2,7,0,0,160,10,2,7,0,0,203,12,2,7,0,0,204,13,2,7,203,200,160,19,65,0,114,82,20,65,0,116,84,27,2,7,0,0,160,31,65,0,115,83,32,65,0,100,68,38,65,0,108,76,40,0,0,173,41,1,3,0,202,43,2,6,164,0,160,0,118,19,99,135,100,131,101,136,108,140,110,164,114,169,115,168,116,159,122,145,67,128,68,133,69,137,76,156,78,165,82,158,83,155,84,134,90,146,32,118,94,3,111,147,79,167,32,94,248,3,117,150,85,166,32,248,39,17,97,160,101,130,105,161,108,141,111,162,114,170,117,163,121,152,65,143,69,144,73,139,76,138,79,149,82,171,85,151,89,157,32,39,34,7,97,132,111,148,117,129,65,142,79,153,85,154,32,34,0,155,68,2,29,0,0,83,80,44,0,0,69,83,44,172,0,83,80,44,172,0,69,83,44,173,0,83,80,44,173,0,69,83,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,90,3,64,1,77,1,0,0,82,3,0,0,77,1,0,0,181,1,0,0,245,0,0,0,55,117,196,1,245,1,0,0,0,8,0,64,0,0,0,0,4,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,2,2,3,0,0,124,3,2,1,0,34,64,4,2,1,0,250,35,5,2,7,0,0,201,7,2,1,0,38,170,8,1,1,0,47,9,1,1,0,40,10,1,1,0,41,11,1,1,0,61,12,1,0,39,63,13,1,0,173,168,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,2,3,200,202,91,27,2,0,43,42,93,30,65,0,97,65,39,66,0,164,165,126,40,2,3,203,204,123,41,3,0,167,166,92,28,43,66,0,135,128,125,49,65,0,110,78,51,2,1,0,59,60,52,2,1,0,58,62,53,3,0,45,95,92,31,57,0,0,32,86,1,0,60,62,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,7,97,160,101,130,105,161,111,162,117,163,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,5,2,3,0,0,126,6,2,3,0,0,213,18,66,3,0,0,213,26,1,3,0,160,38,4,11,0,0,242,0,246,40,1,3,201,202,44,2,3,0,0,174,45,2,3,0,0,175,0,96,7,97,133,101,138,111,149,65,183,69,212,79,227,32,96,39,9,101,130,105,161,111,162,117,163,69,144,73,214,79,224,85,233,32,39,34,5,105,139,117,129,73,216,85,154,32,34,0,204,39,4,29,0,0,83,85,44,0,0,83,86,44,0,0,70,73,44,153,0,83,85,44,153,0,83,86,44,153,0,70,73,7,4,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,90,3,122,1,135,1,0,0,91,3,2,2,37,2,0,0,82,3,0,0,135,1,0,0,181,1,33,1,43,1,0,0,48,117,174,2,0,0,0,0,48,117,102,3,0,0,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,2,1,0,34,64,4,2,3,0,0,156,5,2,1,0,207,36,7,1,1,0,38,8,2,1,0,47,123,9,4,9,0,40,91,0,27,10,4,9,0,41,93,0,29,11,2,1,0,61,125,12,4,8,43,63,92,0,28,13,2,3,203,200,124,16,66,3,0,0,64,18,65,0,101,69,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,65,0,134,143,27,4,15,204,202,201,0,30,30,65,0,97,65,39,65,0,148,153,40,65,0,132,142,41,1,0,245,171,43,1,0,39,42,46,65,0,99,67,49,65,0,110,78,50,66,3,0,0,230,51,2,1,0,59,60,52,2,1,0,58,62,53,4,12,45,95,0,0,31,57,0,0,32,86,2,0,60,62,124,0,5,1,3,0,160,41,0,0,21,0,96,6,97,133,101,138,105,141,111,149,117,151,32,96,126,3,110,164,78,165,32,126,94,6,97,131,101,136,105,140,111,147,117,150,32,94,39,9,97,160,99,135,101,130,105,161,111,162,117,163,67,128,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,0,6,2,3,0,0,213,18,66,3,0,0,213,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,239,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,0,6,2,3,0,0,213,18,66,3,0,0,213,31,65,0,115,83,40,66,7,0,0,205,41,1,3,0,160,44,66,0,122,90,175,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,15,97,160,99,135,101,130,105,161,111,162,117,163,121,236,65,181,67,128,69,144,73,214,79,224,85,233,89,237,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,118,5,115,249,122,247,83,221,90,239,32,118,0,4,2,7,0,0,160,6,2,3,0,0,213,9,3,7,0,0,0,174,10,3,7,0,0,0,175,13,1,3,160,160,16,67,3,0,0,131,182,18,66,3,0,0,213,20,67,3,0,0,171,151,23,67,3,0,0,139,216,24,67,3,0,0,228,229,27,2,7,160,160,160,30,67,3,0,0,160,181,31,67,3,0,0,170,150,32,67,3,0,0,159,141,33,67,3,0,0,144,128,34,67,3,0,0,161,162,35,67,3,0,0,133,130,37,67,3,0,0,166,167,39,67,3,0,0,155,157,40,67,3,0,0,145,146,41,1,3,0,160,44,67,3,0,0,172,152,46,67,3,0,0,158,140,47,67,3,0,0,137,138,48,67,3,0,0,135,136,49,67,3,0,0,169,149,54,5,63,0,0,0,0,0,125,0,4,2,7,0,0,160,6,2,3,0,0,213,9,3,7,0,0,0,174,10,3,7,0,0,0,175,13,1,3,160,160,16,67,0,160,181,113,81,17,67,0,170,150,119,87,18,66,3,0,0,213,21,67,0,171,151,121,89,23,67,3,0,0,139,216,24,67,3,0,0,228,229,27,66,4,169,149,160,30,67,3,0,0,131,182,34,67,3,0,0,161,162,35,67,3,0,0,144,128,37,67,3,0,0,166,167,39,67,3,0,0,155,157,40,67,3,0,0,145,146,41,1,3,0,160,42,5,63,0,0,0,0,0,124,43,67,0,159,141,39,42,44,67,3,0,0,135,136,45,67,0,158,140,120,88,86,67,0,172,152,137,138,0,214,184,3,9,0,0,85,75,44,166,0,85,75,8,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,90,3,231,0,0,0,0,0,82,3,0,0,0,0,0,0,181,1,196,0,0,0,0,0,49,117,132,1,254,1,0,0,91,3,238,0,67,1,0,0,85,3,4,3,97,3,0,0,84,3,167,2,219,2,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,3,0,0,124,3,1,1,0,34,4,1,1,0,156,18,67,0,101,69,130,144,22,67,0,117,85,163,233,23,67,0,105,73,161,214,24,195,0,111,24,79,24,162,24,224,0,30,67,0,97,65,160,181,40,1,1,0,64,41,2,1,0,170,221,43,1,0,35,126,53,4,11,0,0,92,0,28,86,4,12,92,124,0,0,28,0,22,67,15,0,0,0,160,23,67,15,0,0,0,160,24,67,15,0,0,0,160,30,67,15,0,0,0,160,41,2,7,0,0,160,0,5,2,3,0,0,213,0,2,2,3,0,0,173,3,1,3,0,202,5,2,3,0,0,213,7,1,3,0,200,16,67,3,0,0,145,146,21,65,0,121,89,25,67,3,0,0,171,172,41,2,3,201,0,124,46,67,3,0,0,135,128,49,67,3,0,0,164,165,51,2,3,0,0,174,52,2,3,0,0,175,53,3,7,0,0,0,168,57,0,0,32,0,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,34,11,101,137,105,139,111,148,117,129,121,152,69,211,73,216,79,153,85,154,89,243,32,34,0,3,1,3,0,201,5,2,3,0,0,213,7,2,3,0,202,94,17,67,0,119,87,134,143,20,65,0,116,84,21,67,0,121,89,236,237,25,65,0,112,80,31,65,0,115,83,32,65,0,100,68,33,65,0,102,70,34,65,0,103,71,40,0,1,203,41,0,1,200,43,1,3,0,204,44,67,3,0,0,249,250,46,67,0,99,67,135,128,48,65,0,98,66,49,67,3,0,0,164,165,50,65,0,109,77,51,2,3,0,0,174,52,2,3,0,0,175,57,0,0,32,0,96,15,97,133,101,138,105,141,111,149,117,151,119,145,121,198,65,183,69,212,73,222,79,227,85,235,87,146,89,199,32,96,34,15,97,132,101,137,105,139,111,148,117,129,119,166,121,152,65,142,69,211,73,216,79,153,85,154,87,167,89,243,32,34,94,15,97,131,101,136,105,140,111,147,117,150,119,155,121,228,65,182,69,210,73,215,79,226,85,234,87,157,89,229,32,94,39,15,97,160,101,130,105,161,111,162,117,163,119,134,121,236,65,181,69,144,73,214,79,224,85,233,87,143,89,237,32,39,126,19,98,242,99,189,100,208,102,159,103,158,109,172,112,168,115,244,116,231,66,169,67,184,68,209,70,190,71,246,77,251,80,173,83,225,84,232,32,126,0,4,1,3,0,160,5,2,3,0,0,170,31,65,0,115,83,38,65,0,108,76,41,2,7,200,160,160,44,65,0,122,90,45,65,0,120,88,46,65,0,99,67,49,65,0,110,78,57,0,0,32,0,45,19,97,165,99,134,101,169,108,136,110,228,111,162,115,152,120,171,122,190,65,164,67,143,69,168,76,157,78,227,79,224,83,151,88,141,90,189,32,45,0,3,1,3,0,202,7,1,3,0,201,22,67,3,0,0,237,236,23,67,15,0,0,160,160,24,67,12,111,79,160,160,30,67,15,0,0,160,160,31,65,0,115,83,34,67,0,103,71,229,228,35,67,0,104,72,232,231,36,65,0,106,74,41,2,3,200,160,124,44,67,3,0,0,190,189,46,67,0,99,67,145,146,49,66,3,0,0,243,57,0,0,32,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,19,99,134,101,136,103,155,104,169,105,140,106,159,111,147,115,199,117,150,67,143,69,210,71,157,72,168,73,215,74,172,79,226,83,198,85,234,32,94,34,5,101,137,105,139,69,211,73,216,32,34,0,252,127,4,4,168,0,85,75,8,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,90,3,11,1,0,0,0,0,82,3,0,0,0,0,0,0,181,1,238,0,0,0,0,0,49,117,226,1,119,2,0,0,91,3,18,1,137,1,0,0,85,3,32,3,155,3,0,0,84,3,232,3,81,4,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,3,0,0,251,3,2,1,0,34,253,4,2,1,0,156,252,5,2,3,0,0,172,6,2,3,0,0,171,7,2,1,0,38,243,8,1,1,0,39,9,1,1,0,40,10,2,1,0,41,241,11,2,1,0,35,248,12,2,3,0,0,95,13,1,0,170,238,26,1,0,64,96,27,4,8,91,123,126,0,27,39,1,1,0,43,40,4,8,58,42,94,0,30,41,4,8,92,221,124,0,28,43,4,12,93,125,0,0,29,50,66,3,0,0,230,57,0,0,32,86,4,12,124,95,0,0,31,0,2,2,7,0,0,160,4,2,7,0,0,160,7,2,7,0,0,160,13,1,3,0,160,41,1,3,0,160,0,18,66,3,0,0,213,0,2,3,7,0,0,0,173,3,1,3,0,202,5,2,7,0,0,160,6,2,7,0,0,160,7,2,7,0,0,160,8,1,3,0,203,18,66,0,101,69,213,21,65,0,121,89,22,65,0,117,85,23,65,0,105,73,24,67,0,111,79,171,172,26,1,3,0,201,30,67,0,97,65,145,146,40,2,7,0,0,200,41,1,3,0,160,46,67,3,0,0,135,128,49,67,3,0,0,164,165,51,2,3,0,0,174,52,2,3,0,0,175,53,2,3,0,0,168,0,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,34,11,101,137,105,139,111,148,117,129,121,152,69,211,73,216,79,153,85,154,89,243,32,34,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,0,2,2,7,0,0,160,3,2,3,0,201,253,5,2,7,0,0,160,7,2,7,0,0,160,8,1,3,0,203,11,1,3,0,202,13,1,3,0,204,17,65,0,119,87,18,66,0,101,69,213,20,65,0,116,84,21,67,0,121,89,249,250,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,25,65,0,112,80,26,1,3,0,200,30,65,0,97,65,31,65,0,115,83,32,65,0,100,68,33,65,0,102,70,34,65,0,103,71,46,67,0,99,67,135,128,48,65,0,98,66,49,67,3,0,0,164,165,50,65,0,109,77,51,2,3,0,0,174,52,2,3,0,0,175,0,96,15,97,133,101,138,105,141,111,149,117,151,119,145,121,198,65,183,69,212,73,222,79,227,85,235,87,146,89,199,32,96,34,15,97,132,101,137,105,139,111,148,117,129,119,166,121,152,65,142,69,211,73,216,79,153,85,154,87,167,89,243,32,34,35,15,97,131,101,136,105,140,111,147,117,150,119,155,121,228,65,182,69,210,73,215,79,226,85,234,87,157,89,229,32,35,39,15,97,160,101,130,105,161,111,162,117,163,119,134,121,236,65,181,69,144,73,214,79,224,85,233,87,143,89,237,32,39,238,19,98,242,99,189,100,208,102,159,103,158,109,172,112,168,115,244,116,231,66,169,67,184,68,209,70,190,71,246,77,251,80,173,83,225,84,232,32,238,0,2,2,7,0,0,160,3,1,3,0,200,5,2,7,0,0,160,7,2,7,0,0,160,10,2,7,0,0,160,13,16,0,0,18,67,0,101,69,130,144,22,67,0,117,85,237,236,23,65,0,105,73,24,65,0,111,79,26,1,3,0,201,30,65,0,97,65,31,65,0,115,83,34,67,0,103,71,229,228,35,67,0,104,72,232,231,36,65,0,106,74,40,2,7,0,0,202,41,1,1,0,124,44,67,3,0,0,190,189,46,67,0,99,67,145,146,49,66,3,0,0,243,0,34,5,101,137,105,139,69,211,73,216,32,34,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,94,19,99,134,101,136,103,155,104,169,105,140,106,159,111,147,115,199,117,150,67,143,69,210,71,157,72,168,73,215,74,172,79,226,83,198,85,234,32,94,0,2,2,7,0,0,160,3,2,7,0,0,160,4,2,7,0,160,160,5,2,7,0,0,160,6,2,7,0,0,160,7,2,7,0,0,160,10,2,7,0,0,160,13,1,3,200,160,18,66,0,101,69,170,24,65,0,111,79,30,65,0,97,65,31,65,0,115,83,38,65,0,108,76,41,1,3,0,160,44,65,0,122,90,45,65,0,120,88,46,65,0,99,67,49,65,0,110,78,50,66,7,0,0,160,0,96,19,97,165,99,134,101,169,108,136,110,228,111,162,115,152,120,171,122,190,65,164,67,143,69,168,76,157,78,227,79,224,83,151,88,141,90,189,32,96,0,136,166,2,9,0,0,85,83,44,103,0,85,83,8,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,90,3,130,0,0,0,0,0,91,3,219,1,55,2,0,0,85,3,143,0,206,0,0,0,82,3,0,0,0,0,0,0,181,1,0,0,0,0,0,0,69,117,3,1,8,1,0,0,71,117,33,1,102,1,0,0,0,8,0,64,0,0,0,0,0,72,0,0,0,0,0,0,18,65,0,101,69,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,30,65,0,97,65,57,0,0,32,0,6,2,3,0,0,213,18,2,3,0,0,213,0,7,1,3,0,200,18,3,3,0,0,130,144,22,3,3,0,0,237,236,31,65,0,115,83,34,65,0,103,71,35,65,0,104,72,36,65,0,106,74,40,1,3,0,201,41,3,3,0,0,138,212,46,65,0,99,67,49,2,3,0,0,243,0,94,19,99,134,103,155,104,169,106,159,115,199,101,136,105,140,111,147,117,150,67,143,71,157,72,168,74,172,83,198,69,210,73,215,79,226,85,234,32,94,34,5,101,137,105,139,69,211,73,216,32,34,0,41,0,1,200,0,96,11,97,238,101,208,105,246,111,250,117,252,65,239,69,209,73,247,79,251,85,253,32,96,0,7,1,3,0,202,18,2,3,0,0,213,20,65,0,116,84,24,3,3,0,0,171,172,30,3,3,0,0,145,146,31,65,0,115,83,32,65,0,100,68,38,65,0,108,76,40,1,3,203,204,41,1,3,200,201,46,3,3,0,0,135,128,49,66,0,110,78,242,0,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,126,3,110,189,78,190,32,126,94,21,97,131,101,136,105,140,111,147,117,150,115,249,100,208,108,155,110,158,116,231,65,182,69,210,73,215,79,226,85,234,83,221,68,209,76,157,78,159,84,232,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,34,7,101,137,105,139,111,148,69,211,73,216,79,153,32,34,0,2,2,3,0,0,173,6,2,3,0,0,213,7,1,3,0,200,18,3,3,0,0,145,146,21,65,0,121,89,24,3,3,0,0,171,172,30,3,3,0,0,134,143,31,2,3,0,0,225,40,1,3,201,202,41,1,3,203,204,46,3,3,0,0,135,128,49,67,0,110,78,164,165,51,2,3,0,0,174,52,2,3,0,0,175,53,2,3,0,0,168,0,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,39,11,97,160,101,130,105,161,111,162,117,163,65,181,69,144,73,214,79,224,85,233,32,39,34,13,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,89,243,32,34,96,7,97,133,101,138,117,151,65,183,69,212,85,235,32,96,126,3,110,164,78,165,32,126,0,60,240,3,39,0,0,89,85,44,0,0,66,65,44,0,0,72,82,44,0,0,83,73,44,234,0,89,85,44,234,0,66,65,44,234,0,72,82,44,234,0,83,73,5,3,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,84,3,242,1,121,2,0,0,113,0,61,1,147,1,0,0,90,3,58,3,65,3,0,0,82,3,0,0,65,3,0,0,0,8,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81923);
  /* memory initializer */ allocate([2,2,7,0,0,200,3,1,1,0,34,4,3,7,0,0,201,30,6,2,7,0,0,202,7,1,1,0,38,8,2,5,0,47,203,9,2,1,0,40,250,10,2,5,0,41,204,11,1,1,0,61,12,2,4,39,63,205,13,2,4,43,42,206,16,66,3,0,0,92,17,66,3,0,0,124,18,65,0,101,69,21,196,0,122,44,90,44,0,44,26,44,0,44,22,65,0,117,85,23,65,0,105,73,24,65,0,111,79,26,66,3,160,160,246,27,66,3,160,160,158,30,65,0,97,65,33,66,3,0,0,91,34,66,3,0,0,93,39,67,7,160,160,0,29,40,66,3,160,160,225,41,1,3,206,205,43,66,3,160,160,207,44,196,0,121,21,89,21,0,21,25,21,0,21,46,65,0,99,67,47,66,3,0,0,64,48,66,3,0,0,123,49,66,0,110,78,125,50,66,3,0,0,245,51,2,1,0,59,60,52,2,1,0,58,62,53,3,4,45,95,0,31,57,0,0,32,86,1,0,60,62,0,2,2,3,0,0,126,3,2,7,0,0,200,6,2,3,0,0,248,8,2,7,0,0,202,10,2,7,0,0,203,12,2,7,0,0,204,13,2,7,0,0,205,26,65,0,164,165,27,66,4,155,157,160,31,65,0,115,83,39,65,0,145,146,40,65,0,134,143,41,1,3,205,204,43,66,4,166,167,160,50,66,3,0,0,21,0,118,7,99,145,115,164,122,166,67,146,83,165,90,167,32,118,94,6,97,131,101,136,105,140,111,147,117,150,32,94,96,6,97,133,101,138,105,141,111,149,117,151,32,96,39,9,97,160,99,134,101,130,105,161,111,162,117,163,67,143,69,144,32,39,34,10,97,132,101,137,105,139,111,148,117,129,121,152,65,142,79,153,85,154,32,34,44,3,99,135,67,128,32,44,0,2,2,3,0,0,126,3,2,7,0,0,200,5,2,7,0,0,202,6,2,7,0,0,203,7,2,7,0,0,204,8,2,3,0,0,96,9,2,7,0,0,205,10,2,7,0,0,206,11,2,7,0,0,207,12,2,7,0,0,208,13,2,7,0,0,209,18,66,3,0,0,170,19,65,0,114,82,20,65,0,116,84,26,65,0,231,230,27,65,0,208,209,31,65,0,115,83,32,65,0,100,68,37,66,3,0,0,136,38,66,0,108,76,157,39,65,0,159,172,40,65,0,134,143,41,1,3,209,208,43,65,0,167,166,0,243,19,99,159,100,212,101,216,108,150,110,229,114,253,115,231,116,156,122,167,67,172,68,210,69,183,76,149,78,213,82,252,83,230,84,155,90,166,32,243,94,7,97,131,105,140,111,147,65,182,73,215,79,226,32,94,244,3,97,199,65,198,32,244,248,3,117,133,85,222,32,248,242,5,97,165,101,169,65,164,69,168,32,242,250,3,122,190,90,189,32,250,239,25,97,160,99,134,101,130,105,161,108,146,110,228,111,162,114,234,115,152,117,163,121,236,122,171,65,181,67,143,69,144,73,214,76,145,78,227,79,224,82,232,83,151,85,233,89,237,90,141,32,239,241,5,111,139,117,251,79,138,85,235,32,241,249,9,97,132,101,137,111,148,117,129,65,142,69,211,79,153,85,154,32,249,247,7,99,135,115,173,116,238,67,128,83,184,84,221,32,247,0,18,66,3,0,0,213,0,126,7,97,198,110,164,111,228,65,199,78,165,79,229,32,126,94,11,97,131,101,136,105,140,111,147,117,150,65,182,69,210,73,215,79,226,85,234,32,94,248,3,97,134,65,143,32,248,96,11,97,133,101,138,105,141,111,149,117,151,65,183,69,212,73,222,79,227,85,235,32,96,239,13,97,160,101,130,105,161,111,162,117,163,121,236,65,181,69,144,73,214,79,224,85,233,89,237,32,239,249,12,97,132,101,137,105,139,111,148,117,129,121,152,65,142,69,211,73,216,79,153,85,154,32,249,247,3,99,135,67,128,32,247,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,129,165,129,129,189,153,129,129,126,0,0,0,0,0,0,126,255,219,255,255,195,231,255,255,126,0,0,0,0,0,0,0,0,108,254,254,254,254,124,56,16,0,0,0,0,0,0,0,0,16,56,124,254,124,56,16,0,0,0,0,0,0,0,0,24,60,60,231,231,231,24,24,60,0,0,0,0,0,0,0,24,60,126,255,255,126,24,24,60,0,0,0,0,0,0,0,0,0,0,24,60,60,24,0,0,0,0,0,0,255,255,255,255,255,255,231,195,195,231,255,255,255,255,255,255,0,0,0,0,0,60,102,66,66,102,60,0,0,0,0,0,255,255,255,255,255,195,153,189,189,153,195,255,255,255,255,255,0,0,30,14,26,50,120,204,204,204,204,120,0,0,0,0,0,0,60,102,102,102,102,60,24,126,24,24,0,0,0,0,0,0,63,51,63,48,48,48,48,112,240,224,0,0,0,0,0,0,127,99,127,99,99,99,99,103,231,230,192,0,0,0,0,0,0,24,24,219,60,231,60,219,24,24,0,0,0,0,0,128,192,224,240,248,254,248,240,224,192,128,0,0,0,0,0,2,6,14,30,62,254,62,30,14,6,2,0,0,0,0,0,0,24,60,126,24,24,24,126,60,24,0,0,0,0,0,0,0,102,102,102,102,102,102,102,0,102,102,0,0,0,0,0,0,127,219,219,219,123,27,27,27,27,27,0,0,0,0,0,124,198,96,56,108,198,198,108,56,12,198,124,0,0,0,0,0,0,0,0,0,0,0,254,254,254,254,0,0,0,0,0,0,24,60,126,24,24,24,126,60,24,126,0,0,0,0,0,0,24,60,126,24,24,24,24,24,24,24,0,0,0,0,0,0,24,24,24,24,24,24,24,126,60,24,0,0,0,0,0,0,0,0,0,24,12,254,12,24,0,0,0,0,0,0,0,0,0,0,0,48,96,254,96,48,0,0,0,0,0,0,0,0,0,0,0,0,192,192,192,254,0,0,0,0,0,0,0,0,0,0,0,36,102,255,102,36,0,0,0,0,0,0,0,0,0,0,16,56,56,124,124,254,254,0,0,0,0,0,0,0,0,0,254,254,124,124,56,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,60,60,60,24,24,24,0,24,24,0,0,0,0,0,102,102,102,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,254,108,108,108,254,108,108,0,0,0,0,24,24,124,198,194,192,124,6,6,134,198,124,24,24,0,0,0,0,0,0,194,198,12,24,48,96,198,134,0,0,0,0,0,0,56,108,108,56,118,220,204,204,204,118,0,0,0,0,0,48,48,48,96,0,0,0,0,0,0,0,0,0,0,0,0,0,12,24,48,48,48,48,48,48,24,12,0,0,0,0,0,0,48,24,12,12,12,12,12,12,24,48,0,0,0,0,0,0,0,0,0,102,60,255,60,102,0,0,0,0,0,0,0,0,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,48,0,0,0,0,0,0,0,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0,0,0,0,0,2,6,12,24,48,96,192,128,0,0,0,0,0,0,60,102,195,195,219,219,195,195,102,60,0,0,0,0,0,0,24,56,120,24,24,24,24,24,24,126,0,0,0,0,0,0,124,198,6,12,24,48,96,192,198,254,0,0,0,0,0,0,124,198,6,6,60,6,6,6,198,124,0,0,0,0,0,0,12,28,60,108,204,254,12,12,12,30,0,0,0,0,0,0,254,192,192,192,252,6,6,6,198,124,0,0,0,0,0,0,56,96,192,192,252,198,198,198,198,124,0,0,0,0,0,0,254,198,6,6,12,24,48,48,48,48,0,0,0,0,0,0,124,198,198,198,124,198,198,198,198,124,0,0,0,0,0,0,124,198,198,198,126,6,6,6,12,120,0,0,0,0,0,0,0,0,24,24,0,0,0,24,24,0,0,0,0,0,0,0,0,0,24,24,0,0,0,24,24,48,0,0,0,0,0,0,0,6,12,24,48,96,48,24,12,6,0,0,0,0,0,0,0,0,0,126,0,0,126,0,0,0,0,0,0,0,0,0,0,96,48,24,12,6,12,24,48,96,0,0,0,0,0,0,124,198,198,12,24,24,24,0,24,24,0,0,0,0,0,0,0,124,198,198,222,222,222,220,192,124,0,0,0,0,0,0,16,56,108,198,198,254,198,198,198,198,0,0,0,0,0,0,252,102,102,102,124,102,102,102,102,252,0,0,0,0,0,0,60,102,194,192,192,192,192,194,102,60,0,0,0,0,0,0,248,108,102,102,102,102,102,102,108,248,0,0,0,0,0,0,254,102,98,104,120,104,96,98,102,254,0,0,0,0,0,0,254,102,98,104,120,104,96,96,96,240,0,0,0,0,0,0,60,102,194,192,192,222,198,198,102,58,0,0,0,0,0,0,198,198,198,198,254,198,198,198,198,198,0,0,0,0,0,0,60,24,24,24,24,24,24,24,24,60,0,0,0,0,0,0,30,12,12,12,12,12,204,204,204,120,0,0,0,0,0,0,230,102,102,108,120,120,108,102,102,230,0,0,0,0,0,0,240,96,96,96,96,96,96,98,102,254,0,0,0,0,0,0,195,231,255,255,219,195,195,195,195,195,0,0,0,0,0,0,198,230,246,254,222,206,198,198,198,198,0,0,0,0,0,0,124,198,198,198,198,198,198,198,198,124,0,0,0,0,0,0,252,102,102,102,124,96,96,96,96,240,0,0,0,0,0,0,124,198,198,198,198,198,198,214,222,124,12,14,0,0,0,0,252,102,102,102,124,108,102,102,102,230,0,0,0,0,0,0,124,198,198,96,56,12,6,198,198,124,0,0,0,0,0,0,255,219,153,24,24,24,24,24,24,60,0,0,0,0,0,0,198,198,198,198,198,198,198,198,198,124,0,0,0,0,0,0,195,195,195,195,195,195,195,102,60,24,0,0,0,0,0,0,195,195,195,195,195,219,219,255,102,102,0,0,0,0,0,0,195,195,102,60,24,24,60,102,195,195,0,0,0,0,0,0,195,195,195,102,60,24,24,24,24,60,0,0,0,0,0,0,255,195,134,12,24,48,96,193,195,255,0,0,0,0,0,0,60,48,48,48,48,48,48,48,48,60,0,0,0,0,0,0,0,128,192,224,112,56,28,14,6,2,0,0,0,0,0,0,60,12,12,12,12,12,12,12,12,60,0,0,0,0,16,56,108,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,48,48,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,12,124,204,204,204,118,0,0,0,0,0,0,224,96,96,120,108,102,102,102,102,124,0,0,0,0,0,0,0,0,0,124,198,192,192,192,198,124,0,0,0,0,0,0,28,12,12,60,108,204,204,204,204,118,0,0,0,0,0,0,0,0,0,124,198,254,192,192,198,124,0,0,0,0,0,0,56,108,100,96,240,96,96,96,96,240,0,0,0,0,0,0,0,0,0,118,204,204,204,204,204,124,12,204,120,0,0,0,224,96,96,108,118,102,102,102,102,230,0,0,0,0,0,0,24,24,0,56,24,24,24,24,24,60,0,0,0,0,0,0,6,6,0,14,6,6,6,6,6,6,102,102,60,0,0,0,224,96,96,102,108,120,120,108,102,230,0,0,0,0,0,0,56,24,24,24,24,24,24,24,24,60,0,0,0,0,0,0,0,0,0,230,255,219,219,219,219,219,0,0,0,0,0,0,0,0,0,220,102,102,102,102,102,102,0,0,0,0,0,0,0,0,0,124,198,198,198,198,198,124,0,0,0,0,0,0,0,0,0,220,102,102,102,102,102,124,96,96,240,0,0,0,0,0,0,118,204,204,204,204,204,124,12,12,30,0,0,0,0,0,0,220,118,102,96,96,96,240,0,0,0,0,0,0,0,0,0,124,198,96,56,12,198,124,0,0,0,0,0,0,16,48,48,252,48,48,48,48,54,28,0,0,0,0,0,0,0,0,0,204,204,204,204,204,204,118,0,0,0,0,0,0,0,0,0,195,195,195,195,102,60,24,0,0,0,0,0,0,0,0,0,195,195,195,219,219,255,102,0,0,0,0,0,0,0,0,0,195,102,60,24,60,102,195,0,0,0,0,0,0,0,0,0,198,198,198,198,198,198,126,6,12,248,0,0,0,0,0,0,254,204,24,48,96,198,254,0,0,0,0,0,0,14,24,24,24,112,24,24,24,24,14,0,0,0,0,0,0,24,24,24,24,0,24,24,24,24,24,0,0,0,0,0,0,112,24,24,24,14,24,24,24,24,112,0,0,0,0,0,0,118,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,56,108,198,198,198,254,0,0,0,0,0,0,0,60,102,194,192,192,192,194,102,60,12,6,124,0,0,0,0,204,0,0,204,204,204,204,204,204,118,0,0,0,0,0,12,24,48,0,124,198,254,192,192,198,124,0,0,0,0,0,16,56,108,0,120,12,124,204,204,204,118,0,0,0,0,0,0,204,0,0,120,12,124,204,204,204,118,0,0,0,0,0,96,48,24,0,120,12,124,204,204,204,118,0,0,0,0,0,56,108,56,0,120,12,124,204,204,204,118,0,0,0,0,0,0,0,0,60,102,96,96,102,60,12,6,60,0,0,0,0,16,56,108,0,124,198,254,192,192,198,124,0,0,0,0,0,0,198,0,0,124,198,254,192,192,198,124,0,0,0,0,0,96,48,24,0,124,198,254,192,192,198,124,0,0,0,0,0,0,102,0,0,56,24,24,24,24,24,60,0,0,0,0,0,24,60,102,0,56,24,24,24,24,24,60,0,0,0,0,0,96,48,24,0,56,24,24,24,24,24,60,0,0,0,0,0,198,0,16,56,108,198,198,254,198,198,198,0,0,0,0,56,108,56,0,56,108,198,198,254,198,198,198,0,0,0,0,24,48,96,0,254,102,96,124,96,96,102,254,0,0,0,0,0,0,0,0,0,110,59,27,126,216,220,119,0,0,0,0,0,0,62,108,204,204,254,204,204,204,204,206,0,0,0,0,0,16,56,108,0,124,198,198,198,198,198,124,0,0,0,0,0,0,198,0,0,124,198,198,198,198,198,124,0,0,0,0,0,96,48,24,0,124,198,198,198,198,198,124,0,0,0,0,0,48,120,204,0,204,204,204,204,204,204,118,0,0,0,0,0,96,48,24,0,204,204,204,204,204,204,118,0,0,0,0,0,0,198,0,0,198,198,198,198,198,198,126,6,12,120,0,0,198,0,124,198,198,198,198,198,198,198,124,0,0,0,0,0,198,0,198,198,198,198,198,198,198,198,124,0,0,0,0,0,24,24,126,195,192,192,192,195,126,24,24,0,0,0,0,0,56,108,100,96,240,96,96,96,96,230,252,0,0,0,0,0,0,195,102,60,24,255,24,255,24,24,24,0,0,0,0,0,252,102,102,124,98,102,111,102,102,102,243,0,0,0,0,0,14,27,24,24,24,126,24,24,24,24,24,216,112,0,0,0,24,48,96,0,120,12,124,204,204,204,118,0,0,0,0,0,12,24,48,0,56,24,24,24,24,24,60,0,0,0,0,0,24,48,96,0,124,198,198,198,198,198,124,0,0,0,0,0,24,48,96,0,204,204,204,204,204,204,118,0,0,0,0,0,0,118,220,0,220,102,102,102,102,102,102,0,0,0,0,118,220,0,198,230,246,254,222,206,198,198,198,0,0,0,0,0,60,108,108,62,0,126,0,0,0,0,0,0,0,0,0,0,56,108,108,56,0,124,0,0,0,0,0,0,0,0,0,0,0,48,48,0,48,48,96,192,198,198,124,0,0,0,0,0,0,0,0,0,0,254,192,192,192,192,0,0,0,0,0,0,0,0,0,0,0,254,6,6,6,6,0,0,0,0,0,0,192,192,194,198,204,24,48,96,206,155,6,12,31,0,0,0,192,192,194,198,204,24,48,102,206,150,62,6,6,0,0,0,0,24,24,0,24,24,24,60,60,60,24,0,0,0,0,0,0,0,0,0,54,108,216,108,54,0,0,0,0,0,0,0,0,0,0,0,216,108,54,108,216,0,0,0,0,0,0,17,68,17,68,17,68,17,68,17,68,17,68,17,68,17,68,85,170,85,170,85,170,85,170,85,170,85,170,85,170,85,170,221,119,221,119,221,119,221,119,221,119,221,119,221,119,221,119,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,248,24,24,24,24,24,24,24,24,24,24,24,24,24,248,24,248,24,24,24,24,24,24,24,24,54,54,54,54,54,54,54,246,54,54,54,54,54,54,54,54,0,0,0,0,0,0,0,254,54,54,54,54,54,54,54,54,0,0,0,0,0,248,24,248,24,24,24,24,24,24,24,24,54,54,54,54,54,246,6,246,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,254,6,246,54,54,54,54,54,54,54,54,54,54,54,54,54,246,6,254,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,254,0,0,0,0,0,0,0,0,24,24,24,24,24,248,24,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,31,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,31,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,255,24,24,24,24,24,24,24,24,24,24,24,24,24,31,24,31,24,24,24,24,24,24,24,24,54,54,54,54,54,54,54,55,54,54,54,54,54,54,54,54,54,54,54,54,54,55,48,63,0,0,0,0,0,0,0,0,0,0,0,0,0,63,48,55,54,54,54,54,54,54,54,54,54,54,54,54,54,247,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,247,54,54,54,54,54,54,54,54,54,54,54,54,54,55,48,55,54,54,54,54,54,54,54,54,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,54,54,54,54,54,247,0,247,54,54,54,54,54,54,54,54,24,24,24,24,24,255,0,255,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,255,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,63,0,0,0,0,0,0,0,0,24,24,24,24,24,31,24,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,24,31,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,63,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,255,54,54,54,54,54,54,54,54,24,24,24,24,24,255,24,255,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,24,24,24,24,24,24,24,24,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,220,216,216,216,220,118,0,0,0,0,0,0,120,204,204,204,216,204,198,198,198,204,0,0,0,0,0,0,254,198,198,192,192,192,192,192,192,192,0,0,0,0,0,0,0,0,254,108,108,108,108,108,108,108,0,0,0,0,0,0,0,254,198,96,48,24,48,96,198,254,0,0,0,0,0,0,0,0,0,126,216,216,216,216,216,112,0,0,0,0,0,0,0,0,102,102,102,102,102,124,96,96,192,0,0,0,0,0,0,0,118,220,24,24,24,24,24,24,0,0,0,0,0,0,0,126,24,60,102,102,102,60,24,126,0,0,0,0,0,0,0,56,108,198,198,254,198,198,108,56,0,0,0,0,0,0,56,108,198,198,198,108,108,108,108,238,0,0,0,0,0,0,30,48,24,12,62,102,102,102,102,60,0,0,0,0,0,0,0,0,0,126,219,219,219,126,0,0,0,0,0,0,0,0,0,3,6,126,219,219,243,126,96,192,0,0,0,0,0,0,28,48,96,96,124,96,96,96,48,28,0,0,0,0,0,0,0,124,198,198,198,198,198,198,198,198,0,0,0,0,0,0,0,0,254,0,0,254,0,0,254,0,0,0,0,0,0,0,0,0,24,24,126,24,24,0,0,255,0,0,0,0,0,0,0,48,24,12,6,12,24,48,0,126,0,0,0,0,0,0,0,12,24,48,96,48,24,12,0,126,0,0,0,0,0,0,14,27,27,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,216,216,216,112,0,0,0,0,0,0,0,0,24,24,0,126,0,24,24,0,0,0,0,0,0,0,0,0,0,118,220,0,118,220,0,0,0,0,0,0,0,56,108,108,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,15,12,12,12,12,12,236,108,108,60,28,0,0,0,0,0,216,108,108,108,108,108,0,0,0,0,0,0,0,0,0,0,112,216,48,96,200,248,0,0,0,0,0,0,0,0,0,0,0,0,0,124,124,124,124,124,124,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,129,165,129,129,189,153,129,126,0,0,0,0,0,126,255,219,255,255,195,231,255,126,0,0,0,0,0,0,108,254,254,254,254,124,56,16,0,0,0,0,0,0,16,56,124,254,124,56,16,0,0,0,0,0,0,24,60,60,231,231,231,24,24,60,0,0,0,0,0,24,60,126,255,255,126,24,24,60,0,0,0,0,0,0,0,0,24,60,60,24,0,0,0,0,0,255,255,255,255,255,231,195,195,231,255,255,255,255,255,0,0,0,0,60,102,66,66,102,60,0,0,0,0,255,255,255,255,195,153,189,189,153,195,255,255,255,255,0,0,30,14,26,50,120,204,204,204,120,0,0,0,0,0,60,102,102,102,60,24,126,24,24,0,0,0,0,0,63,51,63,48,48,48,112,240,224,0,0,0,0,0,127,99,127,99,99,99,103,231,230,192,0,0,0,0,24,24,219,60,231,60,219,24,24,0,0,0,0,0,128,192,224,248,254,248,224,192,128,0,0,0,0,0,2,6,14,62,254,62,14,6,2,0,0,0,0,0,24,60,126,24,24,24,126,60,24,0,0,0,0,0,102,102,102,102,102,102,0,102,102,0,0,0,0,0,127,219,219,219,123,27,27,27,27,0,0,0,0,124,198,96,56,108,198,198,108,56,12,198,124,0,0,0,0,0,0,0,0,0,254,254,254,0,0,0,0,0,24,60,126,24,24,24,126,60,24,126,0,0,0,0,24,60,126,24,24,24,24,24,24,0,0,0,0,0,24,24,24,24,24,24,126,60,24,0,0,0,0,0,0,0,24,12,254,12,24,0,0,0,0,0,0,0,0,0,48,96,254,96,48,0,0,0,0,0,0,0,0,0,0,192,192,192,254,0,0,0,0,0,0,0,0,0,40,108,254,108,40,0,0,0,0,0,0,0,0,16,56,56,124,124,254,254,0,0,0,0,0,0,0,254,254,124,124,56,56,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,60,60,60,24,24,0,24,24,0,0,0,0,102,102,102,36,0,0,0,0,0,0,0,0,0,0,0,108,108,254,108,108,108,254,108,108,0,0,0,24,24,124,198,194,192,124,6,134,198,124,24,24,0,0,0,0,0,194,198,12,24,48,102,198,0,0,0,0,0,56,108,108,56,118,220,204,204,118,0,0,0,0,48,48,48,96,0,0,0,0,0,0,0,0,0,0,0,12,24,48,48,48,48,48,24,12,0,0,0,0,0,48,24,12,12,12,12,12,24,48,0,0,0,0,0,0,0,102,60,255,60,102,0,0,0,0,0,0,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,48,0,0,0,0,0,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0,0,2,6,12,24,48,96,192,128,0,0,0,0,0,0,124,198,206,222,246,230,198,198,124,0,0,0,0,0,24,56,120,24,24,24,24,24,126,0,0,0,0,0,124,198,6,12,24,48,96,198,254,0,0,0,0,0,124,198,6,6,60,6,6,198,124,0,0,0,0,0,12,28,60,108,204,254,12,12,30,0,0,0,0,0,254,192,192,192,252,6,6,198,124,0,0,0,0,0,56,96,192,192,252,198,198,198,124,0,0,0,0,0,254,198,6,12,24,48,48,48,48,0,0,0,0,0,124,198,198,198,124,198,198,198,124,0,0,0,0,0,124,198,198,198,126,6,6,12,120,0,0,0,0,0,0,24,24,0,0,0,24,24,0,0,0,0,0,0,0,24,24,0,0,0,24,24,48,0,0,0,0,0,6,12,24,48,96,48,24,12,6,0,0,0,0,0,0,0,0,126,0,0,126,0,0,0,0,0,0,0,96,48,24,12,6,12,24,48,96,0,0,0,0,0,124,198,198,12,24,24,0,24,24,0,0,0,0,0,124,198,198,222,222,222,220,192,124,0,0,0,0,0,16,56,108,198,198,254,198,198,198,0,0,0,0,0,252,102,102,102,124,102,102,102,252,0,0,0,0,0,60,102,194,192,192,192,194,102,60,0,0,0,0,0,248,108,102,102,102,102,102,108,248,0,0,0,0,0,254,102,98,104,120,104,98,102,254,0,0,0,0,0,254,102,98,104,120,104,96,96,240,0,0,0,0,0,60,102,194,192,192,222,198,102,58,0,0,0,0,0,198,198,198,198,254,198,198,198,198,0,0,0,0,0,60,24,24,24,24,24,24,24,60,0,0,0,0,0,30,12,12,12,12,12,204,204,120,0,0,0,0,0,230,102,108,108,120,108,108,102,230,0,0,0,0,0,240,96,96,96,96,96,98,102,254,0,0,0,0,0,198,238,254,254,214,198,198,198,198,0,0,0,0,0,198,230,246,254,222,206,198,198,198,0,0,0,0,0,56,108,198,198,198,198,198,108,56,0,0,0,0,0,252,102,102,102,124,96,96,96,240,0,0,0,0,0,124,198,198,198,198,214,222,124,12,14,0,0,0,0,252,102,102,102,124,108,102,102,230,0,0,0,0,0,124,198,198,96,56,12,198,198,124,0,0,0,0,0,126,126,90,24,24,24,24,24,60,0,0,0,0,0,198,198,198,198,198,198,198,198,124,0,0,0,0,0,198,198,198,198,198,198,108,56,16,0,0,0,0,0,198,198,198,198,214,214,254,124,108,0,0,0,0,0,198,198,108,56,56,56,108,198,198,0,0,0,0,0,102,102,102,102,60,24,24,24,60,0,0,0,0,0,254,198,140,24,48,96,194,198,254,0,0,0,0,0,60,48,48,48,48,48,48,48,60,0,0,0,0,0,128,192,224,112,56,28,14,6,2,0,0,0,0,0,60,12,12,12,12,12,12,12,60,0,0,0,16,56,108,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,48,48,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,12,124,204,204,118,0,0,0,0,0,224,96,96,120,108,102,102,102,124,0,0,0,0,0,0,0,0,124,198,192,192,198,124,0,0,0,0,0,28,12,12,60,108,204,204,204,118,0,0,0,0,0,0,0,0,124,198,254,192,198,124,0,0,0,0,0,56,108,100,96,240,96,96,96,240,0,0,0,0,0,0,0,0,118,204,204,204,124,12,204,120,0,0,0,224,96,96,108,118,102,102,102,230,0,0,0,0,0,24,24,0,56,24,24,24,24,60,0,0,0,0,0,6,6,0,14,6,6,6,6,102,102,60,0,0,0,224,96,96,102,108,120,108,102,230,0,0,0,0,0,56,24,24,24,24,24,24,24,60,0,0,0,0,0,0,0,0,236,254,214,214,214,198,0,0,0,0,0,0,0,0,220,102,102,102,102,102,0,0,0,0,0,0,0,0,124,198,198,198,198,124,0,0,0,0,0,0,0,0,220,102,102,102,124,96,96,240,0,0,0,0,0,0,118,204,204,204,124,12,12,30,0,0,0,0,0,0,220,118,102,96,96,240,0,0,0,0,0,0,0,0,124,198,112,28,198,124,0,0,0,0,0,16,48,48,252,48,48,48,54,28,0,0,0,0,0,0,0,0,204,204,204,204,204,118,0,0,0,0,0,0,0,0,102,102,102,102,60,24,0,0,0,0,0,0,0,0,198,198,214,214,254,108,0,0,0,0,0,0,0,0,198,108,56,56,108,198,0,0,0,0,0,0,0,0,198,198,198,198,126,6,12,248,0,0,0,0,0,0,254,204,24,48,102,254,0,0,0,0,0,14,24,24,24,112,24,24,24,14,0,0,0,0,0,24,24,24,24,0,24,24,24,24,0,0,0,0,0,112,24,24,24,14,24,24,24,112,0,0,0,0,0,118,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,56,108,198,198,254,0,0,0,0,0,0,60,102,194,192,192,194,102,60,12,6,124,0,0,0,204,204,0,204,204,204,204,204,118,0,0,0,0,12,24,48,0,124,198,254,192,198,124,0,0,0,0,16,56,108,0,120,12,124,204,204,118,0,0,0,0,0,204,204,0,120,12,124,204,204,118,0,0,0,0,96,48,24,0,120,12,124,204,204,118,0,0,0,0,56,108,56,0,120,12,124,204,204,118,0,0,0,0,0,0,0,60,102,96,102,60,12,6,60,0,0,0,16,56,108,0,124,198,254,192,198,124,0,0,0,0,0,204,204,0,124,198,254,192,198,124,0,0,0,0,96,48,24,0,124,198,254,192,198,124,0,0,0,0,0,102,102,0,56,24,24,24,24,60,0,0,0,0,24,60,102,0,56,24,24,24,24,60,0,0,0,0,96,48,24,0,56,24,24,24,24,60,0,0,0,0,198,198,16,56,108,198,198,254,198,198,0,0,0,56,108,56,0,56,108,198,198,254,198,198,0,0,0,24,48,96,0,254,102,96,124,96,102,254,0,0,0,0,0,0,0,204,118,54,126,216,216,110,0,0,0,0,0,62,108,204,204,254,204,204,204,206,0,0,0,0,16,56,108,0,124,198,198,198,198,124,0,0,0,0,0,198,198,0,124,198,198,198,198,124,0,0,0,0,96,48,24,0,124,198,198,198,198,124,0,0,0,0,48,120,204,0,204,204,204,204,204,118,0,0,0,0,96,48,24,0,204,204,204,204,204,118,0,0,0,0,0,198,198,0,198,198,198,198,126,6,12,120,0,0,198,198,56,108,198,198,198,198,108,56,0,0,0,0,198,198,0,198,198,198,198,198,198,124,0,0,0,0,24,24,60,102,96,96,102,60,24,24,0,0,0,0,56,108,100,96,240,96,96,96,230,252,0,0,0,0,0,102,102,60,24,126,24,126,24,24,0,0,0,0,248,204,204,248,196,204,222,204,204,198,0,0,0,0,14,27,24,24,24,126,24,24,24,24,216,112,0,0,24,48,96,0,120,12,124,204,204,118,0,0,0,0,12,24,48,0,56,24,24,24,24,60,0,0,0,0,24,48,96,0,124,198,198,198,198,124,0,0,0,0,24,48,96,0,204,204,204,204,204,118,0,0,0,0,0,118,220,0,220,102,102,102,102,102,0,0,0,118,220,0,198,230,246,254,222,206,198,198,0,0,0,0,60,108,108,62,0,126,0,0,0,0,0,0,0,0,56,108,108,56,0,124,0,0,0,0,0,0,0,0,0,48,48,0,48,48,96,198,198,124,0,0,0,0,0,0,0,0,0,254,192,192,192,0,0,0,0,0,0,0,0,0,0,254,6,6,6,0,0,0,0,0,192,192,198,204,216,48,96,220,134,12,24,62,0,0,192,192,198,204,216,48,102,206,158,62,6,6,0,0,0,24,24,0,24,24,60,60,60,24,0,0,0,0,0,0,0,54,108,216,108,54,0,0,0,0,0,0,0,0,0,216,108,54,108,216,0,0,0,0,0,17,68,17,68,17,68,17,68,17,68,17,68,17,68,85,170,85,170,85,170,85,170,85,170,85,170,85,170,221,119,221,119,221,119,221,119,221,119,221,119,221,119,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,248,24,24,24,24,24,24,24,24,24,24,24,248,24,248,24,24,24,24,24,24,54,54,54,54,54,54,54,246,54,54,54,54,54,54,0,0,0,0,0,0,0,254,54,54,54,54,54,54,0,0,0,0,0,248,24,248,24,24,24,24,24,24,54,54,54,54,54,246,6,246,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,254,6,246,54,54,54,54,54,54,54,54,54,54,54,246,6,254,0,0,0,0,0,0,54,54,54,54,54,54,54,254,0,0,0,0,0,0,24,24,24,24,24,248,24,248,0,0,0,0,0,0,0,0,0,0,0,0,0,248,24,24,24,24,24,24,24,24,24,24,24,24,24,31,0,0,0,0,0,0,24,24,24,24,24,24,24,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,24,24,24,24,24,24,24,24,24,24,24,24,24,31,24,24,24,24,24,24,0,0,0,0,0,0,0,255,0,0,0,0,0,0,24,24,24,24,24,24,24,255,24,24,24,24,24,24,24,24,24,24,24,31,24,31,24,24,24,24,24,24,54,54,54,54,54,54,54,55,54,54,54,54,54,54,54,54,54,54,54,55,48,63,0,0,0,0,0,0,0,0,0,0,0,63,48,55,54,54,54,54,54,54,54,54,54,54,54,247,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,247,54,54,54,54,54,54,54,54,54,54,54,55,48,55,54,54,54,54,54,54,0,0,0,0,0,255,0,255,0,0,0,0,0,0,54,54,54,54,54,247,0,247,54,54,54,54,54,54,24,24,24,24,24,255,0,255,0,0,0,0,0,0,54,54,54,54,54,54,54,255,0,0,0,0,0,0,0,0,0,0,0,255,0,255,24,24,24,24,24,24,0,0,0,0,0,0,0,255,54,54,54,54,54,54,54,54,54,54,54,54,54,63,0,0,0,0,0,0,24,24,24,24,24,31,24,31,0,0,0,0,0,0,0,0,0,0,0,31,24,31,24,24,24,24,24,24,0,0,0,0,0,0,0,63,54,54,54,54,54,54,54,54,54,54,54,54,54,255,54,54,54,54,54,54,24,24,24,24,24,255,24,255,24,24,24,24,24,24,24,24,24,24,24,24,24,248,0,0,0,0,0,0,0,0,0,0,0,0,0,31,24,24,24,24,24,24,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,240,240,240,240,240,240,240,240,240,240,240,240,240,240,15,15,15,15,15,15,15,15,15,15,15,15,15,15,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,118,220,216,216,220,118,0,0,0,0,0,0,0,124,198,252,198,198,252,192,192,64,0,0,0,254,198,198,192,192,192,192,192,192,0,0,0,0,0,0,0,254,108,108,108,108,108,108,0,0,0,0,0,254,198,96,48,24,48,96,198,254,0,0,0,0,0,0,0,0,126,216,216,216,216,112,0,0,0,0,0,0,0,102,102,102,102,124,96,96,192,0,0,0,0,0,0,118,220,24,24,24,24,24,0,0,0,0,0,126,24,60,102,102,102,60,24,126,0,0,0,0,0,56,108,198,198,254,198,198,108,56,0,0,0,0,0,56,108,198,198,198,108,108,108,238,0,0,0,0,0,30,48,24,12,62,102,102,102,60,0,0,0,0,0,0,0,0,126,219,219,126,0,0,0,0,0,0,0,3,6,126,219,219,243,126,96,192,0,0,0,0,0,28,48,96,96,124,96,96,48,28,0,0,0,0,0,0,124,198,198,198,198,198,198,198,0,0,0,0,0,0,254,0,0,254,0,0,254,0,0,0,0,0,0,0,24,24,126,24,24,0,0,255,0,0,0,0,0,48,24,12,6,12,24,48,0,126,0,0,0,0,0,12,24,48,96,48,24,12,0,126,0,0,0,0,0,14,27,27,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,216,216,112,0,0,0,0,0,0,24,24,0,126,0,24,24,0,0,0,0,0,0,0,0,118,220,0,118,220,0,0,0,0,0,0,56,108,108,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,15,12,12,12,12,12,236,108,60,28,0,0,0,0,216,108,108,108,108,108,0,0,0,0,0,0,0,0,112,216,48,96,200,248,0,0,0,0,0,0,0,0,0,0,0,124,124,124,124,124,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,129,165,129,189,153,129,126,126,255,219,255,195,231,255,126,108,254,254,254,124,56,16,0,16,56,124,254,124,56,16,0,56,124,56,254,254,124,56,124,16,16,56,124,254,124,56,124,0,0,24,60,60,24,0,0,255,255,231,195,195,231,255,255,0,60,102,66,66,102,60,0,255,195,153,189,189,153,195,255,15,7,15,125,204,204,204,120,60,102,102,102,60,24,126,24,63,51,63,48,48,112,240,224,127,99,127,99,99,103,230,192,153,90,60,231,231,60,90,153,128,224,248,254,248,224,128,0,2,14,62,254,62,14,2,0,24,60,126,24,24,126,60,24,102,102,102,102,102,0,102,0,127,219,219,123,27,27,27,0,62,99,56,108,108,56,204,120,0,0,0,0,126,126,126,0,24,60,126,24,126,60,24,255,24,60,126,24,24,24,24,0,24,24,24,24,126,60,24,0,0,24,12,254,12,24,0,0,0,48,96,254,96,48,0,0,0,0,192,192,192,254,0,0,0,36,102,255,102,36,0,0,0,24,60,126,255,255,0,0,0,255,255,126,60,24,0,0,0,0,0,0,0,0,0,0,48,120,120,48,48,0,48,0,108,108,108,0,0,0,0,0,108,108,254,108,254,108,108,0,48,124,192,120,12,248,48,0,0,198,204,24,48,102,198,0,56,108,56,118,220,204,118,0,96,96,192,0,0,0,0,0,24,48,96,96,96,48,24,0,96,48,24,24,24,48,96,0,0,102,60,255,60,102,0,0,0,48,48,252,48,48,0,0,0,0,0,0,0,48,48,96,0,0,0,252,0,0,0,0,0,0,0,0,0,48,48,0,6,12,24,48,96,192,128,0,124,198,206,222,246,230,124,0,48,112,48,48,48,48,252,0,120,204,12,56,96,204,252,0,120,204,12,56,12,204,120,0,28,60,108,204,254,12,30,0,252,192,248,12,12,204,120,0,56,96,192,248,204,204,120,0,252,204,12,24,48,48,48,0,120,204,204,120,204,204,120,0,120,204,204,124,12,24,112,0,0,48,48,0,0,48,48,0,0,48,48,0,0,48,48,96,24,48,96,192,96,48,24,0,0,0,252,0,0,252,0,0,96,48,24,12,24,48,96,0,120,204,12,24,48,0,48,0,124,198,222,222,222,192,120,0,48,120,204,204,252,204,204,0,252,102,102,124,102,102,252,0,60,102,192,192,192,102,60,0,248,108,102,102,102,108,248,0,254,98,104,120,104,98,254,0,254,98,104,120,104,96,240,0,60,102,192,192,206,102,62,0,204,204,204,252,204,204,204,0,120,48,48,48,48,48,120,0,30,12,12,12,204,204,120,0,230,102,108,120,108,102,230,0,240,96,96,96,98,102,254,0,198,238,254,254,214,198,198,0,198,230,246,222,206,198,198,0,56,108,198,198,198,108,56,0,252,102,102,124,96,96,240,0,120,204,204,204,220,120,28,0,252,102,102,124,108,102,230,0,120,204,224,112,28,204,120,0,252,180,48,48,48,48,120,0,204,204,204,204,204,204,252,0,204,204,204,204,204,120,48,0,198,198,198,214,254,238,198,0,198,198,108,56,56,108,198,0,204,204,204,120,48,48,120,0,254,198,140,24,50,102,254,0,120,96,96,96,96,96,120,0,192,96,48,24,12,6,2,0,120,24,24,24,24,24,120,0,16,56,108,198,0,0,0,0,0,0,0,0,0,0,0,255,48,48,24,0,0,0,0,0,0,0,120,12,124,204,118,0,224,96,96,124,102,102,220,0,0,0,120,204,192,204,120,0,28,12,12,124,204,204,118,0,0,0,120,204,252,192,120,0,56,108,96,240,96,96,240,0,0,0,118,204,204,124,12,248,224,96,108,118,102,102,230,0,48,0,112,48,48,48,120,0,12,0,12,12,12,204,204,120,224,96,102,108,120,108,230,0,112,48,48,48,48,48,120,0,0,0,204,254,254,214,198,0,0,0,248,204,204,204,204,0,0,0,120,204,204,204,120,0,0,0,220,102,102,124,96,240,0,0,118,204,204,124,12,30,0,0,220,118,102,96,240,0,0,0,124,192,120,12,248,0,16,48,124,48,48,52,24,0,0,0,204,204,204,204,118,0,0,0,204,204,204,120,48,0,0,0,198,214,254,254,108,0,0,0,198,108,56,108,198,0,0,0,204,204,204,124,12,248,0,0,252,152,48,100,252,0,28,48,48,224,48,48,28,0,24,24,24,0,24,24,24,0,224,48,48,28,48,48,224,0,118,220,0,0,0,0,0,0,0,16,56,108,198,198,254,0,120,204,192,204,120,24,12,120,0,204,0,204,204,204,126,0,28,0,120,204,252,192,120,0,126,195,60,6,62,102,63,0,204,0,120,12,124,204,126,0,224,0,120,12,124,204,126,0,48,48,120,12,124,204,126,0,0,0,120,192,192,120,12,56,126,195,60,102,126,96,60,0,204,0,120,204,252,192,120,0,224,0,120,204,252,192,120,0,204,0,112,48,48,48,120,0,124,198,56,24,24,24,60,0,224,0,112,48,48,48,120,0,198,56,108,198,254,198,198,0,48,48,0,120,204,252,204,0,28,0,252,96,120,96,252,0,0,0,127,12,127,204,127,0,62,108,204,254,204,204,206,0,120,204,0,120,204,204,120,0,0,204,0,120,204,204,120,0,0,224,0,120,204,204,120,0,120,204,0,204,204,204,126,0,0,224,0,204,204,204,126,0,0,204,0,204,204,124,12,248,195,24,60,102,102,60,24,0,204,0,204,204,204,204,120,0,24,24,126,192,192,126,24,24,56,108,100,240,96,230,252,0,204,204,120,252,48,252,48,48,248,204,204,250,198,207,198,199,14,27,24,60,24,24,216,112,28,0,120,12,124,204,126,0,56,0,112,48,48,48,120,0,0,28,0,120,204,204,120,0,0,28,0,204,204,204,126,0,0,248,0,248,204,204,204,0,252,0,204,236,252,220,204,0,60,108,108,62,0,126,0,0,56,108,108,56,0,124,0,0,48,0,48,96,192,204,120,0,0,0,0,252,192,192,0,0,0,0,0,252,12,12,0,0,195,198,204,222,51,102,204,15,195,198,204,219,55,111,207,3,24,24,0,24,24,24,24,0,0,51,102,204,102,51,0,0,0,204,102,51,102,204,0,0,34,136,34,136,34,136,34,136,85,170,85,170,85,170,85,170,219,119,219,238,219,119,219,238,24,24,24,24,24,24,24,24,24,24,24,24,248,24,24,24,24,24,248,24,248,24,24,24,54,54,54,54,246,54,54,54,0,0,0,0,254,54,54,54,0,0,248,24,248,24,24,24,54,54,246,6,246,54,54,54,54,54,54,54,54,54,54,54,0,0,254,6,246,54,54,54,54,54,246,6,254,0,0,0,54,54,54,54,254,0,0,0,24,24,248,24,248,0,0,0,0,0,0,0,248,24,24,24,24,24,24,24,31,0,0,0,24,24,24,24,255,0,0,0,0,0,0,0,255,24,24,24,24,24,24,24,31,24,24,24,0,0,0,0,255,0,0,0,24,24,24,24,255,24,24,24,24,24,31,24,31,24,24,24,54,54,54,54,55,54,54,54,54,54,55,48,63,0,0,0,0,0,63,48,55,54,54,54,54,54,247,0,255,0,0,0,0,0,255,0,247,54,54,54,54,54,55,48,55,54,54,54,0,0,255,0,255,0,0,0,54,54,247,0,247,54,54,54,24,24,255,0,255,0,0,0,54,54,54,54,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92165);
  /* memory initializer */ allocate([0,0,0,0,0,255,0,255,24,24,24,0,0,0,0,255,54,54,54,54,54,54,54,63,0,0,0,24,24,31,24,31,0,0,0,0,0,31,24,31,24,24,24,0,0,0,0,63,54,54,54,54,54,54,54,255,54,54,54,24,24,255,24,255,24,24,24,24,24,24,24,248,0,0,0,0,0,0,0,31,24,24,24,255,255,255,255,255,255,255,255,0,0,0,0,255,255,255,255,240,240,240,240,240,240,240,240,15,15,15,15,15,15,15,15,255,255,255,255,0,0,0,0,0,0,118,220,200,220,118,0,0,120,204,248,204,248,192,192,0,252,204,192,192,192,192,0,0,254,108,108,108,108,108,0,252,204,96,48,96,204,252,0,0,0,126,216,216,216,112,0,0,102,102,102,102,124,96,192,0,118,220,24,24,24,24,0,252,48,120,204,204,120,48,252,56,108,198,254,198,108,56,0,56,108,198,198,108,108,238,0,28,48,24,124,204,204,120,0,0,0,126,219,219,126,0,0,6,12,126,219,219,126,96,192,56,96,192,248,192,96,56,0,120,204,204,204,204,204,204,0,0,252,0,252,0,252,0,0,48,48,252,48,48,0,252,0,96,48,24,48,96,0,252,0,24,48,96,48,24,0,252,0,14,27,27,24,24,24,24,24,24,24,24,24,24,216,216,112,48,48,0,252,0,48,48,0,0,118,220,0,118,220,0,0,56,108,108,56,0,0,0,0,0,0,0,24,24,0,0,0,0,0,0,0,24,0,0,0,15,12,12,12,236,108,60,28,120,108,108,108,108,0,0,0,112,24,48,96,120,0,0,0,0,0,60,60,60,60,0,0,0,0,0,0,0,0,0,0,40,25,4,0,0,0,0,0,255,255,255,255,0,0,0,0,129,252,206,231,119,2,205,32,185,178,24,190,178,25,191,110,231,187,0,128,253,243,164,252,135,247,131,238,198,25,237,87,87,233,237,229,85,80,88,33,11,1,4,8,108,250,54,84,153,232,11,169,0,230,26,24,6,116,187,252,255,70,79,78,84,32,0,0,1,110,57,1,23,6,253,253,6,0,28,0,77,38,14,69,71,65,201,205,30,32,181,1,254,216,53,36,3,0,18,38,16,8,149,197,10,0,109,255,126,129,165,129,129,189,153,3,126,254,131,15,255,219,255,255,195,231,255,255,230,119,0,108,254,62,236,124,56,16,48,16,56,124,253,192,14,24,60,60,231,178,182,0,24,6,15,101,110,126,59,15,179,179,34,24,9,222,177,255,0,231,195,95,63,246,0,31,60,102,66,66,102,255,146,60,195,153,189,189,153,195,254,33,30,14,26,50,120,204,222,235,0,120,32,45,185,230,0,79,97,187,159,15,63,51,63,48,0,112,240,249,200,224,0,127,99,127,99,158,189,103,231,230,192,124,24,219,135,221,160,60,219,46,128,187,253,192,224,240,248,254,248,45,192,128,191,254,31,2,6,14,30,62,254,62,30,14,6,2,107,73,43,94,124,103,60,0,102,152,155,7,95,231,54,219,0,123,27,255,155,0,124,198,96,56,108,198,198,108,56,12,6,228,198,124,0,254,67,102,79,126,111,96,15,0,189,96,15,0,254,150,112,17,12,254,12,119,201,12,0,48,96,254,6,228,96,48,0,192,97,86,92,161,118,57,40,108,40,14,80,88,159,178,183,160,124,125,138,14,91,14,56,175,188,192,0,24,60,102,175,140,143,33,235,233,36,32,139,185,108,94,3,173,254,54,241,194,192,124,6,6,134,30,214,239,193,194,198,38,223,174,48,96,198,134,46,20,14,12,118,220,193,26,175,118,189,129,109,0,96,78,139,185,43,0,229,185,89,15,8,150,141,0,24,226,21,22,222,255,229,132,129,162,237,6,182,20,108,192,49,254,215,150,173,49,249,21,226,159,192,128,248,48,174,214,214,14,118,178,39,56,120,89,16,129,46,246,228,124,198,198,254,15,216,78,6,60,2,6,253,67,223,12,28,60,108,204,254,156,208,176,30,141,254,3,214,252,31,56,144,187,96,15,198,198,198,102,238,254,63,243,115,195,79,26,31,125,1,11,126,11,219,63,12,120,186,11,123,4,15,98,147,48,158,146,26,53,6,194,201,222,2,0,246,98,27,35,95,37,76,12,223,182,179,16,222,0,220,97,20,196,46,59,219,108,144,254,15,108,60,252,102,241,124,134,244,252,111,212,21,239,0,194,242,233,161,16,248,108,63,123,108,248,15,254,102,98,104,132,252,120,104,96,98,102,254,192,182,0,240,63,77,126,222,198,198,102,58,97,239,105,110,111,107,194,60,125,48,49,38,30,13,119,73,239,230,106,179,110,120,120,116,230,15,179,216,240,96,0,111,146,127,79,238,254,254,214,242,219,15,230,246,254,222,206,121,88,111,198,155,45,223,65,39,236,240,31,214,222,151,228,124,12,14,227,41,217,230,31,226,178,66,80,63,9,123,126,126,90,175,22,178,198,95,15,37,15,108,56,16,67,254,214,214,214,254,238,108,107,166,108,142,97,159,102,13,206,11,203,79,27,134,33,31,127,194,22,236,60,48,0,31,254,10,193,112,56,28,118,178,175,60,12,0,98,12,60,220,141,144,230,236,52,108,255,24,233,3,120,12,124,175,22,46,224,25,120,102,17,226,207,28,19,2,0,185,195,223,28,105,45,43,0,47,128,140,31,254,198,251,54,50,48,120,175,207,240,93,118,46,204,223,161,95,210,95,108,50,158,118,230,220,3,97,56,79,107,75,9,0,219,0,204,16,23,47,113,198,0,230,144,156,47,56,53,186,0,236,0,76,214,0,198,15,220,203,102,161,159,108,9,159,31,246,177,4,240,159,144,22,210,25,237,220,159,31,76,96,228,118,9,223,16,217,178,223,252,222,54,28,31,16,94,61,15,130,49,0,71,192,15,0,183,132,154,27,48,83,56,117,47,212,181,4,12,3,135,82,204,79,205,217,254,239,14,112,100,61,14,247,9,131,63,218,123,27,35,36,64,248,201,220,223,139,52,226,79,23,210,207,24,216,89,114,204,191,224,74,57,184,132,207,59,110,97,31,47,124,96,15,192,96,48,182,132,46,56,70,200,47,63,222,75,111,79,92,194,95,253,87,194,15,189,24,50,31,102,90,194,31,6,222,194,15,47,107,192,15,198,207,115,11,141,15,114,9,220,199,200,175,63,78,254,54,54,126,216,216,110,62,30,58,220,254,15,206,24,201,255,63,132,93,198,15,101,179,175,15,8,141,246,79,113,88,31,194,133,31,198,239,89,7,198,159,101,13,198,79,112,34,113,55,225,13,239,210,112,224,100,96,3,161,33,159,12,201,56,126,15,219,183,248,105,248,196,204,222,5,198,229,25,31,14,27,112,154,126,216,11,225,1,175,66,106,132,127,203,222,15,207,33,123,47,191,146,28,98,95,4,220,12,111,110,141,28,108,54,12,12,142,214,94,15,81,15,152,88,7,72,93,17,192,143,122,28,254,144,52,16,60,193,224,253,204,166,133,224,168,108,13,172,129,220,20,62,15,96,191,102,206,154,63,34,232,185,247,188,99,201,98,133,54,203,204,108,216,0,109,118,13,108,216,17,68,228,133,1,85,170,33,47,221,119,5,118,24,0,11,217,248,13,15,207,38,54,0,246,54,176,32,208,75,216,15,47,206,35,246,6,150,192,0,61,133,108,31,37,163,47,186,201,130,17,15,172,97,143,0,200,134,248,191,39,108,31,47,24,24,25,146,255,255,88,35,114,89,91,31,63,33,27,45,134,132,31,15,55,123,194,191,55,48,63,109,82,9,191,187,176,31,247,95,131,45,109,247,44,100,63,47,108,150,31,47,108,182,63,47,12,182,221,255,44,36,47,95,200,142,255,223,66,194,134,97,201,175,223,151,176,63,239,185,176,63,63,100,33,79,16,132,45,132,145,95,175,147,141,79,255,44,100,0,159,28,54,0,240,201,144,15,11,11,54,242,97,0,118,220,216,8,210,220,207,211,6,91,216,204,190,134,69,204,127,72,7,173,145,157,74,255,53,204,0,31,203,192,242,159,120,126,0,126,216,112,100,146,95,102,12,59,192,111,43,32,28,139,32,64,193,47,169,143,254,198,131,37,171,209,23,110,238,214,156,206,30,62,49,176,44,111,178,10,130,97,108,247,3,6,15,243,126,108,104,59,28,154,96,9,125,223,48,28,255,37,11,205,178,154,2,93,74,54,80,89,144,62,16,65,42,110,7,102,15,79,1,172,27,17,119,96,255,24,42,18,66,24,110,12,36,151,172,14,15,172,97,129,66,243,176,0,15,12,96,219,236,52,60,207,6,214,108,88,91,36,207,160,50,190,100,188,0,126,64,78,0,47,24,14,5,132,5,3,88,112,126,1,18,28,126,255,130,0,18,76,253,251,9,86,249,4,41,146,224,247,245,73,48,243,146,96,241,73,48,239,96,118,120,39,193,146,236,36,56,235,234,78,176,233,193,9,232,42,37,231,74,96,36,229,44,9,228,169,18,227,50,37,193,225,144,32,222,72,144,221,144,96,219,36,193,218,130,114,0,222,72,215,13,193,50,228,32,36,210,18,156,209,207,130,16,18,76,205,203,9,86,201,73,48,199,9,82,195,2,23,118,18,76,193,190,130,16,18,76,189,188,39,88,187,32,193,102,198,185,73,112,118,95,36,72,181,130,211,6,100,75,179,32,112,130,176,2,73,174,99,192,75,254,251,65,8,107,37,165,20,73,48,163,73,112,126,161,193,107,128,135,37,159,163,151,4,157,30,128,4,155,18,188,27,153,193,91,13,48,59,151,212,28,72,149,124,2,18,147,4,143,175,130,149,144,88,64,142,179,4,175,30,130,149,139,65,66,136,240,34,135,60,74,73,132,65,50,163,117,32,129,252,130,37,175,19,76,126,125,75,130,124,104,70,203,90,246,202,13,18,188,184,119,39,88,118,150,4,117,3,9,115,64,130,60,113,147,224,120,111,128,27,6,120,108,130,65,110,240,4,75,108,146,224,107,106,146,208,249,38,4,103,124,3,9,101,193,178,240,27,36,48,98,97,9,14,230,95,134,45,55,217,9,93,153,66,42,10,33,193,88,145,32,87,177,25,215,13,240,74,28,102,27,72,83,69,193,54,247,140,130,37,80,130,65,79,60,193,74,76,193,32,75,60,12,36,73,255,1,18,69,24,169,83,118,13,36,65,169,100,53,192,72,48,61,151,29,118,27,254,130,36,36,88,57,124,56,3,6,118,150,72,16,53,18,12,230,51,4,7,60,9,150,49,47,8,9,191,94,108,38,41,9,9,43,132,4,9,195,178,139,107,152,176,27,124,88,118,193,139,14,36,33,240,201,203,55,112,28,76,130,29,88,18,28,36,36,26,179,37,191,13,128,4,22,18,184,25,20,4,88,34,146,224,124,17,130,71,131,130,75,15,14,65,66,13,112,32,11,112,18,72,9,72,147,102,85,220,91,43,165,83,192,167,178,183,4,149,51,13,132,219,180,204,41,13,176,204,248,13,48,25,249,118,189,133,247,97,183,236,69,83,221,215,50,13,38,152,176,27,102,90,64,219,5,222,192,13,41,1,201,13,3,150,233,231,94,9,148,16,178,25,134,30,227,245,192,128,110,225,48,224,206,223,3,54,153,198,55,144,198,13,203,128,217,132,101,251,219,18,38,198,177,9,235,198,11,132,164,198,197,131,7,207,127,6,36,205,48,107,235,43,25,203,67,222,14,124,193,111,102,243,1,3,199,96,66,102,9,51,197,177,45,97,23,183,236,13,181,41,192,178,167,128,101,189,64,194,187,96,101,185,144,48,183,179,24,181,83,72,6,90,36,12,177,115,6,175,99,176,109,110,195,133,31,13,12,248,54,110,218,172,3,220,216,170,1,11,50,224,168,166,25,16,163,3,2,159,224,42,248,176,50,155,91,24,153,182,3,206,149,1,43,96,144,147,176,50,143,3,30,141,139,1,41,128,149,137,96,200,135,31,172,48,131,66,6,81,43,3,125,148,1,123,217,128,119,31,192,8,3,102,117,115,1,43,48,224,113,111,7,140,109,202,128,107,101,64,105,200,128,103,101,192,101,1,110,27,112,133,97,63,70,24,93,24,240,209,89,1,83,255,112,133,85,248,2,24,81,32,3,77,100,64,73,12,8,71,48,173,63,56,12,68,120,176,12,66,96,25,65,144,48,63,32,25,61,24,48,60,126,12,12,58,96,6,56,48,48,55,107,25,53,29,147,145,29,254,3,38,49,3,46,238,47,128,3,60,128,201,44,126,150,192,42,41,107,173,120,11,143,194,98,30,191,101,64,37,50,96,34,101,192,32,50,32,30,96,192,28,12,72,25,1,35,3,150,23,21,100,192,18,6,12,24,15,128,67,60,28,192,202,13,32,100,11,46,48,8,8,44,3,5,128,3,252,12,112,251,246,160,1,245,108,0,19,238,218,130,233,6,56,107,133,97,13,15,208,218,16,5,32,8,215,64,16,209,128,32,203,240,65,197,15,7,15,125,1,12,191,186,3,4,180,80,128,179,192,15,174,103,230,192,6,48,167,168,117,128,128,161,3,44,239,2,155,56,192,2,66,0,6,51,6,152,143,138,192,0,137,187,219,174,97,73,60,134,124,208,239,5,39,38,77,128,255,114,192,59,53,15,128,36,101,9,112,95,89,3,124,36,102,255,18,241,128,159,192,139,239,46,111,32,61,70,0,29,124,36,143,134,49,87,219,234,24,62,96,88,124,41,128,134,215,7,120,35,56,30,36,171,118,204,195,52,249,48,15,0,230,12,1,146,6,0,131,45,43,126,26,8,214,199,176,232,183,171,71,214,195,221,171,88,194,201,247,226,28,229,7,234,85,60,179,15,206,202,30,106,92,189,252,15,191,166,174,190,124,67,61,98,121,177,171,239,2,7,126,171,171,23,116,98,188,55,119,103,178,122,170,148,171,71,166,141,205,234,124,136,237,202,7,130,192,120,196,226,135,55,175,78,111,117,96,104,195,56,245,202,208,107,88,124,105,254,74,161,217,254,7,245,87,159,31,206,87,5,43,82,45,88,77,47,6,171,30,69,230,26,140,127,240,85,176,57,39,38,161,109,160,19,108,122,195,94,111,252,61,69,15,206,124,14,218,139,55,95,43,231,168,127,11,44,222,87,61,8,53,86,65,42,248,83,189,0,12,70,122,15,103,39,234,158,231,50,111,60,64,144,223,153,58,151,217,197,73,213,60,64,224,233,145,169,195,186,188,169,1,118,57,53,128,117,220,135,9,184,127,134,68,38,187,135,158,124,151,96,248,117,70,245,118,202,53,9,248,47,139,118,146,175,124,21,222,127,105,112,79,132,60,23,36,122,0,230,86,34,181,116,48,164,82,44,24,109,15,154,108,124,79,30,103,145,86,95,126,161,4,163,135,234,84,74,88,76,73,191,144,98,38,134,84,55,99,17,0,23,126,131,115,47,55,223,245,84,126,33,112,144,58,31,25,229,222,12,18,146,154,107,7,163,195,198,255,54,27,204,95,59,70,179,231,240,179,110,111,204,7,182,201,96,48,23,56,9,77,191,130,209,112,210,157,25,151,7,48,140,130,63,192,152,27,60,31,7,142,185,23,7,198,16,115,51,104,71,39,51,129,13,44,58,105,248,161,236,163,133,127,110,151,212,209,150,206,163,96,144,71,155,13,87,7,130,145,126,157,240,143,15,198,112,154,247,152,122,239,23,14,39,166,102,74,85,128,35,71,90,89,200,17,29,66,197,83,24,29,253,250,198,207,198,199,72,60,163,71,71,66,179,55,247,159,246,98,255,63,95,48,10,42,49,220,7,184,74,70,31,209,48,25,147,155,18,8,161,13,163,6,230,191,7,99,230,108,126,51,102,204,15,161,246,122,54,106,223,17,244,238,53,16,22,221,195,102,51,207,102,9,34,66,179,136,1,217,16,26,212,149,208,202,52,161,154,161,33,190,184,8,13,178,72,104,172,150,208,160,208,132,154,132,134,148,142,132,14,248,130,8,5,124,8,29,255,112,22,11,15,31,16,26,94,60,20,82,55,161,132,76,37,52,70,208,161,64,132,150,58,52,33,52,46,13,161,40,110,9,34,15,161,97,111,16,66,1,10,49,91,119,111,96,254,39,6,22,242,120,195,215,39,49,176,221,98,96,215,196,192,203,23,147,129,200,193,136,69,120,188,179,216,93,254,182,24,22,176,22,177,171,169,96,113,126,163,226,139,156,192,22,195,152,146,241,34,145,199,233,214,151,134,226,139,133,14,44,198,128,60,122,239,213,143,7,11,23,115,111,245,162,126,109,222,155,255,102,1,54,12,46,41,23,129,158,7,94,56,5,79,37,44,75,204,226,127,62,99,89,56,135,144,197,44,44,190,6,15,31,98,49,27,194,189,221,80,93,69,61,121,60,136,36,32,55,51,129,76,28,57,82,3,105,38,17,132,32,144,22,34,0,120,249,4,124,206,214,230,124,64,43,131,51,218,123,28,29,30,80,195,31,16,231,124,1,97,51,118,63,124,130,178,170,170,2,130,124,194,32,51,212,42,44,162,141,163,133,133,15,45,228,96,48,221,197,239,154,162,0,154,32,98,239,132,202,51,149,69,83,178,136,67,6,17,51,26,68,17,179,208,185,100,147,12,136,132,255,40,50,51,106,82,15,130,49,65,198,243,177,131,52,24,44,6,146,160,3,67,228,246,191,48,138,83,11,187,198,15,48,138,48,115,70,12,28,228,72,15,90,18,3,97,6,196,15,66,114,0,202,32,51,155,133,64,71,236,5,159,127,133,133,54,4,189,159,136,145,67,222,50,51,255,236,194,31,48,47,48,172,210,22,164,244,12,49,91,15,86,6,51,250,0,195,124,1,1,163,20,179,240,14,144,239,44,143,198,73,55,127,198,9,11,15,226,85,17,183,164,115,12,144,32,115,133,145,57,129,189,95,0,45,33,187,66,22,16,9,161,231,138,111,189,48,98,54,236,209,50,163,86,89,51,200,32,51,89,209,11,89,52,120,29,205,24,148,176,149,42,10,30,17,208,130,203,15,124,32,154,33,124,34,192,51,69,138,3,90,29,207,131,184,230,124,128,51,1,35,12,152,203,202,2,144,19,12,98,51,140,2,0,7,179,6,241,178,51,2,5,1,3,155,132,1,153,194,128,151,101,64,149,241,128,148,68,6,51,44,34,15,7,140,137,65,152,2,144,51,46,3,121,118,3,3,119,131,112,223,51,164,10,75,6,103,3,96,64,101,4,104,233,22,153,246,149,16,138,207,3,59,198,13,18,138,48,235,66,177,11,50,96,89,144,223,13,60,102,9,57,0,100,16,51,196,66,56,128,32,87,236,192,73,60,34,3,206,69,136,35,124,16,50,51,96,25,65,100,38,86,41,48,96,48,183,108,124,10,13,50,136,51,30,176,55,228,3,53,224,30,48,52,46,3,51,124,66,198,111,198,96,89,13,197,50,45,3,28,203,43,19,44,26,202,128,39,86,52,86,128,20,120,192,31,99,54,236,52,163,21,84,70,115,192,128,25,6,60,24,112,21,50,96,19,3,6,24,15,192,2,32,98,13,0,194,51,71,131,95,196,163,94,61,24,51,0,58,108,48,218,15,108,184,78,24,196,51,40,20,14,205,12,57,194,32,51,104,9,151,22,137,107,156,201,179,7,96,48,208,161,178,12,226,177,51,17,161,136,32,67,68,144,59,16,25,51,48,161,94,196,236,23,127,16,25,51,223,161,40,205,118,226,208,24,108,34,149,143,155,246,34,14,25,177,214,68,89,6,69,108,7,48,16,146,83,159,34,80,230,22,44,251,6,16,110,7,10,101,51,27,36,32,48,63,134,5,27,28,17,87,18,193,32,51,240,14,95,15,22,239,95,7,159,139,13,124,239,39,25,196,51,60,138,90,47,94,137,147,69,115,7,71,152,155,111,191,7,35,216,48,15,79,95,132,211,12,241,14,121,119,99,101,107,77,25,196,51,193,34,83,64,255,225,50,228,58,246,42,95,134,160,32,52,69,18,51,139,129,62,53,139,135,135,46,139,33,24,33,32,14,60,108,241,43,122,120,144,65,51,1,57,181,114,193,147,84,157,76,68,86,103,74,82,9,128,104,68,53,202,42,167,5,230,192,90,89,103,128,31,255,26,30,28,139,141,55,88,214,86,193,103,165,70,73,100,1,131,76,54,51,18,124,101,21,103,16,110,108,96,73,151,41,171,103,136,112,31,5,75,39,75,89,103,55,22,68,183,172,18,63,72,22,95,202,42,103,101,159,0,246,98,100,63,200,187,0,118,50,52,48,136,217,120,79,44,44,167,128,56,31,5,203,183,23,89,103,54,44,136,28,215,136,135,6,18,52,13,12,231,147,191,191,100,108,120,112,224,224,101,16,51,9,32,214,88,130,143,202,42,103,37,172,95,9,213,24,161,220,176,79,15,144,208,109,143,65,188,127,33,33,55,127,146,45,63,89,16,255,15,87,133,175,41,30,84,240,232,101,195,143,63,33,184,244,207,11,34,7,30,3,95,200,32,51,37,139,65,11,253,24,89,99,112,203,15,175,42,131,51,200,24,24,255,132,217,18,47,25,196,51,109,21,212,104,97,255,97,156,73,31,48,136,51,156,0,12,126,33,69,39,12,34,51,226,176,175,11,129,71,145,144,198,41,194,127,103,226,45,47,44,9,103,149,65,51,14,105,143,254,6,113,51,98,85,3,43,247,6,28,79,141,98,89,63,170,12,51,194,220,47,223,98,82,143,45,41,199,183,236,207,15,13,141,44,239,205,154,239,239,129,226,79,199,32,38,246,216,202,51,95,41,34,231,120,48,15,8,131,51,21,177,134,128,7,15,101,16,51,152,11,95,0,150,86,67,60,18,0,252,81,16,136,133,113,40,48,51,164,236,24,55,4,30,255,127,4,183,58,63,150,176,127,5,19,47,69,89,103,104,20,85,96,109,204,145,159,192,178,10,103,24,48,245,240,34,164,132,85,103,203,128,241,192,128,124,239,171,224,124,103,112,33,94,64,130,49,101,64,233,65,188,27,130,101,143,44,172,103,27,6,227,13,25,16,225,85,112,60,32,148,103,98,51,219,55,46,3,217,120,44,3,215,150,16,155,48,32,109,86,193,103,128,21,128,203,207,60,64,192,205,111,103,204,120,8,60,56,112,162,208,242,54,63,141,12,51,135,25,71,79,89,5,103,132,65,51,0,148,205,130,182,69,130,161,13,202,93,12,88,183,97,182,251,79,134,45,55,98,19,191,13,59,3,177,102,125,134,37,55,150,224,213,149,146,32,147,136,199,19,170,48,51,2,73,86,240,237,157,18,6,205,32,90,153,134,200,51,24,182,48,159,16,49,97,9,21,6,51,12,88,121,6,4,119,16,7,118,1,101,51,193,128,101,50,136,118,51,25,16,97,16,47,13,32,97,51,224,50,93,118,145,48,91,69,6,51,25,164,29,254,25,196,51,136,20,177,164,229,50,160,5,73,12,226,124,51,64,138,32,96,63,144,48,61,75,24,59,11,22,214,81,102,205,209,81,46,3,53,230,200,32,51,101,64,49,120,192,240,47,2,131,51,20,17,136,151,19,12,56,4,50,51,20,6,35,12,248,48,28,108,56,29,16,43,1,96,51,192,140,245,99,101,15,33,128,48,23,203,128,11,172,130,240,103,8,2,112,16,9,201,42,135,177,7,97,5,135,92,181,172,171,224,48,112,220,103,10,6,99,24,77,115,192,85,48,124,254,131,103,12,24,254,134,28,112,194,254,104,65,15,196,42,225,96,21,103,103,232,12,216,33,7,198,104,6,108,165,60,178,10,103,239,22,7,194,196,31,163,2,136,141,96,23,55,126,194,11,220,23,134,252,219,0,94,16,8,178,10,103,120,20,99,237,177,45,35,97,242,46,27,136,104,217,60,120,195,232,240,48,62,78,49,107,4,193,80,6,51,30,189,173,39,30,205,37,33,226,205,199,95,153,1,207,189,139,185,31,253,7,124,116,124,194,5,194,197,30,103,31,217,172,39,231,165,16,134,47,5,96,51,64,184,191,60,225,91,5,48,224,149,65,51,242,44,183,24,24,12,98,51,67,136,249,201,135,17,198,124,50,136,51,18,161,200,152,208,62,159,48,131,51,196,96,205,252,63,24,51,0,59,25,26,120,194,196,216,216,24,17,11,160,66,6,51,56,28,199,121,40,131,51,78,106,126,13,56,24,44,209,124,40,131,51,204,90,23,111,189,95,86,230,198,17,19,134,7,113,17,12,255,209,110,107,31,170,252,57,50,136,12,35,99,123,206,240,224,184,99,136,25,196,51,241,93,24,136,14,12,162,7,51,88,132,95,241,88,103,98,97,77,8,12,51,111,66,177,79,185,25,191,28,182,246,160,206,7,151,216,6,97,51,201,83,233,116,80,122,114,85,209,114,200,136,155,73,138,1,80,133,36,34,6,131,81,15,51,85,25,155,241,104,95,64,6,51,54,161,106,175,152,91,12,47,136,74,161,192,155,48,130,24,83,17,181,47,149,155,127,9,84,219,171,96,103,122,11,223,75,162,251,101,16,51,87,124,8,28,54,136,44,34,125,70,212,155,11,21,52,27,153,143,18,110,153,191,204,89,84,155,84,111,204,27,25,171,0,68,45,110,101,155,204,94,84,187,6,113,51,86,5,179,10,103,32,34,170,200,51,10,218,235,82,200,51,63,175,96,51,96,16,51,44,1,0,40,35,194,42,103,89,128,191,42,8,161,194,103,74,106,85,223,146,92,18,223,86,193,103,217,82,12,255,13,107,126,47,37,61,209,248,239,172,130,103,196,40,33,115,65,191,194,114,116,159,87,65,103,21,200,24,166,140,2,108,85,42,132,55,187,119,236,184,174,196,177,44,239,69,6,51,4,75,0,101,21,103,85,65,49,163,233,168,7,51,138,140,155,8,55,38,140,48,51,72,6,227,22,35,81,41,136,90,33,192,155,151,1,213,60,100,16,51,53,75,111,150,64,115,178,10,103,100,192,203,193,163,90,86,86,103,18,168,129,70,212,155,75,5,45,91,152,125,16,110,152,167,178,150,1,180,44,3,179,82,6,178,48,162,155,25,48,173,6,113,120,51,18,1,51,3,151,50,136,51,144,0,99,24,121,103,21,44,131,152,115,51,13,40,36,88,94,156,201,96,21,103,96,80,56,51,73,194,42,103,89,3,123,183,164,99,16,176,172,11,133,85,103,195,128,55,129,1,53,86,193,230,103,32,16,217,50,45,167,1,166,134,193,133,42,24,85,86,103,192,128,33,30,176,32,44,3,31,144,65,51,3,18,13,85,48,84,128,103,32,6,68,205,51,23,101,155,126,48,136,195,51,204,149,225,81,25,196,75,140,168,155,81,8,16,131,117,60,46,100,51,63,94,81,59,176,10,103,204,93,79,126,192,206,30,140,78,30,51,0,130,135,147,120,40,172,103,197,92,65,71,81,204,7,95,199,192,175,161,14,219,192,109,181,248,48,21,76,146,255,100,103,112,216,7,3,3,115,99,48,136,62,51,65,40,8,86,103,34,131,51,190,135,124,130,124,113,124,98,142,213,209,202,32,51,144,141,0,172,130,103,22,34,95,42,24,133,194,103,194,208,241,198,239,9,5,233,239,140,168,155,112,49,153,88,188,152,147,85,48,230,35,132,103,193,228,199,79,204,120,152,197,0,202,42,103,88,194,0,197,191,86,188,192,64,128,131,136,234,51,22,34,0,42,72,60,202,103,29,191,201,128,89,162,224,5,153,138,200,207,80,73,36,65,20,138,160,4,191,194,162,207,196,10,84,24,51,143,168,155,2,33,48,10,199,84,48,136,133,135,168,50,51,70,212,155,64,86,132,162,73,21,95,170,8,65,204,113,24,145,51,67,130,23,24,81,155,22,4,226,204,0,173,140,211,97,68,155,32,82,177,12,191,101,0,31,35,106,155,13,2,35,202,0,155,128,0,71,137,161,139,2,207,3,2,97,16,51,162,2,128,56,155,40,88,5,203,251,8,73,163,34,131,51,68,37,100,100,155,170,0,97,64,101,51,32,99,97,16,51,32,70,84,48,193,84,70,155,3,2,53,1,43,35,234,52,155,49,8,88,82,101,18,128,117,17,21,75,149,155,0,70,148,155,64,16,66,14,0,0,16,9,10,97,51,194,136,155,2,17,99,129,8,195,65,4,10,149,51,192,136,155,20,170,116,34,35,32,38,29,49,194,51,130,0,191,48,162,155,17,2,98,100,146,33,12,51,32,20,43,169,130,119,68,5,6,96,155,17,229,0,83,144,155,81,48,136,229,51,60,25,90,57,191,89,20,207,89,17,168,0,37,9,66,5,192,32,51,16,42,100,81,207,80,65,12,34,51,4,170,88,20,207,1,0,131,24,51,161,0,22,5,207,67,64,13,219,255,10,84,104,105,115,32,102,111,110,116,4,105,127,251,108,101,32,104,97,13,98,101,101,110,32,99,219,254,114,101,97,116,101,100,47,2,105,6,253,155,19,121,32,67,80,73,97,100,111,191,9,86,49,46,50,48,55,67,111,112,127,249,121,114,105,103,104,40,67,41,32,49,57,191,238,57,51,45,4,54,40,107,111,254,219,115,116,84,64,97,99,109,46,111,114,103,187,219,31,75,15,97,32,75,21,7,27,41,113,112,114,187,255,111,103,114,97,109,32,109,97,121,111,32,117,214,186,115,99,102,114,9,107,237,111,102,122,132,54,223,90,9,126,32,121,111,117,214,182,114,17,119,141,105,0,252,115,107,46,13,10,0,0,0,0,0,18,255,164,232,58,0,114,250,65,232,47,0,227,59,115,249,131,233,3,114,6,136,204,172,247,208,149,49,201,232,27,0,17,201,117,8,65,232,19,0,115,251,65,65,129,253,0,243,131,209,1,141,3,150,243,164,150,235,200,232,2,0,17,201,1,219,117,4,173,17,192,147,195,94,185,1,0,172,44,232,60,1,119,249,139,28,134,223,41,243,137,28,173,226,238,195,0,0,0,0,0,0,129,252,154,193,119,2,205,32,185,88,22,190,88,23,191,58,193,187,0,128,253,243,164,252,135,247,131,238,198,25,237,87,87,233,185,191,85,80,88,33,11,1,4,8,207,252,254,146,249,225,194,50,204,191,192,21,6,207,187,252,255,70,79,78,84,32,0,0,1,110,57,1,23,6,253,253,5,0,28,0,77,38,14,69,71,65,201,205,30,32,225,2,254,216,53,36,3,0,18,38,16,8,149,197,10,0,109,255,126,129,165,129,129,189,153,3,126,254,131,15,255,219,255,255,195,231,255,255,230,119,0,108,254,62,236,124,56,16,48,16,56,124,253,192,14,24,60,60,231,178,182,0,24,6,15,101,110,126,59,15,179,179,34,24,9,222,177,255,0,231,195,95,63,246,0,31,60,102,66,66,102,255,146,60,195,153,189,189,153,195,254,33,30,14,26,50,120,204,222,235,0,120,32,45,185,230,0,79,97,187,159,15,63,51,63,48,0,112,240,249,200,224,0,127,99,127,99,158,189,103,231,230,192,124,24,219,135,221,160,60,219,46,128,187,253,192,224,240,248,254,248,45,192,128,191,254,31,2,6,14,30,62,254,62,30,14,6,2,107,73,43,94,124,103,60,0,102,152,155,7,95,231,54,219,0,123,27,255,155,0,124,198,96,56,108,198,198,108,56,12,6,228,198,124,0,254,67,102,79,126,111,96,15,0,189,96,15,0,254,150,112,17,12,254,12,119,201,12,0,48,96,254,6,228,96,48,0,192,97,86,92,161,118,57,40,108,40,14,80,88,159,178,183,160,124,125,138,14,91,14,56,175,188,192,0,24,60,102,175,140,143,33,235,233,36,32,139,185,108,94,3,173,254,54,241,194,192,124,6,6,134,30,214,239,193,194,198,38,223,174,48,96,198,134,46,20,14,12,118,220,193,26,175,118,189,129,109,0,96,78,139,185,43,0,229,185,89,15,8,150,141,0,24,226,21,22,222,255,229,132,129,162,237,6,182,20,108,192,49,254,215,150,173,49,249,21,226,159,192,128,248,48,174,214,214,14,118,178,39,56,120,89,16,129,46,246,228,124,198,198,254,15,216,78,6,60,2,6,253,67,223,12,28,60,108,204,254,156,208,176,30,141,254,3,214,252,31,56,144,187,96,15,198,198,198,102,238,254,63,243,115,195,79,26,31,125,1,11,126,11,219,63,12,120,186,11,123,4,15,98,147,48,158,146,26,53,6,194,201,222,2,0,246,98,27,35,95,37,76,12,223,182,179,16,222,0,220,97,20,196,46,59,219,108,144,254,15,108,60,252,102,241,124,134,244,252,111,212,21,239,0,194,242,233,161,16,248,108,63,123,108,248,15,254,102,98,104,132,252,120,104,96,98,102,254,192,182,0,240,63,77,126,222,198,198,102,58,97,239,105,110,111,107,194,60,125,48,49,38,30,13,119,73,239,230,106,179,110,120,120,116,230,15,179,216,240,96,0,111,146,127,79,238,254,254,214,242,219,15,230,246,254,222,206,121,88,111,198,155,45,223,65,39,236,240,31,214,222,151,228,124,12,14,227,41,217,230,31,226,178,66,80,63,9,123,126,126,90,175,22,178,198,95,15,37,15,108,56,16,67,254,214,214,214,254,238,108,107,166,108,142,97,159,102,13,206,11,203,79,27,134,33,31,127,194,22,236,60,48,0,31,254,10,193,112,56,28,118,178,175,60,12,0,98,12,60,220,141,144,230,236,52,108,255,24,233,3,120,12,124,175,22,46,224,25,120,102,17,226,207,28,19,2,0,185,195,223,28,105,45,43,0,47,128,140,31,254,198,251,54,50,48,120,175,207,240,93,118,46,204,223,161,95,210,95,108,50,158,118,230,220,3,97,56,79,107,75,9,0,219,0,204,16,23,47,113,198,0,230,144,156,47,56,53,186,0,236,0,76,214,0,198,15,220,203,102,161,159,108,9,159,31,246,177,4,240,159,144,22,210,25,237,220,159,31,76,96,228,118,9,223,16,217,178,223,252,222,54,28,31,16,94,61,15,130,49,0,71,192,15,0,183,132,154,27,48,83,56,117,47,212,181,4,12,3,135,82,204,79,205,217,254,239,14,112,100,61,14,247,9,131,63,218,123,27,35,36,64,248,201,220,223,139,52,226,79,149,52,239,118,122,254,98,28,255,230,94,16,16,171,63,43,105,239,90,25,175,105,74,223,124,239,64,14,124,145,180,223,105,178,111,198,223,82,8,224,48,72,222,109,237,130,99,91,130,2,169,7,239,14,233,254,255,198,182,64,31,107,224,98,48,91,98,191,86,210,223,180,146,159,246,177,215,124,109,124,166,11,164,207,216,123,28,30,31,23,97,123,36,47,105,40,238,15,220,216,96,108,0,220,47,224,139,219,216,60,248,48,252,161,190,100,31,53,124,218,4,63,158,33,197,211,143,36,59,120,192,223,97,58,125,159,97,52,148,60,255,144,105,73,107,157,47,62,189,196,43,217,63,79,151,49,191,198,111,246,204,248,248,204,191,143,120,95,75,108,15,238,194,223,246,99,33,9,178,179,6,161,48,79,56,99,23,74,60,96,127,28,66,72,111,114,47,63,0,108,72,143,252,79,227,157,126,216,0,191,134,193,50,178,230,26,84,79,33,105,254,111,3,123,127,207,58,132,92,114,16,157,64,95,16,214,176,147,31,17,68,1,133,188,85,170,46,228,221,119,24,187,192,0,248,13,100,33,15,228,217,54,0,246,54,27,22,192,15,100,9,47,216,121,246,6,0,205,18,61,180,144,31,47,44,89,238,17,75,22,15,143,100,13,0,67,54,248,191,31,60,97,47,24,24,255,201,144,255,194,26,114,200,218,31,63,12,217,45,31,54,36,15,55,191,216,19,55,48,63,109,149,74,191,217,133,31,247,95,27,108,109,247,63,100,33,47,101,179,31,47,101,179,63,47,97,176,221,255,47,100,33,95,70,118,255,223,22,18,134,175,13,75,223,189,132,63,239,201,133,63,63,36,11,79,132,32,45,95,36,140,175,155,108,79,255,0,97,33,159,228,176,0,240,72,134,15,88,88,54,228,48,143,68,88,15,8,16,143,150,91,15,95,229,18,15,30,150,79,245,102,178,65,14,31,18,86,79,129,244,63,255,33,233,4,8,175,183,176,102,15,47,28,48,143,64,128,91,24,159,15,104,96,126,170,120,205,30,175,126,15,44,246,58,126,64,15,133,193,79,8,180,15,255,59,91,47,60,31,2,1,143,172,82,93,150,212,65,22,164,62,16,144,74,110,246,94,15,188,111,6,23,102,31,231,82,80,42,2,15,9,238,144,88,151,12,48,31,129,172,172,176,97,66,0,219,243,15,12,236,52,60,53,8,95,108,129,129,88,44,217,22,160,50,188,147,47,0,126,6,144,0,14,193,11,5,28,97,3,126,7,22,1,126,128,4,255,147,32,253,149,4,251,74,130,249,56,65,247,140,36,245,88,18,243,140,36,241,93,18,239,120,36,152,39,236,78,176,235,44,9,234,130,19,233,73,112,232,231,152,74,36,130,18,229,4,75,228,112,170,227,50,72,73,225,36,36,222,24,18,221,48,36,219,28,73,218,0,146,160,215,172,55,13,1,73,176,210,39,8,209,132,4,207,147,32,205,149,4,203,76,130,201,84,18,199,69,130,195,147,192,118,193,132,4,190,147,32,189,150,4,188,240,9,187,102,198,28,72,185,118,82,18,95,52,9,181,146,224,6,179,32,217,32,18,156,176,174,176,64,75,194,24,254,251,73,16,165,147,90,68,151,4,163,126,150,4,161,4,167,32,28,150,159,163,92,18,157,30,2,18,155,73,240,27,153,4,111,13,193,236,151,212,112,32,149,124,96,73,147,65,146,146,9,38,128,142,98,43,179,18,188,30,139,9,86,136,4,9,193,139,135,60,43,37,132,243,72,37,145,18,76,252,127,36,88,126,78,16,125,212,9,124,167,150,139,138,163,101,13,216,37,193,119,66,234,102,58,149,132,212,131,32,193,60,113,234,108,237,230,100,89,142,108,108,36,24,240,108,58,181,139,53,144,138,117,33,136,124,200,32,101,124,150,77,240,27,129,9,98,112,32,97,230,108,73,95,55,59,53,125,153,72,45,202,36,88,88,18,36,87,54,35,215,13,94,41,28,102,37,164,179,106,155,69,247,140,4,203,160,4,135,79,60,130,149,76,130,65,75,60,24,72,73,255,3,36,69,240,4,67,118,28,72,65,124,2,18,63,73,240,195,61,92,118,118,27,254,9,146,57,144,96,124,56,12,24,118,150,32,65,53,72,48,230,51,18,28,60,49,36,88,47,33,36,191,120,177,38,41,36,36,43,18,18,9,38,164,151,124,97,194,27,124,193,96,217,139,59,144,33,240,55,38,47,112,28,212,9,29,130,132,172,66,66,26,191,49,91,13,171,101,134,245,128,13,41,130,167,131,124,30,73,17,131,46,9,15,14,9,9,13,129,4,11,32,193,112,9,77,74,102,27,32,113,8,172,152,3,53,32,150,0,59,48,143,254,27,4,38,240,177,205,154,254,179,41,233,13,99,131,1,247,124,96,101,167,13,22,112,216,195,24,240,240,216,204,198,241,74,74,99,190,151,103,79,254,176,146,113,44,25,231,209,72,182,195,1,15,227,97,135,226,126,139,201,34,191,150,1,221,4,3,220,118,56,173,148,83,16,96,101,161,151,22,70,12,3,113,145,140,68,3,62,191,248,204,210,192,45,71,6,60,208,207,64,90,29,192,100,112,199,100,203,120,243,177,140,159,50,192,224,199,74,70,201,192,50,116,176,100,195,125,97,64,192,48,96,190,101,65,112,32,216,48,111,128,214,19,1,37,205,186,1,49,96,183,76,72,29,252,7,6,179,112,150,1,177,46,9,128,254,151,144,1,111,24,48,181,92,24,65,68,243,8,3,16,96,50,96,163,6,4,159,192,85,248,96,101,155,192,50,153,32,101,151,192,50,149,88,100,147,172,12,143,128,7,141,64,202,139,96,101,137,24,50,135,31,43,12,131,144,1,81,202,128,125,101,192,123,54,32,119,31,48,66,128,25,117,192,202,115,12,120,113,111,1,35,50,224,109,107,25,144,105,50,96,103,25,48,101,128,91,27,92,97,97,63,17,6,93,6,188,209,89,192,20,255,92,97,85,248,0,6,81,194,128,77,24,176,75,12,88,71,129,169,68,189,73,47,8,16,253,73,111,13,211,73,111,13,197,50,96,61,48,96,14,59,45,59,28,55,3,38,127,55,82,44,134,45,11,13,176,236,41,125,96,25,49,56,48,47,126,37,12,45,73,136,13,28,129,1,41,97,192,124,39,86,44,13,221,12,88,34,6,164,32,12,88,30,224,45,220,146,75,91,102,25,16,25,12,8,23,30,176,21,32,3,18,50,96,24,15,6,28,60,28,13,3,86,11,1,33,112,129,8,8,96,25,5,3,28,252,251,96,128,246,0,13,245,108,4,152,238,233,208,22,6,56,95,43,129,13,15,254,128,7,25,2,76,215,209,4,8,203,8,16,197,1,62,15,7,15,125,191,32,128,186,112,128,180,1,10,179,174,6,248,103,230,192,167,208,0,168,128,13,14,161,32,120,128,2,155,2,0,7,66,19,192,51,143,192,0,138,187,27,137,0,62,97,73,60,134,94,176,124,208,39,4,248,38,255,114,188,195,114,15,72,2,101,0,7,95,192,151,89,36,102,255,15,56,18,159,188,24,239,46,6,2,61,208,240,70,173,36,104,8,49,86,252,87,24,62,131,240,224,124,24,91,0,15,35,56,100,245,30,118,204,152,134,249,48,192,124,15,12,64,18,6,176,37,0,43,3,97,126,214,24,86,232,189,234,99,214,225,197,90,221,194,23,95,201,28,229,175,186,7,60,179,113,86,202,30,224,125,115,252,15,241,232,169,252,173,83,172,234,121,44,245,189,2,7,126,245,98,171,116,247,102,98,119,103,86,143,170,148,245,72,166,89,125,141,124,136,92,185,7,130,122,37,107,135,172,70,61,252,118,204,96,252,204,189,50,208,107,86,95,105,254,100,104,54,254,7,213,103,245,31,206,193,194,87,224,11,86,77,47,193,106,30,69,6,163,230,127,240,20,172,57,139,73,193,203,226,197,202,222,48,30,111,127,143,69,15,206,124,14,241,34,55,202,125,33,12,127,164,247,11,87,165,8,53,86,65,42,248,34,22,157,157,244,155,100,60,221,72,231,50,111,60,8,82,223,83,7,151,217,58,41,213,60,97,224,38,97,212,33,186,212,128,188,118,26,192,57,117,220,195,164,176,127,67,170,22,221,83,164,124,151,96,58,163,248,245,118,229,154,9,248,47,84,59,146,175,10,239,140,127,105,184,167,132,60,23,70,61,0,230,214,145,90,116,24,22,206,22,12,109,15,77,54,124,79,30,179,72,86,95,130,139,126,75,135,197,169,74,144,154,71,67,96,212,86,48,172,251,27,139,0,23,126,47,26,156,55,223,126,129,167,33,112,97,27,214,137,12,179,220,18,107,88,70,252,84,74,247,145,59,249,127,37,156,142,254,247,194,132,87,239,35,76,124,247,124,132,36,239,96,52,198,165,132,239,212,66,160,56,73,40,159,247,8,70,169,108,73,255,15,96,132,19,205,239,134,48,207,16,140,138,161,146,231,118,224,5,12,160,77,153,210,209,246,115,87,252,55,139,105,38,151,83,33,211,23,55,163,90,111,66,166,56,225,232,97,127,6,12,232,31,126,237,135,193,123,198,163,71,173,55,205,232,60,235,163,24,46,42,71,7,56,126,35,18,94,224,63,183,139,209,24,15,102,20,15,189,143,12,112,7,8,131,103,254,183,96,48,230,177,18,222,92,184,175,118,236,16,200,34,136,1,67,104,217,26,66,212,180,18,202,132,38,154,190,33,52,184,13,161,178,26,9,172,208,18,160,16,154,154,148,129,208,142,128,208,248,130,3,161,124,1,161,255,112,195,98,15,31,2,66,94,144,135,82,55,38,148,76,180,132,70,18,58,64,58,134,208,52,52,132,46,161,33,40,34,204,45,15,111,32,52,16,75,40,10,44,102,119,254,226,13,39,216,192,242,215,22,111,39,221,44,6,215,88,12,203,176,24,194,139,211,71,188,184,199,71,7,225,98,47,7,147,152,39,205,6,139,14,164,28,68,198,31,198,102,39,215,102,7,58,230,15,71,64,184,92,79,79,64,190,124,217,222,2,62,64,182,167,62,155,180,64,188,39,7,98,80,246,239,246,23,76,8,28,47,131,24,199,46,60,56,126,71,184,88,85,5,131,94,79,106,114,48,81,89,76,15,62,204,98,56,24,88,51,69,50,110,47,130,33,31,107,22,27,221,171,220,80,74,72,23,0,0,13,98,51,14,200,129,76,82,3,33,71,105,38,100,4,130,162,70,17,3,2,77,24,153,6,49,204,243,3,6,104,88,68,3,6,24,105,101,17,83,132,189,47,15,86,128,152,15,9,18,88,8,89,47,13,139,115,97,239,111,79,95,102,42,72,15,1,18,231,12,89,31,102,129,69,83,133,181,6,15,128,189,47,15,72,196,198,19,152,75,141,15,132,75,220,8,25,243,66,6,210,90,172,169,245,110,12,22,234,62,210,254,201,30,15,206,255,33,16,3,50,32,244,108,89,175,15,33,188,48,120,79,217,97,31,15,46,98,35,217,146,198,76,217,44,63,28,48,104,186,174,30,4,124,206,100,7,225,230,124,64,96,100,96,202,4,141,115,179,82,28,29,205,218,30,31,83,66,124,14,26,163,27,147,24,14,177,212,1,176,16,175,3,225,239,79,45,123,15,207,133,236,47,191,40,28,173,112,73,147,12,33,169,163,98,163,60,201,54], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102405);
  /* memory initializer */ allocate([209,18,35,36,155,217,203,59,3,167,2,96,192,36,64,51,162,251,130,178,170,170,2,130,181,12,99,0,76,1,22,78,119,224,168,108,98,11,232,220,178,45,152,62,15,154,253,102,206,154,63,34,232,157,46,188,54,44,150,133,204,60,54,108,216,0,102,183,13,108,216,96,16,51,180,80,148,108,100,111,15,33,47,96,48,119,108,239,154,162,0,136,88,154,239,161,50,51,157,98,255,94,146,4,193,16,41,168,12,226,241,51,177,138,203,152,18,95,9,115,12,255,100,16,51,164,80,15,98,208,137,126,16,127,52,24,44,6,62,4,61,190,34,151,3,246,100,29,191,31,23,54,198,15,48,18,88,63,199,146,63,15,176,2,83,204,53,172,15,72,38,0,25,68,51,179,80,64,189,96,71,159,176,144,127,54,172,183,159,111,81,132,182,156,179,204,204,255,38,108,31,48,195,202,47,210,182,44,31,12,1,74,147,144,3,102,12,96,192,195,4,104,124,163,204,6,240,14,190,83,44,143,198,221,64,127,198,50,36,198,188,22,159,110,9,63,12,33,16,179,11,35,57,2,123,95,0,90,66,187,133,44,16,18,66,231,88,223,189,48,98,54,236,111,43,74,51,81,42,202,102,25,0,232,65,255,17,178,29,43,155,148,42,34,96,10,18,177,144,76,41,88,33,12,162,124,51,170,160,66,17,137,9,30,24,112,3,9,46,118,1,19,1,208,203,128,255,217,123,27,41,13,50,96,251,48,96,118,249,139,56,118,43,123,9,97,69,98,217,83,91,118,246,13,68,96,89,111,224,50,239,60,55,48,237,13,150,189,41,13,44,3,233,18,6,231,45,3,229,96,25,164,66,53,227,24,96,192,110,225,24,112,206,223,1,27,153,27,200,198,198,13,101,192,217,217,178,251,13,17,111,55,179,36,229,66,244,102,55,24,112,100,32,2,192,29,207,230,124,128,128,101,205,25,240,204,203,203,128,202,224,84,99,156,48,199,216,112,88,6,197,9,75,177,23,101,111,13,181,150,189,41,167,44,3,189,18,6,187,43,3,185,132,1,183,197,128,181,15,152,83,179,132,1,178,224,128,177,205,25,175,99,110,195,182,195,133,31,13,204,232,54,110,218,60,128,7,171,24,240,170,168,3,22,166,6,49,51,96,85,176,48,155,72,24,153,36,12,151,88,6,149,16,15,148,66,100,51,48,3,139,3,30,138,137,16,9,0,100,51,203,128,121,192,128,118,119,32,220,223,169,194,51,146,1,103,24,208,3,101,1,26,233,69,38,246,9,169,149,155,58,176,198,13,48,198,74,183,215,12,72,89,100,183,13,60,102,66,14,0,25,68,51,177,16,56,59,115,14,6,48,111,97,9,48,210,105,96,211,1,19,120,189,146,66,78,100,151,27,48,41,48,96,48,192,108,124,10,32,100,58,1,51,40,3,150,55,53,48,100,224,3,30,52,51,198,46,124,111,198,89,66,13,53,107,11,3,146,151,43,19,44,26,202,128,39,12,56,254,34,1,139,169,140,31,99,225,70,52,115,128,84,48,192,25,188,98,129,109,64,6,19,96,192,24,15,12,88,13,24,68,51,64,1,38,98,250,40,70,255,140,78,214,118,246,48,26,124,240,99,110,118,23,7,96,108,147,48,23,56,147,152,227,5,163,112,210,186,9,239,7,48,70,193,63,192,204,13,60,31,7,199,92,23,7,198,16,98,16,164,40,231,71,39,177,25,65,44,248,53,66,213,236,71,11,127,110,151,160,163,150,206,70,193,65,71,55,27,87,7,55,35,126,143,112,179,7,31,218,137,43,6,23,41,129,14,30,189,39,95,71,143,94,90,61,35,89,58,108,48,218,15,108,184,78,212,209,72,60,51,122,71,66,48,123,247,159,230,102,213,217,95,48,10,42,32,220,7,100,244,252,31,13,163,25,209,25,18,124,49,154,12,11,237,131,254,4,99,107,189,251,126,51,102,204,15,7,122,54,106,223,76,168,17,244,237,14,193,22,102,51,112,95,68,102,9,2,131,51,132,22,151,55,207,218,156,7,96,48,135,38,178,136,67,177,132,50,51,20,28,188,101,14,28,191,250,98,66,141,130,12,51,152,208,94,98,118,23,127,136,12,51,239,80,40,205,113,232,118,24,108,34,202,71,155,246,123,24,247,16,89,56,99,0,23,48,8,203,31,159,17,40,230,11,22,251,6,8,55,7,133,50,51,13,18,32,48,195,130,63,27,61,14,87,55,198,162,213,188,204,225,29,95,15,95,44,222,7,159,197,27,124,239,139,9,171,130,143,226,192,90,139,23,137,147,209,220,7,71,179,152,119,137,205,30,175,15,56,163,23,159,12,139,119,121,119,107,98,0,126,98,203,93,10,253,31,42,225,50,228,58,246,42,95,134,130,0,52,73,128,51,6,22,62,120,152,183,135,24,178,46,24,226,176,33,60,22,15,43,122,25,196,120,51,144,3,181,114,60,25,83,157,76,20,145,130,146,200,130,32,81,33,131,39,97,16,51,130,80,132,12,135,133,65,51,12,130,151,100,163,0,131,96,167,16,33,8,101,51,200,32,199,25,68,51,8,66,17,50,231,84,6,51,44,130,7,65,132,8,150,51,172,178,23,101,17,7,139,32,39,217,9,4,8,15,17,156,88,101,39,200,128,167,16,163,34,100,51,42,3,183,25,68,51,98,16,42,9,39,6,17,51,98,85,40,9,103,25,68,51,34,20,32,9,215,25,196,51,34,20,2,11,71,16,161,70,101,51,182,32,135,96,182,66,54,49,9,149,5,151,174,4,207,97,16,51,32,66,43,176,199,96,16,51,130,8,16,203,215,28,101,51,102,136,148,177,12,7,149,0,151,32,182,206,198,132,16,167,148,65,51,2,17,169,64,150,1,249,194,32,51,4,11,72,72,67,176,12,233,145,68,81,48,96,225,32,134,124,176,200,51,98,25,219,139,12,51,72,4,151,131,72,51,65,34,18,22,147,203,32,51,89,4,161,8,22,193,178,147,66,22,175,4,135,19,86,89,175,50,32,95,68,0,72,24,51,200,128,109,6,145,51,88,20,200,128,207,65,132,88,145,51,72,130,7,6,17,51,72,21,66,130,105,6,49,51,72,21,64,130,203,68,32,17,25,51,44,136,3,102,43,48,65,76,65,100,17,131,120,8,16,51,177,2,149,5,59,12,98,51,65,172,136,100,73,12,50,51,86,6,19,18,32,211,2,196,113,241,90,219,129,0,127,12,34,51,128,0,20,18,161,32,71,65,4,8,133,51,65,40,119,96,16,51,132,130,127,25,133,152,161,32,135,6,49,51,10,66,68,16,151,8,25,51,65,40,167,100,16,51,163,32,55,65,4,10,130,51,16,50,63,130,81,55,48,10,71,193,236,211,7,70,70,71,18,32,135,16,11,136,96,51,140,4,143,144,65,51,128,88,17,74,199,80,6,51,4,136,231,65,140,88,144,51,200,128,31,25,68,51,136,17,8,12,87,6,177,51,136,80,133,12,119,32,134,27,136,50,127,152,69,104,43,131,51,24,16,151,32,22,16,201,51,136,24,159,16,50,51,32,14,241,193,18,55,28,86,255,211,33,64,7,12,34,51,146,167,233,116,80,240,228,90,209,114,145,85,103,146,20,128,160,21,200,34,21,163,22,122,248,78,171,160,102,103,32,40,1,171,21,156,91,102,21,96,103,122,80,124,194,5,31,3,194,124,65,88,103,144,83,29,191,60,25,101,5,153,145,65,51,146,20,130,130,66,222,0,5,43,72,89,103,45,33,83,37,0,106,11,106,139,84,33,178,96,52,7,91,246,16,8,40,15,73,208,166,171,96,103,84,43,32,97,173,42,171,103,69,112,102,0,75,36,15,239,192,42,130,3,139,10,35,223,222,255,60,66,153,165,161,165,153,66,14,178,10,103,5,144,40,101,131,50,3,109,172,130,103,0,42,1,16,176,236,9,0,149,85,103,70,0,10,3,249,16,12,112,146,239,7,24,244,254,132,1,242,96,192,0,239,12,24,237,85,176,128,145,103,5,203,233,23,89,103,102,41,130,0,199,64,10,22,96,219,164,8,157,80,175,56,68,177,95,205,68,56,42,172,130,184,103,25,176,211,15,8,209,42,48,0,194,103,1,43,130,129,23,2,172,103,148,160,82,97,224,179,10,103,32,5,195,1,163,210,14,81,147,20,140,191,163,100,193,187,21,12,163,96,103,176,21,12,42,100,103,20,28,130,108,9,239,119,21,164,10,102,103,21,4,215,130,16,147,12,10,15,4,53,208,155,123,7,2,19,201,40,172,103,116,168,8,211,42,152,24,135,202,103,13,10,183,255,84,104,105,115,32,102,111,110,116,4,105,108,255,246,101,32,104,97,13,98,101,101,110,32,99,114,183,253,101,97,116,101,100,47,2,105,6,251,55,19,121,32,67,80,73,97,100,9,223,126,86,49,46,50,48,55,67,111,112,121,255,242,114,105,103,104,40,67,41,32,49,57,57,127,221,51,45,4,54,40,107,111,115,253,183,116,84,64,97,99,109,46,111,114,103,118,183,31,75,15,97,32,75,21,15,54,41,113,112,114,111,119,255,103,114,97,109,32,109,97,121,111,32,117,115,173,117,99,102,114,9,214,218,111,102,122,132,54,191,181,9,126,32,121,111,117,114,173,109,17,119,141,105,0,248,115,107,46,13,10,0,0,0,0,0,36,255,164,232,58,0,114,250,65,232,47,0,227,59,115,249,131,233,3,114,6,136,204,172,247,208,149,49,201,232,27,0,17,201,117,8,65,232,19,0,115,251,65,65,129,253,0,243,131,209,1,141,3,150,243,164,150,235,200,232,2,0,17,201,1,219,117,4,173,17,192,147,195,94,185,1,0,172,44,232,60,1,119,249,139,28,134,223,41,243,137,28,173,226,238,195,129,252,206,231,119,2,205,32,185,79,21,190,79,22,191,110,231,187,0,128,253,243,164,252,135,247,131,238,198,25,237,87,87,233,237,229,85,80,88,33,11,1,4,8,16,64,55,228,89,199,127,83,0,230,183,20,6,69,187,252,255,70,79,78,84,32,0,0,1,110,57,1,23,6,253,253,6,0,28,0,77,38,14,69,71,65,201,205,30,32,3,3,183,216,53,36,12,18,38,178,216,16,8,10,0,237,191,126,129,165,129,129,189,153,3,127,176,126,15,255,219,255,255,195,231,252,206,255,255,0,108,254,135,221,124,56,16,48,16,31,216,56,124,14,24,60,60,214,182,231,0,24,6,15,204,77,126,59,15,118,182,34,24,9,59,118,255,0,231,195,95,199,222,0,31,60,102,95,242,66,66,102,60,195,153,189,63,228,189,153,195,30,14,26,50,123,221,120,204,0,120,32,45,215,220,0,79,97,247,51,15,63,51,63,48,0,31,121,112,240,224,0,127,99,127,99,179,55,103,231,230,192,124,176,219,24,219,160,60,219,46,183,255,128,192,224,240,248,254,248,45,192,128,255,99,191,2,6,14,30,62,254,62,30,14,45,201,6,2,43,239,108,94,60,0,115,147,102,7,95,220,6,219,0,123,27,127,243,0,124,198,96,56,108,198,198,128,252,108,56,12,198,124,0,200,204,254,79,13,108,126,15,23,236,0,15,0,223,178,112,17,12,46,217,254,12,12,0,128,252,48,96,254,96,48,0,204,202,192,92,46,39,161,40,108,40,10,203,14,159,246,22,160,124,125,138,97,75,14,56,175,23,216,0,24,236,149,60,140,143,100,221,233,36,32,49,55,108,94,3,223,102,173,241,194,192,124,6,195,218,6,134,239,193,228,219,194,198,174,48,96,198,134,133,194,14,12,88,195,118,220,175,118,189,176,45,0,96,78,49,55,43,0,55,107,229,15,8,178,49,0,24,226,194,194,222,255,229,48,176,162,192,150,237,20,13,216,49,254,178,149,215,49,191,194,226,159,192,128,31,38,174,214,214,193,14,178,39,11,194,56,120,129,46,158,60,124,198,198,254,219,201,15,6,60,2,6,127,8,223,12,28,60,108,204,19,186,254,176,30,141,192,154,254,252,31,114,119,56,96,15,198,198,198,204,29,254,63,243,110,216,79,26,47,96,31,11,97,187,126,63,12,120,186,97,111,4,15,108,114,48,158,82,67,53,6,194,217,91,2,0,94,44,27,35,132,201,95,12,223,118,182,16,222,0,140,194,220,196,46,103,59,108,144,254,141,103,15,252,102,241,144,158,124,252,111,186,194,239,0,194,62,157,161,16,248,108,103,79,108,248,15,254,144,255,102,98,104,120,104,96,98,102,254,216,150,0,240,63,201,15,222,198,198,102,58,236,189,105,110,111,77,56,60,125,198,100,48,30,13,46,41,239,230,214,237,106,120,120,116,230,15,22,123,240,96,0,111,242,111,79,238,254,254,214,126,91,15,230,246,254,222,206,15,75,111,198,179,37,223,132,125,65,240,31,146,252,214,222,124,12,14,37,251,227,230,31,86,40,226,80,63,97,79,126,126,90,175,66,54,198,95,228,193,15,108,56,16,200,191,214,214,214,254,238,108,205,116,108,142,97,172,97,159,206,97,217,79,27,228,99,134,127,194,130,61,60,48,0,95,193,31,193,112,78,214,56,28,175,60,12,140,193,0,60,220,17,82,230,157,166,108,255,125,128,24,120,12,124,194,37,175,224,25,44,194,120,226,207,99,194,2,0,119,152,223,28,105,101,37,0,47,144,177,31,254,120,31,54,50,48,120,175,190,203,207,118,46,204,59,20,95,210,95,198,243,108,118,230,220,32,76,56,79,109,105,9,0,219,25,98,0,23,206,152,47,0,230,146,51,47,56,70,23,0,236,0,201,186,0,198,15,217,140,220,161,159,45,97,159,62,150,31,4,240,210,194,159,210,163,29,220,159,31,9,44,228,46,129,223,16,246,219,217,252,222,54,28,31,194,75,61,15,48,6,0,8,88,15,150,240,0,154,102,234,27,56,117,47,186,22,4,12,224,144,82,204,57,123,79,254,239,14,172,167,112,14,247,97,144,63,123,47,27,35,36,8,95,201,220,223,145,6,226,244,97,79,30,54,102,249,132,239,254,98,96,96,37,45,255,146,105,207,113,75,118,240,63,0,45,49,167,129,27,32,255,233,107,112,84,84,112,3,4,90,7,63,119,11,120,206,222,246,115,179,230,127,20,15,72,9,239,29,206,108,239,210,133,111,198,239,172,16,79,20,210,239,88,179,27,223,82,91,224,255,177,18,223,19,73,223,126,199,101,191,124,107,228,165,207,124,16,56,100,11,110,236,208,255,132,63,200,182,0,0,118,200,214,254,15,193,66,47,110,233,248,176,176,234,54,0,14,88,79,246,222,203,234,0,246,255,24,8,159,75,110,95,38,62,38,123,186,204,79,246,204,207,122,4,218,64,122,176,206,239,24,188,6,124,175,78,88,34,124,24,201,95,34,18,210,98,15,61,28,146,255,195,228,37,95,254,192,240,177,2,124,204,146,255,162,1,107,1,31,44,8,241,15,22,242,198,124,38,61,2,239,89,200,111,15,210,99,2,239,48,6,1,20,82,239,158,189,28,31,17,68,242,194,1,85,170,144,23,221,119,2,187,24,0,133,236,248,13,103,147,15,54,0,246,88,144,54,128,37,108,15,231,145,47,246,6,75,96,0,61,66,54,31,100,209,47,238,89,176,17,15,53,44,143,217,144,0,248,191,132,13,31,47,67,242,24,24,255,255,107,36,114,107,11,31,63,100,35,45,144,48,31,15,79,216,55,191,55,48,63,42,97,109,23,86,191,31,247,176,101,95,109,133,108,247,63,205,146,47,31,205,150,47,63,193,150,47,221,133,132,255,47,217,145,95,255,223,72,24,134,44,89,175,223,18,54,63,23,246,239,63,63,44,36,79,130,144,45,48,18,95,178,145,175,79,133,108,255,0,72,8,175,144,54,36,30,207,3,151,15,148,144,144,175,196,139,135,48,152,191,255,145,173,31,56,129,1,60,144,50,159,147,39,2,56,16,12,202,124,16,207,89,131,207,122,179,15,61,214,50,175,255,203,18,15,129,100,47,2,204,128,1,143,38,176,1,9,188,255,2,9,43,159,32,93,95,62,35,112,204,1,204,129,101,207,1,50,26,206,175,152,48,63,220,178,191,15,101,208,245,207,96,46,18,31,35,163,175,44,102,63,191,5,183,15,8,70,70,47,22,19,127,63,50,88,31,44,222,111,63,244,37,15,254,109,100,79,31,216,144,252,77,35,163,31,176,120,95,47,51,151,238,0,6,144,0,14,193,11,5,28,97,3,126,7,22,1,126,128,4,255,147,32,253,149,4,251,74,130,249,56,65,247,140,36,245,88,18,243,140,36,241,93,18,239,120,36,152,39,236,78,176,235,44,9,234,130,19,233,73,112,232,231,152,74,36,130,18,229,4,75,228,112,170,227,50,72,73,225,36,36,222,24,18,221,48,36,219,28,73,218,0,146,160,215,172,55,13,1,73,176,210,39,8,209,132,4,207,147,32,205,149,4,203,76,130,201,84,18,199,69,130,195,147,192,118,193,132,4,190,147,32,189,150,4,188,208,9,187,146,224,90,185,146,224,118,95,72,144,181,4,45,200,178,128,179,32,56,65,176,129,36,174,48,96,75,254,22,72,168,43,9,165,96,82,68,224,146,163,126,17,144,161,203,232,240,95,9,14,163,157,9,46,30,155,120,1,27,183,36,153,13,118,130,151,212,144,96,149,36,56,124,147,73,176,146,147,32,128,149,4,142,4,177,179,146,192,113,139,72,176,136,36,72,135,9,94,60,132,2,41,211,144,74,129,36,152,252,127,33,176,206,112,130,125,178,78,124,203,178,215,170,13,224,192,213,245,146,119,102,58,107,33,37,195,130,9,60,234,64,113,120,82,75,127,126,18,76,240,108,29,90,120,96,73,122,217,146,105,209,38,172,182,252,37,164,100,156,224,27,98,7,18,97,230,150,4,95,83,195,55,125,192,178,153,130,133,10,65,66,88,51,34,87,215,149,98,13,28,144,224,102,83,109,54,69,247,44,129,140,48,28,18,79,60,86,18,76,6,9,75,60,32,9,73,144,96,255,69,72,12,131,32,193,118,65,18,111,181,95,193,75,195,217,37,61,118,27,72,114,254,130,37,57,124,96,64,56,118,4,49,150,193,128,53,230,112,32,51,60,96,73,49,144,144,47,197,134,191,38,144,224,41,43,97,145,9,66,106,55,38,108,124,27,124,150,29,193,139,3,9,33,242,178,240,55,112,28,147,96,29,150,4,28,9,9,26,108,9,191,13,32,193,22,22,46,25,68,44,2,114,36,24,124,17,224,145,131,224,146,15,14,144,144,13,28,72,11,112,4,18,9,193,164,102,42,33,5,0,193,224,74,154,82,127,97,192,255,224,189,237,55,210,50,252,127,208,66,204,172,25,248,151,6,172,229,12,72,243,37,37,113,152,108,97,198,37,12,237,105,37,197,113,1,33,144,134,231,127,114,45,67,176,66,99,40,25,222,128,67,218,56,1,201,219,3,134,218,216,1,9,3,134,215,212,36,164,0,19,6,210,240,50,224,240,176,188,208,97,64,206,130,43,95,121,12,88,203,128,217,139,160,249,201,246,204,58,48,199,206,16,64,113,140,25,195,187,12,184,252,192,7,12,191,101,192,240,77,244,128,188,177,148,127,184,146,10,193,29,146,219,27,28,6,101,192,164,101,135,194,13,73,135,194,113,54,108,97,13,96,72,194,99,25,172,117,37,45,113,176,96,198,100,64,163,12,8,159,128,171,248,192,202,155,111,97,153,112,12,56,149,6,172,147,128,65,192,202,143,12,120,141,139,6,164,137,3,86,135,128,33,31,176,194,131,8,25,81,172,12,125,82,6,123,100,3,119,31,1,35,12,152,117,115,7,172,113,194,128,111,30,48,109,41,3,107,150,1,105,35,3,103,149,1,101,6,184,27,97,192,21,63,27,97,93,209,97,192,89,6,76,255,85,192,21,248,8,96,81,41,12,77,164,3,79,85,129,182,13,193,150,133,121,44,3,71,70,24,31,214,194,27,97,36,48,60,203,25,48,252,61,192,107,97,96,132,245,192,48,56,43,97,54,95,146,45,13,88,201,41,97,64,178,125,48,97,46,240,28,24,44,252,179,6,42,137,174,89,98,97,192,128,204,39,66,232,206,89,172,195,23,39,160,189,48,28,214,92,72,245,16,8,205,27,89,196,91,55,214,150,167,13,230,11,139,233,137,9,79,55,133,197,233,73,188,55,55,209,110,13,254,0,44,100,192,27,139,23,67,219,120,11,83,192,146,41,128,97,9,228,200,5,8,14,176,252,192,1,251,6,48,246,245,76,128,108,238,11,2,233,6,230,96,56,131,13,28,190,15,254,183,96,2,215,64,16,209,128,32,203,240,65,197,15,7,15,125,1,12,191,186,3,4,180,80,128,179,192,15,174,103,230,192,6,48,167,168,117,128,128,161,3,44,239,2,155,56,192,2,66,0,6,51,6,152,143,138,221,0,137,0,62,97,222,219,73,60,134,253,208,192,247,39,38,255,157,38,114,53,18,224,15,101,56,64,95,184,4,89,36,3,20,237,18,240,128,159,240,30,114,46,27,8,61,70,240,218,114,37,163,9,49,87,148,248,24,62,96,192,104,40,144,156,204,128,7,35,56,178,122,30,118,204,139,85,62,116,34,64,13,9,240,19,6,75,128,0,132,97,43,131,43,183,24,232,116,12,247,214,185,114,254,221,62,136,194,253,28,2,29,187,46,179,10,202,239,171,30,197,252,15,71,87,191,252,5,98,133,243,121,239,61,79,2,7,23,171,126,171,116,55,171,98,119,94,189,103,129,149,172,148,190,122,143,141,124,220,172,136,7,222,38,134,192,120,135,2,189,1,246,67,27,195,56,87,6,208,107,227,171,105,254,238,52,27,254,7,171,207,239,31,206,87,32,144,118,219,140,243,47,30,13,86,69,230,53,24,127,240,44,102,57,195,122,53,47,2,189,46,158,196,27,111,228,239,151,15,206,124,14,215,94,55,95,168,176,58,127,126,69,26,70,253,21,132,86,222,32,248,0,12,30,47,155,103,247,244,39,11,50,111,130,84,60,223,212,1,151,78,202,217,213,60,24,184,234,97,113,72,186,134,101,74,215,26,139,224,138,220,58,204,204,127,52,36,38,98,247,224,124,151,96,248,166,206,71,118,9,78,185,248,47,146,239,212,175,228,127,167,10,105,132,61,184,60,23,0,230,90,70,214,2,145,116,50,12,24,109,54,22,15,124,79,72,77,30,86,181,179,95,126,109,157,114,163,74,169,73,73,67,70,13,86,144,10,55,44,194,0,23,156,64,93,126,79,53,223,126,33,112,169,83,31,25,238,13,12,18,169,83,17,7,169,9,62,2,192,53,207,33,76,33,255,30,185,15,57,52,61,127,10,198,129,36,255,181,113,168,56,29,140,134,159,196,48,59,124,7,140,146,247,193,45,225,198,247,75,136,102,247,193,120,12,111,43,98,255,126,88,49,118,176,98,107,204,96,124,39,172,36,231,246,81,97,254,101,140,134,119,113,96,48,10,197,163,103,172,120,54,46,89,17,38,195,138,30,152,21,22,176,172,14,84,154,247,227,51,154,87,54,28,14,71,1,136,61,135,60,255,225,77,255,31,0,102,20,24,154,197,47,248,81,48,12,250,130,6,7,62,65,16,255,16,58,47,244,88,194,247,102,79,1,34,136,1,52,132,217,161,33,212,202,66,43,154,67,104,190,26,66,184,208,16,178,161,145,172,160,9,45,154,13,161,148,29,8,142,248,10,8,130,58,16,124,255,22,16,112,15,52,44,31,40,32,94,9,121,82,55,104,66,76,67,75,70,64,45,161,58,104,8,52,66,67,46,40,18,26,34,195,220,15,111,2,66,16,182,132,10,119,192,98,254,44,222,39,242,135,13,215,31,2,22,227,76,179,214,7,23,17,229,209,74,175,184,159,105,36,137,192,127,54,25,252,15,244,72,129,51,224,175,121,141,23,170,128,8,72,103,155,205,127,31,7,134,197,145,104,51,127,0,113,246,128,63,246,206,194,127,122,252,23,44,116,7,22,141,129,109,120,113,126,103,57,216,82,248,159,20,195,159,93,25,236,162,17,24,176,56,60,57,139,87,94,65,91,60,126,194,47,134,6,174,252,17,152,201,34,47,11,22,41,136,134,64,87,191,205,17,47,254,134,28,112,194,102,153,254,23,210,53,206,0,0,131,24,51,3,114,129,76,4,144,39,105,38,50,130,20,17,10,6,65,72,195,72,73,179,44,35,131,149,17,147,50,136,51,21,161,35,152,165,179,196,10,17,25,51,164,32,19,20,140,136,133,3,40,50,51,73,65,99,129,72,99,16,9,72,32,83,36,43,67,149,21,51,176,130,35,86,48,19,10,86,65,194,3,88,72,243,33,41,227,97,16,51,249,86,0,255,72,14,240,133,100,15,136,132,54,0,48,51,144,6,108,127,136,176,145,150,108,255,198,252,77,8,233,26,2,231,55,33,162,15,144,162,75,173,189,36,72,1,5,37,5,193,144,46,42,24,74,17,172,36,41,175,232,20,153,43,140,224,176,97,66,0,219,243,15,12,236,52,60,70,176,28,118,248,35,88,27,216,54,160,50,155,48,136,51,8,128,24,176,155,43,8,3,5,41,32,32,21,36,164,7,145,65,51,12,8,139,73,193,35,131,88,51,4,32,133,20,119,144,130,105,6,49,51,72,21,33,41,189,32,16,125,4,34,111,21,172,10,134,129,193,200,115,96,89,101,140,172,87,128,21,73,178,130,59,89,193,45,131,8,51,48,8,96,25,77,5,50,73,49,153,48,69,6,51,16,87,108,121,97,23,0,108,6,36,32,3,66,30,3,206,27,64,42,3,102,25,23,1,43,48,224,21,18,3,174,24,15,192,33,60,28,96,101,13,194,60,11,42,12,51,16,8,96,86,251,48,172,243,96,86,89,49,172,99,80,6,51,16,161,148,88,86,115,34,131,51,38,20,77,201,10,155,100,16,51,10,66,16,193,203,136,32,203,196,16,195,108,8,59,9,2,17,43,4,98,35,2,17,27,129,8,19,64,4,32,130,11,17,194,51,139,97,218,209,97,35,27,50,136,51,69,168,80,220,100,98,120,96,98,182,139,108,239,98,241,87,85,100,225,5,79,22,239,204,102,1,62,44,66,56,120,17,51,23,178,44,6,134,197,15,31,81,44,27,23,238,136,80,185,50,136,51,128,60,181,114,224,201,40,157,76,34,171,103,36,41,65,21,12,98,51,161,34,188,5,191,200,248,200,133,69,67,86,136,156,15,68,113,102,130,145,23,136,88,242,56,201,195,151,198,124,13,27,18,226,80,59,170,12,51,21,255,207,205,239,236,255,220,139,12,200,39,209,5,156,240,10,28,76,128,176,103,178,8,0,1,12,98,51,1,10,152,1,33,75,128,85,52,1,187,126,7,6,29,60,129,1,27,192,185,13,45,150,48,24,16,60,96,21,145,65,51,12,88,13,25,48,11,52,96,10,97,21,103,64,80,40,144,65,132,81,132,51,201,160,102,197,23,80,126,23,131,76,60,85,209,94,56,7,25,231,102,45,33,8,25,196,124,51,22,71,143,27,216,197,252,25,124,194,16,191,19,194,124,60,101,51,233,116,80,39,151,87,209,34,146,114,80,146,95,80,96,96,248,24,65,15,93,240,230,6,6,119,252,172,160,96,246,131,234,236,249,68,5,162,120,174,234,69,156,12,44,35,155,37,16,151,129,32,183,1,43,96,32,99,37,39,131,137,32,151,2,213,251,162,86,176,178,171,65,18,163,147,128,195,89,81,219,168,2,23,50,235,242,216,246,88,92,90,0,220,12,178,119,88,14,15,229,93,0,216,216,252,218,222,176,220,12,14,9,203,15,62,140,160,124,236,144,63,15,234,176,63,45,33,91,41,234,12,107,5,44,128,145,67,183,178,99,0,217,103,238,108,254,16,12,212,108,15,86,2,123,50,162,139,0,149,168,132,219,146,141,235,240,70,212,155,162,86,21,178,171,144,17,171,68,141,12,106,9,184,43,3,123,73,81,139,136,10,84,200,187,66,86,203,50,162,203,148,17,63,12,168,251,69,45,42,100,11,33,41,43,74,25,159,253,171,5,108,216,108,54,185,128,15,13,35,170,17,155,173,2,37,65,155,43,106,171,81,33,26,73,139,75,160,139,89,5,103,168,85,181,164,219,149,64,235,172,130,103,181,138,144,21,91,176,140,255,145,85,103,16,86,33,33,70,206,15,102,44,146,50,168,251,21,181,170,149,251,141,36,11,36,80,11,139,40,47,64,53,106,132,27,53,137,43,149,64,43,172,130,103,213,170,86,18,123,147,130,99,167,160,60,100,147,96,54,24,84,171,162,70,213,50,171,82,18,187,60,162,187,137,234,203,81,43,90,25,203,117,162,219,133,17,219,43,107,239,25,84,203,139,106,219,84,43,170,73,43,35,132,59,25,81,171,162,10,68,72,187,10,9,99,74,130,32,6,208,204,139,106,11,84,43,90,73,91,77,168,107,170,133,191,1,44,107,164,168,254,59,81,173,106,101,75,33,41,155,234,101,63,7,7,43,41,219,88,84,235,2,88,56,19,27,40,131,51,4,34,72,18,4,4,39,3,9,150,2,1,3,38,240,255,130,3,240,140,12,113,100,16,141,44,96,61,22,176,89,81,103,72,73,193,75,40,129,89,81,105,11,24,117,192,8,162,102,235,133,176,147,101,80,97,203,128,229,192,128,220,227,48,224,220,225,12,56,220,223,18,14,220,23,3,206,219,128,3,230,83,203,217,200,195,128,215,130,83,214,16,18,1,70,66,29,48,3,196,189,25,192,10,128,154,13,84,202,31,90,70,141,200,128,115,70,212,225,136,90,192,200,155,148,121,195,87,70,169,254,144,1,190,164,168,95,154,133,13,200,136,183,86,212,133,136,90,194,200,197,247,160,66,53,144,111,150,20,221,146,162,25,144,49,75,200,128,168,122,192,166,192,136,155,80,33,26,73,251,203,138,105,73,81,109,12,72,53,85,16,26,148,103,75,138,179,137,1,137,85,16,22,144,103,176,162,35,150,145,159,176,10,103,216,170,253,48,32,102,234,49,64,43,131,111,89,81,175,14,8,95,138,58,192,202,189,162,102,91,12,176,203,168,7,87,172,172,217,100,21,103,3,66,75,81,3,11,9,173,48,102,11,24,176,3,99,204,206,149,85,117,193,128,65,132,170,240,155,6,172,61,17,53,194,170,149,197,133,36,51,47,89,247,43,90,89,81,203,160,69,89,84,19,131,106,153,114,35,139,68,77,253,106,101,169,44,137,23,145,64,125,200,128,36,101,192,34,200,128,32,6,213,195,12,88,29,106,217,167,43,137,177,164,168,254,39,81,173,168,37,149,141,164,123,81,231,55,88,73,179,144,12,13,38,1,75,65,76,16,128,51,5,2,159,208,88,254,12,161,207,229,7,108,211,246,162,126,156,7,94,139,231,0,176,8,255,10,90,6,4,49,207,168,96,203,81,75,222,168,72,67,69,77,206,163,33,163,165,25,193,235,140,96,251,163,54,105,160,168,150,158,52,172,195,22,127,151,94,91,222,21,154,209,88,169,185,63,139,254,219,222,5,176,25,157,160,198,90,31,159,102,17,101,252,237,252,7,198,204,248,248,204,198,130,20,59,65,10,75,13,18,46,56,212,139,6,7,106,22,11,212,18,46,163,23,59,73,245,145,72,60,134,17,155,144,162,163,70,84,163,41,106,171,162,14,0,123,145,11,5,7,70,212,171,138,26,17,117,179,162,150,179,80,147,187,106,88,203,53,41,83,134,17,227,39,241,5,13,51,27,5,51,51,202,125,151,102,9,2,35,155,16,21,162,134,27,66,147,163,184,36,26,246,85,16,40,148,103,179,73,148,124,6,89,5,103,168,16,52,164,123,130,73,222,136,172,103,132,94,145,39,83,212,195,172,168,203,20,149,16,154,203,17,134,208,10,45,137,110,162,8,96,22,75,94,175,171,32,103,81,40,168,37,110,97,143,19,27,172,168,163,17,181,245,226,163,43,129,17,171,245,160,246,150,17,179,17,245,5,139,128,187,157,69,45,168,98,179,102,19,187,79,18,168,235,70,212,163,179,8,111,16,136,124,203,242,69,92,126,6,93,246,134,138,90,25,244,251,118,204,98,53,106,89,61,29,35,235,248,12,139,215,6,12,250,28,97,17,50,85,176,159,26,2,195,73,168,219,89,5,103,64,14,29,191,242,100,98,5,153,82,68,10,74,33,11,80,69,0,144,20,161,193,57,19,80,86,103,9,68,0,8,148,132,34,17,48,47,183,192,42,103,1,8,69,33,64,66,17,2,72,18,163,33,131,51,12,200,81,229,104,10,158,57,191,34,178,103,80,178,73,80,162,2,65,133,193,57,187,80,86,103,18,69,188,160,23,171,192,103,2,2,81,161,32,8,43,10,171,103,127,168,13,10,84,104,105,115,127,251,32,102,111,110,116,4,105,108,101,32,104,97,255,111,13,98,101,101,110,32,99,114,101,97,116,101,115,219,100,47,2,105,6,19,183,127,121,32,67,80,73,97,100,9,86,49,255,237,46,50,48,55,67,111,112,121,114,105,103,104,253,47,40,67,41,32,49,57,57,51,45,251,215,4,54,40,107,111,115,116,84,219,127,64,97,99,109,46,111,114,103,31,75,99,119,15,97,32,75,21,41,255,96,113,112,114,111,103,114,97,109,119,247,32,109,97,121,111,32,117,115,99,221,90,102,114,9,111,102,107,173,122,132,54,9,246,91,126,32,121,111,117,114,17,223,218,119,141,105,115,107,46,13,0,128,10,0,0,2,0,0,64,255,164,232,58,0,114,250,65,232,47,0,227,59,115,249,131,233,3,114,6,136,204,172,247,208,149,49,201,232,27,0,17,201,117,8,65,232,19,0,115,251,65,65,129,253,0,243,131,209,1,141,3,150,243,164,150,235,200,232,2,0,17,201,1,219,117,4,173,17,192,147,195,94,185,1,0,172,44,232,60,1,119,249,139,28,134,223,41,243,137,28,173,226,238,195,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,1,0,0,0,0,0,0,0,67,97,110,110,111,116,32,111,112,101,110,32,37,115,0,0,74,117,108,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,78,79,84,95,83,69,84,0,0,0,83,72,69,76,76,95,67,77,68,95,67,76,83,95,72,69,76,80,0,0,0,0,0,0,103,114,97,118,101,0,0,0,80,97,117,115,101,0,0,0,99,121,99,108,101,100,111,119,110,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,73,77,65,71,69,95,78,79,84,95,79,80,69,78,0,0,0,0,0,74,117,110,0,0,0,0,0,67,72,68,73,82,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,10,67,72,68,73,82,32,91,46,46,93,10,67,68,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,10,67,68,32,91,46,46,93,10,10,32,32,46,46,32,32,32,83,112,101,99,105,102,105,101,115,32,116,104,97,116,32,121,111,117,32,119,97,110,116,32,116,111,32,99,104,97,110,103,101,32,116,111,32,116,104,101,32,112,97,114,101,110,116,32,100,105,114,101,99,116,111,114,121,46,10,10,84,121,112,101,32,67,68,32,100,114,105,118,101,58,32,116,111,32,100,105,115,112,108,97,121,32,116,104,101,32,99,117,114,114,101,110,116,32,100,105,114,101,99,116,111,114,121,32,105,110,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,100,114,105,118,101,46,10,84,121,112,101,32,67,68,32,119,105,116,104,111,117,116,32,112,97,114,97,109,101,116,101,114,115,32,116,111,32,100,105,115,112,108,97,121,32,116,104,101,32,99,117,114,114,101,110,116,32,100,114,105,118,101,32,97,110,100,32,100,105,114,101,99,116,111,114,121,46,10,0,0,0,101,113,117,97,108,115,0,0,70,117,108,108,115,99,114,101,101,110,0,0,0,0,0,0,65,109,111,117,110,116,32,111,102,32,99,121,99,108,101,115,32,116,111,32,100,101,99,114,101,97,115,101,47,105,110,99,114,101,97,115,101,32,119,105,116,104,32,107,101,121,99,111,109,98,111,46,40,67,84,82,76,45,70,49,49,47,67,84,82,76,45,70,49,50,41,0,79,112,101,110,105,110,103,32,105,109,97,103,101,32,102,105,108,101,58,32,37,115,10,0,65,112,114,0,0,0,0,0,83,69,84,10,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,101,115,99,0,0,0,0,0,102,117,108,108,115,99,114,0,99,121,99,108,101,117,112,0,80,82,79,71,82,65,77,95,66,79,79,84,95,73,77,65,71,69,95,79,80,69,78,0,80,82,79,71,82,65,77,95,75,69,89,66,95,78,79,69,82,82,79,82,0,0,0,0,77,97,114,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,72,69,76,80,95,76,79,78,71,0,68,105,115,112,108,97,121,115,47,99,104,97,110,103,101,115,32,116,104,101,32,99,117,114,114,101,110,116,32,100,105,114,101,99,116,111,114,121,46,10,0,0,0,0,0,0,0,0,115,112,97,99,101,0,0,0,67,97,112,32,77,111,117,115,101,0,0,0,0,0,0,0,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,98,111,111,116,32,111,102,102,32,111,102,32,100,114,105,118,101,32,37,99,0,0,70,101,98,0,0,0,0,0,105,100,108,101,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,72,69,76,80,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,69,76,80,0,0,0,0,122,0,0,0,0,0,0,0,99,97,112,109,111,117,115,101,0,0,0,0,0,0,0,0,37,117,0,0,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,85,78,65,66,76,69,0,0,0,0,0,74,97,110,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,83,85,67,67,69,83,83,0,0,186,32,27,91,51,50,109,72,65,86,69,32,70,85,78,33,27,91,51,55,109,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,27,91,51,50,109,84,104,101,32,68,79,83,66,111,120,32,84,101,97,109,32,27,91,51,51,109,104,116,116,112,58,47,47,119,119,119,46,100,111,115,98,111,120,46,99,111,109,27,91,51,55,109,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,27,91,48,109,10,0,0,0,0,0,0,121,0,0,0,0,0,0,0,83,104,117,116,68,111,119,110,0,0,0,0,0,0,0,0,68,79,83,58,84,111,111,32,109,97,110,121,32,100,101,118,105,99,101,115,32,97,100,100,101,100,0,0,0,0,0,0,68,79,83,58,85,110,104,97,110,100,108,101,100,32,99,97,108,108,32,37,48,50,88,0,109,97,120,0,0,0,0,0,84,104,105,115,32,99,111,109,109,97,110,100,32,98,111,111,116,115,32,68,79,83,66,111,120,32,102,114,111,109,32,101,105,116,104,101,114,32,97,32,102,108,111,112,112,121,32,111,114,32,104,97,114,100,32,100,105,115,107,32,105,109,97,103,101,46,10,10,70,111,114,32,116,104,105,115,32,99,111,109,109,97,110,100,44,32,111,110,101,32,99,97,110,32,115,112,101,99,105,102,121,32,97,32,115,117,99,99,101,115,115,105,111,110,32,111,102,32,102,108,111,112,112,121,32,100,105,115,107,115,32,115,119,97,112,112,97,98,108,101,10,98,121,32,112,114,101,115,115,105,110,103,32,67,116,114,108,45,70,52,44,32,97,110,100,32,45,108,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,109,111,117,110,116,101,100,32,100,114,105,118,101,32,116,111,32,98,111,111,116,32,102,114,111,109,46,32,32,73,102,10,110,111,32,100,114,105,118,101,32,108,101,116,116,101,114,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,116,104,105,115,32,100,101,102,97,117,108,116,115,32,116,111,32,98,111,111,116,105,110,103,32,102,114,111,109,32,116,104,101,32,65,32,100,114,105,118,101,46,10,84,104,101,32,111,110,108,121,32,98,111,111,116,97,98,108,101,32,100,114,105,118,101,32,108,101,116,116,101,114,115,32,97,114,101,32,65,44,32,67,44,32,97,110,100,32,68,46,32,32,70,111,114,32,98,111,111,116,105,110,103,32,102,114,111,109,32,97,32,104,97,114,100,10,100,114,105,118,101,32,40,67,32,111,114,32,68,41,44,32,116,104,101,32,105,109,97,103,101,32,115,104,111,117,108,100,32,104,97,118,101,32,97,108,114,101,97,100,121,32,98,101,101,110,32,109,111,117,110,116,101,100,32,117,115,105,110,103,32,116,104,101,10,27,91,51,52,59,49,109,73,77,71,77,79,85,78,84,27,91,48,109,32,99,111,109,109,97,110,100,46,10,10,84,104,101,32,115,121,110,116,97,120,32,111,102,32,116,104,105,115,32,99,111,109,109,97,110,100,32,105,115,58,10,10,27,91,51,52,59,49,109,66,79,79,84,32,91,100,105,115,107,105,109,103,49,46,105,109,103,32,100,105,115,107,105,109,103,50,46,105,109,103,93,32,91,45,108,32,100,114,105,118,101,108,101,116,116,101,114,93,27,91,48,109,10,0,0,0,0,0,0,110,111,110,101,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,70,65,73,76,85,82,69,0,0,186,32,80,114,101,115,115,32,27,91,51,49,109,97,108,116,45,80,97,117,115,101,27,91,51,55,109,32,116,111,32,101,110,116,101,114,32,116,104,101,32,100,101,98,117,103,103,101,114,32,111,114,32,115,116,97,114,116,32,116,104,101,32,101,120,101,32,119,105,116,104,32,27,91,51,51,109,68,69,66,85,71,27,91,51,55,109,46,32,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,0,0,0,0,0,0,120,0,0,0,0,0,0,0,115,104,117,116,100,111,119,110,0,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,102,105,120,101,100,0,0,0,83,101,114,105,97,108,37,100,58,32,67,111,110,110,101,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,0,0,67,111,110,110,101,99,116,105,110,103,32,116,111,32,104,111,115,116,32,37,115,32,112,111,114,116,32,37,100,0,0,0,100,105,115,97,98,108,101,100,0,0,0,0,0,0,0,0,46,67,79,77,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,80,82,73,78,84,95,69,82,82,79,82,0,0,0,0,0,0,0,0,77,101,115,115,97,103,101,32,110,111,116,32,70,111,117,110,100,33,10,0,0,0,0,0,83,72,69,76,76,58,82,101,100,105,114,101,99,116,32,105,110,112,117,116,32,102,114,111,109,32,37,115,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,32,13,9,12,10,0,0,0,32,37,115,10,0,0,0,0,45,119,108,0,0,0,0,0,83,72,69,76,76,95,83,84,65,82,84,85,80,95,68,69,66,85,71,0,0,0,0,0,119,0,0,0,0,0,0,0,105,114,113,32,57,32,98,105,111,115,0,0,0,0,0,0,68,79,83,66,111,120,0,0,65,109,111,117,110,116,32,111,102,32,105,110,115,116,114,117,99,116,105,111,110,115,32,68,79,83,66,111,120,32,116,114,105,101,115,32,116,111,32,101,109,117,108,97,116,101,32,101,97,99,104,32,109,105,108,108,105,115,101,99,111,110,100,46,10,83,101,116,116,105,110,103,32,116,104,105,115,32,118,97,108,117,101,32,116,111,111,32,104,105,103,104,32,114,101,115,117,108,116,115,32,105,110,32,115,111,117,110,100,32,100,114,111,112,111,117,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112645);
  /* memory initializer */ allocate([115,32,97,110,100,32,108,97,103,115,46,10,67,121,99,108,101,115,32,99,97,110,32,98,101,32,115,101,116,32,105,110,32,51,32,119,97,121,115,58,10,32,32,39,97,117,116,111,39,32,32,32,32,32,32,32,32,32,32,116,114,105,101,115,32,116,111,32,103,117,101,115,115,32,119,104,97,116,32,97,32,103,97,109,101,32,110,101,101,100,115,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,73,116,32,117,115,117,97,108,108,121,32,119,111,114,107,115,44,32,98,117,116,32,99,97,110,32,102,97,105,108,32,102,111,114,32,99,101,114,116,97,105,110,32,103,97,109,101,115,46,10,32,32,39,102,105,120,101,100,32,35,110,117,109,98,101,114,39,32,119,105,108,108,32,115,101,116,32,97,32,102,105,120,101,100,32,97,109,111,117,110,116,32,111,102,32,99,121,99,108,101,115,46,32,84,104,105,115,32,105,115,32,119,104,97,116,32,121,111,117,32,117,115,117,97,108,108,121,32,110,101,101,100,32,105,102,32,39,97,117,116,111,39,32,102,97,105,108,115,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,69,120,97,109,112,108,101,58,32,102,105,120,101,100,32,52,48,48,48,41,46,10,32,32,39,109,97,120,39,32,32,32,32,32,32,32,32,32,32,32,119,105,108,108,32,97,108,108,111,99,97,116,101,32,97,115,32,109,117,99,104,32,99,121,99,108,101,115,32,97,115,32,121,111,117,114,32,99,111,109,112,117,116,101,114,32,105,115,32,97,98,108,101,32,116,111,32,104,97,110,100,108,101,46,10,0,0,73,110,118,97,108,105,100,32,111,112,99,111,100,101,32,48,120,48,102,32,48,120,50,50,32,37,120,32,99,97,117,115,101,100,32,97,32,112,114,111,116,101,99,116,105,111,110,32,102,97,117,108,116,33,0,0,111,115,115,0,0,0,0,0,65,100,118,77,97,109,101,50,120,0,0,0,0,0,0,0,102,111,114,99,101,100,0,0,80,97,103,101,102,97,117,108,116,32,100,105,100,110,39,116,32,99,111,114,114,101,99,116,32,112,97,103,101,0,0,0,73,109,97,103,101,32,102,105,108,101,32,105,115,32,114,101,97,100,45,111,110,108,121,33,32,77,105,103,104,116,32,99,114,101,97,116,101,32,112,114,111,98,108,101,109,115,46,10,0,0,0,0,0,0,0,0,77,97,112,112,101,114,0,0,37,115,0,0,0,0,0,0,83,116,111,112,112,101,100,32,82,97,119,32,79,80,76,32,99,97,112,116,117,114,105,110,103,46,0,0,0,0,0,0,73,80,88,32,40,105,110,116,32,55,97,41,0,0,0,0,79,99,116,111,98,101,114,0,88,71,65,58,32,68,114,97,119,66,108,105,116,87,97,105,116,58,32,85,110,115,117,112,112,111,114,116,101,100,32,115,114,99,32,37,120,0,0,0,83,72,69,76,76,95,77,73,83,83,73,78,71,95,80,65,82,65,77,69,84,69,82,0,186,32,85,115,101,32,27,91,51,49,109,70,49,49,27,91,51,55,109,32,116,111,32,99,121,99,108,101,32,116,104,114,111,117,103,104,32,119,104,105,116,101,44,32,97,109,98,101,114,44,32,97,110,100,32,103,114,101,101,110,32,109,111,110,111,99,104,114,111,109,101,32,99,111,108,111,114,46,32,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,0,0,0,0,0,0,0,0,32,72,0,0,0,0,0,0,80,73,67,58,32,108,101,118,101,108,32,116,114,105,103,103,101,114,101,100,32,109,111,100,101,32,110,111,116,32,104,97,110,100,108,101,100,0,0,0,118,0,0,0,0,0,0,0,83,68,76,58,89,111,117,32,97,114,101,32,114,117,110,110,105,110,103,32,105,110,32,50,52,32,98,112,112,32,109,111,100,101,44,32,116,104,105,115,32,119,105,108,108,32,115,108,111,119,32,100,111,119,110,32,116,104,105,110,103,115,33,0,112,114,101,98,117,102,102,101,114,0,0,0,0,0,0,0,116,105,109,101,100,0,0,0,73,78,84,58,73,110,110,101,114,32,108,101,118,101,108,58,83,116,97,99,107,32,115,101,103,109,101,110,116,32,110,111,116,32,119,114,105,116,97,98,108,101,46,0,0,0,0,0,82,97,119,32,77,105,100,105,0,0,0,0,0,0,0,0,99,121,99,108,101,115,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,87,82,73,84,69,95,80,82,79,84,69,67,84,69,68,0,0,0,0,92,0,0,0,0,0,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,45,89,0,0,0,0,0,0,186,32,68,79,83,66,111,120,32,115,117,112,112,111,114,116,115,32,67,111,109,112,111,115,105,116,101,32,67,71,65,32,109,111,100,101,46,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,85,115,101,32,27,91,51,49,109,40,97,108,116,45,41,70,49,49,27,91,51,55,109,32,116,111,32,99,104,97,110,103,101,32,116,104,101,32,99,111,108,111,117,114,115,32,119,104,101,110,32,105,110,32,116,104,105,115,32,109,111,100,101,46,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,0,117,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,118,105,100,101,111,58,32,37,115,0,0,73,80,88,58,32,79,117,116,32,111,102,32,100,121,110,97,109,105,99,32,115,111,99,107,101,116,115,0,0,0,0,0,67,80,85,32,84,121,112,101,32,117,115,101,100,32,105,110,32,101,109,117,108,97,116,105,111,110,46,32,97,117,116,111,32,105,115,32,116,104,101,32,102,97,115,116,101,115,116,32,99,104,111,105,99,101,46,0,50,52,48,0,0,0,0,0,67,97,110,110,111,116,32,111,112,101,110,32,98,111,111,116,100,105,115,107,32,102,105,108,101,46,32,32,70,97,105,108,105,110,103,46,10,0,0,0,65,117,103,117,115,116,0,0,89,0,0,0,0,0,0,0,27,91,52,52,59,49,109,201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,10,186,32,27,91,51,50,109,87,101,108,99,111,109,101,32,116,111,32,68,79,83,66,111,120,32,118,37,45,56,115,27,91,51,55,109,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,70,111,114,32,97,32,115,104,111,114,116,32,105,110,116,114,111,100,117,99,116,105,111,110,32,102,111,114,32,110,101,119,32,117,115,101,114,115,32,116,121,112,101,58,32,27,91,51,51,109,73,78,84,82,79,27,91,51,55,109,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,70,111,114,32,115,117,112,112,111,114,116,101,100,32,115,104,101,108,108,32,99,111,109,109,97,110,100,115,32,116,121,112,101,58,32,27,91,51,51,109,72,69,76,80,27,91,51,55,109,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,84,111,32,97,100,106,117,115,116,32,116,104,101,32,101,109,117,108,97,116,101,100,32,67,80,85,32,115,112,101,101,100,44,32,117,115,101,32,27,91,51,49,109,99,116,114,108,45,70,49,49,27,91,51,55,109,32,97,110,100,32,27,91,51,49,109,99,116,114,108,45,70,49,50,27,91,51,55,109,46,32,32,32,32,32,32,32,186,10,186,32,84,111,32,97,99,116,105,118,97,116,101,32,116,104,101,32,107,101,121,109,97,112,112,101,114,32,27,91,51,49,109,99,116,114,108,45,70,49,27,91,51,55,109,46,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,70,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,32,114,101,97,100,32,116,104,101,32,27,91,51,54,109,82,69,65,68,77,69,27,91,51,55,109,32,102,105,108,101,32,105,110,32,116,104,101,32,68,79,83,66,111,120,32,100,105,114,101,99,116,111,114,121,46,32,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,0,116,0,0,0,0,0,0,0,83,68,76,58,85,110,115,117,112,112,111,114,116,101,100,32,111,117,116,112,117,116,32,100,101,118,105,99,101,32,37,115,44,32,115,119,105,116,99,104,105,110,103,32,98,97,99,107,32,116,111,32,115,117,114,102,97,99,101,0,0,0,0,0,73,80,88,58,32,67,111,117,108,100,32,110,111,116,32,115,101,110,100,32,112,97,99,107,101,116,58,32,37,115,0,0,77,111,117,110,116,101,100,32,70,65,84,32,118,111,108,117,109,101,32,105,115,32,70,65,84,51,50,32,119,105,116,104,32,37,100,32,99,108,117,115,116,101,114,115,0,0,0,0,99,112,117,116,121,112,101,0,80,82,79,71,82,65,77,95,66,79,79,84,95,78,79,84,95,79,80,69,78,0,0,0,74,117,108,121,0,0,0,0,65,0,0,0,0,0,0,0,83,85,66,83,84,32,102,97,105,108,101,100,46,32,89,111,117,32,101,105,116,104,101,114,32,109,97,100,101,32,97,110,32,101,114,114,111,114,32,105,110,32,121,111,117,114,32,99,111,109,109,97,110,100,108,105,110,101,32,111,114,32,116,104,101,32,116,97,114,103,101,116,32,100,114,105,118,101,32,105,115,32,97,108,114,101,97,100,121,32,117,115,101,100,46,10,73,116,39,115,32,111,110,108,121,32,112,111,115,115,105,98,108,101,32,116,111,32,117,115,101,32,83,85,66,83,84,32,111,110,32,76,111,99,97,108,32,100,114,105,118,101,115,0,115,0,0,0,0,0,0,0,73,80,88,58,32,80,97,99,107,101,116,32,115,105,122,101,32,116,111,32,98,101,32,115,101,110,116,32,103,114,101,97,116,101,114,32,116,104,97,110,32,37,100,32,98,121,116,101,115,46,0,0,0,0,0,0,51,56,54,95,112,114,101,102,101,116,99,104,0,0,0,0,66,111,111,116,100,105,115,107,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,32,32,70,97,105,108,105,110,103,46,10,0,0,0,0,0,0,0,0,74,117,110,101,0,0,0,0,84,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,70,65,73,76,85,82,69,0,114,0,0,0,0,0,0,0,116,114,105,101,100,32,99,114,101,97,116,105,110,103,32,37,115,46,32,98,117,116,32,102,97,105,108,101,100,46,10,0,85,110,104,97,110,100,108,101,100,32,73,80,88,32,102,117,110,99,116,105,111,110,58,32,37,52,120,0,0,0,0,0,112,101,110,116,105,117,109,95,115,108,111,119,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,78,79,84,95,69,88,73,83,84,0,0,97,117,116,111,0,0,0,0,77,97,121,0,0,0,0,0,114,98,43,0,0,0,0,0,67,79,80,89,10,0,0,0,82,101,109,111,118,105,110,103,32,100,114,105,118,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,32,68,111,105,110,103,32,110,111,116,104,105,110,103,46,10,0,0,0,113,0,0,0,0,0,0,0,99,97,110,39,116,32,102,105,110,100,32,102,105,108,101,109,97,110,97,103,101,114,32,37,115,10,0,0,0,0,0,0,52,56,54,95,115,108,111,119,0,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,86,105,114,116,117,97,108,32,68,114,105,118,101,0,0,27,91,50,74,27,91,51,50,59,49,109,83,112,101,99,105,97,108,32,107,101,121,115,58,27,91,48,109,10,84,104,101,115,101,32,97,114,101,32,116,104,101,32,100,101,102,97,117,108,116,32,107,101,121,98,105,110,100,105,110,103,115,46,10,84,104,101,121,32,99,97,110,32,98,101,32,99,104,97,110,103,101,100,32,105,110,32,116,104,101,32,27,91,51,51,109,107,101,121,109,97,112,112,101,114,27,91,48,109,46,10,10,27,91,51,51,59,49,109,65,76,84,45,69,78,84,69,82,27,91,48,109,32,32,32,58,32,71,111,32,102,117,108,108,32,115,99,114,101,101,110,32,97,110,100,32,98,97,99,107,46,10,27,91,51,51,59,49,109,65,76,84,45,80,65,85,83,69,27,91,48,109,32,32,32,58,32,80,97,117,115,101,32,68,79,83,66,111,120,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,49,27,91,48,109,32,32,32,32,32,58,32,83,116,97,114,116,32,116,104,101,32,27,91,51,51,109,107,101,121,109,97,112,112,101,114,27,91,48,109,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,52,27,91,48,109,32,32,32,32,32,58,32,85,112,100,97,116,101,32,100,105,114,101,99,116,111,114,121,32,99,97,99,104,101,32,102,111,114,32,97,108,108,32,100,114,105,118,101,115,33,32,83,119,97,112,32,109,111,117,110,116,101,100,32,100,105,115,107,45,105,109,97,103,101,46,10,27,91,51,51,59,49,109,67,84,82,76,45,65,76,84,45,70,53,27,91,48,109,32,58,32,83,116,97,114,116,47,83,116,111,112,32,99,114,101,97,116,105,110,103,32,97,32,109,111,118,105,101,32,111,102,32,116,104,101,32,115,99,114,101,101,110,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,53,27,91,48,109,32,32,32,32,32,58,32,83,97,118,101,32,97,32,115,99,114,101,101,110,115,104,111,116,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,54,27,91,48,109,32,32,32,32,32,58,32,83,116,97,114,116,47,83,116,111,112,32,114,101,99,111,114,100,105,110,103,32,115,111,117,110,100,32,111,117,116,112,117,116,32,116,111,32,97,32,119,97,118,101,32,102,105,108,101,46,10,27,91,51,51,59,49,109,67,84,82,76,45,65,76,84,45,70,55,27,91,48,109,32,58,32,83,116,97,114,116,47,83,116,111,112,32,114,101,99,111,114,100,105,110,103,32,111,102,32,79,80,76,32,99,111,109,109,97,110,100,115,46,10,27,91,51,51,59,49,109,67,84,82,76,45,65,76,84,45,70,56,27,91,48,109,32,58,32,83,116,97,114,116,47,83,116,111,112,32,116,104,101,32,114,101,99,111,114,100,105,110,103,32,111,102,32,114,97,119,32,77,73,68,73,32,99,111,109,109,97,110,100,115,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,55,27,91,48,109,32,32,32,32,32,58,32,68,101,99,114,101,97,115,101,32,102,114,97,109,101,115,107,105,112,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,56,27,91,48,109,32,32,32,32,32,58,32,73,110,99,114,101,97,115,101,32,102,114,97,109,101,115,107,105,112,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,57,27,91,48,109,32,32,32,32,32,58,32,75,105,108,108,32,68,79,83,66,111,120,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,49,48,27,91,48,109,32,32,32,32,58,32,67,97,112,116,117,114,101,47,82,101,108,101,97,115,101,32,116,104,101,32,109,111,117,115,101,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,49,49,27,91,48,109,32,32,32,32,58,32,83,108,111,119,32,100,111,119,110,32,101,109,117,108,97,116,105,111,110,32,40,68,101,99,114,101,97,115,101,32,68,79,83,66,111,120,32,67,121,99,108,101,115,41,46,10,27,91,51,51,59,49,109,67,84,82,76,45,70,49,50,27,91,48,109,32,32,32,32,58,32,83,112,101,101,100,32,117,112,32,101,109,117,108,97,116,105,111,110,32,40,73,110,99,114,101,97,115,101,32,68,79,83,66,111,120,32,67,121,99,108,101,115,41,46,10,27,91,51,51,59,49,109,65,76,84,45,70,49,50,27,91,48,109,32,32,32,32,32,58,32,85,110,108,111,99,107,32,115,112,101,101,100,32,40,116,117,114,98,111,32,98,117,116,116,111,110,47,102,97,115,116,32,102,111,114,119,97,114,100,41,46,10,0,65,112,114,105,108,0,0,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,78,79,95,82,69,77,79,86,69,0,0,0,0,0,0,0,115,116,111,112,0,0,0,0,112,0,0,0,0,0,0,0,37,115,32,100,111,101,115,110,39,116,32,101,120,105,115,116,115,32,111,114,32,105,115,110,39,116,32,97,32,100,105,114,101,99,116,111,114,121,46,10,0,0,0,0,0,0,0,0,73,80,88,78,69,84,32,83,84,65,84,85,83,10,10,0,51,56,54,95,115,108,111,119,0,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,95,83,80,69,67,73,65,76,0,0,0,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,72,69,76,80,0,0,0,0,0,32,32,32,37,100,32,70,105,108,101,40,115,41,32,99,111,112,105,101,100,46,10,0,0,111,0,0,0,0,0,0,0,84,104,101,32,115,121,110,116,97,120,32,102,111,114,32,73,80,88,78,69,84,32,83,84,65,84,85,83,32,105,115,58,10,10,0,0,0,0,0,0,80,82,78,0,0,0,0,0,68,79,83,58,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,105,110,116,101,114,110,97,108,32,116,97,98,108,101,115,0,0,0,0,0,0,0,51,56,54,0,0,0,0,0,27,91,50,74,27,91,51,50,59,49,109,72,111,119,32,116,111,32,109,111,117,110,116,32,97,32,82,101,97,108,47,86,105,114,116,117,97,108,32,67,68,45,82,79,77,32,68,114,105,118,101,32,105,110,32,68,79,83,66,111,120,58,27,91,48,109,10,68,79,83,66,111,120,32,112,114,111,118,105,100,101,115,32,67,68,45,82,79,77,32,101,109,117,108,97,116,105,111,110,32,111,110,32,115,101,118,101,114,97,108,32,108,101,118,101,108,115,46,10,10,84,104,101,32,27,91,51,51,109,98,97,115,105,99,27,91,48,109,32,108,101,118,101,108,32,119,111,114,107,115,32,111,110,32,97,108,108,32,67,68,45,82,79,77,32,100,114,105,118,101,115,32,97,110,100,32,110,111,114,109,97,108,32,100,105,114,101,99,116,111,114,105,101,115,46,10,73,116,32,105,110,115,116,97,108,108,115,32,77,83,67,68,69,88,32,97,110,100,32,109,97,114,107,115,32,116,104,101,32,102,105,108,101,115,32,114,101,97,100,45,111,110,108,121,46,10,85,115,117,97,108,108,121,32,116,104,105,115,32,105,115,32,101,110,111,117,103,104,32,102,111,114,32,109,111,115,116,32,103,97,109,101,115,58,10,27,91,51,52,59,49,109,109,111,117,110,116,32,100,32,27,91,48,59,51,49,109,68,58,92,27,91,51,52,59,49,109,32,45,116,32,99,100,114,111,109,27,91,48,109,32,32,32,111,114,32,32,32,27,91,51,52,59,49,109,109,111,117,110,116,32,100,32,67,58,92,101,120,97,109,112,108,101,32,45,116,32,99,100,114,111,109,27,91,48,109,10,73,102,32,105,116,32,100,111,101,115,110,39,116,32,119,111,114,107,32,121,111,117,32,109,105,103,104,116,32,104,97,118,101,32,116,111,32,116,101,108,108,32,68,79,83,66,111,120,32,116,104,101,32,108,97,98,101,108,32,111,102,32,116,104,101,32,67,68,45,82,79,77,58,10,27,91,51,52,59,49,109,109,111,117,110,116,32,100,32,67,58,92,101,120,97,109,112,108,101,32,45,116,32,99,100,114,111,109,32,45,108,97,98,101,108,32,67,68,76,65,66,69,76,27,91,48,109,10,10,84,104,101,32,27,91,51,51,109,110,101,120,116,27,91,48,109,32,108,101,118,101,108,32,97,100,100,115,32,115,111,109,101,32,108,111,119,45,108,101,118,101,108,32,115,117,112,112,111,114,116,46,10,84,104,101,114,101,102,111,114,101,32,111,110,108,121,32,119,111,114,107,115,32,111,110,32,67,68,45,82,79,77,32,100,114,105,118,101,115,58,10,27,91,51,52,59,49,109,109,111,117,110,116,32,100,32,27,91,48,59,51,49,109,68,58,92,27,91,51,52,59,49,109,32,45,116,32,99,100,114,111,109,32,45,117,115,101,99,100,32,27,91,51,51,109,48,27,91,48,109,10,10,84,104,101,32,27,91,51,51,109,108,97,115,116,27,91,48,109,32,108,101,118,101,108,32,111,102,32,115,117,112,112,111,114,116,32,100,101,112,101,110,100,115,32,111,110,32,121,111,117,114,32,79,112,101,114,97,116,105,110,103,32,83,121,115,116,101,109,58,10,70,111,114,32,27,91,49,109,87,105,110,100,111,119,115,32,50,48,48,48,27,91,48,109,44,32,27,91,49,109,87,105,110,100,111,119,115,32,88,80,27,91,48,109,32,97,110,100,32,27,91,49,109,76,105,110,117,120,27,91,48,109,58,10,27,91,51,52,59,49,109,109,111,117,110,116,32,100,32,27,91,48,59,51,49,109,68,58,92,27,91,51,52,59,49,109,32,45,116,32,99,100,114,111,109,32,45,117,115,101,99,100,32,27,91,51,51,109,48,32,27,91,51,52,109,45,105,111,99,116,108,27,91,48,109,10,70,111,114,32,27,91,49,109,87,105,110,100,111,119,115,32,57,120,27,91,48,109,32,119,105,116,104,32,97,32,65,83,80,73,32,108,97,121,101,114,32,105,110,115,116,97,108,108,101,100,58,10,27,91,51,52,59,49,109,109,111,117,110,116,32,100,32,27,91,48,59,51,49,109,68,58,92,27,91,51,52,59,49,109,32,45,116,32,99,100,114,111,109,32,45,117,115,101,99,100,32,27,91,51,51,109,48,32,27,91,51,52,109,45,97,115,112,105,27,91,48,109,10,10,82,101,112,108,97,99,101,32,27,91,48,59,51,49,109,68,58,92,27,91,48,109,32,119,105,116,104,32,116,104,101,32,108,111,99,97,116,105,111,110,32,111,102,32,121,111,117,114,32,67,68,45,82,79,77,46,10,82,101,112,108,97,99,101,32,116,104,101,32,27,91,51,51,59,49,109,48,27,91,48,109,32,105,110,32,27,91,51,52,59,49,109,45,117,115,101,99,100,32,27,91,51,51,109,48,27,91,48,109,32,119,105,116,104,32,116,104,101,32,110,117,109,98,101,114,32,114,101,112,111,114,116,101,100,32,102,111,114,32,121,111,117,114,32,67,68,45,82,79,77,32,105,102,32,121,111,117,32,116,121,112,101,58,10,27,91,51,52,59,49,109,109,111,117,110,116,32,45,99,100,27,91,48,109,10,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,66,89,84,69,83,95,70,82,69,69,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,83,85,67,67,69,83,83,0,0,110,0,0,0,0,0,0,0,80,82,79,80,95,78,79,84,95,69,88,73,83,84,0,0,80,73,78,71,32,99,111,109,109,97,110,100,46,10,10,0,73,110,118,97,108,105,100,32,99,104,97,110,110,101,108,0,67,80,85,32,67,111,114,101,32,117,115,101,100,32,105,110,32,101,109,117,108,97,116,105,111,110,46,32,97,117,116,111,32,119,105,108,108,32,115,119,105,116,99,104,32,116,111,32,100,121,110,97,109,105,99,32,105,102,32,97,118,97,105,108,97,98,108,101,32,97,110,100,32,97,112,112,114,111,112,114,105,97,116,101,46,0,0,0,83,101,114,118,101,114,32,115,111,99,107,101,116,115,32,99,97,110,110,111,116,32,114,101,99,101,105,118,101,0,0,0,105,110,104,101,114,105,116,97,110,99,101,32,112,111,114,116,58,32,37,100,0,0,0,0,77,111,100,101,109,32,114,101,115,112,111,110,115,101,58,32,37,115,0,0,0,0,0,0,110,117,108,108,109,111,100,101,109,0,0,0,0,0,0,0,46,66,65,84,0,0,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,95,67,68,82,79,77,0,0,0,0,0,10,0,0,0,0,0,0,0,83,72,69,76,76,58,77,117,108,116,105,112,108,101,32,99,111,109,109,97,110,100,32,111,110,32,49,32,108,105,110,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,74,97,110,117,97,114,121,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,66,89,84,69,83,95,85,83,69,68,0,0,0,0,0,0,0,0,45,119,114,105,116,101,108,97,110,103,0,0,0,0,0,0,67,111,112,121,32,102,97,105,108,117,114,101,32,58,32,37,115,46,10,0,0,0,0,0,109,0,0,0,0,0,0,0,73,110,116,32,55,48,32,82,84,67,0,0,0,0,0,0,110,101,116,119,111,114,107,46,32,32,70,111,114,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,99,111,109,112,117,116,101,114,115,32,99,111,110,110,101,99,116,101,100,32,116,111,32,116,104,101,32,110,101,116,119,111,114,107,32,117,115,101,32,116,104,101,32,73,80,88,78,69,84,32,10,0,73,108,108,101,103,97,108,32,84,83,83,32,102,111,114,32,115,119,105,116,99,104,44,32,115,101,108,101,99,116,111,114,61,37,120,44,32,115,119,105,116,99,104,116,121,112,101,61,37,120,0,0,0,0,0,0,73,110,118,97,108,105,100,32,111,112,99,111,100,101,32,48,120,48,102,32,48,120,50,48,32,37,120,32,99,97,117,115,101,100,32,97,32,112,114,111,116,101,99,116,105,111,110,32,102,97,117,108,116,33,0,0,82,71,66,51,120,0,0,0,102,111,114,99,101,0,0,0,80,97,103,101,102,97,117,108,116,32,100,105,100,110,39,116,32,99,111,114,114,101,99,116,32,116,97,98,108,101,0,0,87,104,101,110,32,116,104,101,32,109,111,117,110,116,32,104,97,115,32,115,117,99,99,101,115,115,102,117,108,108,121,32,99,111,109,112,108,101,116,101,100,32,121,111,117,32,99,97,110,32,116,121,112,101,32,27,91,51,52,59,49,109,99,58,27,91,48,109,32,116,111,32,103,111,32,116,111,32,121,111,117,114,32,102,114,101,115,104,108,121,10,109,111,117,110,116,101,100,32,67,45,100,114,105,118,101,46,32,84,121,112,105,110,103,32,27,91,51,52,59,49,109,100,105,114,27,91,48,109,32,116,104,101,114,101,32,119,105,108,108,32,115,104,111,119,32,105,116,115,32,99,111,110,116,101,110,116,115,46,32,27,91,51,52,59,49,109,99,100,27,91,48,109,32,119,105,108,108,32,97,108,108,111,119,32,121,111,117,32,116,111,10,101,110,116,101,114,32,97,32,100,105,114,101,99,116,111,114,121,32,40,114,101,99,111,103,110,105,115,101,100,32,98,121,32,116,104,101,32,27,91,51,51,59,49,109,91,93,27,91,48,109,32,105,110,32,97,32,100,105,114,101,99,116,111,114,121,32,108,105,115,116,105,110,103,41,46,10,89,111,117,32,99,97,110,32,114,117,110,32,112,114,111,103,114,97,109,115,47,102,105,108,101,115,32,119,104,105,99,104,32,101,110,100,32,119,105,116,104,32,27,91,51,49,109,46,101,120,101,32,46,98,97,116,27,91,48,109,32,97,110,100,32,27,91,51,49,109,46,99,111,109,27,91,48,109,46,10,0,0,0,0,109,97,112,112,101,114,0,0,73,80,88,32,72,97,110,100,108,101,114,0,0,0,0,0,83,69,84,32,85,76,84,82,65,68,73,82,61,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,88,71,65,58,32,117,110,115,117,112,112,111,114,116,101,100,32,98,112,112,32,47,32,100,97,116,97,119,105,100,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,37,120,0,37,45,56,115,32,37,45,51,115,32,32,32,37,49,54,115,32,37,48,50,100,45,37,48,50,100,45,37,48,52,100,32,37,50,100,58,37,48,50,100,10,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,70,65,73,76,85,82,69,0,0,32,68,0,0,0,0,0,0,80,73,67,58,32,52,32,98,121,116,101,32,105,110,116,101,114,118,97,108,32,110,111,116,32,104,97,110,100,108,101,100,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,100,111,115,98,111,120,0,0,77,73,88,69,82,58,71,111,116,32,100,105,102,102,101,114,101,110,116,32,118,97,108,117,101,115,32,102,114,111,109,32,83,68,76,58,32,102,114,101,113,32,37,100,44,32,98,108,111,99,107,115,105,122,101,32,37,100,0,0,0,0,0,0,73,80,88,78,69,84,32,83,84,65,84,85,83,32,114,101,112,111,114,116,115,32,116,104,101,32,99,117,114,114,101,110,116,32,115,116,97,116,101,32,111,102,32,116,104,105,115,32,68,111,115,66,111,120,39,115,32,115,101,115,115,105,111,110,115,32,73,80,88,32,116,117,110,110,101,108,105,110,103,10,0,0,0,0,0,0,0,0,88,77,83,58,32,67,80,85,32,114,101,115,101,116,32,118,105,97,32,112,111,114,116,32,48,120,57,50,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,99,104,0,0,0,0,0,0,84,97,115,107,32,115,119,105,116,99,104,32,67,83,32,84,121,112,101,32,37,100,0,0,46,119,97,118,0,0,0,0,115,105,109,112,108,101,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,95,77,79,85,78,84,95,69,78,68,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,37,45,49,54,115,0,0,0,87,97,105,116,115,32,102,111,114,32,49,32,107,101,121,115,116,114,111,107,101,32,116,111,32,99,111,110,116,105,110,117,101,46,10,0,0,0,0,0,107,0,0,0,0,0,0,0,73,80,88,78,69,84,32,80,73,78,71,10,10,0,0,0,110,111,114,109,97,108,0,0,50,50,48,0,0,0,0,0,27,91,52,52,59,49,109,201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,10,186,32,27,91,51,50,109,109,111,117,110,116,32,99,32,126,47,100,111,115,112,114,111,103,115,27,91,51,55,109,32,119,105,108,108,32,99,114,101,97,116,101,32,97,32,67,32,100,114,105,118,101,32,119,105,116,104,32,126,47,100,111,115,112,114,111,103,115,32,97,115,32,99,111,110,116,101,110,116,115,46,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,27,91,51,50,109,126,47,100,111,115,112,114,111,103,115,27,91,51,55,109,32,105,115,32,97,110,32,101,120,97,109,112,108,101,46,32,82,101,112,108,97,99,101,32,105,116,32,119,105,116,104,32,121,111,117,114,32,111,119,110,32,103,97,109,101,115,32,100,105,114,101,99,116,111,114,121,46,27,91,51,55,109,32,32,186,10,200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,27,91,48,109,10,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,60,68,73,82,62,0,0,0,83,72,69,76,76,95,67,77,68,95,80,65,85,83,69,95,72,69,76,80,0,0,0,0,106,0,0,0,0,0,0,0,84,104,101,32,115,121,110,116,97,120,32,102,111,114,32,73,80,88,78,69,84,32,80,73,78,71,32,105,115,58,10,10,0,0,0,0,0,0,0,0,77,111,117,110,116,101,100,32,70,65,84,32,118,111,108,117,109,101,32,105,115,32,70,65,84,49,54,32,119,105,116,104,32,37,100,32,99,108,117,115,116,101,114,115,0,0,0,0,97,117,116,111,0,0,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,95,77,79,85,78,84,95,79,84,72,69,82,0,0,0,0,0,0,0,67,68,82,111,109,32,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,37,45,56,115,32,37,45,51,115,32,32,32,37,45,49,54,115,32,37,48,50,100,45,37,48,50,100,45,37,48,52,100,32,37,50,100,58,37,48,50,100,10,0,0,0,0,0,0,80,114,101,115,115,32,97,110,121,32,107,101,121,32,116,111,32,99,111,110,116,105,110,117,101,46,10,0,0,0,0,0,105,0,0,0,0,0,0,0,116,104,101,32,116,105,109,101,32,105,116,32,116,111,111,107,32,116,111,32,114,101,99,101,105,118,101,32,97,110,100,32,115,101,110,100,32,116,104,101,32,112,105,110,103,32,109,101,115,115,97,103,101,46,10,10,0,0,0,0,0,0,0,0,99,112,117,0,0,0,0,0,27,91,52,52,59,49,109,201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187,10,186,32,27,91,51,50,109,109,111,117,110,116,32,99,32,99,58,92,100,111,115,112,114,111,103,115,92,27,91,51,55,109,32,119,105,108,108,32,99,114,101,97,116,101,32,97,32,67,32,100,114,105,118,101,32,119,105,116,104,32,99,58,92,100,111,115,112,114,111,103,115,32,97,115,32,99,111,110,116,101,110,116,115,46,186,10,186,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,186,10,186,32,27,91,51,50,109,99,58,92,100,111,115,112,114,111,103,115,92,27,91,51,55,109,32,105,115,32,97,110,32,101,120,97,109,112,108,101,46,32,82,101,112,108,97,99,101,32,105,116,32,119,105,116,104,32,121,111,117,114,32,111,119,110,32,103,97,109,101,115,32,100,105,114,101,99,116,111,114,121,46,32,32,27,91,51,55,109,32,186,10,200,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,188,27,91,48,109,10,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,91,37,115,93,0,0,0,0,83,72,69,76,76,95,67,77,68,95,80,65,85,83,69,0,104,0,0,0,0,0,0,0,116,114,105,101,100,32,99,114,101,97,116,105,110,103,32,37,115,46,32,98,117,116,32,102,97,105,108,101,100,0,0,0,114,101,115,112,111,110,115,101,44,32,97,108,108,32,111,116,104,101,114,32,99,111,110,110,101,99,116,101,100,32,99,111,109,112,117,116,101,114,115,32,119,105,108,108,32,114,101,115,112,111,110,100,32,116,111,32,116,104,101,32,112,105,110,103,32,97,110,100,32,114,101,112,111,114,116,10,0,0,0,0,102,111,114,99,101,0,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,95,77,79,85,78,84,95,87,73,78,68,79,87,83,0,0,0,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,83,72,79,87,72,69,76,80,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,46,46,0,0,0,0,0,0,73,108,108,101,103,97,108,32,99,111,109,109,97,110,100,58,32,37,115,46,10,0,0,0,103,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,73,80,88,78,69,84,32,80,73,78,71,32,98,114,111,97,100,99,97,115,116,115,32,97,32,112,105,110,103,32,114,101,113,117,101,115,116,32,116,104,114,111,117,103,104,32,116,104,101,32,73,80,88,32,116,117,110,110,101,108,101,100,32,110,101,116,119,111,114,107,46,32,32,73,110,32,32,32,32,10,0,0,0,0,0,0,0,0,102,111,114,99,101,100,0,0,27,91,51,50,59,49,109,72,101,114,101,32,97,114,101,32,115,111,109,101,32,99,111,109,109,97,110,100,115,32,116,111,32,103,101,116,32,121,111,117,32,115,116,97,114,116,101,100,58,27,91,48,109,10,66,101,102,111,114,101,32,121,111,117,32,99,97,110,32,117,115,101,32,116,104,101,32,102,105,108,101,115,32,108,111,99,97,116,101,100,32,111,110,32,121,111,117,114,32,111,119,110,32,102,105,108,101,115,121,115,116,101,109,44,10,89,111,117,32,104,97,118,101,32,116,111,32,109,111,117,110,116,32,116,104,101,32,100,105,114,101,99,116,111,114,121,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,102,105,108,101,115,46,10,10,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,83,72,69,76,76,95,69,88,69,67,85,84,69,95,73,76,76,69,71,65,76,95,67,79,77,77,65,78,68,0,0,0,102,0,0,0,0,0,0,0,73,80,88,78,69,84,32,83,84,79,80,83,69,82,86,69,82,10,10,0,0,0,0,0,100,111,117,98,108,101,32,117,115,97,103,101,32,111,102,32,118,101,99,116,111,114,32,104,97,110,100,108,101,114,0,0,115,99,97,110,51,120,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,95,77,79,85,78,84,95,83,84,65,82,84,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,70,73,76,69,95,78,79,84,95,70,79,85,78,68,0,0,0,0,0,0,0,0,68,114,105,118,101,32,37,99,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,33,10,89,111,117,32,109,117,115,116,32,27,91,51,49,109,109,111,117,110,116,27,91,48,109,32,105,116,32,102,105,114,115,116,46,32,84,121,112,101,32,27,91,49,59,51,51,109,105,110,116,114,111,27,91,48,109,32,111,114,32,27,91,49,59,51,51,109,105,110,116,114,111,32,109,111,117,110,116,27,91,48,109,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,69,120,105,116,32,116,111,32,101,114,114,111,114,58,32,37,115,0,0,0,0,0,0,0,84,104,101,32,115,121,110,116,97,120,32,102,111,114,32,73,80,88,78,69,84,32,83,84,79,80,83,69,82,86,69,82,32,105,115,58,10,10,0,0,65,85,88,0,0,0,0,0,115,99,97,110,50,120,0,0,27,91,50,74,27,91,51,50,59,49,109,87,101,108,99,111,109,101,32,116,111,32,68,79,83,66,111,120,27,91,48,109,44,32,97,110,32,120,56,54,32,101,109,117,108,97,116,111,114,32,119,105,116,104,32,115,111,117,110,100,32,97,110,100,32,103,114,97,112,104,105,99,115,46,10,68,79,83,66,111,120,32,99,114,101,97,116,101,115,32,97,32,115,104,101,108,108,32,102,111,114,32,121,111,117,32,119,104,105,99,104,32,108,111,111,107,115,32,108,105,107,101,32,111,108,100,32,112,108,97,105,110,32,68,79,83,46,10,10,70,111,114,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,98,97,115,105,99,32,109,111,117,110,116,32,116,121,112,101,32,27,91,51,52,59,49,109,105,110,116,114,111,32,109,111,117,110,116,27,91,48,109,10,70,111,114,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,67,68,45,82,79,77,32,115,117,112,112,111,114,116,32,116,121,112,101,32,27,91,51,52,59,49,109,105,110,116,114,111,32,99,100,114,111,109,27,91,48,109,10,70,111,114,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,115,112,101,99,105,97,108,32,107,101,121,115,32,116,121,112,101,32,27,91,51,52,59,49,109,105,110,116,114,111,32,115,112,101,99,105,97,108,27,91,48,109,10,70,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,68,79,83,66,111,120,44,32,103,111,32,116,111,32,27,91,51,52,59,49,109,104,116,116,112,58,47,47,119,119,119,46,100,111,115,98,111,120,46,99,111,109,47,119,105,107,105,27,91,48,109,10,10,27,91,51,49,59,49,109,68,79,83,66,111,120,32,119,105,108,108,32,115,116,111,112,47,101,120,105,116,32,119,105,116,104,111,117,116,32,97,32,119,97,114,110,105,110,103,32,105,102,32,97,110,32,101,114,114,111,114,32,111,99,99,117,114,101,100,33,27,91,48,109,10,10,10,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,73,78,84,82,79,0,0,0,0,0,83,72,69,76,76,95,69,88,69,67,85,84,69,95,68,82,73,86,69,95,78,79,84,95,70,79,85,78,68,0,0,0,100,0,0,0,0,0,0,0,45,115,116,97,114,116,109,97,112,112,101,114,0,0,0,0,116,104,101,32,73,80,88,32,116,117,110,110,101,108,105,110,103,32,115,101,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122885);
  /* memory initializer */ allocate([118,101,114,46,10,10,0,0,0,0,0,78,111,32,114,111,111,109,32,102,111,114,32,110,101,119,32,97,100,100,114,101,115,115,101,115,0,0,0,0,0,0,0,114,103,98,51,120,0,0,0,83,101,114,118,101,114,32,115,111,99,107,101,116,115,32,99,97,110,110,111,116,32,115,101,110,100,0,0,0,0,0,0,45,115,111,99,107,101,116,0,67,79,78,78,69,67,84,32,53,55,54,48,48,0,0,0,109,111,100,101,109,0,0,0,46,46,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,78,84,82,79,0,0,0,83,72,69,76,76,95,67,77,68,95,67,76,83,95,72,69,76,80,95,76,79,78,71,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,34,37,115,34,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,118,97,108,117,101,32,102,111,114,32,118,97,114,105,97,98,108,101,58,32,37,115,46,10,73,116,32,109,105,103,104,116,32,110,111,119,32,98,101,32,114,101,115,101,116,32,105,116,32,116,111,32,100,101,102,97,117,108,116,32,118,97,108,117,101,58,32,37,115,0,0,0,0,0,0,0,46,42,0,0,0,0,0,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,70,73,76,69,95,69,82,82,79,82,0,0,0,0,0,0,0,37,53,100,32,68,105,114,40,115,41,32,32,37,49,55,115,32,66,121,116,101,115,32,102,114,101,101,46,10,0,0,0,77,83,71,58,67,97,110,39,116,32,108,111,97,100,32,109,101,115,115,97,103,101,115,58,32,37,115,0,0,0,0,0,99,0,0,0,0,0,0,0,45,102,117,108,108,115,99,114,101,101,110,0,0,0,0,0,73,110,116,32,49,99,32,84,105,109,101,114,0,0,0,0,97,115,32,119,101,108,108,32,115,105,110,110,99,101,32,115,116,111,112,105,110,103,32,116,104,101,32,115,101,114,118,101,114,32,109,97,121,32,99,97,117,115,101,32,108,111,99,107,117,112,115,32,111,110,32,111,116,104,101,114,10,109,97,99,104,105,110,101,115,32,115,116,105,108,108,32,117,115,105,110,103,32,0,0,0,0,0,0,111,112,108,51,0,0,0,0,114,103,98,50,120,0,0,0,86,56,54,32,77,111,110,105,116,111,114,0,0,0,0,0,77,73,68,73,58,67,97,110,39,116,32,102,105,110,100,32,100,101,118,105,99,101,58,37,115,44,32,102,105,110,100,105,110,103,32,100,101,102,97,117,108,116,32,104,97,110,100,108,101,114,46,0,0,0,0,0,82,71,66,50,120,0,0,0,68,114,105,118,101,32,99,97,99,104,101,32,99,108,101,97,114,101,100,46,10,0,0,0,109,97,112,112,101,114,102,105,108,101,0,0,0,0,0,0,83,68,76,58,67,97,110,39,116,32,115,101,116,32,112,97,108,101,116,116,101,0,0,0,67,97,112,32,79,80,76,0,83,68,76,78,101,116,95,73,110,105,116,32,102,97,105,108,101,100,58,32,37,115,10,0,44,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,88,71,65,58,32,117,110,115,117,112,112,111,114,116,101,100,32,100,114,97,119,119,97,105,116,32,111,112,101,114,97,116,105,111,110,0,0,0,0,0,92,42,46,42,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,66,89,84,69,83,95,70,82,69,69,0,0,0,0,0,0,0,0,84,97,110,100,121,32,68,65,67,58,32,82,101,97,100,32,102,114,111,109,32,117,110,107,110,111,119,110,32,37,88,0,32,73,0,0,0,0,0,0,98,0,0,0,0,0,0,0,67,79,78,70,73,71,58,32,85,115,105,110,103,32,100,101,102,97,117,108,116,32,115,101,116,116,105,110,103,115,46,32,67,114,101,97,116,101,32,97,32,99,111,110,102,105,103,102,105,108,101,32,116,111,32,99,104,97,110,103,101,32,116,104,101,109,0,0,0,0,0,0,77,73,88,69,82,58,67,97,110,39,116,32,111,112,101,110,32,97,117,100,105,111,58,32,37,115,32,44,32,114,117,110,110,105,110,103,32,105,110,32,110,111,115,111,117,110,100,32,109,111,100,101,46,0,0,0,32,32,67,97,114,101,32,115,104,111,117,108,100,32,98,101,32,116,97,107,101,110,32,116,111,32,101,110,115,117,114,101,32,116,104,97,116,32,97,108,108,32,111,116,104,101,114,32,99,111,110,110,101,99,116,105,111,110,115,32,104,97,118,101,10,116,101,114,109,105,110,97,116,101,100,32,0,0,0,0,100,117,97,108,111,112,108,50,0,0,0,0,0,0,0,0,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,97,105,110,32,109,101,109,111,114,121,32,111,102,32,37,100,32,77,66,0,0,0,0,0,102,99,115,0,0,0,0,0,84,97,115,107,32,67,83,32,82,80,76,32,60,32,68,80,76,0,0,0,0,0,0,0,87,97,118,101,32,79,117,116,112,117,116,0,0,0,0,0,116,118,51,120,0,0,0,0,77,83,67,68,69,88,58,32,70,97,105,108,117,114,101,58,32,85,110,107,110,111,119,110,32,101,114,114,111,114,46,10,0,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,42,46,42,0,0,0,0,0,37,53,100,32,70,105,108,101,40,115,41,32,37,49,55,115,32,66,121,116,101,115,46,10,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,100,111,115,98,111,120,46,99,111,110,102,0,0,0,0,0,73,80,88,78,69,84,32,83,84,79,80,83,69,82,86,69,82,32,115,116,111,112,115,32,116,104,101,32,73,80,88,32,116,117,110,110,101,108,105,110,103,32,115,101,114,118,101,114,32,114,117,110,110,105,110,103,32,111,110,32,116,104,105,115,32,68,111,115,66,111,120,10,115,101,115,115,105,111,110,46,0,0,0,0,0,0,0,0,111,112,108,50,0,0,0,0,116,118,50,120,0,0,0,0,52,57,55,49,54,0,0,0,77,83,67,68,69,88,95,85,78,75,78,79,87,78,95,69,82,82,79,82,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,65,68,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,66,89,84,69,83,95,85,83,69,68,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,45,99,111,110,102,0,0,0,73,80,88,78,69,84,32,83,84,65,82,84,83,69,82,86,69,82,32,60,112,111,114,116,62,10,10,0,0,0,0,0,99,109,115,0,0,0,0,0,77,111,117,110,116,101,100,32,70,65,84,32,118,111,108,117,109,101,32,105,115,32,70,65,84,49,50,32,119,105,116,104,32,37,100,32,99,108,117,115,116,101,114,115,0,0,0,0,115,117,112,101,114,101,97,103,108,101,0,0,0,0,0,0,77,83,67,68,69,88,58,32,70,97,105,108,117,114,101,58,32,70,105,108,101,32,105,115,32,101,105,116,104,101,114,32,110,111,32,105,115,111,47,99,117,101,32,105,109,97,103,101,32,111,114,32,99,111,110,116,97,105,110,115,32,101,114,114,111,114,115,46,10,0,0,0,108,111,99,97,108,32,100,105,114,101,99,116,111,114,121,32,37,115,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,68,105,114,101,99,116,111,114,121,32,111,102,32,37,115,46,10,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,67,79,78,70,73,71,58,32,71,101,110,101,114,97,116,105,110,103,32,100,101,102,97,117,108,116,32,99,111,110,102,105,103,117,114,97,116,105,111,110,46,10,87,114,105,116,105,110,103,32,105,116,32,116,111,32,37,115,0,0,0,0,0,0,84,104,101,32,115,121,110,116,97,120,32,102,111,114,32,73,80,88,78,69,84,32,83,84,65,82,84,83,69,82,86,69,82,32,105,115,58,10,10,0,111,112,108,109,111,100,101,0,115,117,112,101,114,50,120,115,97,105,0,0,0,0,0,0,77,83,67,68,69,88,95,73,78,86,65,76,73,68,95,70,73,76,69,70,79,82,77,65,84,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,80,87,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,73,78,84,82,79,0,0,0,0,0,56,0,0,0,0,0,0,0,45,117,115,101,114,99,111,110,102,0,0,0,0,0,0,0,99,111,110,110,101,99,116,105,111,110,32,116,111,32,116,104,101,32,73,80,88,32,116,117,110,110,101,108,105,110,103,32,115,101,114,118,101,114,46,10,10,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,50,120,115,97,105,0,0,0,77,83,67,68,69,88,58,32,77,111,117,110,116,101,100,32,115,117,98,100,105,114,101,99,116,111,114,121,58,32,108,105,109,105,116,101,100,32,115,117,112,112,111,114,116,46,10,0,63,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,87,80,0,0,0,0,0,0,70,105,108,101,32,37,115,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,10,0,0,0,0,0,0,0,0,55,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,32,106,111,121,115,116,105,99,107,32,115,117,112,112,111,114,116,0,99,104,97,110,103,101,100,46,32,32,79,110,99,101,32,116,104,101,32,115,101,114,118,101,114,32,105,115,32,115,116,97,114,116,101,100,44,32,68,111,115,66,111,120,32,119,105,108,108,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,115,116,97,114,116,32,97,32,99,108,105,101,110,116,10,0,103,98,0,0,0,0,0,0,104,113,51,120,0,0,0,0,77,83,67,68,69,88,95,76,73,77,73,84,69,68,95,83,85,80,80,79,82,84,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,70,73,76,69,95,69,88,73,83,84,83,0,0,0,54,0,0,0,0,0,0,0,67,97,110,39,116,32,105,110,105,116,32,83,68,76,32,37,115,0,0,0,0,0,0,0,100,101,102,97,117,108,116,44,32,116,104,101,32,115,101,114,118,101,114,32,119,105,108,108,32,97,99,99,101,112,116,32,99,111,110,110,101,99,116,105,111,110,115,32,111,110,32,85,68,80,32,112,111,114,116,32,50,49,51,44,32,116,104,111,117,103,104,32,116,104,105,115,32,99,97,110,32,98,101,10,0,0,0,0,0,0,0,0,115,98,49,54,0,0,0,0,65,108,108,114,101,97,100,121,32,105,110,115,116,97,108,108,101,100,0,0,0,0,0,0,104,113,50,120,0,0,0,0,77,83,67,68,69,88,58,32,70,97,105,108,117,114,101,58,32,84,111,111,32,109,97,110,121,32,67,68,82,111,109,45,100,114,105,118,101,115,32,40,109,97,120,58,32,53,41,46,32,77,83,67,68,69,88,32,73,110,115,116,97,108,108,97,116,105,111,110,32,102,97,105,108,101,100,46,10,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,70,105,108,101,32,37,115,32,110,111,116,32,102,111,117,110,100,46,10,0,0,0,0,0,53,0,0,0,0,0,0,0,83,68,76,95,68,73,83,65,66,76,69,95,76,79,67,75,95,75,69,89,83,61,49,0,73,80,88,78,69,84,32,83,84,65,82,84,83,69,82,86,69,82,32,115,116,97,114,116,115,32,97,110,100,32,73,80,88,32,116,117,110,110,101,108,105,110,103,32,115,101,114,118,101,114,32,111,110,32,116,104,105,115,32,68,111,115,66,111,120,32,115,101,115,115,105,111,110,46,32,32,66,121,10,0,115,98,112,114,111,50,0,0,97,100,118,105,110,116,101,114,112,51,120,0,0,0,0,0,67,79,78,32,79,117,116,112,117,116,32,73,110,116,32,50,57,0,0,0,0,0,0,0,77,83,67,68,69,88,95,84,79,79,95,77,65,78,89,95,68,82,73,86,69,83,0,0,80,82,79,71,82,65,77,95,76,79,65,68,70,73,88,95,68,69,65,76,76,79,67,65,76,76,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,70,73,76,69,95,78,79,84,95,70,79,85,78,68,0,0,0,0,0,0,0,0,67,80,85,58,48,70,58,66,65,58,73,108,108,101,103,97,108,32,115,117,98,102,117,110,99,116,105,111,110,32,37,88,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,45,45,45,0,0,0,0,0,73,80,88,78,69,84,32,68,73,83,67,79,78,78,69,67,84,10,10,0,0,0,0,0,115,98,112,114,111,49,0,0,80,97,115,115,101,100,32,97,32,78,85,76,76,32,115,111,99,107,101,116,0,0,0,0,97,100,118,105,110,116,101,114,112,50,120,0,0,0,0,0,97,99,99,101,112,116,40,41,32,102,97,105,108,101,100,0,105,110,104,115,111,99,107,101,116,58,0,0,0,0,0,0,78,79,32,67,65,82,82,73,69,82,0,0,0,0,0,0,100,117,109,109,121,0,0,0,46,0,0,0,0,0,0,0,77,83,67,68,69,88,58,32,70,97,105,108,117,114,101,58,32,73,110,118,97,108,105,100,32,102,105,108,101,32,111,114,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,46,10,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,76,83,95,72,69,76,80,0,0,0,0,0,0,67,80,85,58,48,70,58,66,65,58,73,108,108,101,103,97,108,32,115,117,98,102,117,110,99,116,105,111,110,32,37,88,0,0,0,0,0,0,0,0,37,115,13,10,0,0,0,0,67,80,85,58,48,70,58,66,65,58,73,108,108,101,103,97,108,32,115,117,98,102,117,110,99,116,105,111,110,32,37,88,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,37,117,0,0,0,0,0,0,68,73,82,67,77,68,0,0,119,98,43,0,0,0,0,0,71,79,84,79,58,32,76,97,98,101,108,32,37,115,32,110,111,116,32,102,111,117,110,100,46,10,0,0,0,0,0,0,114,116,0,0,0,0,0,0,69,114,114,111,114,32,105,110,32,100,105,115,107,32,114,101,97,100,0,0,0,0,0,0,51,0,0,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,50,48,48,50,45,50,48,49,48,32,68,79,83,66,111,120,32,84,101,97,109,44,32,112,117,98,108,105,115,104,101,100,32,117,110,100,101,114,32,71,78,85,32,71,80,76,46,0,0,0,0,0,0,0,73,110,116,32,49,97,32,84,105,109,101,0,0,0,0,0,84,104,101,32,115,121,110,116,97,120,32,102,111,114,32,73,80,88,78,69,84,32,68,73,83,67,79,78,78,69,67,84,32,105,115,58,10,10,0,0,115,98,50,0,0,0,0,0,97,100,118,109,97,109,101,51,120,0,0,0,0,0,0,0,86,67,80,73,32,80,77,0,101,109,115,0,0,0,0,0,112,115,50,32,98,105,111,115,32,99,97,108,108,98,97,99,107,0,0,0,0,0,0,0,77,73,68,73,58,79,112,101,110,101,100,32,100,101,118,105,99,101,58,37,115,0,0,0,83,99,97,110,51,120,0,0,115,99,97,108,101,114,0,0,77,83,67,68,69,88,95,69,82,82,79,82,95,79,80,69,78,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,118,105,100,101,111,32,109,111,100,101,32,102,111,114,32,109,97,112,112,101,114,58,32,37,115,0,0,99,97,112,114,97,119,111,112,108,0,0,0,0,0,0,0,105,112,120,0,0,0,0,0,83,69,84,32,85,76,84,82,65,83,78,68,61,0,0,0,88,71,65,58,32,68,114,97,119,82,101,99,116,58,32,78,101,101,100,115,32,109,105,120,109,111,100,101,32,37,120,0,68,73,82,10,0,0,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,76,65,66,69,76,95,78,79,84,95,70,79,85,78,68,0,0,84,65,78,68,89,68,65,67,0,0,0,0,0,0,0,0,83,69,84,32,66,76,65,83,84,69,82,61,65,0,0,0,80,73,67,58,73,67,87,52,58,32,37,120,44,32,115,112,101,99,105,97,108,32,102,117,108,108,121,45,110,101,115,116,101,100,32,109,111,100,101,32,110,111,116,32,104,97,110,100,108,101,100,0,0,0,0,0,50,0,0,0,0,0,0,0,68,79,83,66,111,120,32,118,101,114,115,105,111,110,32,37,115,0,0,0,0,0,0,0,77,73,88,69,82,58,78,111,32,83,111,117,110,100,32,77,111,100,101,32,83,101,108,101,99,116,101,100,46,0,0,0,73,80,88,78,69,84,32,68,73,83,67,79,78,78,69,67,84,32,99,108,111,115,101,115,32,116,104,101,32,99,111,110,110,101,99,116,105,111,110,32,116,111,32,116,104,101,32,73,80,88,32,116,117,110,110,101,108,105,110,103,32,115,101,114,118,101,114,46,10,10,0,0,115,98,49,0,0,0,0,0,83,116,105,99,107,32,119,105,116,104,32,116,104,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,115,32,117,110,108,101,115,115,32,121,111,117,32,97,114,101,32,97,98,115,111,108,117,116,101,108,121,32,99,101,114,116,97,105,110,46,0,0,0,0,0,0,0,0,52,97,120,105,115,95,50,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,37,115,32,102,111,114,32,99,97,112,116,117,114,105,110,103,32,37,115,0,0,0,0,0,0,84,97,115,107,32,67,83,32,82,80,76,32,33,61,32,68,80,76,0,0,0,0,0,0,97,100,118,109,97,109,101,50,120,0,0,0,0,0,0,0,77,83,67,68,69,88,58,32,70,97,105,108,117,114,101,58,32,78,111,116,32,121,101,116,32,115,117,112,112,111,114,116,101,100,46,10,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,72,69,76,80,95,76,79,78,71,0,78,111,32,108,97,98,101,108,32,115,117,112,112,108,105,101,100,32,116,111,32,71,79,84,79,32,99,111,109,109,97,110,100,46,10,0,0,0,0,0,49,0,0,0,0,0,0,0,45,112,114,105,110,116,99,111,110,102,0,0,0,0,0,0,67,80,85,32,115,112,101,101,100,58,32,109,97,120,32,37,100,32,112,101,114,99,101,110,116,46,32,73,102,32,116,104,101,32,103,97,109,101,32,114,117,110,115,32,116,111,111,32,102,97,115,116,44,32,116,114,121,32,97,32,102,105,120,101,100,32,99,121,99,108,101,115,32,97,109,111,117,110,116,32,105,110,32,68,79,83,66,111,120,39,115,32,111,112,116,105,111,110,115,46,0,0,0,0,73,80,88,78,69,84,32,67,79,78,78,69,67,84,32,97,100,100,114,101,115,115,32,60,112,111,114,116,62,10,10,0,115,98,116,121,112,101,0,0,110,111,114,109,97,108,51,120,0,0,0,0,0,0,0,0,56,48,48,48,0,0,0,0,69,83,67,32,51,58,73,76,76,69,71,65,76,32,79,80,67,79,68,69,32,103,114,111,117,112,32,37,100,32,115,117,98,102,117,110,99,116,105,111,110,32,37,100,0,0,0,0,77,83,67,68,69,88,95,69,82,82,79,82,95,78,79,84,95,83,85,80,80,79,82,84,69,68,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,72,69,76,80,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,77,73,83,83,73,78,71,95,76,65,66,69,76,0,0,0,0,77,83,67,68,69,88,58,32,71,101,116,68,105,114,69,110,116,114,121,58,32,78,111,116,32,97,110,32,73,83,79,32,57,57,54,48,32,67,68,46,0,0,0,0,0,0,0,0,102,49,50,0,0,0,0,0,67,80,85,32,115,112,101,101,100,58,32,102,105,120,101,100,32,37,100,32,99,121,99,108,101,115,46,0,0,0,0,0,84,104,101,32,115,121,110,116,97,120,32,102,111,114,32,73,80,88,78,69,84,32,67,79,78,78,69,67,84,32,105,115,58,10,10,0,0,0,0,0,76,111,97,100,101,100,32,105,109,97,103,101,32,104,97,115,32,110,111,32,118,97,108,105,100,32,109,97,103,105,99,110,117,109,98,101,114,115,32,97,116,32,116,104,101,32,101,110,100,33,0,0,0,0,0,0,110,111,110,101,0,0,0,0,77,83,67,68,69,88,58,32,70,97,105,108,117,114,101,58,32,68,114,105,118,101,45,108,101,116,116,101,114,115,32,111,102,32,109,117,108,116,105,112,108,101,32,67,68,82,111,109,45,100,114,105,118,101,115,32,104,97,118,101,32,116,111,32,98,101,32,99,111,110,116,105,110,117,111,117,115,46,10,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,77,68,73,82,95,69,82,82,79,82,0,0,0,73,70,32,69,82,82,79,82,76,69,86,69,76,58,32,73,110,118,97,108,105,100,32,110,117,109,98,101,114,46,10,0,102,49,49,0,0,0,0,0,73,80,88,78,69,84,32,117,115,101,115,32,112,111,114,116,32,50,49,51,44,32,116,104,101,32,97,115,115,105,103,110,101,100,32,73,65,78,65,32,112,111,114,116,32,102,111,114,32,73,80,88,32,116,117,110,110,101,108,105,110,103,44,32,102,111,114,32,105,116,115,10,99,111,110,110,101,99,116,105,111,110,46,10,10,0,0,0,67,80,85,32,115,112,101,101,100,58,32,102,105,120,101,100,32,37,100,32,99,121,99,108,101,115,46,32,73,102,32,121,111,117,32,110,101,101,100,32,109,111,114,101,32,116,104,97,110,32,50,48,48,48,48,44,32,116,114,121,32,99,111,114,101,61,100,121,110,97,109,105,99,32,105,110,32,68,79,83,66,111,120,39,115,32,111,112,116,105,111,110,115,46,0,0,77,83,67,68,69,88,95,69,82,82,79,82,95,77,85,76,84,73,80,76,69,95,67,68,82,79,77,83,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,82,77,68,73,82,10,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,69,82,82,79,82,76,69,86,69,76,95,73,78,86,65,76,73,68,95,78,85,77,66,69,82,0,0,102,49,48,0,0,0,0,0,67,80,85,32,115,112,101,101,100,58,32,109,97,120,32,37,100,32,112,101,114,99,101,110,116,46,0,0,0,0,0,0,111,102,32,116,104,101,32,115,101,114,118,101,114,32,99,111,109,112,117,116,101,114,46,32,32,79,110,101,32,99,97,110,32,97,108,115,111,32,115,112,101,99,105,102,121,32,116,104,101,32,85,68,80,32,112,111,114,116,32,116,111,32,117,115,101,46,32,32,66,121,32,100,101,102,97,117,108,116,10,0,83,99,97,108,101,114,32,117,115,101,100,32,116,111,32,101,110,108,97,114,103,101,47,101,110,104,97,110,99,101,32,108,111,119,32,114,101,115,111,108,117,116,105,111,110,32,109,111,100,101,115,46,10,32,32,73,102,32,39,102,111,114,99,101,100,39,32,105,115,32,97,112,112,101,110,100,101,100,44,32,116,104,101,110,32,116,104,101,32,115,99,97,108,101,114,32,119,105,108,108,32,98,101,32,117,115,101,100,32,101,118,101,110,32,105,102,32,116,104,101,32,114,101,115,117,108,116,32,109,105,103,104,116,32,110,111,116,32,98,101,32,100,101,115,105,114,101,100,46,0,0,0,77,83,67,68,69,88,32,105,110,115,116,97,108,108,101,100,46,10,0,0,0,0,0,0,80,82,79,71,82,65,77,95,82,69,83,67,65,78,95,83,85,67,67,69,83,83,0,0,83,72,69,76,76,95,67,77,68,95,82,77,68,73,82,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,73,70,32,69,82,82,79,82,76,69,86,69,76,58,32,77,105,115,115,105,110,103,32,110,117,109,98,101,114,46,10,0,102,57,0,0,0,0,0,0,68,111,115,66,111,120,32,115,101,115,115,105,111,110,46,32,32,84,104,101,32,34,97,100,100,114,101,115,115,34,32,112,97,114,97,109,101,116,101,114,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,73,80,32,97,100,100,114,101,115,115,32,111,114,32,104,111,115,116,32,110,97,109,101,10,0,110,111,114,109,97,108,50,120,0,0,0,0,0,0,0,0,77,83,67,68,69,88,95,83,85,67,67,69,83,83,0,0,80,77,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,77,68,73,82,95,72,69,76,80,0,0,0,0,68,79,83,32,100,101,102,97,117,108,116,32,105,110,116,0,83,72,69,76,76,95,67,77,68,95,73,70,95,69,82,82,79,82,76,69,86,69,76,95,77,73,83,83,73,78,71,95,78,85,77,66,69,82,0,0,102,56,0,0,0,0,0,0,10,68,79,83,66,111,120,32,118,101,114,115,105,111,110,32,37,115,44,32,99,111,112,121,114,105,103,104,116,32,50,48,48,50,45,50,48,49,48,32,68,79,83,66,111,120,32,84,101,97,109,46,10,10,0,0,73,80,88,78,69,84,32,67,79,78,78,69,67,84,32,111,112,101,110,115,32,97,32,99,111,110,110,101,99,116,105,111,110,32,116,111,32,97,110,32,73,80,88,32,116,117,110,110,101,108,105,110,103,32,115,101,114,118,101,114,32,114,117,110,110,105,110,103,32,111,110,32,97,110,111,116,104,101,114,10,0,0,0,0,0,0,0,0,112,101,110,116,105,117,109,95,115,108,111,119,0,0,0,0,119,104,97,116,32,107,105,110,100,32,111,102,32,99,97,108,108,98,97,99,107,32,105,115,32,116,104,105,115,33,0,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,46,10,0,0,0,0,0,0,0,68,79,83,32,73,110,116,32,50,102,0,0,0,0,0,0,65,77,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,77,75,68,73,82,95,69,82,82,79,82,0,0,0,73,70,32,69,88,73,83,84,58,32,77,105,115,115,105,110,103,32,102,105,108,101,110,97,109,101,46,10,0,0,0,0,102,55,0,0,0,0,0,0,45,45,118,101,114,115,105,111,110,0,0,0,0,0,0,0,52,56,54,95,112,114,101,102,101,116,99,104,0,0,0,0,73,80,88,58,32,83,68,76,78,101,116,95,85,68,80,95,83,101,110,100,58,32,37,115,10,0,0,0,0,0,0,0,115,99,97,108,101,114,0,0,68,79,83,32,73,110,116,32,50,56,0,0,0,0,0,0,85,115,101,100,32,109,101,109,111,114,121,32,102,114,101,101,100,46,10,0,0,0,0,0,77,75,68,73,82,10,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,69,88,73,83,84,95,77,73,83,83,73,78,71,95,70,73,76,69,78,65,77,69,0,0,0,0,0,102,54,0,0,0,0,0,0,45,118,101,114,115,105,111,110,0,0,0,0,0,0,0,0,52,56,54,95,115,108,111,119,0,0,0,0,0,0,0,0,82,101,115,112,111,110,115,101,32,102,114,111,109,32,37,100,46,37,100,46,37,100,46,37,100,44,32,112,111,114,116,32,37,100,32,116,105,109,101,61,37,100,109,115,10,0,0,0,50,50,52,46,48,46,48,46,49,0,0,0,0,0,0,0,68,111,32,97,115,112,101,99,116,32,99,111,114,114,101,99,116,105,111,110,44,32,105,102,32,121,111,117,114,32,111,117,116,112,117,116,32,109,101,116,104,111,100,32,100,111,101,115,110,39,116,32,115,117,112,112,111,114,116,32,115,99,97,108,105,110,103,32,116,104,105,115,32,99,97,110,32,115,108,111,119,32,116,104,105,110,103,115,32,100,111,119,110,33,46,0,79,110,108,121,32,115,101,114,118,101,114,32,115,111,99,107,101,116,115,32,99,97,110,32,97,99,99,101,112,116,40,41,0,0,0,0,0,0,0,0,112,111,114,116,58,0,0,0,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,0,37,100,32,107,98,32,102,114,101,101,100,46,10,0,0,0,63,0,0,0,0,0,0,0,83,89,83,84,69,77,58,65,117,116,111,101,120,101,99,46,98,97,116,32,102,105,108,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,37,115,32,108,105,101,115,32,111,117,116,115,105,100,101,32,116,104,101,32,114,97,110,103,101,32,37,115,45,37,115,32,102,111,114,32,118,97,114,105,97,98,108,101,58,32,37,115,46,10,73,116,32,109,105,103,104,116,32,110,111,119,32,98,101,32,114,101,115,101,116,32,116,111,32,116,104,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,58,32,37,115,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,77,75,68,73,82,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,83,69,67,85,82,69,95,68,73,83,65,76,76,79,87,0,0,78,111,116,32,101,110,111,117,103,104,32,101,110,118,105,114,111,110,109,101,110,116,32,115,112,97,99,101,32,108,101,102,116,46,10,0,0,0,0,0,83,119,97,112,32,73,109,97,103,101,0,0,0,0,0,0,102,53,0,0,0,0,0,0,45,114,101,115,101,116,109,97,112,112,101,114,0,0,0,0,73,110,116,32,49,55,32,80,114,105,110,116,101,114,0,0,51,56,54,95,115,108,111,119,0,0,0,0,0,0,0,0,83,101,110,100,105,110,103,32,98,114,111,97,100,99,97,115,116,32,112,105,110,103,58,10,10,0,0,0,0,0,0,0,97,115,112,101,99,116,0,0,73,110,116,32,54,55,32,101,109,115,0,0,0,0,0,0,117,109,98,0,0,0,0,0,105,110,116,32,55,52,32,114,101,116,0,0,0,0,0,0,77,73,68,73,58,67,97,110,39,116,32,111,112,101,110,32,100,101,118,105,99,101,58,37,115,32,119,105,116,104,32,99,111,110,102,105,103,58,37,115,46,0,0,0,0,0,0,0,83,99,97,110,50,120,0,0,32,102,111,114,99,101,100,0,73,108,108,101,103,97,108,32,112,97,103,101,0,0,0,0,37,100,32,107,98,32,97,108,108,111,99,97,116,101,100,46,10,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,115,101,116,32,119,105,110,100,111,119,101,100,32,118,105,100,101,111,32,109,111,100,101,32,37,105,120,37,105,45,37,105,58,32,37,115,0,0,99,111,109,112,97,116,0,0,73,80,88,58,32,85,110,97,98,108,101,32,114,101,115,111,108,118,101,32,99,111,110,110,101,99,116,105,111,110,32,116,111,32,115,101,114,118,101,114,0,0,0,0,0,0,0,0,105,110,116,101,108,108,105,103,101,110,116,0,0,0,0,0,71,85,83,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,88,71,65,58,32,68,114,97,119,82,101,99,116,58,32,87,97,110,116,115,32,100,97,116,97,32,102,114,111,109,32,80,73,88,95,84,82,65,78,83,32,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,77,75,68,73,82,95,72,69,76,80,0,0,0,0,68,101,99,32,72,117,101,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,79,85,84,95,79,70,95,83,80,65,67,69,0,0,0,0,0,0,84,104,105,115,32,110,101,119,32,109,97,99,104,105,110,101,32,110,101,101,100,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,105,110,32,86,71,65,95,86,101,114,116,105,99,97,108,84,105,109,101,114,32,116,111,111,46,0,84,65,78,68,89,0,0,0,83,66,0,0,0,0,0,0,80,73,67,58,73,67,87,52,58,32,37,120,44,32,56,48,56,53,32,109,111,100,101,32,110,111,116,32,104,97,110,100,108,101,100,0,0,0,0,0,102,52,0,0,0,0,0,0,45,101,114,97,115,101,109,97,112,112,101,114,0,0,0,0,98,108,111,99,107,115,105,122,101,0,0,0,0,0,0,0,112,114,101,102,101,116,99,104,32,113,117,101,117,101,32,101,109,117,108,97,116,105,111,110,32,114,101,113,117,105,114,101,115,32,116,104,101,32,110,111,114,109,97,108,32,99,111,114,101,32,115,101,116,116,105,110,103,46,0,0,0,0,0,0,112,105,110,103,0,0,0,0,77,101,109,111,114,121,32,115,105,122,101,115,32,97,98,111,118,101,32,37,100,32,77,66,32,97,114,101,32,78,79,84,32,114,101,99,111,109,109,101,110,100,101,100,46,0,0,0,52,97,120,105,115,0,0,0,67,97,112,116,117,114,105,110,103,32,37,115,32,116,111,32,37,115,0,0,0,0,0,0,84,97,115,107,32,115,119,105,116,99,104,32,119,105,116,104,32,110,111,110,32,112,114,101,115,101,110,116,32,99,111,100,101,45,115,101,103,109,101,110,116,0,0,0,0,0,0,0,72,111,119,32,109,97,110,121,32,102,114,97,109,101,115,32,68,79,83,66,111,120,32,115,107,105,112,115,32,98,101,102,111,114,101,32,100,114,97,119,105,110,103,32,111,110,101,46,0,0,0,0,0,0,0,0,37,49,48,100,32,75,98,32,102,114,101,101,32,117,112,112,101,114,32,109,101,109,111,114,121,32,105,110,32,37,100,32,98,108,111,99,107,115,32,40,108,97,114,103,101,115,116,32,85,77,66,32,37,100,32,75,98,41,10,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,69,82,82,79,82,0,0,0,69,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,46,10,0,0,0,102,51,0,0,0,0,0,0,45,114,101,115,101,116,99,111,110,102,0,0,0,0,0,0,51,56,54,95,112,114,101,102,101,116,99,104,0,0,0,0,10,0,0,0,0,0,0,0,102,114,97,109,101,115,107,105,112,0,0,0,0,0,0,0,49,49,48,50,53,0,0,0,80,82,79,71,82,65,77,95,77,69,77,95,85,80,80,69,82,0,0,0,0,0,0,0,107,101,121,98,114,100,51,46,115,121,115,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,73,78,84,95,51,0,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,78,79,84,95,83,69,84,0,0,0,46,46,0,0,0,0,0,0,102,50,0,0,0,0,0,0,45,101,114,97,115,101,99,111,110,102,0,0,0,0,0,0,51,56,54,0,0,0,0,0,32,32,32,32,32,37,100,46,37,100,46,37,100,46,37,100,32,102,114,111,109,32,112,111,114,116,32,37,100,10,0,0,78,111,32,103,111,111,100,32,112,97,114,116,105,116,111,110,32,102,111,117,110,100,32,105,110,32,105,109,97,103,101,46,0,0,0,0,0,0,0,0,114,101,110,100,101,114,0,0,37,100,0,0,0,0,0,0,37,49,48,100,32,75,98,32,102,114,101,101,32,101,120,112,97,110,100,101,100,32,109,101,109,111,114,121,10,0,0,0,87,97,114,110,105,110,103,58,32,102,105,108,101,32,37,115,32,101,120,105,115,116,115,32,97,110,100,32,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,105,110,32,119,114,105,116,101,32,109,111,100,101,46,10,80,108,101,97,115,101,32,82,101,109,111,118,101,32,119,114,105,116,101,45,112,114,111,116,101,99,116,105,111,110,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,73,78,84,95,50,0,0,84,104,101,32,115,121,110,116,97,120,32,111,102,32,116,104,101,32,99,111,109,109,97,110,100,32,105,115,32,105,110,99,111,114,114,101,99,116,46,10,0,0,0,0,0,0,0,0,102,49,0,0,0,0,0,0,45,111,112,101,110,99,97,112,116,117,114,101,115,0,0,0,99,112,117,116,121,112,101,0,76,105,115,116,32,111,102,32,97,99,116,105,118,101,32,99,111,110,110,101,99,116,105,111,110,115,58,10,10,0,0,0,65,109,111,117,110,116,32,111,102,32,109,101,109,111,114,121,32,68,79,83,66,111,120,32,104,97,115,32,105,110,32,109,101,103,97,98,121,116,101,115,46,10,32,32,84,104,105,115,32,118,97,108,117,101,32,105,115,32,98,101,115,116,32,108,101,102,116,32,97,116,32,105,116,115,32,100,101,102,97,117,108,116,32,116,111,32,97,118,111,105,100,32,112,114,111,98,108,101,109,115,32,119,105,116,104,32,115,111,109,101,32,103,97,109,101,115,44,10,32,32,116,104,111,117,103,104,32,102,101,119,32,103,97,109,101,115,32,109,105,103,104,116,32,114,101,113,117,105,114,101,32,97,32,104,105,103,104,101,114,32,118,97,108,117,101,46,10,32,32,84,104,101,114,101,32,105,115,32,103,101,110,101,114,97,108,108,121,32,110,111,32,115,112,101,101,100,32,97,100,118,97,110,116,97,103,101,32,119,104,101,110,32,114,97,105,115,105,110,103,32,116,104,105,115,32,118,97,108,117,101,46,0,80,82,79,71,82,65,77,95,77,69,77,95,69,88,80,65,78,68,0,0,0,0,0,0,68,79,83,58,73,108,108,101,103,97,108,32,71,101,116,32,83,101,114,105,97,108,32,78,117,109,98,101,114,32,99,97,108,108,32,37,50,88,0,0,126,49,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,100,101,108,101,116,101,58,32,37,115,46,10,0,0,104,111,108,100,0,0,0,0,45,101,100,105,116,99,111,110,102,0,0,0,0,0,0,0,102,117,108,108,0,0,0,0,68,73,83,67,79,78,78,69,67,84,69,68,10,0,0,0,109,101,109,115,105,122,101,0,37,49,48,100,32,75,98,32,102,114,101,101,32,101,120,116,101,110,100,101,100,32,109,101,109,111,114,121,10,0,0,0,80,82,79,71,82,65,77,95,76,79,65,68,70,73,88,95,69,82,82,79,82,0,0,0,92,47,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,69,76,95,69,82,82,79,82,0,0,0,0,0,109,111,100,51,0,0,0,0,65,118,111,105,100,32,117,115,97,103,101,32,111,102,32,115,121,109,107,101,121,115,44,32,109,105,103,104,116,32,110,111,116,32,119,111,114,107,32,111,110,32,97,108,108,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,115,46,0,0,0,0,0,0,0,0,67,79,78,78,69,67,84,69,68,32,45,45,32,83,101,114,118,101,114,32,97,116,32,37,100,46,37,100,46,37,100,46,37,100,32,112,111,114,116,32,37,100,10,0,0,0,0,0,115,105,109,112,108,101,0,0,67,79,80,89,82,73,71,72,84,32,40,67,41,32,67,82,69,65,84,73,86,69,32,84,69,67,72,78,79,76,79,71,89,32,76,84,68,44,32,49,57,57,50,46,0,0,0,0,68,105,114,101,99,116,111,114,121,32,119,104,101,114,101,32,116,104,105,110,103,115,32,108,105,107,101,32,119,97,118,101,44,32,109,105,100,105,44,32,115,99,114,101,101,110,115,104,111,116,32,103,101,116,32,99,97,112,116,117,114,101,100,46,0,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,69,77,95,69,88,84,69,78,68,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,73,78,84,0,0,0,0,73,110,118,97,108,105,100,32,108,105,110,107,32,115,116,97,116,101,32,37,120,32,119,104,101,110,32,114,101,99,111,110,102,105,103,117,114,105,110,103,32,77,67,66,32,99,104,97,105,110,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,114,101,109,111,118,101,58,32,37,115,46,10,0,0,109,111,100,50,0,0,0,0,117,115,101,115,99,97,110,99,111,100,101,115,0,0,0,0,67,108,105,101,110,116,32,115,116,97,116,117,115,58,32,0,110,111,114,109,97,108,0,0,99,97,112,116,117,114,101,0,67,97,108,108,98,97,99,107,58,83,69,84,85,80,32,97,116,32,110,111,116,32,104,97,110,100,108,101,100,32,121,101,116,46,0,0,0,0,0,0,37,99,58,92,37,115,10,0,83,72,69,76,76,95,67,77,68,95,82,77,68,73,82,95,69,82,82,79,82,0,0,0,109,111,100,49,0,0,0,0,70,105,108,101,32,117,115,101,100,32,116,111,32,108,111,97,100,47,115,97,118,101,32,116,104,101,32,107,101,121,47,101,118,101,110,116,32,109,97,112,112,105,110,103,115,32,102,114,111,109,46,32,82,101,115,101,116,109,97,112,112,101,114,32,111,110,108,121,32,119,111,114,107,115,32,119,105,116,104,32,116,104,101,32,100,101,102,97,117,108,32,118,97,108,117,101,46,0,0,0,0,0,0,0,73,78,65,67,84,73,86,69,10,0,0,0,0,0,0,0,37,49,48,100,32,75,98,32,102,114,101,101,32,99,111,110,118,101,110,116,105,111,110,97,108,32,109,101,109,111,114,121,10,0,0,0,0,0,0,0,68,79,83,32,73,110,116,32,50,55,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,69,77,95,67,79,78,86,69,78,0,0,0,0,0,0,67,72,68,73,82,10,0,0,85,110,97,98,108,101,32,116,111,32,109,97,107,101,58,32,37,115,46,10,0,0,0,0,67,97,110,39,116,32,102,105,110,100,32,109,97,116,99,104,105,110,103,32,101,118,101,110,116,32,102,111,114,32,37,115,0,0,0,0,0,0,0,0,109,97,112,112,101,114,45,48,46,55,52,46,109,97,112,0,65,67,84,73,86,69,10,0,102,105,120,101,100,0,0,0,67,111,117,108,100,110,39,116,32,103,101,116,32,115,111,99,107,101,116,32,97,100,100,114,101,115,115,0,0,0,0,0,84,104,101,32,116,121,112,101,32,111,102,32,109,97,99,104,105,110,101,32,116,114,105,101,115,32,116,111,32,101,109,117,108,97,116,101,46,0,0,0,67,111,117,108,100,110,39,116,32,108,105,115,116,101,110,32,116,111,32,108,111,99,97,108,32,112,111,114,116,0,0,0,116,120,100,101,108,97,121,58,0,0,0,0,0,0,0,0,82,73,78,71,0,0,0,0,27,91,51,49,59,49,109,77,111,117,110,116,105,110,103,32,47,32,105,115,32,78,79,84,32,114,101,99,111,109,109,101,110,100,101,100,46,32,80,108,101,97,115,101,32,109,111,117,110,116,32,97,32,40,115,117,98,41,100,105,114,101,99,116,111,114,121,32,110,101,120,116,32,116,105,109,101,46,27,91,48,109,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133125);
  /* memory initializer */ allocate([83,72,69,76,76,95,69,88,69,67,85,84,69,95,73,76,76,69,71,65,76,95,67,79,77,77,65,78,68,0,0,0,65,85,84,79,69,88,69,67,46,66,65,84,0,0,0,0,68,79,83,58,48,120,54,53,58,85,110,104,97,110,100,108,101,100,32,99,111,117,110,116,114,121,32,105,110,102,111,114,109,97,116,105,111,110,32,99,97,108,108,32,37,50,88,0,67,79,78,70,73,71,95,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,45,119,99,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,77,75,68,73,82,95,69,82,82,79,82,0,0,0,115,119,97,112,105,109,103,0,32,109,111,100,51,0,0,0,109,97,112,112,101,114,102,105,108,101,0,0,0,0,0,0,73,110,116,32,49,53,32,66,105,111,115,0,0,0,0,0,83,101,114,118,101,114,32,115,116,97,116,117,115,58,32,0,97,117,116,111,0,0,0,0,86,69,83,65,32,80,77,32,83,101,116,32,80,97,108,101,116,116,101,0,0,0,0,0,109,97,99,104,105,110,101,0,69,77,77,88,88,88,88,48,0,0,0,0,0,0,0,0,88,77,83,32,72,97,110,100,108,101,114,0,0,0,0,0,105,110,116,32,55,52,0,0,100,101,102,97,117,108,116,0,84,86,51,120,0,0,0,0,45,102,111,114,99,101,115,99,97,108,101,114,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,87,65,82,78,73,78,71,95,79,84,72,69,82,0,0,0,0,0,68,79,83,66,79,88,0,0,67,111,117,108,100,32,110,111,116,32,115,101,116,32,102,117,108,108,115,99,114,101,101,110,32,118,105,100,101,111,32,109,111,100,101,32,37,105,120,37,105,45,37,105,58,32,37,115,0,0,0,0,0,0,0,0,67,77,83,0,0,0,0,0,102,97,115,116,0,0,0,0,68,79,83,58,48,120,54,53,32,66,117,102,102,101,114,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,73,80,88,58,32,85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,115,111,99,107,101,116,0,0,0,0,0,0,117,97,114,116,0,0,0,0,103,117,115,105,114,113,0,0,68,73,83,78,69,89,0,0,88,71,65,58,32,68,114,97,119,76,105,110,101,58,32,78,101,101,100,115,32,109,105,120,109,111,100,101,32,37,120,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,69,76,80,0,0,0,0,100,101,99,104,117,101,0,0,89,111,117,32,97,114,101,32,115,116,105,108,108,32,111,110,32,100,114,105,118,101,32,90,58,44,32,99,104,97,110,103,101,32,116,111,32,97,32,109,111,117,110,116,101,100,32,100,114,105,118,101,32,119,105,116,104,32,27,91,51,49,109,67,58,27,91,48,109,46,10,0,116,97,110,100,121,114,97,116,101,0,0,0,0,0,0,0,115,98,109,105,120,101,114,0,32,109,111,100,50,0,0,0,110,111,115,111,117,110,100,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,83,116,97,116,117,115,58,10,10,0,108,105,109,105,116,0,0,0,77,97,120,105,109,117,109,32,109,101,109,111,114,121,32,115,105,122,101,32,105,115,32,37,100,32,77,66,0,0,0,0,50,97,120,105,115,0,0,0,73,79,45,102,97,117,108,32,67,111,114,101,32,119,105,116,104,111,117,116,32,73,79,45,102,97,117,108,0,0,0,0,119,98,0,0,0,0,0,0,84,97,115,107,32,115,119,105,116,99,104,32,119,105,116,104,32,67,83,32,98,101,121,111,110,100,32,108,105,109,105,116,115,0,0,0,0,0,0,0,83,101,108,101,99,116,32,97,110,111,116,104,101,114,32,108,97,110,103,117,97,103,101,32,102,105,108,101,46,0,0,0,114,98,0,0,0,0,0,0,27,91,51,49,59,49,109,77,111,117,110,116,105,110,103,32,99,58,92,32,105,115,32,78,79,84,32,114,101,99,111,109,109,101,110,100,101,100,46,32,80,108,101,97,115,101,32,109,111,117,110,116,32,97,32,40,115,117,98,41,100,105,114,101,99,116,111,114,121,32,110,101,120,116,32,116,105,109,101,46,27,91,48,109,10,0,0,0,69,88,73,84,10,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,73,78,84,95,51,0,0,97,99,116,105,118,101,0,0,115,116,97,116,117,115,0,0,109,97,120,0,0,0,0,0,49,54,48,48,48,0,0,0,37,100,0,0,0,0,0,0,50,56,54,32,116,97,115,107,32,115,119,105,116,99,104,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,87,65,82,78,73,78,71,95,87,73,78,0,0,0,0,0,0,0,107,101,121,98,114,100,50,46,115,121,115,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,68,79,83,32,73,110,116,32,50,48,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,88,73,84,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,100,105,114,101,99,116,111,114,121,110,97,109,101,32,105,115,32,108,111,110,103,101,114,32,116,104,97,110,32,56,32,99,104,97,114,97,99,116,101,114,115,32,97,110,100,47,111,114,32,99,111,110,116,97,105,110,115,32,115,112,97,99,101,115,46,10,84,114,121,32,27,91,51,49,109,99,100,32,37,115,27,91,48,109,10,0,0,0,67,68,48,48,49,0,0,0,32,109,111,100,49,0,0,0,112,97,117,115,101,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,67,108,105,101,110,116,32,100,105,115,99,111,110,110,101,99,116,101,100,32,102,114,111,109,32,115,101,114,118,101,114,46,10,0,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,0,85,115,105,110,103,32,112,97,114,116,105,116,105,111,110,32,37,100,32,111,110,32,100,114,105,118,101,59,32,115,107,105,112,112,105,110,103,32,37,100,32,115,101,99,116,111,114,115,0,0,0,0,0,0,0,0,67,65,76,76,66,65,67,75,58,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,104,97,110,100,108,101,114,46,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,86,105,114,116,117,97,108,32,68,114,105,118,101,115,32,99,97,110,32,110,111,116,32,98,101,32,117,110,77,79,85,78,84,101,100,46,10,0,0,0,114,98,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,88,73,84,95,72,69,76,80,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,73,78,84,95,50,0,0,37,115,32,34,107,101,121,32,37,100,37,115,37,115,37,115,34,0,0,0,0,0,0,0,104,105,103,104,101,115,116,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,67,108,105,101,110,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,46,10,0,0,0,0,100,111,115,98,111,120,0,0,68,79,83,32,107,101,121,98,111,97,114,100,32,108,97,121,111,117,116,32,108,111,97,100,101,100,32,119,105,116,104,32,109,97,105,110,32,108,97,110,103,117,97,103,101,32,99,111,100,101,32,37,115,32,102,111,114,32,108,97,121,111,117,116,32,37,115,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,85,77,79,85,78,84,95,78,79,95,86,73,82,84,85,65,76,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,115,13,10,0,0,0,0,84,111,32,99,104,97,110,103,101,32,116,111,32,100,105,102,102,101,114,101,110,116,32,100,114,105,118,101,32,116,121,112,101,32,27,91,51,49,109,37,99,58,27,91,48,109,10,0,82,69,78,68,69,82,58,87,114,111,110,103,32,115,111,117,114,99,101,32,98,112,112,32,37,100,0,0,0,0,0,0,106,104,97,116,95,48,95,48,95,51,32,34,115,116,105,99,107,95,48,32,104,97,116,32,48,32,56,34,32,0,0,0,104,105,103,104,101,114,0,0,100,105,115,99,111,110,110,101,99,116,0,0,0,0,0,0,99,121,99,108,101,115,0,0,118,101,115,97,95,111,108,100,118,98,101,0,0,0,0,0,69,114,114,111,114,32,108,111,97,100,105,110,103,32,107,101,121,98,111,97,114,100,32,108,97,121,111,117,116,32,37,115,0,0,0,0,0,0,0,0,68,114,105,118,101,32,37,99,32,104,97,115,32,115,117,99,99,101,115,115,102,117,108,108,121,32,98,101,101,110,32,114,101,109,111,118,101,100,46,10,0,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,76,79,65,68,70,73,88,95,68,69,65,76,76,79,67,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,72,73,78,84,0,0,0,0,114,0,0,0,0,0,0,0,115,111,109,101,116,104,105,110,103,32,105,115,32,109,101,115,115,105,110,103,32,119,105,116,104,32,116,104,101,32,109,101,109,111,114,121,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,32,114,101,110,100,101,114,105,110,103,32,111,117,116,112,117,116,0,0,0,0,0,106,104,97,116,95,48,95,48,95,50,32,34,115,116,105,99,107,95,48,32,104,97,116,32,48,32,52,34,32,0,0,0,110,111,114,109,97,108,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,67,108,105,101,110,116,32,102,97,105,108,101,100,32,116,111,32,99,111,110,110,101,99,116,32,116,111,32,115,101,114,118,101,114,32,97,116,32,37,115,46,10,0,0,0,0,0,0,0,0,73,110,99,32,67,121,99,108,101,115,0,0,0,0,0,0,118,101,115,97,95,110,111,108,102,98,0,0,0,0,0,0,107,101,121,98,111,97,114,100,108,97,121,111,117,116,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,85,77,79,85,78,84,95,83,85,67,67,69,83,83,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,69,67,72,79,10,0,0,0,85,110,97,98,108,101,32,116,111,32,99,104,97,110,103,101,32,116,111,58,32,37,115,46,10,0,0,0,0,0,0,0,83,67,32,32,32,32,32,32,0,0,0,0,0,0,0,0,83,99,97,108,101,114,32,99,97,110,39,116,32,104,97,110,100,108,101,32,116,104,105,115,32,114,101,115,111,108,117,116,105,111,110,44,32,103,111,105,110,103,32,98,97,99,107,32,116,111,32,110,111,114,109,97,108,0,0,0,0,0,0,0,106,104,97,116,95,48,95,48,95,49,32,34,115,116,105,99,107,95,48,32,104,97,116,32,48,32,50,34,32,0,0,0,108,111,119,101,114,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,67,108,105,101,110,116,32,99,111,110,110,101,99,116,101,100,32,116,111,32,115,101,114,118,101,114,32,97,116,32,37,115,46,10,0,0,0,0,0,0,0,0,99,121,99,108,101,117,112,0,115,118,103,97,95,112,97,114,97,100,105,115,101,0,0,0,68,114,105,118,101,32,37,99,32,105,115,110,39,116,32,109,111,117,110,116,101,100,46,10,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,85,110,104,97,110,100,108,101,100,32,68,111,115,32,50,49,32,99,97,108,108,32,37,48,50,88,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,68,73,82,95,69,82,82,79,82,0,0,0,85,110,104,97,110,100,108,101,100,32,71,70,88,95,67,97,108,108,66,97,99,107,82,101,115,101,116,32,37,100,0,0,68,79,83,58,69,120,101,99,32,101,114,114,111,114,32,105,110,32,109,101,109,111,114,121,0,0,0,0,0,0,0,0,106,104,97,116,95,48,95,48,95,48,32,34,115,116,105,99,107,95,48,32,104,97,116,32,48,32,49,34,32,0,0,0,108,111,119,101,115,116,0,0,73,80,88,32,83,101,114,118,101,114,32,97,100,100,114,101,115,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,10,0,0,0,0,0,0,68,101,99,32,67,121,99,108,101,115,0,0,0,0,0,0,115,118,103,97,95,101,116,52,48,48,48,0,0,0,0,0,68,79,83,32,73,110,116,32,50,54,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,85,77,79,85,78,84,95,78,79,84,95,77,79,85,78,84,69,68,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,72,69,76,80,0,0,0,0,0,82,101,113,117,105,114,101,100,32,112,97,114,97,109,101,116,101,114,32,109,105,115,115,105,110,103,46,10,0,0,0,0,67,111,114,114,101,99,116,32,115,121,110,116,97,120,58,32,99,111,110,102,105,103,32,45,103,101,116,32,34,115,101,99,116,105,111,110,32,112,114,111,112,101,114,116,121,34,46,10,0,0,0,0,0,0,0,0,70,114,97,109,101,32,83,107,105,112,32,97,116,32,37,100,0,0,0,0,0,0,0,0,106,97,120,105,115,95,49,95,49,43,32,34,115,116,105,99,107,95,49,32,97,120,105,115,32,49,32,49,34,32,0,0,80,114,105,111,114,105,116,121,32,108,101,118,101,108,115,32,102,111,114,32,100,111,115,98,111,120,46,32,83,101,99,111,110,100,32,101,110,116,114,121,32,98,101,104,105,110,100,32,116,104,101,32,99,111,109,109,97,32,105,115,32,102,111,114,32,119,104,101,110,32,100,111,115,98,111,120,32,105,115,32,110,111,116,32,102,111,99,117,115,101,100,47,109,105,110,105,109,105,122,101,100,46,10,32,32,112,97,117,115,101,32,105,115,32,111,110,108,121,32,118,97,108,105,100,32,102,111,114,32,116,104,101,32,115,101,99,111,110,100,32,101,110,116,114,121,46,0,0,0,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,67,108,105,101,110,116,32,97,108,114,101,97,100,121,32,99,111,110,110,101,99,116,101,100,46,10,0,0,0,0,0,0,0,0,99,121,99,108,101,100,111,119,110,0,0,0,0,0,0,0,103,101,116,115,111,99,107,110,97,109,101,0,0,0,0,0,115,118,103,97,95,101,116,51,48,48,48,0,0,0,0,0,67,111,117,108,100,110,39,116,32,98,105,110,100,32,116,111,32,108,111,99,97,108,32,112,111,114,116,0,0,0,0,0,114,120,100,101,108,97,121,58,0,0,0,0,0,0,0,0,69,82,82,79,82,0,0,0,37,117,0,0,0,0,0,0,67,68,32,0,0,0,0,0,85,115,97,103,101,32,27,91,51,52,59,49,109,77,79,85,78,84,32,68,114,105,118,101,45,76,101,116,116,101,114,32,76,111,99,97,108,45,68,105,114,101,99,116,111,114,121,27,91,48,109,10,70,111,114,32,101,120,97,109,112,108,101,58,32,77,79,85,78,84,32,99,32,37,115,10,84,104,105,115,32,109,97,107,101,115,32,116,104,101,32,100,105,114,101,99,116,111,114,121,32,37,115,32,97,99,116,32,97,115,32,116,104,101,32,67,58,32,100,114,105,118,101,32,105,110,115,105,100,101,32,68,79,83,66,111,120,46,10,84,104,101,32,100,105,114,101,99,116,111,114,121,32,104,97,115,32,116,111,32,101,120,105,115,116,46,10,0,32,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,34,37,115,34,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,118,97,108,117,101,32,102,111,114,32,118,97,114,105,97,98,108,101,58,32,37,115,46,10,73,116,32,109,105,103,104,116,32,110,111,119,32,98,101,32,114,101,115,101,116,32,116,111,32,116,104,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,58,32,37,115,0,0,0,0,0,0,47,63,0,0,0,0,0,0,45,119,114,105,116,101,99,111,110,102,0,0,0,0,0,0,83,72,69,76,76,95,77,73,83,83,73,78,71,95,80,65,82,65,77,69,84,69,82,0,45,108,97,110,103,0,0,0,32,0,0,0,0,0,0,0,84,104,101,114,101,32,105,115,32,110,111,32,112,114,111,112,101,114,116,121,32,37,115,32,105,110,32,115,101,99,116,105,111,110,32,37,115,46,10,0,67,80,85,58,54,54,58,48,70,58,66,65,58,73,108,108,101,103,97,108,32,115,117,98,102,117,110,99,116,105,111,110,32,37,88,0,0,0,0,0,73,110,116,32,49,51,32,66,105,111,115,32,100,105,115,107,0,0,0,0,0,0,0,0,106,97,120,105,115,95,49,95,49,45,32,34,115,116,105,99,107,95,49,32,97,120,105,115,32,49,32,48,34,32,0,0,104,105,103,104,101,114,44,110,111,114,109,97,108,0,0,0,73,110,116,32,49,52,32,67,79,77,45,112,111,114,116,0,99,111,110,110,101,99,116,0,67,80,85,95,83,101,116,83,101,103,71,101,110,101,114,97,108,58,32,83,116,97,99,107,32,115,101,103,109,101,110,116,32,119,105,116,104,32,105,110,118,97,108,105,100,32,112,114,105,118,105,108,101,103,101,115,0,0,0,0,0,0,0,0,86,69,83,65,32,80,77,32,83,101,116,32,83,116,97,114,116,0,0,0,0,0,0,0,115,118,103,97,95,115,51,0,69,77,83,32,100,105,115,97,98,108,101,100,32,102,111,114,32,80,67,74,114,32,109,97,99,104,105,110,101,0,0,0,120,109,115,0,0,0,0,0,77,111,117,115,101,66,68,0,85,83,0,0,0,0,0,0,109,105,100,105,99,111,110,102,105,103,0,0,0,0,0,0,84,86,50,120,0,0,0,0,115,99,97,108,101,114,61,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,85,83,65,71,69,0,0,0,0,0,103,98,0,0,0,0,0,0,70,77,0,0,0,0,0,0,73,80,88,58,32,67,111,110,110,101,99,116,101,100,32,116,111,32,115,101,114,118,101,114,46,32,32,73,80,88,32,97,100,100,114,101,115,115,32,105,115,32,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,0,0,0,0,0,102,97,108,115,101,0,0,0,103,117,115,100,109,97,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,88,71,65,58,32,68,114,97,119,82,101,99,116,58,32,83,104,111,117,108,100,110,39,116,32,98,101,32,97,98,108,101,32,116,111,32,103,101,116,32,104,101,114,101,33,0,0,0,79,78,0,0,0,0,0,0,73,110,99,32,72,117,101,0,73,108,108,101,103,97,108,32,115,119,105,116,99,104,58,32,37,115,46,10,0,0,0,0,78,111,32,115,117,99,104,32,115,101,99,116,105,111,110,32,111,114,32,112,114,111,112,101,114,116,121,46,10,0,0,0,97,117,116,111,0,0,0,0,73,110,99,32,70,115,107,105,112,0,0,0,0,0,0,0,106,97,120,105,115,95,49,95,48,43,32,34,115,116,105,99,107,95,49,32,97,120,105,115,32,48,32,49,34,32,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,83,101,114,118,101,114,32,115,116,111,112,112,101,100,46,0,0,0,67,80,85,95,83,101,116,83,101,103,71,101,110,101,114,97,108,58,32,83,116,97,99,107,32,115,101,103,109,101,110,116,32,98,101,121,111,110,100,32,108,105,109,105,116,115,0,0,109,101,109,115,105,122,101,0,97,117,116,111,0,0,0,0,71,111,116,32,97,32,100,111,115,98,111,120,32,99,108,111,115,101,32,109,97,99,104,105,110,101,32,105,110,32,73,79,45,102,97,117,108,116,32,99,111,114,101,63,0,0,0,0,37,115,37,99,37,115,37,48,51,100,37,115,0,0,0,0,118,103,97,111,110,108,121,0,68,114,105,118,101,32,37,99,32,97,108,114,101,97,100,121,32,109,111,117,110,116,101,100,32,119,105,116,104,32,37,115,10,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,79,70,70,0,0,0,0,0,83,72,69,76,76,95,73,76,76,69,71,65,76,95,83,87,73,84,67,72,0,0,0,0,68,79,83,66,79,88,95,0,83,101,99,116,105,111,110,32,37,115,32,100,111,101,115,110,39,116,32,101,120,105,115,116,46,10,0,0,0,0,0,0,115,111,99,107,101,116,115,101,116,32,105,115,32,102,117,108,108,0,0,0,0,0,0,0,105,110,99,102,115,107,105,112,0,0,0,0,0,0,0,0,106,97,120,105,115,95,49,95,48,45,32,34,115,116,105,99,107,95,49,32,97,120,105,115,32,48,32,48,34,32,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,83,101,114,118,101,114,32,110,111,116,32,114,117,110,110,105,110,103,32,105,110,32,116,104,105,115,32,68,111,115,66,111,120,32,115,101,115,115,105,111,110,46,10,0,0,0,0,0,0,0,67,80,85,95,83,101,116,83,101,103,71,101,110,101,114,97,108,58,32,83,116,97,99,107,32,115,101,103,109,101,110,116,32,122,101,114,111,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,101,103,97,0,0,0,0,0,50,50,48,53,48,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,84,83,83,32,98,117,115,121,32,102,111,114,32,74,77,80,47,67,65,76,76,47,73,78,84,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,65,76,82,69,65,68,89,95,77,79,85,78,84,69,68,0,0,0,117,115,101,100,116,114,58,0,107,101,121,98,111,97,114,100,46,115,121,115,0,0,0,0,83,68,76,78,101,116,95,73,110,105,116,32,102,97,105,108,101,100,58,32,37,115,10,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,79,70,70,0,0,0,0,0,0,69,67,72,79,32,105,115,32,111,102,102,46,10,0,0,0,67,79,78,70,73,71,58,76,111,97,100,105,110,103,32,37,115,32,115,101,116,116,105,110,103,115,32,102,114,111,109,32,99,111,110,102,105,103,32,102,105,108,101,32,37,115,0,0,84,104,105,115,32,111,112,101,114,97,116,105,111,110,32,105,115,32,110,111,116,32,112,101,114,109,105,116,116,101,100,32,105,110,32,115,101,99,117,114,101,32,109,111,100,101,46,10,0,0,0,0,0,0,0,0,77,83,67,68,48,48,49,32,0,0,0,0,0,0,0,0,68,101,99,32,70,115,107,105,112,0,0,0,0,0,0,0,106,97,120,105,115,95,48,95,51,43,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,51,32,49,34,32,0,0,87,97,105,116,32,98,101,102,111,114,101,32,99,108,111,115,105,110,103,32,116,104,101,32,99,111,110,115,111,108,101,32,105,102,32,100,111,115,98,111,120,32,104,97,115,32,97,110,32,101,114,114,111,114,46,0,115,116,111,112,115,101,114,118,101,114,0,0,0,0,0,0,80,97,103,105,110,103,32,114,101,113,117,101,115,116,101,100,32,119,105,116,104,111,117,116,32,80,69,61,49,0,0,0,80,111,115,115,105,98,108,121,32,105,110,118,97,108,105,100,32,112,97,114,116,105,116,105,111,110,32,116,97,98,108,101,32,105,110,32,100,105,115,107,32,105,109,97,103,101,46,0,108,105,115,116,101,110,112,111,114,116,58,0,0,0,0,0,112,99,106,114,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,102,114,101,101,32,108,111,119,32,109,101,109,111,114,121,32,116,111,32,117,110,112,97,99,107,32,100,97,116,97,0,0,0,0,0,0,0,83,101,114,105,97,108,37,100,58,32,69,114,114,111,114,115,58,32,70,114,97,109,105,110,103,32,37,100,44,32,80,97,114,105,116,121,32,37,100,44,32,79,118,101,114,114,117,110,32,82,88,58,37,100,32,40,73,70,48,58,37,100,41,44,32,84,88,58,37,100,44,32,66,114,101,97,107,32,37,100,0,0,0,0,0,0,0,0,126,0,0,0,0,0,0,0,83,72,69,76,76,58,67,97,110,39,116,32,111,112,101,110,32,66,97,116,99,104,70,105,108,101,32,37,115,0,0,0,73,108,108,101,103,97,108,32,116,121,112,101,32,37,115,10,0,0,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,102,105,108,101,32,99,114,101,97,116,105,111,110,32,102,97,105,108,101,100,58,32,37,115,0,0,0,0,0,0,0,37,99,58,92,37,115,62,0,68,114,105,118,101,32,37,99,58,32,100,105,115,107,32,37,100,32,111,102,32,37,100,32,110,111,119,32,97,99,116,105,118,101,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,79,78,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,79,70,70,0,0,0,0,0,0,97,100,100,105,116,105,111,110,97,108,0,0,0,0,0,0,83,119,105,116,99,104,101,100,32,116,111,32,115,101,99,117,114,101,32,109,111,100,101,46,10,0,0,0,0,0,0,0,66,73,79,83,32,73,78,84,49,52,58,32,85,110,104,97,110,100,108,101,100,32,99,97,108,108,32,65,72,61,37,50,88,32,68,88,61,37,52,120,0,0,0,0,0,0,0,0,100,101,99,102,115,107,105,112,0,0,0,0,0,0,0,0,106,97,120,105,115,95,48,95,51,45,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,51,32,48,34,32,0,0,119,97,105,116,111,110,101,114,114,111,114,0,0,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,83,101,114,118,101,114,32,97,108,114,101,97,100,121,32,115,116,97,114,116,101,100,10,0,0,0,68,79,83,66,111,120,32,115,119,105,116,99,104,101,100,32,116,111,32,109,97,120,32,99,121,99,108,101,115,44,32,98,101,99,97,117,115,101,32,111,102,32,116,104,101,32,115,101,116,116,105,110,103,58,32,99,121,99,108,101,115,61,97,117,116,111,46,32,73,102,32,116,104,101,32,103,97,109,101,32,114,117,110,115,32,116,111,111,32,102,97,115,116,32,116,114,121,32,97,32,102,105,120,101,100,32,99,121,99,108,101,115,32,97,109,111,117,110,116,32,105,110,32,68,79,83,66,111,120,39,115,32,111,112,116,105,111,110,115,46,0,0,0,0,116,97,110,100,121,0,0,0,83,105,122,101,32,111,102,32,99,112,120,45,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,32,116,111,111,32,98,105,103,0,0,0,0,0,83,101,108,101,99,116,32,97,32,100,105,102,102,101,114,101,110,116,32,101,118,101,110,116,32,111,114,32,104,105,116,32,116,104,101,32,65,100,100,47,68,101,108,47,78,101,120,116,32,98,117,116,116,111,110,115,46,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,73,76,76,95,84,89,80,69,0,0,37,112,0,0,0,0,0,0,83,101,108,101,99,116,32,97,110,32,101,118,101,110,116,32,116,111,32,99,104,97,110,103,101,46,0,0,0,0,0,0,110,111,110,101,0,0,0,0,69,86,69,78,84,58,37,115,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,79,110,101,32,106,111,121,115,116,105,99,107,32,114,101,112,111,114,116,101,100,44,32,105,110,105,116,105,97,108,105,122,105,110,103,32,119,105,116,104,32,52,97,120,105,115,95,50,0,0,0,0,0,0,0,0,77,79,68,69,77,58,32,70,73,70,79,32,85,78,68,69,82,70,76,79,87,33,32,40,103,101,116,98,41,0,0,0,69,67,72,79,32,105,115,32,111,110,46,10,0,0,0,0,112,114,105,109,97,114,121,0,67,111,110,102,105,103,32,116,111,111,108,58,10,85,115,101,32,45,119,114,105,116,101,99,111,110,102,32,102,105,108,101,110,97,109,101,32,116,111,32,119,114,105,116,101,32,116,104,101,32,99,117,114,114,101,110,116,32,99,111,110,102,105,103,46,10,85,115,101,32,45,119,114,105,116,101,108,97,110,103,32,102,105,108,101,110,97,109,101,32,116,111,32,119,114,105,116,101,32,116,104,101,32,99,117,114,114,101,110,116,32,108,97,110,103,117,97,103,101,32,115,116,114,105,110,103,115,46,10,0,0,0,0,0,0,0,79,110,101,32,106,111,121,115,116,105,99,107,32,114,101,112,111,114,116,101,100,44,32,105,110,105,116,105,97,108,105,122,105,110,103,32,119,105,116,104,32,52,97,120,105,115,0,0,115,99,97,110,51,120,0,0,106,97,120,105,115,95,48,95,50,43,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,50,32,49,34,32,0,0,77,111,117,115,101,32,115,101,110,115,105,116,105,118,105,116,121,46,0,0,0,0,0,0,84,114,121,32,97,32,112,111,114,116,32,110,117,109,98,101,114,32,97,98,111,118,101,32,49,48,50,52,46,32,83,101,101,32,73,80,88,78,69,84,32,72,69,76,80,32,67,79,78,78,69,67,84,32,111,110,32,104,111,119,32,116,111,32,115,112,101,99,105,102,121,32,97,32,112,111,114,116,46,10,0,0,0,0,0,0,0,0,76,84,82,32,102,97,105,108,101,100,44,32,115,101,108,101,99,116,111,114,61,37,88,0,84,119,111,32,111,114,32,109,111,114,101,32,106,111,121,115,116,105,99,107,115,32,114,101,112,111,114,116,101,100,44,32,105,110,105,116,105,97,108,105,122,105,110,103,32,119,105,116,104,32,50,97,120,105,115,0,107,101,121,95,0,0,0,0,99,103,97,0,0,0,0,0,85,80,88,45,99,111,109,112,114,101,115,115,101,100,32,99,112,105,32,102,105,108,101,44,32,98,117,116,32,117,112,120,45,118,101,114,115,105,111,110,32,116,111,111,32,111,108,100,0,0,0,0,0,0,0,0,70,49,50,0,0,0,0,0,70,49,49,0,0,0,0,0,70,49,48,0,0,0,0,0,37,115,32,105,115,110,39,116,32,97,32,100,105,114,101,99,116,111,114,121,10,0,0,0,70,57,0,0,0,0,0,0,70,56,0,0,0,0,0,0,80,82,79,80,95,78,79,84,95,69,88,73,83,84,0,0,68,79,83,58,73,108,108,101,103,97,108,32,48,120,51,51,32,67,97,108,108,32,37,50,88,0,0,0,0,0,0,0,70,55,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,70,54,0,0,0,0,0,0,77,79,68,69,77,58,32,70,73,70,79,32,79,118,101,114,102,108,111,119,33,32,40,97,100,100,98,41,0,0,0,0,83,72,69,76,76,95,67,77,68,95,78,79,95,87,73,76,68,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,79,78,0,0,0,0,0,0,0,35,32,37,115,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,102,105,108,101,32,37,115,10,0,0,0,0,0,70,53,0,0,0,0,0,0,115,99,97,110,50,120,0,0,106,97,120,105,115,95,48,95,50,45,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,50,32,48,34,32,0,0,115,101,110,115,105,116,105,118,105,116,121,0,0,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,83,101,114,118,101,114,32,102,97,105,108,101,100,32,116,111,32,115,116,97,114,116,46,10,0,0,82,69,84,58,83,83,32,115,101,108,101,99,116,111,114,32,116,121,112,101,32,110,111,32,119,114,105,116,97,98,108,101,32,100,97,116,97,32,115,101,103,109,101,110,116,0,0,0,70,52,0,0,0,0,0,0,70,51,0,0,0,0,0,0,104,101,114,99,117,108,101,115,0,0,0,0,0,0,0,0,70,50,0,0,0,0,0,0,70,49,0,0,0,0,0,0,61,43,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,69,82,82,79,82,95,50,0,0,0,45,95,0,0,0,0,0,0,48,41,0,0,0,0,0,0,57,40,0,0,0,0,0,0,56,42,0,0,0,0,0,0,116,114,117,101,0,0,0,0,67,80,85,58,54,54,58,48,70,58,66,65,58,73,108,108,101,103,97,108,32,115,117,98,102,117,110,99,116,105,111,110,32,37,88,0,0,0,0,0,77,79,68,69,77,58,32,70,73,70,79,32,79,118,101,114,102,108,111,119,33,32,40,97,100,100,115,32,108,101,110,32,37,117,41,0,0,0,0,0,82,69,78,65,77,69,10,0,73,102,32,121,111,117,32,119,97,110,116,32,97,32,108,105,115,116,32,111,102,32,97,108,108,32,115,117,112,112,111,114,116,101,100,32,99,111,109,109,97,110,100,115,32,116,121,112,101,32,27,91,51,51,59,49,109,104,101,108,112,32,47,97,108,108,27,91,48,109,32,46,10,65,32,115,104,111,114,116,32,108,105,115,116,32,111,102,32,116,104,101,32,109,111,115,116,32,111,102,116,101,110,32,117,115,101,100,32,99,111,109,109,97,110,100,115,58,10,0,95,67,79,78,70,73,71,70,73,76,69,95,72,69,76,80,0,0,0,0,0,0,0,0,67,79,78,70,73,71,46,67,79,77,0,0,0,0,0,0,69,77,83,58,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,117,114,101,0,0,0,55,38,0,0,0,0,0,0,114,103,98,51,120,0,0,0,106,97,120,105,115,95,48,95,49,43,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,49,32,49,34,32,0,0,77,111,117,115,101,32,119,105,108,108,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,108,111,99,107,44,32,105,102,32,121,111,117,32,99,108,105,99,107,32,111,110,32,116,104,101,32,115,99,114,101,101,110,46,32,40,80,114,101,115,115,32,67,84,82,76,45,70,49,48,32,116,111,32,117,110,108,111,99,107,41,0,0,0,108,111,99,97,108,104,111,115,116,0,0,0,0,0,0,0,82,69,84,32,102,114,111,109,32,105,108,108,101,103,97,108,32,100,101,115,99,114,105,112,116,111,114,32,116,121,112,101,32,37,88,0,0,0,0,0,54,94,0,0,0,0,0,0,53,37,0,0,0,0,0,0,54,0,0,0,0,0,0,0,52,36,0,0,0,0,0,0,51,35,0,0,0,0,0,0,50,64,0,0,0,0,0,0,67,65,76,76,66,65,67,75,58,83,101,116,117,112,58,73,108,108,101,103,97,108,32,116,121,112,101,32,37,100,0,0,68,105,114,101,99,116,111,114,121,32,37,115,32,100,111,101,115,110,39,116,32,101,120,105,115,116,46,10,0,0,0,0,49,33,0,0,0,0,0,0,96,126,0,0,0,0,0,0,97,117,116,111,101,120,101,99,58,32,97,108,108,114,101,97,100,121,32,99,114,101,97,116,101,100,32,37,115,0,0,0,93,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,77,111,100,101,109,58,32,72,97,110,103,32,117,112,32,100,117,101,32,116,111,32,100,114,111,112,112,101,100,32,68,84,82,46,0,0,0,0,0,0,46,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,69,78,65,77,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,72,69,76,80,0,0,105,110,116,101,114,110,97,108,32,112,114,111,103,114,97,109,0,0,0,0,0,0,0,0,69,77,83,58,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,117,114,101,32,100,117,114,105,110,103,32,114,101,97,108,108,111,99,97,116,105,111,110,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,114,103,98,50,120,0,0,0,106,97,120,105,115,95,48,95,49,45,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,49,32,48,34,32,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,83,101,114,118,101,114,32,115,116,97,114,116,101,100,10,0,0,0,58,32,0,0,0,0,0,0,67,65,76,76,58,68,101,115,99,114,105,112,116,111,114,32,116,121,112,101,32,37,120,32,117,110,115,117,112,112,111,114,116,101,100,0,0,0,0,0,39,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,70,97,115,116,32,70,111,114,119,97,114,100,32,79,70,70,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,68,79,83,32,73,110,116,32,50,53,0,0,0,0,0,0,44,0,0,0,0,0,0,0,70,97,115,116,32,70,111,114,119,97,114,100,32,79,78,0,60,0,0,0,0,0,0,0,68,79,83,66,79,88,58,85,110,107,110,111,119,110,32,109,97,99,104,105,110,101,32,116,121,112,101,32,37,115,0,0,106,98,117,116,116,111,110,95,37,100,95,37,100,0,0,0,67,80,85,58,54,54,58,48,70,58,66,65,58,73,108,108,101,103,97,108,32,115,117,98,102,117,110,99,116,105,111,110,32,37,88,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,69,82,82,79,82,95,49,0,0,0,106,97,120,105,115,95,37,100,95,37,100,37,115,0,0,0,45,109,97,99,104,105,110,101,0,0,0,0,0,0,0,0,106,104,97,116,95,37,100,95,37,100,95,37,100,0,0,0,83,112,101,101,100,108,111,99,107,0,0,0,0,0,0,0,109,111,100,95,37,100,0,0,115,112,101,101,100,108,111,99,107,0,0,0,0,0,0,0,66,73,78,68,58,37,115,0,77,111,100,101,109,58,32,69,110,116,101,114,105,110,103,32,99,111,109,109,97,110,100,32,109,111,100,101,40,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,41,0,0,0,83,72,69,76,76,95,67,77,68,95,82,69,78,65,77,69,95,72,69,76,80,0,0,0,73,108,108,101,103,97,108,32,80,97,116,104,46,10,0,0,32,37,115,0,0,0,0,0,32,104,111,108,100,0,0,0,80,111,115,115,105,98,108,101,32,118,97,108,117,101,115,0,116,118,51,120,0,0,0,0,106,97,120,105,115,95,48,95,48,43,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,48,32,49,34,32,0,0,87,104,97,116,32,118,105,100,101,111,32,115,121,115,116,101,109,32,116,111,32,117,115,101,32,102,111,114,32,111,117,116,112,117,116,46,0,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,67,108,105,101,110,116,32,97,108,114,101,97,100,117,32,99,111,110,110,101,99,116,101,100,32,116,111,32,97,110,111,116,104,101,114,32,115,101,114,118,101,114,46,32,32,68,105,115,99,111,110,110,101,99,116,32,102,105,114,115,116,46,10,0,0,0,77,97,112,112,101,114,32,102,105,108,101,32,115,97,118,101,100,46,0,0,0,0,0,0,67,65,76,76,58,71,65,84,69,58,67,83,32,110,111,32,101,120,101,99,117,116,97,98,108,101,32,115,101,103,109,101,110,116,0,0,0,0,0,0,67,79,78,70,73,71,95,83,85,71,71,69,83,84,69,68,95,86,65,76,85,69,83,0,99,111,109,112,97,114,105,110,103,32,115,116,117,102,102,32,116,104,97,116,32,100,111,101,115,110,39,116,32,109,97,107,101,32,115,101,110,115,101,0,67,111,117,108,100,110,39,116,32,98,105,110,100,32,116,111,32,108,111,99,97,108,32,112,111,114,116,0,0,0,0,0,35,32,84,104,105,115,32,105,115,32,116,104,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,102,105,108,101,32,102,111,114,32,68,79,83,66,111,120,32,37,115,46,32,40,80,108,101,97,115,101,32,117,115,101,32,116,104,101,32,108,97,116,101,115,116,32,118,101,114,115,105,111,110,32,111,102,32,68,79,83,66,111,120,41,10,35,32,76,105,110,101,115,32,115,116,97,114,116,105,110,103,32,119,105,116,104,32,97,32,35,32,97,114,101,32,99,111,109,109,101,110,116,108,105,110,101,115,32,97,110,100,32,97,114,101,32,105,103,110,111,114,101,100,32,98,121,32,68,79,83,66,111,120,46,10,35,32,84,104,101,121,32,97,114,101,32,117,115,101,100,32,116,111,32,40,98,114,105,101,102,108,121,41,32,100,111,99,117,109,101,110,116,32,116,104,101,32,101,102,102,101,99,116,32,111,102,32,101,97,99,104,32,111,112,116,105,111,110,46,10,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,99,111,110,110,101,99,116,32,116,111,32,114,101,109,111,116,101,32,104,111,115,116,0,116,101,108,110,101,116,58,0,34,37,115,34,32,0,0,0,79,75,0,0,0,0,0,0,67,79,78,70,73,71,70,73,76,69,95,73,78,84,82,79,0,0,0,0,0,0,0,0,105,114,113,58,0,0,0,0,37,115,32,0,0,0,0,0,76,105,110,101,115,32,105,110,32,116,104,105,115,32,115,101,99,116,105,111,110,32,119,105,108,108,32,98,101,32,114,117,110,32,97,116,32,115,116,97,114,116,117,112,46,10,89,111,117,32,99,97,110,32,112,117,116,32,121,111,117,114,32,77,79,85,78,84,32,108,105,110,101,115,32,104,101,114,101,46,10,0,0,0,0,0,0,0,67,97,110,39,116,32,111,112,101,110,32,37,115,32,102,111,114,32,115,97,118,105,110,103,32,116,104,101,32,109,97,112,112,105,110,103,115,0,0,0,65,85,84,79,69,88,69,67,95,67,79,78,70,73,71,70,73,76,69,95,72,69,76,80,0,0,0,0,0,0,0,0,67,117,114,114,101,110,116,32,109,111,117,110,116,101,100,32,100,114,105,118,101,115,32,97,114,101,58,10,0,0,0,0,122,58,92,99,111,110,102,105,103,32,0,0,0,0,0,0,119,116,43,0,0,0,0,0,97,117,116,111,101,120,101,99,0,0,0,0,0,0,0,0,80,82,79,71,82,65,77,83,95,77,97,107,101,70,105,108,101,32,112,114,111,103,114,97,109,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,32,40,37,100,41,0,0,0,80,114,101,115,115,32,97,32,107,101,121,47,106,111,121,115,116,105,99,107,32,98,117,116,116,111,110,32,111,114,32,109,111,118,101,32,116,104,101,32,106,111,121,115,116,105,99,107,46,0,0,0,0,0,0,0,69,110,97,98,108,101,32,105,112,120,32,111,118,101,114,32,85,68,80,47,73,80,32,101,109,117,108,97,116,105,111,110,46,0,0,0,0,0,0,0,66,105,110,100,32,84,105,116,108,101,0,0,0,0,0,0,77,101,115,115,97,103,101,32,110,111,116,32,70,111,117,110,100,33,10,0,0,0,0,0,105,112,120], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143368);
  /* memory initializer */ allocate([69,120,105,116,0,0,0,0,84,111,83,116,114,105,110,103,32,109,101,115,115,101,100,32,117,112,32,63,0,0,0,0,76,97,110,103,117,97,103,101,32,99,111,100,101,32,111,102,32,116,104,101,32,107,101,121,98,111,97,114,100,32,108,97,121,111,117,116,32,40,111,114,32,110,111,110,101,41,46,0,77,79,68,69,77,58,32,84,101,108,110,101,116,32,99,108,105,101,110,116,32,115,101,110,116,32,73,65,67,32,37,100,0,0,0,0,0,0,0,0,60,27,91,51,52,59,49,109,37,45,56,115,27,91,48,109,62,32,37,115,0,0,0,0,37,115,61,37,115,0,0,0,83,72,69,76,76,95,73,76,76,69,71,65,76,95,80,65,84,72,0,0,0,0,0,0,58,37,115,10,37,115,10,46,10,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,80,82,79,80,69,82,84,89,95,69,82,82,79,82,0,0,0,72,79,77,69,0,0,0,0,83,97,118,101,0,0,0,0,85,110,104,97,110,100,108,101,100,32,73,78,84,32,49,55,32,99,97,108,108,32,37,50,88,0,0,0,0,0,0,0,80,67,74,114,32,107,98,32,105,114,113,0,0,0,0,0,107,101,121,98,111,97,114,100,108,97,121,111,117,116,0,0,116,118,50,120,0,0,0,0,73,109,97,103,101,76,111,97,100,101,114,58,32,105,109,97,103,101,32,102,105,108,101,32,119,105,116,104,32,97,100,100,105,116,105,111,110,97,108,32,100,97,116,97,44,32,109,105,103,104,116,32,110,111,116,32,108,111,97,100,33,0,0,0,126,47,46,100,111,115,98,111,120,0,0,0,0,0,0,0,106,97,120,105,115,95,48,95,48,45,32,34,115,116,105,99,107,95,48,32,97,120,105,115,32,48,32,48,34,32,0,0,111,117,116,112,117,116,0,0,73,110,116,32,49,50,32,77,101,109,111,114,121,0,0,0,115,116,97,114,116,115,101,114,118,101,114,0,0,0,0,0,68,101,108,0,0,0,0,0,67,65,76,76,58,71,65,84,69,58,67,83,32,68,80,76,62,67,80,76,0,0,0,0,75,101,121,98,111,97,114,100,0,0,0,0,0,0,0,0,69,110,97,98,108,101,32,85,77,66,32,115,117,112,112,111,114,116,46,0,0,0,0,0,86,69,83,65,32,80,77,32,83,101,116,32,87,105,110,100,111,119,0,0,0,0,0,0,65,100,100,0,0,0,0,0,117,109,98,0,0,0,0,0,49,50,0,0,0,0,0,0,101,109,115,0,0,0,0,0,77,111,117,115,101,0,0,0,78,111,32,109,97,116,99,104,105,110,103,32,99,112,105,32,102,105,108,101,32,102,111,114,32,99,111,100,101,112,97,103,101,32,37,105,0,0,0,0,109,105,100,105,100,101,118,105,99,101,0,0,0,0,0,0,78,101,120,116,0,0,0,0,69,110,97,98,108,101,32,69,77,83,32,115,117,112,112,111,114,116,46,0,0,0,0,0,78,111,114,109,97,108,51,120,0,0,0,0,0,0,0,0,45,115,99,97,108,101,114,0,76,111,97,100,101,100,32,100,105,115,107,32,37,100,32,102,114,111,109,32,115,119,97,112,108,105,115,116,32,112,111,115,105,116,105,111,110,32,37,100,32,45,32,34,37,115,34,0,77,111,100,51,0,0,0,0,101,109,115,0,0,0,0,0,77,111,100,50,0,0,0,0,69,110,97,98,108,101,32,88,77,83,32,115,117,112,112,111,114,116,46,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,83,84,65,84,85,83,95,49,0,0,77,111,100,49,0,0,0,0,120,109,115,0,0,0,0,0,65,120,105,115,32,51,0,0,100,111,115,0,0,0,0,0,68,79,83,66,111,120,32,37,115,44,32,67,112,117,32,115,112,101,101,100,58,32,37,56,100,32,99,121,99,108,101,115,44,32,70,114,97,109,101,115,107,105,112,32,37,50,100,44,32,80,114,111,103,114,97,109,58,32,37,56,115,0,0,0,73,82,81,32,48,32,67,108,111,99,107,0,0,0,0,0,115,98,116,121,112,101,0,0,111,112,108,101,109,117,0,0,73,80,88,83,69,82,86,69,82,58,32,37,115,0,0,0,72,97,116,47,68,45,112,97,100,0,0,0,0,0,0,0,115,101,114,105,97,108,52,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,84,105,109,101,111,117,116,32,99,111,110,110,101,99,116,105,110,103,32,116,111,32,115,101,114,118,101,114,32,97,116,32,37,115,0,0,0,0,0,0,111,102,102,0,0,0,0,0,103,117,115,98,97,115,101,0,65,120,105,115,32,51,47,52,0,0,0,0,0,0,0,0,115,101,114,105,97,108,51,0,77,79,68,69,77,58,32,85,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,32,37,100,0,0,0,88,71,65,58,32,68,114,97,119,82,101,99,116,58,32,87,97,110,116,115,32,100,97,116,97,32,102,114,111,109,32,115,114,99,100,97,116,97,0,0,83,72,69,76,76,95,67,77,68,95,72,69,76,80,0,0,105,110,99,104,117,101,0,0,83,72,69,76,76,95,83,89,78,84,65,88,69,82,82,79,82,0,0,0,0,0,0,0,67,79,78,70,73,71,95,83,85,71,71,69,83,84,69,68,95,86,65,76,85,69,83,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,85,83,65,71,69,0,0,0,0,111,110,0,0,0,0,0,0,65,120,105,115,32,49,47,50,0,0,0,0,0,0,0,0,115,101,101,32,115,101,114,105,97,108,49,0,0,0,0,0,86,67,80,73,58,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,84,82,32,119,105,116,104,32,37,120,0,0,100,109,97,0,0,0,0,0,115,117,112,101,114,101,97,103,108,101,0,0,0,0,0,0,83,80,75,82,0,0,0,0,106,98,117,116,116,111,110,95,49,95,49,32,34,115,116,105,99,107,95,49,32,98,117,116,116,111,110,32,49,34,32,0,111,118,101,114,108,97,121,0,97,108,108,114,101,97,100,121,32,97,100,100,101,100,32,109,105,120,101,114,32,99,104,97,110,110,101,108,46,0,0,0,73,80,88,78,69,84,32,72,69,76,80,32,99,111,109,109,97,110,100,10,10,0,0,0,68,105,115,97,98,108,101,100,0,0,0,0,0,0,0,0,67,97,108,108,58,71,97,116,101,58,83,83,32,110,111,32,119,114,105,116,97,98,108,101,32,100,97,116,97,32,115,101,103,109,101,110,116,0,0,0,115,101,114,105,97,108,50,0,102,97,108,115,101,0,0,0,73,79,95,119,114,105,116,101,72,97,110,100,108,101,114,32,97,108,108,114,101,97,100,121,32,105,110,115,116,97,108,108,101,100,32,112,111,114,116,32,37,120,0,0,0,0,0,0,74,111,121,115,116,105,99,107,32,50,0,0,0,0,0,0,68,77,65,32,115,101,103,98,111,117,110,100,32,119,114,97,112,112,105,110,103,32,40,114,101,97,100,41,0,0,0,0,115,101,116,32,116,121,112,101,32,111,102,32,100,101,118,105,99,101,32,99,111,110,110,101,99,116,101,100,32,116,111,32,99,111,109,32,112,111,114,116,46,10,67,97,110,32,98,101,32,100,105,115,97,98,108,101,100,44,32,100,117,109,109,121,44,32,109,111,100,101,109,44,32,110,117,108,108,109,111,100,101,109,44,32,100,105,114,101,99,116,115,101,114,105,97,108,46,10,65,100,100,105,116,105,111,110,97,108,32,112,97,114,97,109,101,116,101,114,115,32,109,117,115,116,32,98,101,32,105,110,32,116,104,101,32,115,97,109,101,32,108,105,110,101,32,105,110,32,116,104,101,32,102,111,114,109,32,111,102,10,112,97,114,97,109,101,116,101,114,58,118,97,108,117,101,46,32,80,97,114,97,109,101,116,101,114,32,102,111,114,32,97,108,108,32,116,121,112,101,115,32,105,115,32,105,114,113,32,40,111,112,116,105,111,110,97,108,41,46,10,102,111,114,32,100,105,114,101,99,116,115,101,114,105,97,108,58,32,114,101,97,108,112,111,114,116,32,40,114,101,113,117,105,114,101,100,41,44,32,114,120,100,101,108,97,121,32,40,111,112,116,105,111,110,97,108,41,46,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,114,101,97,108,112,111,114,116,58,67,79,77,49,32,114,101,97,108,112,111,114,116,58,116,116,121,83,48,41,46,10,102,111,114,32,109,111,100,101,109,58,32,108,105,115,116,101,110,112,111,114,116,32,40,111,112,116,105,111,110,97,108,41,46,10,102,111,114,32,110,117,108,108,109,111,100,101,109,58,32,115,101,114,118,101,114,44,32,114,120,100,101,108,97,121,44,32,116,120,100,101,108,97,121,44,32,116,101,108,110,101,116,44,32,117,115,101,100,116,114,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,114,97,110,115,112,97,114,101,110,116,44,32,112,111,114,116,44,32,105,110,104,115,111,99,107,101,116,32,40,97,108,108,32,111,112,116,105,111,110,97,108,41,46,10,69,120,97,109,112,108,101,58,32,115,101,114,105,97,108,49,61,109,111,100,101,109,32,108,105,115,116,101,110,112,111,114,116,58,53,48,48,48,0,0,0,49,49,0,0,0,0,0,0,69,71,65,49,48,46,67,80,73,0,0,0,0,0,0,0,74,111,121,115,116,105,99,107,32,49,0,0,0,0,0,0,115,101,114,105,97,108,49,0,82,71,84,0,0,0,0,0,100,105,114,101,99,116,115,101,114,105,97,108,0,0,0,0,68,87,78,0,0,0,0,0,110,117,108,108,109,111,100,101,109,0,0,0,0,0,0,0,86,69,83,65,0,0,0,0,68,114,105,118,101,32,37,99,32,105,115,32,109,111,117,110,116,101,100,32,97,115,32,37,115,10,0,0,0,0,0,0,76,70,84,0,0,0,0,0,109,111,100,101,109,0,0,0,97,117,116,111,115,105,122,101,100,32,105,109,97,103,101,32,102,105,108,101,58,32,37,100,58,37,100,58,37,100,58,37,100,0,0,0,0,0,0,0,85,80,0,0,0,0,0,0,100,105,115,97,98,108,101,100,0,0,0,0,0,0,0,0,108,111,99,97,108,32,100,105,114,101,99,116,111,114,121,0,86,69,82,0,0,0,0,0,88,43,0,0,0,0,0,0,100,117,109,109,121,0,0,0,110,111,110,101,0,0,0,0,84,89,80,69,0,0,0,0,88,45,0,0,0,0,0,0,115,101,114,105,97,108,0,0,77,79,68,69,77,58,32,84,101,108,110,101,116,32,99,108,105,101,110,116,32,115,101,110,116,32,73,65,67,32,37,100,0,0,0,0,0,0,0,0,77,111,100,101,109,58,32,85,110,104,97,110,100,108,101,100,32,99,111,109,109,97,110,100,58,32,37,99,37,100,0,0,54,53,48,44,49,50,55,44,49,54,53,49,51,44,49,55,48,48,0,0,0,0,0,0,65,76,76,0,0,0,0,0,47,73,78,73,84,0,0,0,37,115,37,115,58,0,0,0,83,85,66,83,84,0,0,0,45,115,101,116,0,0,0,0,89,43,0,0,0,0,0,0,101,110,97,98,108,101,32,98,117,116,116,111,110,32,119,114,97,112,112,105,110,103,32,97,116,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,101,109,117,108,97,116,101,100,32,98,117,116,116,111,110,115,46,0,0,0,0,0,0,0,86,67,80,73,58,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,76,68,84,32,119,105,116,104,32,37,120,0,115,117,112,101,114,50,120,115,97,105,0,0,0,0,0,0,105,115,111,0,0,0,0,0,106,98,117,116,116,111,110,95,49,95,48,32,34,115,116,105,99,107,95,49,32,98,117,116,116,111,110,32,48,34,32,0,115,117,114,102,97,99,101,0,84,111,32,103,101,116,32,104,101,108,112,32,111,110,32,97,32,115,112,101,99,105,102,105,99,32,99,111,109,109,97,110,100,44,32,116,121,112,101,58,10,10,0,0,0,0,0,0,88,71,65,58,32,87,114,111,116,101,32,116,111,32,112,111,114,116,32,37,120,32,119,105,116,104,32,37,120,44,32,108,101,110,32,37,120,0,0,0,83,72,73,70,84,0,0,0,89,45,0,0,0,0,0,0,74,77,80,32,73,108,108,101,103,97,108,32,100,101,115,99,114,105,112,116,111,114,32,116,121,112,101,32,37,88,0,0,98,117,116,116,111,110,119,114,97,112,0,0,0,0,0,0,45,102,115,0,0,0,0,0,73,110,116,32,49,48,32,118,105,100,101,111,0,0,0,0,83,69,84,0,0,0,0,0,46,0,0,0,0,0,0,0,115,119,97,112,32,116,104,101,32,51,114,100,32,97,110,100,32,116,104,101,32,52,116,104,32,97,120,105,115,46,32,99,97,110,32,98,101,32,117,115,101,102,117,108,32,102,111,114,32,99,101,114,116,97,105,110,32,106,111,121,115,116,105,99,107,115,46,0,0,0,0,0,49,48,0,0,0,0,0,0,51,50,48,48,48,0,0,0,102,97,116,0,0,0,0,0,69,71,65,57,46,67,80,73,0,0,0,0,0,0,0,0,82,69,78,0,0,0,0,0,69,78,84,0,0,0,0,0,115,119,97,112,51,52,0,0,104,100,100,0,0,0,0,0,82,69,78,65,77,69,0,0,42,0,0,0,0,0,0,0,99,111,110,116,105,110,117,111,117,115,108,121,32,102,105,114,101,115,32,97,115,32,108,111,110,103,32,97,115,32,121,111,117,32,107,101,101,112,32,116,104,101,32,98,117,116,116,111,110,32,112,114,101,115,115,101,100,46,0,0,0,0,0,0,126,47,100,111,115,112,114,111,103,115,0,0,0,0,0,0,82,69,77,0,0,0,0,0,47,0,0,0,0,0,0,0,84,83,83,32,110,111,116,32,98,117,115,121,32,102,111,114,32,73,82,69,84,0,0,0,95,70,76,79,80,80,89,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,83,84,65,84,85,83,95,50,0,0,82,68,0,0,0,0,0,0,78,85,77,0,0,0,0,0,101,110,97,98,108,101,32,116,105,109,101,100,32,105,110,116,101,114,118,97,108,115,32,102,111,114,32,97,120,105,115,46,32,69,120,112,101,114,105,109,101,110,116,32,119,105,116,104,32,116,104,105,115,32,111,112,116,105,111,110,44,32,105,102,32,121,111,117,114,32,106,111,121,115,116,105,99,107,32,100,114,105,102,116,115,32,40,97,119,97,121,41,46,0,0,0,95,68,82,73,86,69,0,0,82,77,68,73,82,0,0,0,26,0,0,0,0,0,0,0,116,105,109,101,100,0,0,0,45,108,97,98,101,108,0,0,80,65,85,83,69,0,0,0,25,0,0,0,0,0,0,0,84,121,112,101,32,111,102,32,106,111,121,115,116,105,99,107,32,116,111,32,101,109,117,108,97,116,101,58,32,97,117,116,111,32,40,100,101,102,97,117,108,116,41,44,32,110,111,110,101,44,10,50,97,120,105,115,32,40,115,117,112,112,111,114,116,115,32,116,119,111,32,106,111,121,115,116,105,99,107,115,41,44,10,52,97,120,105,115,32,40,115,117,112,112,111,114,116,115,32,111,110,101,32,106,111,121,115,116,105,99,107,44,32,102,105,114,115,116,32,106,111,121,115,116,105,99,107,32,117,115,101,100,41,44,10,52,97,120,105,115,95,50,32,40,115,117,112,112,111,114,116,115,32,111,110,101,32,106,111,121,115,116,105,99,107,44,32,115,101,99,111,110,100,32,106,111,121,115,116,105,99,107,32,117,115,101,100,41,44,10,102,99,115,32,40,84,104,114,117,115,116,109,97,115,116,101,114,41,44,32,99,104,32,40,67,72,32,70,108,105,103,104,116,115,116,105,99,107,41,46,10,110,111,110,101,32,100,105,115,97,98,108,101,115,32,106,111,121,115,116,105,99,107,32,101,109,117,108,97,116,105,111,110,46,10,97,117,116,111,32,99,104,111,111,115,101,115,32,101,109,117,108,97,116,105,111,110,32,100,101,112,101,110,100,105,110,103,32,111,110,32,114,101,97,108,32,106,111,121,115,116,105,99,107,40,115,41,46,10,40,82,101,109,101,109,98,101,114,32,116,111,32,114,101,115,101,116,32,100,111,115,98,111,120,39,115,32,109,97,112,112,101,114,102,105,108,101,32,105,102,32,121,111,117,32,115,97,118,101,100,32,105,116,32,101,97,114,108,105,101,114,41,0,0,68,79,83,58,67,97,110,39,116,32,99,114,101,97,116,101,32,100,114,105,118,101,0,0,37,115,46,107,108,0,0,0,77,68,0,0,0,0,0,0,27,0,0,0,0,0,0,0,106,111,121,115,116,105,99,107,116,121,112,101,0,0,0,0,83,101,114,105,97,108,37,100,58,32,85,110,114,101,99,111,103,110,105,122,101,100,32,116,101,108,110,101,116,32,111,112,116,105,111,110,32,37,100,0,77,111,100,101,109,58,32,85,110,104,97,110,100,108,101,100,32,99,111,109,109,97,110,100,58,32,92,37,99,37,100,0,47,0,0,0,0,0,0,0,72,69,76,80,10,0,0,0,83,72,69,76,76,95,83,84,65,82,84,85,80,95,69,78,68,0,0,0,0,0,0,0,35,32,37,42,115,58,32,37,115,0,0,0,0,0,0,0,77,75,68,73,82,0,0,0,67,79,78,70,73,71,0,0,24,0,0,0,0,0,0,0,99,104,0,0,0,0,0,0,50,120,115,97,105,0,0,0,77,83,67,68,69,88,95,69,82,82,79,82,95,80,65,84,72,0,0,0,0,0,0,0,106,98,117,116,116,111,110,95,48,95,53,32,34,115,116,105,99,107,95,48,32,98,117,116,116,111,110,32,53,34,32,0,83,99,97,108,101,32,116,104,101,32,119,105,110,100,111,119,32,116,111,32,116,104,105,115,32,115,105,122,101,32,73,70,32,116,104,101,32,111,117,116,112,117,116,32,100,101,118,105,99,101,32,115,117,112,112,111,114,116,115,32,104,97,114,100,119,97,114,101,32,115,99,97,108,105,110,103,46,10,32,32,40,111,117,116,112,117,116,61,115,117,114,102,97,99,101,32,100,111,101,115,32,110,111,116,33,41,0,0,0,0,0,0,73,80,88,78,69,84,32,83,84,79,80,83,69,82,86,69,82,32,32,32,32,32,73,80,88,78,69,84,32,80,73,78,71,32,32,32,32,32,32,32,32,32,32,32,32,32,73,80,88,78,69,84,32,83,84,65,84,85,83,10,10,0,0,0,117,110,105,109,112,108,101,109,101,110,116,101,100,32,88,71,65,32,77,77,73,79,0,0,76,72,0,0,0,0,0,0,80,68,78,0,0,0,0,0,73,82,69,84,58,79,117,116,101,114,32,108,101,118,101,108,58,83,116,97,99,107,32,115,101,103,109,101,110,116,32,110,111,116,32,119,114,105,116,97,98,108,101,0,0,0,0,0,83,116,111,112,112,101,100,32,99,97,112,116,117,114,105,110,103,32,119,97,118,101,32,111,117,116,112,117,116,46,0,0,102,99,115,0,0,0,0,0,45,110,111,105,111,99,116,108,0,0,0,0,0,0,0,0,114,98,43,0,0,0,0,0,76,79,65,68,72,73,71,72,0,0,0,0,0,0,0,0,69,78,68,0,0,0,0,0,52,97,120,105,115,95,50,0,57,0,0,0,0,0,0,0,45,105,111,99,116,108,95,100,120,0,0,0,0,0,0,0,69,71,65,56,46,67,80,73,0,0,0,0,0,0,0,0,73,70,0,0,0,0,0,0,68,69,76,0,0,0,0,0,52,97,120,105,115,0,0,0,45,105,111,99,116,108,95,100,105,111,0,0,0,0,0,0,78,111,114,109,97,108,0,0,72,69,76,80,0,0,0,0,80,85,80,0,0,0,0,0,50,97,120,105,115,0,0,0,45,97,115,112,105,0,0,0,71,79,84,79,0,0,0,0,73,77,71,77,79,85,78,84,32,68,32,34,0,0,0,0,72,79,77,0,0,0,0,0,106,111,121,115,116,105,99,107,0,0,0,0,0,0,0,0,45,117,115,101,99,100,0,0,67,68,82,79,77,115,32,102,111,117,110,100,58,32,37,100,10,0,0,0,0,0,0,0,119,98,43,0,0,0,0,0,69,88,73,84,0,0,0,0,46,67,85,69,0,0,0,0,73,78,83,0,0,0,0,0,68,79,83,66,79,88,0,0,69,110,97,98,108,101,32,68,105,115,110,101,121,32,83,111,117,110,100,32,83,111,117,114,99,101,32,101,109,117,108,97,116,105,111,110,46,32,40,67,111,118,111,120,32,86,111,105,99,101,32,77,97,115,116,101,114,32,97,110,100,32,83,112,101,101,99,104,32,84,104,105,110,103,32,99,111,109,112,97,116,105,98,108,101,41,46,0,45,115,105,122,101,0,0,0,69,67,72,79,0,0,0,0,46,73,83,79,0,0,0,0,80,65,85,0,0,0,0,0,100,105,115,110,101,121,0,0,53,49,50,44,49,50,55,44,49,54,53,49,51,44,37,100,0,0,0,0,0,0,0,0,69,82,65,83,69,0,0,0,66,79,79,84,32,0,0,0,83,67,76,0,0,0,0,0,68,79,83,32,67,97,115,101,77,97,112,0,0,0,0,0,83,97,109,112,108,101,32,114,97,116,101,32,111,102,32,116,104,101,32,84,97,110,100,121,32,51,45,86,111,105,99,101,32,103,101,110,101,114,97,116,105,111,110,46,0,0,0,0,53,49,50,44,49,44,50,56,56,48,44,37,100,0,0,0,68,69,76,69,84,69,0,0,46,73,77,65,0,0,0,0,80,82,84,0,0,0,0,0,97,115,112,101,99,116,0,0,116,97,110,100,121,114,97,116,101,0,0,0,0,0,0,0,83,101,114,105,97,108,37,100,58,32,65,32,99,108,105,101,110,116,32,40,37,115,41,32,104,97,115,32,99,111,110,110,101,99,116,101,100,46,0,0,77,111,100,101,109,58,32,85,110,104,97,110,100,108,101,100,32,99,111,109,109,97,110,100,58,32,38,37,99,37,100,0,80,65,84,72,0,0,0,0,45,102,114,101,101,115,105,122,101,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,72,69,76,80,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,83,72,69,76,76,95,83,84,65,82,84,85,80,95,72,69,82,67,0,0,0,0,0,0,10,35,32,37,42,115,32,32,0,0,0,0,0,0,0,0,68,69,76,0,0,0,0,0,37,115,0,0,0,0,0,0,46,73,77,71,0,0,0,0,83,80,65,67,69,0,0,0,69,110,97,98,108,101,32,84,97,110,100,121,32,83,111,117,110,100,32,83,121,115,116,101,109,32,101,109,117,108,97,116,105,111,110,46,32,70,111,114,32,39,97,117,116,111,39,44,32,101,109,117,108,97,116,105,111,110,32,105,115,32,112,114,101,115,101,110,116,32,111,110,108,121,32,105,102,32,109,97,99,104,105,110,101,32,105,115,32,115,101,116,32,116,111,32,39,116,97,110,100,121,39,46,0,0,0,0,0,0,0,0,104,113,51,120,0,0,0,0,80,82,79,71,65,77,95,77,79,85,78,84,95,73,76,76,95,84,89,80,69,0,0,0,106,98,117,116,116,111,110,95,48,95,52,32,34,115,116,105,99,107,95,48,32,98,117,116,116,111,110,32,52,34,32,0,119,105,110,100,111,119,114,101,115,111,108,117,116,105,111,110,0,0,0,0,0,0,0,0,73,80,88,78,69,84,32,67,79,78,78,69,67,84,32,32,32,32,32,32,32,32,73,80,88,78,69,84,32,68,73,83,67,79,78,78,69,67,84,32,32,32,32,32,32,32,73,80,88,78,69,84,32,83,84,65,82,84,83,69,82,86,69,82,10,0,0,0,0,0,0,0,67,79,76,79,82,95,67,77,80,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,0,0,0,67,79,80,89,0,0,0,0,65,76,84,0,0,0,0,0,73,82,69,84,58,73,108,108,101,103,97,108,32,100,101,115,99,114,105,112,116,111,114,32,116,121,112,101,32,37,88,0,83,116,111,112,112,101,100,32,99,97,112,116,117,114,105,110,103,32,114,97,119,32,109,105,100,105,32,98,101,102,111,114,101,32,97,110,121,32,100,97,116,97,32,97,114,114,105,118,101,100,46,0,0,0,0,0,111,102,102,0,0,0,0,0,50,48,52,56,44,49,44,54,53,53,51,53,44,48,0,0,67,76,83,0,0,0,0,0,67,65,76,76,32,0,0,0,67,84,82,76,0,0,0,0,111,110,0,0,0,0,0,0,51,0,0,0,0,0,0,0,53,49,50,44,49,50,55,44,49,54,51,56,51,44,52,48,51,49,0,0,0,0,0,0,69,71,65,55,46,67,80,73,0,0,0,0,0,0,0,0,67,72,79,73,67,69,0,0,46,66,65,84,0,0,0,0,83,72,73,70,84,0,0,0,83,97,109,112,108,101,32,114,97,116,101,32,111,102,32,116,104,101,32,80,67,45,83,112,101,97,107,101,114,32,115,111,117,110,100,32,103,101,110,101,114,97,116,105,111,110,46,0,53,49,50,44,49,44,50,56,56,48,44,50,56,56,48,0,67,68,0,0,0,0,0,0,67,76,67,75,0,0,0,0,112,99,114,97,116,101,0,0,102,108,111,112,112,121,0,0,67,65,76,76,0,0,0,0,34,0,0,0,0,0,0,0,69,78,84,69,82,0,0,0,69,110,97,98,108,101,32,80,67,45,83,112,101,97,107,101,114,32,101,109,117,108,97,116,105,111,110,46,0,0,0,0,45,116,0,0,0,0,0,0,80,82,79,71,82,65,77,95,77,79,85,78,84,95,67,68,82,79,77,83,95,70,79,85,78,68,0,0,0,0,0,0,65,84,84,82,73,66,0,0,77,79,85,78,84,32,67,32,34,0,0,0,0,0,0,0,84,65,66,0,0,0,0,0,112,99,115,112,101,97,107,101,114,0,0,0,0,0,0,0,100,105,114,0,0,0,0,0,67,72,68,73,82,0,0,0,122,58,92,99,111,110,102,105,103,46,99,111,109,32,45,115,101,99,117,114,101,109,111,100,101,0,0,0,0,0,0,0,69,83,67,0,0,0,0,0,115,112,101,97,107,101,114,0,45,99,100,0,0,0,0,0,68,73,82,0,0,0,0,0,45,101,120,105,116,0,0,0,107,101,121,32,37,100,0,0,80,97,116,104,32,116,111,32,85,108,116,114,97,115,111,117,110,100,32,100,105,114,101,99,116,111,114,121,46,32,73,110,32,116,104,105,115,32,100,105,114,101,99,116,111,114,121,10,116,104,101,114,101,32,115,104,111,117,108,100,32,98,101,32,97,32,77,73,68,73,32,100,105,114,101,99,116,111,114,121,32,116,104,97,116,32,99,111,110,116,97,105,110,115,10,116,104,101,32,112,97,116,99,104,32,102,105,108,101,115,32,102,111,114,32,71,85,83,32,112,108,97,121,98,97,99,107,46,32,80,97,116,99,104,32,115,101,116,115,32,117,115,101,100,10,119,105,116,104,32,84,105,109,105,100,105,116,121,32,115,104,111,117,108,100,32,119,111,114,107,32,102,105,110,101,46,0,0,0,0,0,0,0,0,45,117,0,0,0,0,0,0,110,97,110,0,0,0,0,0,37,100,0,0,0,0,0,0,45,99,0,0,0,0,0,0,75,101,121,32,37,115,0,0,67,58,92,85,76,84,82,65,83,78,68,0,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,110,117,108,108,109,111,100,101,109,0,0,0,0,0,77,111,100,101,109,32,99,111,109,112,105,108,101,100,32,102,111,114,32,68,111,115,66,111,120,32,118,101,114,115,105,111,110,32,48,46,55,52,0,0,67,0,0,0,0,0,0,0,46,98,97,116,0,0,0,0,10,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,72,69,76,80,95,72,69,76,80,0,0,0,0,0,83,72,69,76,76,95,83,84,65,82,84,85,80,95,67,71,65,0,0,0,0,0,0,0,91,37,115,93,10,0,0,0,37,100,44,37,48,51,100,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,78,79,95,80,82,79,80,69,82,84,89,0,0,0,0,0,0,64,101,99,104,111,32,111,102,102,0,0,0,0,0,0,0,40,66,105,116,117,41,95,107,101,121,60,107,101,121,115,0,10,10,32,32,32,82,101,98,111,111,116,32,114,101,113,117,101,115,116,101,100,44,32,113,117,105,116,116,105,110,103,32,110,111,119,46,0,0,0,0,78,111,32,98,121,116,101,32,104,97,110,100,108,101,114,32,102,111,114,32,114,101,97,100,32,102,114,111,109,32,37,100,0,0,0,0,0,0,0,0,65,100,118,73,110,116,101,114,112,51,120,0,0,0,0,0,104,113,50,120,0,0,0,0,115,112,101,99,105,97,108,0,106,98,117,116,116,111,110,95,48,95,51,32,34,115,116,105,99,107,95,48,32,98,117,116,116,111,110,32,51,34,32,0,87,104,97,116,32,114,101,115,111,108,117,116,105,111,110,32,116,111,32,117,115,101,32,102,111,114,32,102,117,108,108,115,99,114,101,101,110,58,32,111,114,105,103,105,110,97,108,32,111,114,32,102,105,120,101,100,32,115,105,122,101,32,40,101,46,103,46,32,49,48,50,52,120,55,54,56,41,46,10,32,32,85,115,105,110,103,32,121,111,117,114,32,109,111,110,105,116,111,114,39,115,32,110,97,116,105,118,101,32,114,101,115,111,108,117,116,105,111,110,32,119,105,116,104,32,97,115,112,101,99,116,61,116,114,117,101,32,109,105,103,104,116,32,103,105,118,101,32,116,104,101,32,98,101,115,116,32,114,101,115,117,108,116,115,46,10,32,32,73,102,32,121,111,117,32,101,110,100,32,117,112,32,119,105,116,104,32,115,109,97,108,108,32,119,105,110,100,111,119,32,111,110,32,97,32,108,97,114,103,101,32,115,99,114,101,101,110,44,32,116,114,121,32,97,110,32,111,117,116,112,117,116,32,100,105,102,102,101,114,101,110,116,32,102,114,111,109,32,115,117,114,102,97,99,101,46,0,0,0,0,0,0,0,0,84,104,101,32,102,111,108,108,111,119,105,110,103,32,97,114,101,32,118,97,108,105,100,32,73,80,88,78,69,84,32,99,111,109,109,97,110,100,115,58,10,10,0,0,0,0,0,0,88,71,65,58,32,87,97,110,116,115,32,108,105,110,101,32,100,114,97,119,110,32,102,114,111,109,32,80,73,88,95,84,82,65,78,83,32,114,101,103,105,115,116,101,114,33,0,0,37,100,44,37,48,51,100,44,37,48,51,100,0,0,0,0,101,99,104,111,32,111,102,102,0,0,0,0,0,0,0,0,114,111,116,97,116,101,32,111,110,32,97,117,116,111,32,69,79,73,32,110,111,116,32,104,97,110,100,108,101,100,0,0,115,100,108,95,109,97,112,112,101,114,46,99,112,112,0,0,86,77,32,70,108,97,103,32,105,110,32,49,54,45,98,105,116,32,105,114,101,116,0,0,80,114,101,112,97,114,105,110,103,32,102,111,114,32,114,97,119,32,109,105,100,105,32,99,97,112,116,117,114,101,44,32,119,105,108,108,32,115,116,97,114,116,32,119,105,116,104,32,102,105,114,115,116,32,100,97,116,97,46,0,0,0,0,0,84,104,101,32,68,77,65,32,99,104,97,110,110,101,108,32,111,102,32,116,104,101,32,71,114,97,118,105,115,32,85,108,116,114,97,115,111,117,110,100,46,0,0,0,0,0,0,0,27,91,50,74,0,0,0,0,37,100,44,37,48,51,100,44,37,48,51,100,44,37,48,51,100,0,0,0,0,0,0,0,45,110,111,97,117,116,111,101,120,101,99,0,0,0,0,0,66,105,116,117,40,101,118,101,110,116,45,62,107,101,121,46,107,101,121,115,121,109,46,115,121,109,41,60,107,101,121,115,0,0,0,0,0,0,0,0,103,117,115,100,109,97,0,0,53,0,0,0,0,0,0,0,109,111,117,110,116,0,0,0,69,71,65,54,46,67,80,73,0,0,0,0,0,0,0,0,45,115,101,99,117,114,101,109,111,100,101,0,0,0,0,0,75,101,121,0,0,0,0,0,84,104,101,32,73,82,81,32,110,117,109,98,101,114,32,111,102,32,116,104,101,32,71,114,97,118,105,115,32,85,108,116,114,97,115,111,117,110,100,46,0,0,0,0,0,0,0,0,99,100,114,111,109,0,0,0,80,65,84,72,61,90,58,92,0,0,0,0,0,0,0,0,107,101,121,0,0,0,0,0,103,117,115,105,114,113,0,0,67,79,77,83,80,69,67,61,90,58,92,67,79,77,77,65,78,68,46,67,79,77,0,0,84,104,101,32,73,79,32,98,97,115,101,32,97,100,100,114,101,115,115,32,111,102,32,116,104,101,32,71,114,97,118,105,115,32,85,108,116,114,97,115,111,117,110,100,46,0,0,0,114,98,0,0,0,0,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,73,78,70,79,95,76,65,89,79,85,84,0,0,0,0,0,0,0,0,48,46,55,52,0,0,0,0,90,58,92,67,79,77,77,65,78,68,46,67,79,77,0,0,85,115,105,110,103,32,106,111,121,115,116,105,99,107,32,37,115,32,119,105,116,104,32,37,100,32,97,120,101,115,44,32,37,100,32,98,117,116,116,111,110,115,32,97,110,100,32,37,100,32,104,97,116,40,115,41,0,0,0,0,0,0,0,0,103,117,115,98,97,115,101,0,114,98,43,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,86,69,82,95,86,69,82,0,0,0,0,0,0,0,47,73,78,73,84,32,65,85,84,79,69,88,69,67,46,66,65,84,0,0,0,0,0,0,115,116,105,99,107,95,37,100,0,0,0,0,0,0,0,0,83,97,109,112,108,101,32,114,97,116,101,32,111,102,32,85,108,116,114,97,115,111,117,110,100,32,101,109,117,108,97,116,105,111,110,46,0,0,0,0,101,109,115,61,102,97,108,115,101,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,115,101,116,0,0,0,0,0,104,97,116,0,0,0,0,0,103,117,115,114,97,116,101,0,120,109,115,61,102,97,108,115,101,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,76,79,65,68,70,73,88,95,65,76,76,79,67,0,0,0,86,69,82,10,0,0,0,0,67,79,78,0,0,0,0,0,98,117,116,116,111,110,0,0,69,110,97,98,108,101,32,116,104,101,32,71,114,97,118,105,115,32,85,108,116,114,97,115,111,117,110,100,32,101,109,117,108,97,116,105,111,110,46,0,83,101,114,105,97,108,37,100,58,32,68,105,115,99,111,110,110,101,99,116,101,100,46,0,68,111,115,66,111,120,32,69,109,117,108,97,116,101,100,32,77,111,100,101,109,32,70,105,114,109,119,97,114,101,32,86,49,46,48,48,0,0,0,0,46,101,120,101,0,0,0,0,118,101,99,116,111,114,0,0,117,109,98,61,102,97,108,115,101,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,69,76,95,69,82,82,79,82,0,0,0,0,0,48,46,55,52,0,0,0,0,48,46,55,52,0,0,0,0,83,72,69,76,76,95,67,77,68,95,86,69,82,95,72,69,76,80,95,76,79,78,71,0,80,82,79,80,95,78,79,84,95,69,88,73,83,84,0,0,67,79,77,77,65,78,68,46,67,79,77,0,0,0,0,0,97,120,105,115,0,0,0,0,84,97,110,100,121,32,68,65,67,32,101,110,100,32,116,114,97,110,115,102,101,114,0,0,103,117,115,0,0,0,0,0,65,100,118,73,110,116,101,114,112,50,120,0,0,0,0,0,97,100,118,105,110,116,101,114,112,51,120,0,0,0,0,0,100,111,115,0,0,0,0,0,106,98,117,116,116,111,110,95,48,95,50,32,34,115,116,105,99,107,95,48,32,98,117,116,116,111,110,32,50,34,32,0,111,114,105,103,105,110,97,108,0,0,0,0,0,0,0,0,104,101,108,112,0,0,0,0,88,71,65,58,32,68,114,97,119,80,97,116,116,101,114,110,58,32,85,110,107,110,111,119,110,32,109,105,120,32,115,101,108,101,99,116,32,114,101,103,105,115,116,101,114,0,0,0,83,72,69,76,76,95,67,77,68,95,86,69,82,95,72,69,76,80,0,0,0,0,0,0,115,104,101,108,108,32,115,116,111,112,0,0,0,0,0,0,37,115,32,97,120,105,115,32,37,100,32,37,100,0,0,0,37,45,56,115,32,37,51,46,48,102,58,37,45,51,46,48,102,32,32,37,43,51,46,50,102,58,37,45,43,51,46,50,102,32,10,0,0,0,0,0,73,82,69,84,32,102,114,111,109,32,112,109,111,100,101,32,116,111,32,118,56,54,32,119,105,116,104,32,67,80,76,33,61,48,0,0,0,0,0,0,83,116,111,112,112,105,110,103,32,114,97,119,32,109,105,100,105,32,115,97,118,105,110,103,32,97,110,100,32,102,105,110,97,108,105,122,105,110,103,32,102,105,108,101,46,0,0,0,83,97,109,112,108,101,32,114,97,116,101,32,111,102,32,79,80,76,32,109,117,115,105,99,32,101,109,117,108,97,116,105,111,110,46,32,85,115,101,32,52,57,55,49,54,32,102,111,114,32,104,105,103,104,101,115,116,32,113,117,97,108,105,116,121,32,40,115,101,116,32,116,104,101,32,109,105,120,101,114,32,114,97,116,101,32,97,99,99,111,114,100,105,110,103,108,121,41,46,0,0,0,0,0,115,121,115,116,101,109,46,114,111,109,0,0,0,0,0,0,80,65,84,72,61,40,110,117,108,108,41,0,0,0,0,0,68,79,83,66,111,120,32,118,101,114,115,105,111,110,32,37,115,46,32,82,101,112,111,114,116,101,100,32,68,79,83,32,118,101,114,115,105,111,110,32,37,100,46,37,48,50,100,46,10,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,111,112,108,114,97,116,101,0,55,0,0,0,0,0,0,0,45,69,0,0,0,0,0,0,69,71,65,53,46,67,80,73,0,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,86,69,82,95,86,69,82,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,80,114,111,118,105,100,101,114,32,102,111,114,32,116,104,101,32,79,80,76,32,101,109,117,108,97,116,105,111,110,46,32,99,111,109,112,97,116,32,109,105,103,104,116,32,112,114,111,118,105,100,101,32,98,101,116,116,101,114,32,113,117,97,108,105,116,121,32,40,115,101,101,32,111,112,108,114,97,116,101,32,97,115,32,119,101,108,108,41,46,0,0,0,0,0,0,45,101,0,0,0,0,0,0,80,65,84,72,0,0,0,0,86,105,101,119,32,97,110,100,32,115,101,116,32,116,104,101,32,114,101,112,111,114,116,101,100,32,68,79,83,32,118,101,114,115,105,111,110,46,10,0,37,115,32,65,120,105,115,32,37,100,37,115,0,0,0,0,111,112,108,101,109,117,0,0,45,76,0,0,0,0,0,0,104,97,110,100,95,0,0,0,115,101,116,32,80,65,84,72,61,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,86,69,82,95,72,69,76,80,0,0,0,0,0,0,37,115,32,98,117,116,116,111,110,32,37,100,0,0,0,0,102,97,115,116,0,0,0,0,45,108,0,0,0,0,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,73,78,70,79,0,0,0,0,0,0,0,80,65,84,72,10,0,0,0,80,114,111,118,105,100,101,100,32,102,111,114,32,99,111,109,112,97,116,105,98,105,108,105,116,121,46,10,0,0,0,0,37,115,32,66,117,116,116,111,110,32,37,100,0,0,0,0,99,111,109,112,97,116,0,0,83,72,69,76,76,95,67,77,68,95,80,65,84,72,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,80,65,84,72,95,72,69,76,80,0,0,0,0,0,37,115,32,104,97,116,32,37,100,32,37,100,0,0,0,0,84,121,112,101,32,111,102,32,79,80,76,32,101,109,117,108,97,116,105,111,110,46,32,79,110,32,39,97,117,116,111,39,32,116,104,101,32,109,111,100,101,32,105,115,32,100,101,116,101,114,109,105,110,101,100,32,98,121,32,115,98,108,97,115,116,101,114,32,116,121,112,101,46,32,65,108,108,32,79,80,76,32,109,111,100,101,115,32,97,114,101,32,65,100,108,105,98,45,99,111,109,112,97,116,105,98,108,101,44,32,101,120,99,101,112,116,32,102,111,114,32,39,99,109,115,39,46,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,83,69,67,85,82,69,95,68,73,83,65,76,76,79,87,0,0,68,79,83,32,73,110,116,32,50,97,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,80,65,84,72,95,72,69,76,80,0,0,0,0,0,68,111,101,115,32,110,111,116,104,105,110,103,46,32,80,114,111,118,105,100,101,100,32,102,111,114,32,99,111,109,112,97,116,105,98,105,108,105,116,121,46,10,0,0,0,0,0,0,37,115,32,72,97,116,32,37,100,32,37,115,0,0,0,0,111,112,108,109,111,100,101,0,75,69,89,66,46,67,79,77,0,0,0,0,0,0,0,0,65,84,84,82,73,66,10,0,83,72,69,76,76,95,67,77,68,95,65,84,84,82,73,66,95,72,69,76,80,0,0,0,77,65,80,80,69,82,58,74,79,89,83,84,73,67,75,58,73,110,118,97,108,105,100,32,104,97,116,32,112,111,115,105,116,105,111,110,0,0,0,0,111,112,108,51,0,0,0,0,83,101,114,105,97,108,37,100,58,32,78,117,108,108,109,111,100,101,109,32,115,101,114,118,101,114,32,119,97,105,116,105,110,103,32,102,111,114,32,99,111,110,110,101,99,116,105,111,110,32,111,110,32,112,111,114,116,32,37,100,46,46,46,0,78,69,84,49,0,0,0,0,67,79,77,52,0,0,0,0,46,99,111,109,0,0,0,0,37,46,48,76,102,0,0,0,73,77,71,77,79,85,78,84,46,67,79,77,0,0,0,0,83,72,69,76,76,95,73,76,76,69,71,65,76,95,80,65,84,72,0,0,0,0,0,0,83,72,69,76,76,95,83,84,65,82,84,85,80,95,66,69,71,73,78,0,0,0,0,0,67,79,78,70,73,71,70,73,76,69,95,73,78,84,82,79,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,65,84,84,82,73,66,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,83,69,67,84,73,79,78,95,69,82,82,79,82,0,0,0,0,67,72,79,73,67,69,32,91,47,67,58,99,104,111,105,99,101,115,93,32,91,47,78,93,32,91,47,83,93,32,116,101,120,116,10,32,32,47,67,91,58,93,99,104,111,105,99,101,115,32,32,45,32,32,83,112,101,99,105,102,105,101,115,32,97,108,108,111,119,97,98,108,101,32,107,101,121,115,46,32,32,68,101,102,97,117,108,116,32,105,115,58,32,121,110,46,10,32,32,47,78,32,32,45,32,32,68,111,32,110,111,116,32,100,105,115,112,108,97,121,32,116,104,101,32,99,104,111,105,99,101,115,32,97,116,32,101,110,100,32,111,102,32,112,114,111,109,112,116,46,10,32,32,47,83,32,32,45,32,32,69,110,97,98,108,101,115,32,99,97,115,101,45,115,101,110,115,105,116,105,118,101,32,99,104,111,105,99,101,115,32,116,111,32,98,101,32,115,101,108,101,99,116,101,100,46,10,32,32,116,101,120,116,32,32,45,32,32,84,104,101,32,116,101,120,116,32,116,111,32,100,105,115,112,108,97,121,32,97,115,32,97,32,112,114,111,109,112,116,46,10,0,0,0,0,0,91,109,105,115,115,105,110,103,32,106,111,121,115,116,105,99,107,93,0,0,0,0,0,0,84,97,110,100,121,32,68,65,67,32,73,82,81,0,0,0,100,117,97,108,111,112,108,50,0,0,0,0,0,0,0,0,69,77,83,58,83,121,115,116,101,109,32,104,97,110,100,108,101,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,117,114,101,0,0,0,0,0,83,117,112,101,114,69,97,103,108,101,0,0,0,0,0,0,97,100,118,105,110,116,101,114,112,50,120], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+153608);
  /* memory initializer */ allocate([66,79,79,84,46,67,79,77,0,0,0,0,0,0,0,0,106,98,117,116,116,111,110,95,48,95,49,32,34,115,116,105,99,107,95,48,32,98,117,116,116,111,110,32,49,34,32,0,102,117,108,108,114,101,115,111,108,117,116,105,111,110,0,0,73,80,88,78,69,84,32,91,32,67,79,78,78,69,67,84,32,124,32,68,73,83,67,79,78,78,69,67,84,32,124,32,83,84,65,82,84,83,69,82,86,69,82,32,124,32,83,84,79,80,83,69,82,86,69,82,32,124,32,80,73,78,71,32,124,32,72,69,76,80,32,124,10,32,32,32,32,32,32,32,32,32,83,84,65,84,85,83,32,93,10,10,0,0,0,0,88,71,65,58,32,68,114,97,119,80,97,116,116,101,114,110,58,32,83,104,111,117,108,100,110,39,116,32,98,101,32,97,98,108,101,32,116,111,32,103,101,116,32,104,101,114,101,33,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,65,84,84,82,73,66,95,72,69,76,80,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,79,73,67,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,114,111,116,97,116,101,32,109,111,100,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,77,65,80,80,69,82,58,32,76,111,97,100,105,110,103,32,109,97,112,112,101,114,32,115,101,116,116,105,110,103,115,32,102,114,111,109,32,37,115,0,67,104,97,110,110,101,108,32,32,77,97,105,110,32,32,32,32,77,97,105,110,40,100,66,41,10,0,0,0,0,0,0,67,97,112,32,77,73,68,73,0,0,0,0,0,0,0,0,111,112,108,50,0,0,0,0,73,78,84,82,79,46,67,79,77,0,0,0,0,0,0,0,37,99,93,63,0,0,0,0,87,97,105,116,115,32,102,111,114,32,97,32,107,101,121,112,114,101,115,115,32,97,110,100,32,115,101,116,115,32,69,82,82,79,82,76,69,86,69,76,46,10,0,0,0,0,0,0,114,116,0,0,0,0,0,0,99,109,115,0,0,0,0,0,51,48,48,0,0,0,0,0,82,69,83,67,65,78,46,67,79,77,0,0,0,0,0,0,69,71,65,52,46,67,80,73,0,0,0,0,0,0,0,0,37,99,44,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,79,73,67,69,95,72,69,76,80,0,0,0,108,101,115,115,116,104,97,110,0,0,0,0,0,0,0,0,46,46,32,32,32,32,32,32,32,32,32,0,0,0,0,0,65,108,108,111,119,32,116,104,101,32,115,111,117,110,100,98,108,97,115,116,101,114,32,109,105,120,101,114,32,116,111,32,109,111,100,105,102,121,32,116,104,101,32,68,79,83,66,111,120,32,109,105,120,101,114,46,0,0,0,0,0,0,0,0,76,79,65,68,70,73,88,46,67,79,77,0,0,0,0,0,68,79,83,66,111,120,32,37,115,44,32,67,112,117,32,115,112,101,101,100,58,32,109,97,120,32,37,51,100,37,37,32,99,121,99,108,101,115,44,32,70,114,97,109,101,115,107,105,112,32,37,50,100,44,32,80,114,111,103,114,97,109,58,32,37,56,115,0,0,0,0,0,91,0,0,0,0,0,0,0,76,111,97,100,115,32,97,32,112,114,111,103,114,97,109,32,105,110,116,111,32,117,112,112,101,114,32,109,101,109,111,114,121,32,40,114,101,113,117,105,114,101,115,32,120,109,115,61,116,114,117,101,44,117,109,98,61,116,114,117,101,41,46,10,0,0,0,0,0,0,0,0,107,112,95,101,110,116,101,114,0,0,0,0,0,0,0,0,115,98,109,105,120,101,114,0,77,69,77,46,67,79,77,0,78,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,76,79,65,68,72,73,71,72,95,72,69,76,80,0,107,112,95,112,101,114,105,111,100,0,0,0,0,0,0,0,84,104,101,32,72,105,103,104,32,68,77,65,32,110,117,109,98,101,114,32,111,102,32,116,104,101,32,115,111,117,110,100,98,108,97,115,116,101,114,46,0,0,0,0,0,0,0,0,77,79,85,78,84,46,67,79,77,0,0,0,0,0,0,0,111,112,108,114,97,116,101,0,67,72,79,73,67,69,10,0,65,115,115,105,103,110,32,97,110,32,105,110,116,101,114,110,97,108,32,100,105,114,101,99,116,111,114,121,32,116,111,32,97,32,100,114,105,118,101,46,10,0,0,0,0,0,0,0,107,112,95,112,108,117,115,0,105,110,116,55,52,32,99,97,108,108,98,97,99,107,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,32,99,97,108,108,98,97,99,107,32,104,97,110,100,108,101,114,33,0,0,0,0,0,0,0,78,111,110,101,32,111,114,32,105,110,118,97,108,105,100,32,99,111,100,101,112,97,103,101,32,102,105,108,101,32,102,111,114,32,108,97,121,111,117,116,32,37,115,10,10,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,79,73,67,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,72,69,76,80,0,0,0,0,107,112,95,109,105,110,117,115,0,0,0,0,0,0,0,0,84,104,101,32,68,77,65,32,110,117,109,98,101,114,32,111,102,32,116,104,101,32,115,111,117,110,100,98,108,97,115,116,101,114,46,0,0,0,0,0,78,111,32,108,97,121,111,117,116,32,105,110,32,37,115,32,102,111,114,32,99,111,100,101,112,97,103,101,32,37,105,10,0,0,0,0,0,0,0,0,115,98,98,97,115,101,0,0,46,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,72,79,73,67,69,95,72,69,76,80,0,0,0,83,116,97,114,116,32,97,32,98,97,116,99,104,32,102,105,108,101,32,102,114,111,109,32,119,105,116,104,105,110,32,97,110,111,116,104,101,114,32,98,97,116,99,104,32,102,105,108,101,46,10,0,0,0,0,0,107,112,95,109,117,108,116,105,112,108,121,0,0,0,0,0,100,109,97,0,0,0,0,0,75,101,121,98,111,97,114,100,32,102,105,108,101,32,37,115,32,105,110,118,97,108,105,100,10,0,0,0,0,0,0,0,73,80,88,83,69,82,86,69,82,58,32,67,111,110,110,101,99,116,32,102,114,111,109,32,37,100,46,37,100,46,37,100,46,37,100,0,0,0,0,0,76,79,65,68,72,73,71,72,10,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,65,76,76,95,72,69,76,80,0,0,0,0,0,107,112,95,100,105,118,105,100,101,0,0,0,0,0,0,0,84,104,101,32,73,82,81,32,110,117,109,98,101,114,32,111,102,32,116,104,101,32,115,111,117,110,100,98,108,97,115,116,101,114,46,0,0,0,0,0,83,101,114,105,97,108,37,100,58,32,87,97,105,116,105,110,103,32,102,111,114,32,68,84,82,46,46,46,0,0,0,0,78,69,84,48,0,0,0,0,67,79,77,51,0,0,0,0,83,72,69,76,76,95,69,88,69,67,85,84,69,95,68,82,73,86,69,95,78,79,84,95,70,79,85,78,68,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,75,101,121,98,111,97,114,100,32,102,105,108,101,32,37,115,32,110,111,116,32,102,111,117,110,100,10,10,0,0,0,0,83,72,69,76,76,95,73,76,76,69,71,65,76,95,83,87,73,84,67,72,0,0,0,0,13,10,0,0,0,0,0,0,119,43,116,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,76,79,65,68,72,73,71,72,95,72,69,76,80,95,76,79,78,71,0,0,0,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,71,69,84,95,83,89,78,84,65,88,0,0,0,0,0,0,0,67,111,112,121,32,102,105,108,101,115,46,10,0,0,0,0,110,117,109,108,111,99,107,0,105,114,113,0,0,0,0,0,50,120,83,97,73,0,0,0,97,100,118,109,97,109,101,51,120,0,0,0,0,0,0,0,75,101,121,98,111,97,114,100,32,108,97,121,111,117,116,32,37,115,32,108,111,97,100,101,100,32,102,111,114,32,99,111,100,101,112,97,103,101,32,37,105,10,0,0,0,0,0,0,106,98,117,116,116,111,110,95,48,95,48,32,34,115,116,105,99,107,95,48,32,98,117,116,116,111,110,32,48,34,32,0,85,115,101,32,100,111,117,98,108,101,32,98,117,102,102,101,114,105,110,103,32,105,110,32,102,117,108,108,115,99,114,101,101,110,46,32,73,116,32,99,97,110,32,114,101,100,117,99,101,32,115,99,114,101,101,110,32,102,108,105,99,107,101,114,105,110,103,44,32,98,117,116,32,105,116,32,99,97,110,32,97,108,115,111,32,114,101,115,117,108,116,32,105,110,32,97,32,115,108,111,119,32,68,79,83,66,111,120,46,0,0,0,84,104,101,32,115,121,110,116,97,120,32,111,102,32,116,104,105,115,32,99,111,109,109,97,110,100,32,105,115,58,10,10,0,0,0,0,0,0,0,0,88,71,65,58,32,68,114,97,119,80,97,116,116,101,114,110,58,32,87,97,110,116,115,32,100,97,116,97,32,102,114,111,109,32,80,73,88,95,84,82,65,78,83,32,114,101,103,105,115,116,101,114,0,0,0,0,83,72,69,76,76,95,67,77,68,95,76,79,65,68,72,73,71,72,95,72,69,76,80,0,83,72,69,76,76,95,67,77,68,95,67,79,80,89,95,72,69,76,80,0,0,0,0,0,85,110,104,97,110,100,108,101,100,32,100,109,97,32,109,111,100,101,32,37,100,0,0,0,107,112,95,57,0,0,0,0,47,78,79,83,72,79,87,0,73,108,108,101,103,97,108,32,100,101,115,99,114,105,112,116,111,114,32,116,121,112,101,32,37,88,32,102,111,114,32,105,110,116,32,37,88,0,0,0,99,97,112,114,97,119,109,105,100,105,0,0,0,0,0,0,84,104,101,32,73,79,32,97,100,100,114,101,115,115,32,111,102,32,116,104,101,32,115,111,117,110,100,98,108,97,115,116,101,114,46,0,0,0,0,0,27,91,51,50,59,49,109,75,69,89,66,27,91,48,109,32,91,107,101,121,98,111,97,114,100,32,108,97,121,111,117,116,32,73,68,91,32,99,111,100,101,112,97,103,101,32,110,117,109,98,101,114,91,32,99,111,100,101,112,97,103,101,32,102,105,108,101,93,93,93,10,10,83,111,109,101,32,101,120,97,109,112,108,101,115,58,10,32,32,27,91,51,50,59,49,109,75,69,89,66,27,91,48,109,58,32,68,105,115,112,108,97,121,32,99,117,114,114,101,110,116,108,121,32,108,111,97,100,101,100,32,99,111,100,101,112,97,103,101,46,10,32,32,27,91,51,50,59,49,109,75,69,89,66,27,91,48,109,32,115,112,58,32,76,111,97,100,32,116,104,101,32,115,112,97,110,105,115,104,32,40,83,80,41,32,108,97,121,111,117,116,44,32,117,115,101,32,97,110,32,97,112,112,114,111,112,114,105,97,116,101,32,99,111,100,101,112,97,103,101,46,10,32,32,27,91,51,50,59,49,109,75,69,89,66,27,91,48,109,32,115,112,32,56,53,48,58,32,76,111,97,100,32,116,104,101,32,115,112,97,110,105,115,104,32,40,83,80,41,32,108,97,121,111,117,116,44,32,117,115,101,32,99,111,100,101,112,97,103,101,32,56,53,48,46,10,32,32,27,91,51,50,59,49,109,75,69,89,66,27,91,48,109,32,115,112,32,56,53,48,32,109,121,99,112,46,99,112,105,58,32,83,97,109,101,32,97,115,32,97,98,111,118,101,44,32,98,117,116,32,117,115,101,32,102,105,108,101,32,109,121,99,112,46,99,112,105,46,10,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,78,79,95,82,69,77,79,86,69,0,0,0,0,0,0,0,82,101,109,111,118,101,115,32,111,110,101,32,111,114,32,109,111,114,101,32,102,105,108,101,115,46,10,0,0,0,0,0,107,112,95,56,0,0,0,0,115,98,98,97,115,101,0,0,50,101,48,0,0,0,0,0,67,111,100,101,112,97,103,101,32,37,105,32,104,97,115,32,98,101,101,110,32,108,111,97,100,101,100,32,102,111,114,32,108,97,121,111,117,116,32,37,115,10,0,0,0,0,0,0,69,71,65,51,46,67,80,73,0,0,0,0,0,0,0,0,68,79,83,32,73,110,116,32,50,49,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,70,65,73,76,85,82,69,0,83,72,69,76,76,95,67,77,68,95,68,69,76,69,84,69,95,72,69,76,80,0,0,0,107,112,95,55,0,0,0,0,46,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,84,121,112,101,32,111,102,32,83,111,117,110,100,98,108,97,115,116,101,114,32,116,111,32,101,109,117,108,97,116,101,46,32,103,98,32,105,115,32,71,97,109,101,98,108,97,115,116,101,114,46,0,0,0,0,0,67,111,100,101,112,97,103,101,32,37,105,32,104,97,115,32,98,101,101,110,32,108,111,97,100,101,100,10,0,0,0,0,82,69,78,65,77,69,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,102,105,108,101,110,97,109,101,49,32,102,105,108,101,110,97,109,101,50,46,10,82,69,78,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,102,105,108,101,110,97,109,101,49,32,102,105,108,101,110,97,109,101,50,46,10,10,78,111,116,101,32,116,104,97,116,32,121,111,117,32,99,97,110,32,110,111,116,32,115,112,101,99,105,102,121,32,97,32,110,101,119,32,100,114,105,118,101,32,111,114,32,112,97,116,104,32,102,111,114,32,121,111,117,114,32,100,101,115,116,105,110,97,116,105,111,110,32,102,105,108,101,46,10,0,107,112,95,54,0,0,0,0,115,98,116,121,112,101,0,0,85,115,105,110,103,32,109,117,108,116,105,112,108,101,32,102,105,108,101,115,32,105,115,32,111,110,108,121,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,99,117,101,47,105,115,111,32,105,109,97,103,101,115,46,10,0,0,0,0,0,47,100,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,69,78,65,77,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,107,112,95,53,0,0,0,0,103,98,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,77,85,76,84,73,80,76,69,95,78,79,78,95,67,85,69,73,83,79,95,70,73,76,69,83,0,0,0,0,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,73,78,86,67,80,70,73,76,69,0,0,47,68,0,0,0,0,0,0,82,101,110,97,109,101,115,32,111,110,101,32,111,114,32,109,111,114,101,32,102,105,108,101,115,46,10,0,0,0,0,0,107,112,95,52,0,0,0,0,115,98,49,54,0,0,0,0,84,104,101,32,105,109,97,103,101,32,109,117,115,116,32,98,101,32,111,110,32,97,32,104,111,115,116,32,111,114,32,108,111,99,97,108,32,100,114,105,118,101,46,10,0,0,0,0,77,79,85,78,84,32,0,0,83,72,69,76,76,95,67,77,68,95,82,69,78,65,77,69,95,72,69,76,80,0,0,0,107,112,95,51,0,0,0,0,115,98,112,114,111,50,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,78,79,78,95,76,79,67,65,76,95,68,82,73,86,69,0,0,0,0,0,0,0,0,83,97,116,0,0,0,0,0,105,115,111,68,114,105,118,101,32,0,0,0,0,0,0,0,73,80,88,58,32,83,101,114,118,101,114,32,100,105,115,99,111,110,110,101,99,116,101,100,32,117,110,101,120,112,101,99,116,101,100,108,121,0,0,0,83,85,66,83,84,10,0,0,84,104,105,115,32,105,115,32,97,32,115,105,109,112,108,101,32,118,101,114,115,105,111,110,32,111,102,32,116,104,101,32,99,111,109,109,97,110,100,44,32,110,111,32,119,105,108,100,99,97,114,100,115,32,97,108,108,111,119,101,100,33,10,0,107,112,95,50,0,0,0,0,115,98,112,114,111,49,0,0,68,114,105,118,101,32,110,117,109,98,101,114,32,37,100,32,109,111,117,110,116,101,100,32,97,115,32,37,115,10,0,0,109,112,117,52,48,49,0,0,70,114,105,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,78,79,95,87,73,76,68,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,71,82,80,52,32,67,97,108,108,32,37,100,0,0,0,0,107,112,95,49,0,0,0,0,115,98,50,0,0,0,0,0,115,101,114,118,101,114,58,0,67,111,109,109,97,110,100,32,115,101,110,116,32,116,111,32,109,111,100,101,109,58,32,45,62,37,115,60,45,10,0,0,67,79,77,50,0,0,0,0,58,92,0,0,0,0,0,0,37,76,102,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,77,79,85,78,84,95,78,85,77,66,69,82,0,0,0,68,69,76,69,84,69,10,0,73,108,108,101,103,97,108,32,71,82,80,52,32,67,97,108,108,32,37,100,0,0,0,0,47,67,0,0,0,0,0,0,73,108,108,101,103,97,108,32,71,82,80,52,32,67,97,108,108,32,37,100,0,0,0,0,84,104,117,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,85,66,83,84,95,72,69,76,80,0,0,0,0,32,0,0,0,0,0,0,0,82,69,77,32,91,99,111,109,109,101,110,116,93,10,0,0,103,117,115,0,0,0,0,0,107,112,95,48,0,0,0,0,68,79,83,66,111,120,32,70,97,107,101,66,73,79,83,32,118,49,46,48,0,0,0,0,115,98,49,0,0,0,0,0,86,67,80,73,58,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,84,82,0,0,83,117,112,101,114,50,120,83,97,73,0,0,0,0,0,0,97,100,118,109,97,109,101,50,120,0,0,0,0,0,0,0,67,97,110,39,116,32,99,114,101,97,116,101,32,100,114,105,118,101,32,102,114,111,109,32,102,105,108,101,46,10,0,0,109,111,100,95,50,32,34,107,101,121,32,37,100,34,0,0,100,105,115,110,101,121,0,0,102,117,108,108,100,111,117,98,108,101,0,0,0,0,0,0,73,80,88,32,84,117,110,110,101,108,105,110,103,32,117,116,105,108,105,116,121,32,102,111,114,32,68,111,115,66,111,120,10,10,0,0,0,0,0,0,87,101,100,0,0,0,0,0,88,71,65,58,32,66,108,105,116,82,101,99,116,58,32,85,110,107,110,111,119,110,32,109,105,120,32,115,101,108,101,99,116,32,114,101,103,105,115,116,101,114,0,0,0,0,0,0,67,65,76,76,10,0,0,0,83,72,69,76,76,95,67,77,68,95,82,69,77,95,72,69,76,80,95,76,79,78,71,0,114,105,103,104,116,0,0,0,77,65,83,84,69,82,0,0,73,78,84,58,71,97,116,101,32,83,101,108,101,99,116,111,114,32,112,111,105,110,116,115,32,116,111,32,105,108,108,101,103,97,108,32,100,101,115,99,114,105,112,116,111,114,32,119,105,116,104,32,116,121,112,101,32,37,120,0,0,0,0,0,82,101,99,32,87,97,118,101,0,0,0,0,0,0,0,0,115,98,108,97,115,116,101,114,0,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,67,65,78,84,95,67,82,69,65,84,69,0,0,0,0,84,117,101,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,65,76,76,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,65,100,100,32,99,111,109,109,101,110,116,115,32,105,110,32,97,32,98,97,116,99,104,32,102,105,108,101,46,10,0,0,115,111,99,107,101,116,32,110,111,116,32,102,111,117,110,100,32,105,110,32,115,111,99,107,101,116,115,101,116,0,0,0,100,111,119,110,0,0,0,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,115,111,99,107,101,116,0,0,83,112,101,99,105,97,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,111,112,116,105,111,110,115,32,102,111,114,32,116,104,101,32,100,101,118,105,99,101,32,100,114,105,118,101,114,46,32,84,104,105,115,32,105,115,32,117,115,117,97,108,108,121,32,116,104,101,32,105,100,32,111,102,32,116,104,101,32,100,101,118,105,99,101,32,121,111,117,32,119,97,110,116,32,116,111,32,117,115,101,46,10,32,32,83,101,101,32,116,104,101,32,82,69,65,68,77,69,47,77,97,110,117,97,108,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,46,0,0,0,0,50,99,48,0,0,0,0,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,115,111,99,107,101,116,0,0,68,114,105,118,101,32,97,108,114,101,97,100,121,32,109,111,117,110,116,101,100,32,97,116,32,116,104,97,116,32,108,101,116,116,101,114,46,10,0,0,116,114,97,110,115,112,97,114,101,110,116,58,0,0,0,0,69,71,65,50,46,67,80,73,0,0,0,0,0,0,0,0,37,117,46,37,117,46,37,117,46,37,117,0,0,0,0,0,77,111,110,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,67,65,76,76,95,72,69,76,80,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,69,77,95,72,69,76,80,0,0,0,0,0,0,108,101,102,116,0,0,0,0,77,79,68,69,77,58,32,84,88,32,66,117,102,102,101,114,32,111,118,101,114,102,108,111,119,33,0,0,0,0,0,0,109,105,100,105,99,111,110,102,105,103,0,0,0,0,0,0,87,97,114,110,105,110,103,58,32,116,114,105,101,100,32,116,111,32,97,99,116,105,118,97,116,101,32,104,97,114,100,119,97,114,101,32,104,97,110,100,115,104,97,107,101,46,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,65,76,82,69,65,68,89,95,77,79,85,78,84,69,68,0,0,0,0,0,0,0,0,99,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,80,65,85,83,69,0,84,89,80,69,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,91,102,105,108,101,110,97,109,101,93,10,0,0,117,112,0,0,0,0,0,0,68,101,118,105,99,101,32,116,104,97,116,32,119,105,108,108,32,114,101,99,101,105,118,101,32,116,104,101,32,77,73,68,73,32,100,97,116,97,32,102,114,111,109,32,77,80,85,45,52,48,49,46,0,0,0,0,84,111,32,109,111,117,110,116,32,100,105,114,101,99,116,111,114,105,101,115,44,32,117,115,101,32,116,104,101,32,27,91,51,52,59,49,109,77,79,85,78,84,27,91,48,109,32,99,111,109,109,97,110,100,44,32,110,111,116,32,116,104,101,32,27,91,51,52,59,49,109,73,77,71,77,79,85,78,84,27,91,48,109,32,99,111,109,109,97,110,100,46,10,0,0,0,88,71,65,58,32,85,110,104,97,110,100,108,101,100,32,109,117,108,116,105,102,117,110,99,116,105,111,110,32,99,111,109,109,97,110,100,32,37,120,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,80,65,85,83,69,10,0,0,83,72,69,76,76,95,67,77,68,95,84,89,80,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,101,110,100,0,0,0,0,0,109,105,100,105,100,101,118,105,99,101,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,77,79,85,78,84,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,76,65,89,79,85,84,78,79,84,70,79,85,78,68,0,0,0,0,0,37,115,10,0,0,0,0,0,73,108,108,101,103,97,108,32,109,97,99,104,105,110,101,32,116,121,112,101,32,37,100,0,70,114,105,100,97,121,0,0,83,72,69,76,76,95,67,77,68,95,80,65,85,83,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,68,105,115,112,108,97,121,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,97,32,116,101,120,116,45,102,105,108,101,46,10,0,0,0,100,101,108,101,116,101,0,0,84,121,112,101,32,111,102,32,77,80,85,45,52,48,49,32,116,111,32,101,109,117,108,97,116,101,46,0,0,0,0,0,73,109,97,103,101,32,102,105,108,101,32,110,111,116,32,102,111,117,110,100,46,10,0,0,104,101,114,99,112,97,108,0,73,108,108,101,103,97,108,32,67,97,108,108,66,97,99,107,32,67,97,108,108,101,100,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,80,65,85,83,69,95,72,69,76,80,0,0,0,0,83,72,69,76,76,95,67,77,68,95,84,89,80,69,95,72,69,76,80,0,0,0,0,0,104,111,109,101,0,0,0,0,109,112,117,52,48,49,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,70,73,76,69,95,78,79,84,95,70,79,85,78,68,0,115,101,116,32,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,67,68,82,111,109,32,0,0,82,69,77,10,0,0,0,0,76,101,102,116,115,104,105,102,116,32,99,111,109,109,97,110,100,108,105,110,101,32,112,97,114,97,109,101,116,101,114,115,32,105,110,32,97,32,98,97,116,99,104,32,115,99,114,105,112,116,46,10,0,0,0,0,105,110,115,101,114,116,0,0,99,111,114,101,109,105,100,105,0,0,0,0,0,0,0,0,77,117,115,116,32,115,112,101,99,105,102,121,32,102,105,108,101,45,105,109,97,103,101,32,116,111,32,109,111,117,110,116,46,10,0,0,0,0,0,0,84,117,101,115,100,97,121,0,83,72,69,76,76,95,67,77,68,95,82,69,77,95,72,69,76,80,95,76,79,78,71,0,83,72,69,76,76,95,67,77,68,95,83,72,73,70,84,95,72,69,76,80,0,0,0,0,112,97,103,101,117,112,0,0,111,102,102,0,0,0,0,0,99,111,114,101,97,117,100,105,111,0,0,0,0,0,0,0,83,101,114,105,97,108,37,100,58,32,115,111,99,107,101,116,32,105,110,104,101,114,105,116,97,110,99,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,111,110,32,116,104,105,115,32,112,108,97,116,102,111,114,109,46,0,0,0,0,83,101,114,105,97,108,37,100,58,32,77,111,100,101,109,32,108,105,115,116,101,110,105,110,103,32,111,110,32,112,111,114,116,32,37,100,46,46,46,0,67,79,77,49,0,0,0,0,58,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,83,80,69,67,73,70,89,95,70,73,76,69,0,0,0,83,72,69,76,76,95,67,77,68,95,68,69,76,69,84,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,10,0,0,0,0,0,0,0,119,43,116,0,0,0,0,0,116,97,110,100,121,0,0,0,77,111,110,100,97,121,0,0,10,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,69,77,95,72,69,76,80,0,0,0,0,0,0,45,103,101,116,0,0,0,0,74,117,109,112,32,116,111,32,97,32,108,97,98,101,108,101,100,32,108,105,110,101,32,105,110,32,97,32,98,97,116,99,104,32,115,99,114,105,112,116,46,10,0,0,0,0,0,0,100,111,115,98,111,120,45,48,46,55,52,46,99,111,110,102,0,0,0,0,0,0,0,0,112,97,103,101,100,111,119,110,0,0,0,0,0,0,0,0,73,66,77,32,67,79,77,80,65,84,73,66,76,69,32,52,56,54,32,66,73,79,83,32,67,79,80,89,82,73,71,72,84,32,84,104,101,32,68,79,83,66,111,120,32,84,101,97,109,46,0,0,0,0,0,0,73,82,81,32,49,32,75,101,121,98,111,97,114,100,0,0,111,115,115,0,0,0,0,0,86,67,80,73,58,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,76,68,84,0,72,81,51,120,0,0,0,0,110,111,114,109,97,108,51,120,0,0,0,0,0,0,0,0,68,105,115,107,99,97,99,104,105,110,103,32,114,101,115,101,116,32,102,111,114,32,110,111,114,109,97,108,32,109,111,117,110,116,101,100,32,100,114,105,118,101,115,46,0,0,0,0,80,70,32,67,111,114,101,32,119,105,116,104,111,117,116,32,80,70,0,0,0,0,0,0,70,111,114,109,97,116,32,34,37,115,34,32,105,115,32,117,110,115,117,112,112,111,114,116,101,100,46,32,83,112,101,99,105,102,121,32,34,102,97,116,34,32,111,114,32,34,105,115,111,34,32,111,114,32,34,110,111,110,101,34,46,10,0,0,109,111,100,95,49,32,34,107,101,121,32,37,100,34,0,0,83,116,97,114,116,32,100,111,115,98,111,120,32,100,105,114,101,99,116,108,121,32,105,110,32,102,117,108,108,115,99,114,101,101,110,46,32,40,80,114,101,115,115,32,65,76,84,45,69,110,116,101,114,32,116,111,32,103,111,32,98,97,99,107,41,0,0,0,0,0,0,0,73,110,116,32,49,49,32,69,113,117,105,112,109,101,110,116,0,0,0,0,0,0,0,0,46,100,114,111,0,0,0,0,33,33,33,33,32,82,111,117,103,101,32,65,69,83,32,33,33,33,33,0,0,0,0,0,83,117,110,100,97,121,0,0,88,71,65,58,32,68,114,97,119,80,97,116,116,101,114,110,58,32,77,105,120,115,101,108,101,99,116,32,100,97,116,97,32,102,114,111,109,32,80,73,88,95,84,82,65,78,83,32,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,0,83,72,69,76,76,95,83,89,78,84,65,88,69,82,82,79,82,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,72,69,76,80,0,0,0,0,0,70,77,0,0,0,0,0,0,112,97,117,115,101,0,0,0,47,76,73,83,84,77,73,68,73,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,114,101,97,100,32,102,114,111,109,32,37,120,44,32,67,83,58,73,80,32,37,56,120,58,37,56,120,0,0,0,0,0,86,56,54,32,105,110,116,101,114,114,117,112,116,32,100,111,101,115,110,39,116,32,99,104,97,110,103,101,32,116,111,32,112,108,48,0,0,0,0,0,98,117,116,116,111,110,119,114,97,112,0,0,0,0,0,0,114,101,99,119,97,118,101,0,97,108,115,97,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,70,79,82,77,65,84,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,0,86,69,83,65,32,82,101,97,108,32,83,101,116,32,87,105,110,100,111,119,0,0,0,0,84,89,80,69,10,0,0,0,80,101,114,102,111,114,109,115,32,99,111,110,100,105,116,105,111,110,97,108,32,112,114,111,99,101,115,115,105,110,103,32,105,110,32,98,97,116,99,104,32,112,114,111,103,114,97,109,115,46,10,0,0,0,0,0,115,99,114,111,108,108,108,111,99,107,0,0,0,0,0,0,119,105,110,51,50,0,0,0,50,97,48,0,0,0,0,0,73,110,116,32,52,98,32,118,100,109,97,0,0,0,0,0,84,121,112,101,32,34,37,115,34,32,105,115,32,117,110,115,117,112,112,111,114,116,101,100,46,32,83,112,101,99,105,102,121,32,34,104,100,100,34,32,111,114,32,34,102,108,111,112,112,121,34,32,111,114,34,105,115,111,34,46,10,0,0,0,54,52,77,66,32,109,101,109,111,114,121,32,108,105,109,105,116,33,0,0,0,0,0,0,115,98,98,97,115,101,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,84,89,80,69,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,72,69,76,80,0,0,0,0,0,0,0,77,83,67,68,48,48,49,0,112,114,105,110,116,115,99,114,101,101,110,0,0,0,0,0,32,0,0,0,0,0,0,0,100,101,102,97,117,108,116,0,78,111,114,109,97,108,50,120,0,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,84,89,80,69,95,85,78,83,85,80,80,79,82,84,69,68,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,102,114,97,109,101,115,107,105,112,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,84,89,80,69,95,72,69,76,80,0,0,0,0,0,67,104,97,110,103,101,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,115,46,10,0,0,115,108,97,115,104,0,0,0,117,97,114,116,0,0,0,0,67,111,117,108,100,32,110,111,116,32,101,120,116,114,97,99,116,32,100,114,105,118,101,32,103,101,111,109,101,116,114,121,32,102,114,111,109,32,105,109,97,103,101,46,10,85,115,101,32,112,97,114,97,109,101,116,101,114,32,45,115,105,122,101,32,98,112,115,44,115,112,99,44,104,112,99,44,99,121,108,32,116,111,32,115,112,101,99,105,102,121,32,116,104,101,32,103,101,111,109,101,116,114,121,46,10,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,78,111,32,98,121,116,101,32,104,97,110,100,108,101,114,32,102,111,114,32,119,114,105,116,101,32,116,111,32,37,100,0,83,72,73,70,84,10,0,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,72,69,76,80,0,0,0,0,0,0,112,101,114,105,111,100,0,0,105,110,116,101,108,108,105,103,101,110,116,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,73,78,86,65,76,73,68,95,71,69,79,77,69,84,82,89,0,0,0,0,0,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,73,78,86,65,76,73,68,70,73,76,69,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,72,73,70,84,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,82,77,68,73,82,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,10,82,68,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,10,0,99,111,109,109,97,0,0,0,109,105,100,105,0,0,0,0,112,99,115,112,101,97,107,101,114,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,108,111,97,100,32,105,109,97,103,101,32,102,105,108,101,46,10,67,104,101,99,107,32,116,104,97,116,32,116,104,101,32,112,97,116,104,32,105,115,32,99,111,114,114,101,99,116,32,97,110,100,32,116,104,101,32,105,109,97,103,101,32,105,115,32,97,99,99,101,115,115,105,98,108,101,46,10,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,72,73,70,84,95,72,69,76,80,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,77,68,73,82,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,114,99,116,114,108,0,0,0,72,111,119,32,109,97,110,121,32,109,105,108,108,105,115,101,99,111,110,100,115,32,111,102,32,100,97,116,97,32,116,111,32,107,101,101,112,32,111,110,32,116,111,112,32,111,102,32,116,104,101,32,98,108,111,99,107,115,105,122,101,46,0,0,48,46,55,52,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,73,78,86,65,76,73,68,95,73,77,65,71,69,0,0,115,98,98,97,115,101,0,0,111,112,108,114,97,116,101,0,73,80,88,83,69,82,86,69,82,58,32,82,101,99,111,110,110,101,99,116,32,102,114,111,109,32,37,100,46,37,100,46,37,100,46,37,100,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,68,79,83,58,32,79,112,101,110,70,105,108,101,69,120,116,101,110,100,101,100,58,32,85,110,107,110,111,119,110,32,97,99,116,105,111,110,46,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,76,65,66,69,76,95,78,79,84,95,70,79,85,78,68,0,0,82,101,109,111,118,101,32,68,105,114,101,99,116,111,114,121,46,10,0,0,0,0,0,0,108,99,116,114,108,0,0,0,67,97,110,39,116,32,97,100,100,44,32,98,117,102,102,101,114,32,102,117,108,108,0,0,112,114,101,98,117,102,102,101,114,0,0,0,0,0,0,0,70,111,114,32,27,91,51,51,109,67,68,45,82,79,77,27,91,48,109,32,105,109,97,103,101,115,58,32,32,32,27,91,51,52,59,49,109,73,77,71,77,79,85,78,84,32,100,114,105,118,101,45,108,101,116,116,101,114,32,108,111,99,97,116,105,111,110,45,111,102,45,105,109,97,103,101,32,45,116,32,105,115,111,27,91,48,109,10,10,70,111,114,32,27,91,51,51,109,104,97,114,100,114,105,118,101,27,91,48,109,32,105,109,97,103,101,115,58,32,77,117,115,116,32,115,112,101,99,105,102,121,32,100,114,105,118,101,32,103,101,111,109,101,116,114,121,32,102,111,114,32,104,97,114,100,32,100,114,105,118,101,115,58,10,98,121,116,101,115,95,112,101,114,95,115,101,99,116,111,114,44,32,115,101,99,116,111,114,115,95,112,101,114,95,99,121,108,105,110,100,101,114,44,32,104,101,97,100,115,95,112,101,114,95,99,121,108,105,110,100,101,114,44,32,99,121,108,105,110,100,101,114,95,99,111,117,110,116,46,10,27,91,51,52,59,49,109,73,77,71,77,79,85,78,84,32,100,114,105,118,101,45,108,101,116,116,101,114,32,108,111,99,97,116,105,111,110,45,111,102,45,105,109,97,103,101,32,45,115,105,122,101,32,98,112,115,44,115,112,99,44,104,112,99,44,99,121,108,27,91,48,109,10,0,0,0,0,0,0,0,73,80,88,58,32,85,110,97,98,108,101,32,116,111,32,99,111,110,110,101,99,116,32,116,111,32,115,101,114,118,101,114,58,32,37,115,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,110,111,110,101,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,77,73,83,83,73,78,71,95,76,65,66,69,76,0,0,0,0,83,72,69,76,76,95,67,77,68,95,82,77,68,73,82,95,72,69,76,80,0,0,0,0,103,117,115,114,97,116,101,0,114,97,108,116,0,0,0,0,77,105,120,101,114,32,98,108,111,99,107,32,115,105,122,101,44,32,108,97,114,103,101,114,32,98,108,111,99,107,115,32,109,105,103,104,116,32,104,101,108,112,32,115,111,117,110,100,32,115,116,117,116,116,101,114,105,110,103,32,98,117,116,32,115,111,117,110,100,32,119,105,108,108,32,97,108,115,111,32,98,101,32,109,111,114,101,32,108,97,103,103,101,100,46,0,83,101,114,105,97,108,37,100,58,32,45,115,111,99,107,101,116,32,115,116,97,114,116,32,112,97,114,97,109,101,116,101,114,32,109,105,115,115,105,110,103,46,0,0,0,0,0,0,83,101,114,105,97,108,37,100,58,32,77,111,100,101,109,32,99,111,117,108,100,32,110,111,116,32,111,112,101,110,32,84,67,80,32,112,111,114,116,32,37,100,46,0,0,0,0,0,88,71,65,58,32,71,101,116,77,105,120,82,101,115,117,108,116,58,32,85,110,107,110,111,119,110,32,109,105,120,46,32,32,83,104,111,117,108,100,110,39,116,32,98,101,32,97,98,108,101,32,116,111,32,103,101,116,32,104,101,114,101,33,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,83,80,69,67,73,70,89,95,71,69,79,77,69,84,82,89,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,69,76,69,84,69,95,72,69,76,80,0,0,0,72,101,114,99,32,80,97,108,0,0,0,0,0,0,0,0,99,111,110,0,0,0,0,0,84,105,109,101,114,46,99,112,112,58,32,101,114,114,111,114,32,105,110,32,114,101,97,100,108,97,116,99,104,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,80,82,79,80,95,78,79,84,95,69,88,73,83,84,0,0,71,79,84,79,10,0,0,0,80,82,79,71,82,65,77,95,67,79,78,70,73,71,95,83,69,67,85,82,69,95,79,78,0,0,0,0,0,0,0,0,77,75,68,73,82,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,10,77,68,32,91,100,114,105,118,101,58,93,91,112,97,116,104,93,10,0,116,114,117,101,0,0,0,0,108,97,108,116,0,0,0,0,105,114,113,32,50,32,98,105,111,115,0,0,0,0,0,0,98,108,111,99,107,115,105,122,101,0,0,0,0,0,0,0,85,110,104,97,110,100,108,101,100,32,111,112,99,111,100,101,32,37,120,32,99,97,117,115,101,100,32,97,32,112,114,111,116,101,99,116,105,111,110,32,102,97,117,108,116,33,0,0,110,111,110,101,0,0,0,0,105,114,113,0,0,0,0,0,72,81,50,120,0,0,0,0,110,111,114,109,97,108,50,120,0,0,0,0,0,0,0,0,71,111,116,32,97,32,100,111,115,98,111,120,32,99,108,111,115,101,32,109,97,99,104,105,110,101,32,105,110,32,112,97,103,101,102,97,117,108,116,32,99,111,114,101,63,0,0,0,77,117,115,116,32,115,112,101,99,105,102,121,32,100,114,105,118,101,32,110,117,109,98,101,114,32,40,48,32,111,114,32,51,41,32,116,111,32,109,111,117,110,116,32,105,109,97,103,101,32,97,116,32,40,48,44,49,61,102,100,97,44,102,100,98,59,50,44,51,61,104,100,97,44,104,100,98,41,46,10,0,0,0,0,0,0,0,0,112,99,114,97,116,101,0,0,107,101,121,95,37,115,32,34,107,101,121,32,37,100,34,0,102,117,108,108,115,99,114,101,101,110,0,0,0,0,0,0,82,97,119,32,79,112,108,0,84,111,111,32,108,111,110,103,32,109,105,120,101,114,32,99,104,97,110,110,101,108,32,110,97,109,101,0,0,0,0,0,73,80,88,78,69,84,46,67,79,77,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,88,71,65,58,32,85,110,104,97,110,100,108,101,100,32,100,114,97,119,32,99,111,109,109,97,110,100,32,37,120,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,77,75,68,73,82,95,72,69,76,80,95,76,79,78,71,0,0,0,0,0,0,0,80,73,67,58,32,112,111,108,108,32,99,111,109,109,97,110,100,32,110,111,116,32,104,97,110,100,108,101,100,0,0,0,114,115,104,105,102,116,0,0,73,108,108,101,103,97,108,32,119,114,105,116,101,32,116,111,32,37,120,44,32,67,83,58,73,80,32,37,56,120,58,37,56,120,0,0,0,0,0,0,115,119,97,112,51,52,0,0,78,111,110,45,99,111,110,102,111,114,109,105,110,103,32,105,110,116,114,97,32,112,114,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+163848);
  /* memory initializer */ allocate([118,105,108,101,103,101,32,73,78,84,32,119,105,116,104,32,68,80,76,33,61,67,80,76,0,0,0,0,0,0,0,0,50,53,54,0,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,83,80,69,67,73,70,89,50,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,73,79,95,114,101,97,100,72,97,110,100,108,101,114,32,97,108,108,114,101,97,100,121,32,105,110,115,116,97,108,108,101,100,32,112,111,114,116,32,37,120,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,71,79,84,79,95,72,69,76,80,0,0,0,0,0,77,97,107,101,32,68,105,114,101,99,116,111,114,121,46,10,0,0,0,0,0,0,0,0,108,115,104,105,102,116,0,0,67,97,110,39,116,32,111,112,101,110,32,100,105,114,32,37,115,32,102,111,114,32,99,97,112,116,117,114,105,110,103,32,37,115,0,0,0,0,0,0,68,77,65,32,115,101,103,98,111,117,110,100,32,119,114,97,112,112,105,110,103,32,40,119,114,105,116,101,41,0,0,0,53,49,50,0,0,0,0,0,50,56,48,0,0,0,0,0,77,117,115,116,32,115,112,101,99,105,102,121,32,100,114,105,118,101,32,108,101,116,116,101,114,32,116,111,32,109,111,117,110,116,32,105,109,97,103,101,32,97,116,46,10,0,0,0,97,117,116,111,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,69,88,73,83,84,95,77,73,83,83,73,78,71,95,70,73,76,69,78,65,77,69,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,77,75,68,73,82,95,72,69,76,80,0,0,0,0,98,97,99,107,115,108,97,115,104,0,0,0,0,0,0,0,56,49,57,50,0,0,0,0,80,82,79,71,82,65,77,95,73,77,71,77,79,85,78,84,95,83,80,69,67,73,70,89,95,68,82,73,86,69,0,0,77,69,77,58,99,111,114,114,117,112,116,105,111,110,32,100,117,114,105,110,103,32,97,108,108,111,99,97,116,101,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,69,88,73,83,84,32,0,0,83,104,111,119,32,104,101,108,112,46,10,0,0,0,0,0,113,117,111,116,101,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,107,101,121,32,112,114,101,115,115,0,0,0,52,48,57,54,0,0,0,0,78,111,32,80,67,106,114,32,99,97,114,116,114,105,100,103,101,32,99,111,109,109,97,110,100,111,115,32,102,111,117,110,100,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,69,82,82,79,82,76,69,86,69,76,95,73,78,86,65,76,73,68,95,78,85,77,66,69,82,0,0,83,72,69,76,76,95,67,77,68,95,72,69,76,80,95,72,69,76,80,0,0,0,0,0,115,101,109,105,99,111,108,111,110,0,0,0,0,0,0,0,50,48,52,56,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,67,65,82,84,95,78,79,95,67,77,68,83,0,0,0,0,0,0,0,106,111,121,115,116,105,99,107,116,121,112,101,0,0,0,0,80,82,79,71,82,65,77,95,75,69,89,66,95,70,73,76,69,78,79,84,70,79,85,78,68,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,69,82,82,79,82,76,69,86,69,76,95,77,73,83,83,73,78,71,95,78,85,77,66,69,82,0,0,69,120,105,116,32,102,114,111,109,32,116,104,101,32,115,104,101,108,108,46,10,0,0,0,99,97,112,115,108,111,99,107,0,0,0,0,0,0,0,0,49,48,50,52,0,0,0,0,65,118,97,105,108,97,98,108,101,32,80,67,106,114,32,99,97,114,116,114,105,100,103,101,32,99,111,109,109,97,110,100,111,115,58,37,115,0,0,0,69,82,82,79,82,76,69,86,69,76,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,88,73,84,95,72,69,76,80,0,0,0,0,0,109,105,110,117,115,0,0,0,77,105,120,101,114,32,115,97,109,112,108,101,32,114,97,116,101,44,32,115,101,116,116,105,110,103,32,97,110,121,32,100,101,118,105,99,101,39,115,32,114,97,116,101,32,104,105,103,104,101,114,32,116,104,97,110,32,116,104,105,115,32,119,105,108,108,32,112,114,111,98,97,98,108,121,32,108,111,119,101,114,32,116,104,101,105,114,32,115,111,117,110,100,32,113,117,97,108,105,116,121,46,0,0,68,101,99,0,0,0,0,0,78,79,84,0,0,0,0,0,68,105,115,112,108,97,121,32,109,101,115,115,97,103,101,115,32,97,110,100,32,101,110,97,98,108,101,47,100,105,115,97,98,108,101,32,99,111,109,109,97,110,100,32,101,99,104,111,105,110,103,46,10,0,0,0,114,98,114,97,99,107,101,116,0,0,0,0,0,0,0,0,76,80,84,49,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,67,65,82,84,95,76,73,83,84,95,67,77,68,83,0,0,0,0,0,80,67,106,114,32,99,97,114,116,114,105,100,103,101,32,102,111,117,110,100,44,32,98,117,116,32,109,97,99,104,105,110,101,32,105,115,32,110,111,116,32,80,67,106,114,0,0,0,78,111,118,0,0,0,0,0,73,70,10,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,69,67,72,79,95,72,69,76,80,0,0,0,0,0,108,98,114,97,99,107,101,116,0,0,0,0,0,0,0,0,69,110,97,98,108,101,32,115,105,108,101,110,116,32,109,111,100,101,44,32,115,111,117,110,100,32,105,115,32,115,116,105,108,108,32,101,109,117,108,97,116,101,100,32,116,104,111,117,103,104,46,0,0,0,0,0,83,101,114,105,97,108,37,100,58,32,67,111,110,110,101,99,116,101,100,32,116,111,32,37,115,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,111,110,110,101,99,116,46,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,121,112,101,32,102,111,114,32,115,101,114,105,97,108,37,100,0,0,0,0,0,0,0,46,69,88,69,0,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,67,65,82,84,95,87,79,95,80,67,74,82,0,0,0,0,0,0,0,67,76,83,10,0,0,0,0,83,72,69,76,76,58,82,101,100,105,114,101,99,116,32,111,117,116,112,117,116,32,116,111,32,37,115,0,0,0,0,0,79,99,116,0,0,0,0,0,37,115,61,37,115,10,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,72,69,76,80,95,76,79,78,71,0,0,45,115,101,99,117,114,101,109,111,100,101,0,0,0,0,0,68,105,114,101,99,116,111,114,121,32,86,105,101,119,46,10,0,0,0,0,0,0,0,0,98,115,112,97,99,101,0,0,114,101,98,111,111,116,0,0,110,111,115,111,117,110,100,0,85,110,104,97,110,100,108,101,100,32,111,112,99,111,100,101,32,48,120,48,102,32,37,120,32,99,97,117,115,101,100,32,97,32,112,114,111,116,101,99,116,105,111,110,32,102,97,117,108,116,33,0,0,0,0,0,47,100,101,118,47,115,101,113,117,101,110,99,101,114,0,0,65,100,118,77,97,109,101,51,120,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,66,111,111,116,105,110,103,32,102,114,111,109,32,100,114,105,118,101,32,37,99,46,46,46,10,0,0,0,0,0,0,0,80,108,101,97,115,101,32,115,112,101,99,105,102,121,32,97,32,99,97,112,116,117,114,101,32,100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,115,100,108,0,0,0,0,0,80,114,101,112,97,114,105,110,103,32,116,111,32,99,97,112,116,117,114,101,32,82,97,119,32,79,80,76,44,32,119,105,108,108,32,115,116,97,114,116,32,119,105,116,104,32,102,105,114,115,116,32,110,111,116,101,32,112,108,97,121,101,100,46,0,0,0,0,0,0,0,0,73,80,88,95,69,83,82,0,83,101,112,0,0,0,0,0,88,71,65,58,32,68,114,97,119,66,108,105,116,87,97,105,116,58,32,85,110,104,97,110,100,108,101,100,32,109,105,120,109,111,100,101,58,32,37,100,0,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,73,70,95,72,69,76,80,0,0,0,0,0,0,0,72,117,101,32,97,116,32,37,102,0,0,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,68,73,82,95,72,69,76,80,0,0,0,0,0,0,32,84,0,0,0,0,0,0,80,73,67,58,32,56,48,56,48,47,56,48,56,53,32,109,111,100,101,32,110,111,116,32,104,97,110,100,108,101,100,0,101,110,116,101,114,0,0,0,77,73,88,69,82,46,67,79,77,0,0,0,0,0,0,0,86,56,54,32,116,111,32,49,54,45,98,105,116,32,103,97,116,101,0,0,0,0,0,0,46,109,105,100,0,0,0,0,109,105,120,101,114,0,0,0,80,82,79,71,82,65,77,95,66,79,79,84,95,66,79,79,84,0,0,0,0,0,0,0,65,117,103,0,0,0,0,0,83,72,69,76,76,95,67,77,68,95,83,69,84,95,79,85,84,95,79,70,95,83,80,65,67,69,0,0,0,0,0,0,67,108,101,97,114,32,115,99,114,101,101,110,46,10,0,0,116,97,98,0,0,0,0,0,83,101,116,116,105,110,103,32,105,116,32,108,111,119,101,114,32,116,104,97,110,32,49,48,48,32,119,105,108,108,32,98,101,32,97,32,112,101,114,99,101,110,116,97,103,101,46,0,50,54,48,0,0,0,0,0,52,56,48,48,48,0,0,0,52,52,49,48,48,0,0,0,67,114,101,97,116,101,75,101,121,66,105,110,100,0,0,0,67,104,101,99,107,69,118,101,110,116,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,46,0,0,0,0,0,0,0,121,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,254,238,186,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,77,77,88,88,88,88,48,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,12,0,0,0,136,136,0,0,0,128,0,0,0,8,0,0,128,0,0,0,8,0,0,0,64,84,0,0,0,64,0,0,0,4,0,0,64,0,0,0,0,16,0,0,2,0,0,0,4,0,0,0,16,0,0,0,0,1,0,0,32,0,0,0,0,2,0,0,33,0,0,0,37,0,0,0,42,0,0,0,46,0,0,0,50,0,0,0,54,0,0,0,58,0,0,0,63,0,0,0,67,0,0,0,75,0,0,0,83,0,0,0,92,0,0,0,100,0,0,0,109,0,0,0,118,0,0,0,125,0,0,0,133,0,0,0,149,0,0,0,167,0,0,0,182,0,0,0,200,0,0,0,217,0,0,0,233,0,0,0,250,0,0,0,14,1,0,0,47,1,0,0,77,1,0,0,114,1,0,0,144,1,0,0,179,1,0,0,220,1,0,0,244,1,0,0,250,0,0,0,244,1,0,0,238,2,0,0,232,3,0,0,58,46,59,44,61,43,32,9,47,34,91,93,60,62,124,0,0,0,0,0,0,16,16,16,0,0,0,0,0,16,16,16,240,0,0,0,0,16,16,16,240,0,0,0,0,16,16,16,240,0,0,0,0,16,16,16,240,0,0,0,0,16,16,16,240,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,255,254,253,252,251,250,249,1,3,5,7,9,11,13,15,255,253,251,249,247,245,243,241,2,6,10,14,18,22,26,30,254,250,246,242,238,234,230,226,4,12,20,28,36,44,52,60,252,244,236,228,220,212,204,196,0,4,0,4,252,4,252,4,252,4,252,4,252,4,252,4,252,4,252,4,252,0,252,0,0,1,0,255,1,3,255,253,2,6,254,250,4,12,252,244,8,24,248,232,6,48,240,208,0,0,0,0,0,0,0,0,33,66,73,79,83,32,82,79,77,32,118,101,114,115,105,111,110,32,48,50,46,48,48,46,48,48,13,10,67,111,109,112,97,116,105,98,105,108,105,116,121,32,83,111,102,116,119,97,114,101,13,10,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,56,52,44,49,57,56,53,44,49,57,56,54,44,49,57,56,55,13,10,80,104,111,101,110,105,120,32,83,111,102,116,119,97,114,101,32,65,115,115,111,99,105,97,116,101,115,32,76,116,100,46,13,10,97,110,100,32,84,97,110,100,121,0,0,0,0,0,0,0,0,1,0,2,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,3,0,4,0,5,0,6,0,7,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,8,13,9,10,14,14,9,26,27,11,0,0,0,0,0,44,40,45,41,42,46,30,41,42,43,59,0,0,0,0,0,0,0,0,8,0,0,0,8,248,0,0,8,248,0,0,8,248,0,0,8,248,0,0,8,248,0,0,8,248,0,0,8,248,0,0,0,248,0,0,0,0,1,2,3,0,255,254,253,1,3,5,7,255,253,251,249,2,6,10,14,254,250,246,242,4,12,20,28,252,244,236,228,5,15,25,35,251,241,231,221,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,216,203,180,1,116,210,176,1,120,210,176,1,124,210,176,1,0,0,0,0,0,0,0,0,76,80,84,49,0,0,0,0,67,79,77,49,0,0,0,0,192,98,2,0,136,93,2,0,0,0,0,0,0,0,0,0,192,59,2,0,104,58,2,0,224,56,2,0,160,55,2,0,88,54,2,0,48,53,2,0,0,0,0,0,0,0,0,0,58,46,59,44,61,43,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,11,0,12,0,13,0,14,0,15,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,16,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,112,177,2,0,128,13,2,0,104,177,2,0,216,99,2,0,112,68,2,0,48,52,2,0,64,40,2,0,56,26,2,0,0,0,0,0,0,0,0,0,72,255,1,0,240,129,2,0,152,129,2,0,176,127,2,0,136,125,2,0,152,27,2,0,0,0,0,0,0,0,0,0,8,159,2,0,56,158,2,0,152,27,2,0,0,0,0,0,16,78,2,0,32,76,2,0,56,73,2,0,112,70,2,0,104,68,2,0,32,67,2,0,208,64,2,0,16,62,2,0,0,60,2,0,176,58,2,0,56,57,2,0,192,55,2,0,0,0,0,0,0,0,0,0,72,255,1,0,216,105,2,0,168,105,2,0,104,105,2,0,48,105,2,0,192,103,2,0,152,27,2,0,0,0,0,0,112,97,2,0,64,97,2,0,8,97,2,0,200,96,2,0,176,96,2,0,0,0,0,0,152,27,2,0,88,31,2,0,40,26,2,0,240,24,2,0,96,22,2,0,112,20,2,0,80,19,2,0,64,18,2,0,64,17,2,0,56,16,2,0,112,15,2,0,64,14,2,0,120,13,2,0,152,12,2,0,16,10,2,0,56,8,2,0,168,5,2,0,120,4,2,0,0,0,0,0,0,0,0,0,104,144,2,0,96,143,2,0,192,142,2,0,0,142,2,0,160,141,2,0,32,141,2,0,152,27,2,0,0,0,0,0,152,157,2,0,208,123,2,0,112,123,2,0,0,0,0,0,192,116,2,0,40,110,2,0,48,122,2,0,112,105,2,0,208,99,2,0,120,96,2,0,80,90,2,0,0,0,0,0,40,110,2,0,88,82,2,0,0,86,2,0,192,116,2,0,96,80,2,0,48,122,2,0,0,0,0,0,0,0,0,0,152,157,2,0,176,156,2,0,24,156,2,0,200,153,2,0,24,152,2,0,152,151,2,0,152,27,2,0,0,0,0,0,72,255,1,0,128,222,1,0,48,219,1,0,168,217,1,0,0,0,0,0,0,0,0,0,72,255,1,0,32,110,2,0,240,109,2,0,0,0,0,0,48,122,2,0,192,116,2,0,40,110,2,0,112,105,2,0,208,99,2,0,120,96,2,0,80,90,2,0,0,0,0,0,224,229,1,0,24,253,1,0,96,177,2,0,64,169,2,0,184,156,2,0,32,147,2,0,8,139,2,0,248,129,2,0,0,0,0,0,0,0,0,0,0,86,2,0,192,116,2,0,88,82,2,0,40,110,2,0,96,80,2,0,48,122,2,0,0,0,0,0,0,0,0,0,112,177,2,0,104,177,2,0,216,99,2,0,112,68,2,0,48,52,2,0,64,40,2,0,56,26,2,0,128,13,2,0,0,0,0,0,0,0,0,0,232,19,177,1,72,3,2,0,0,0,0,0,0,0,0,0,72,255,1,0,16,253,1,0,152,252,1,0,0,0,0,0,24,253,1,0,224,229,1,0,96,177,2,0,64,169,2,0,184,156,2,0,32,147,2,0,8,139,2,0,248,129,2,0,0,0,0,0,0,0,0,0,72,255,1,0,208,241,1,0,248,240,1,0,24,236,1,0,120,235,1,0,200,234,1,0,0,0,0,0,0,0,0,0,0,172,2,0,56,171,2,0,152,170,2,0,248,169,2,0,56,169,2,0,48,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,244,2,0,110,5,0,0,88,4,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,244,2,0,228,6,0,0,214,2,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,244,2,0,120,0,0,0,148,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,244,2,0,22,0,0,0,214,1,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,244,2,0,22,0,0,0,70,0,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,244,2,0,22,0,0,0,120,5,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,244,2,0,34,1,0,0,80,2,0,0,80,0,0,0,4,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,244,2,0,138,5,0,0,196,4,0,0,80,0,0,0,2,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,2,0,28,1,0,0,244,2,0,0,80,0,0,0,12,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,245,2,0,98,7,0,0,188,2,0,0,80,0,0,0,8,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,245,2,0,82,5,0,0,208,1,0,0,80,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,245,2,0,210,2,0,0,200,0,0,0,80,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,2,0,186,3,0,0,14,1,0,0,80,0,0,0,68,0,0,0,4,0,0,0,80,0,0,0,44,0,0,0,6,0,0,0,28,0,0,0,4,0,0,0,248,255,255,255,0,246,2,0,234,0,0,0,30,0,0,0,84,0,0,0,8,0,0,0,2,0,0,0,212,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,246,2,0,158,1,0,0,66,7,0,0,80,0,0,0,14,0,0,0,58,0,0,0,74,0,0,0,50,0,0,0,60,0,0,0,2,0,0,0,2,0,0,0,248,255,255,255,40,246,2,0,206,0,0,0,236,0,0,0,244,0,0,0,194,0,0,0,64,0,0,0,216,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,246,2,0,72,2,0,0,200,6,0,0,80,0,0,0,34,0,0,0,26,0,0,0,90,0,0,0,186,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,246,2,0,116,2,0,0,112,0,0,0,80,0,0,0,142,0,0,0,56,0,0,0,94,0,0,0,126,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,246,2,0,64,5,0,0,2,0,0,0,80,0,0,0,128,0,0,0,34,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,246,2,0,198,3,0,0,16,5,0,0,80,0,0,0,64,0,0,0,28,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,246,2,0,180,5,0,0,64,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,246,2,0,220,1,0,0,186,2,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,246,2,0,92,0,0,0,174,4,0,0,80,0,0,0,24,0,0,0,22,0,0,0,72,0,0,0,20,0,0,0,64,0,0,0,4,0,0,0,2,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,246,2,0,102,2,0,0,156,0,0,0,80,0,0,0,14,0,0,0,18,0,0,0,8,0,0,0,16,0,0,0,68,0,0,0,8,0,0,0,6,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,247,2,0,166,5,0,0,168,3,0,0,80,0,0,0,20,0,0,0,18,0,0,0,12,0,0,0,14,0,0,0,78,0,0,0,16,0,0,0,10,0,0,0,26,0,0,0,24,0,0,0,22,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,247,2,0,208,3,0,0,132,2,0,0,80,0,0,0,42,0,0,0,52,0,0,0,48,0,0,0,32,0,0,0,54,0,0,0,34,0,0,0,30,0,0,0,40,0,0,0,38,0,0,0,36,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,247,2,0,130,0,0,0,94,2,0,0,80,0,0,0,18,0,0,0,2,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,247,2,0,46,0,0,0,226,2,0,0,80,0,0,0,20,0,0,0,6,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,247,2,0,228,3,0,0,192,6,0,0,80,0,0,0,14,0,0,0,16,0,0,0,32,0,0,0,250,0,0,0,128,0,0,0,6,0,0,0,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,247,2,0,182,4,0,0,164,2,0,0,80,0,0,0,10,0,0,0,8,0,0,0,30,0,0,0,164,0,0,0,204,0,0,0,4,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,247,2,0,182,4,0,0,30,0,0,0,80,0,0,0,12,0,0,0,4,0,0,0,16,0,0,0,126,0,0,0,108,0,0,0,12,0,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,247,2,0,182,4,0,0,38,6,0,0,80,0,0,0,2,0,0,0,6,0,0,0,22,0,0,0,210,0,0,0,152,0,0,0,10,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,247,2,0,182,4,0,0,150,5,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,247,2,0,208,5,0,0,204,2,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,248,2,0,182,4,0,0,14,4,0,0,80,0,0,0,148,0,0,0,40,0,0,0,6,0,0,0,18,0,0,0,184,0,0,0,86,0,0,0,22,1,0,0,100,0,0,0,252,0,0,0,52,0,0,0,68,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,248,2,0,126,3,0,0,234,3,0,0,80,0,0,0,10,1,0,0,116,0,0,0,56,1,0,0,140,0,0,0,176,0,0,0,74,0,0,0,22,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,88,248,2,0,234,4,0,0,212,4,0,0,200,255,255,255,200,255,255,255,88,248,2,0,4,1,0,0,120,2,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,104,248,2,0,76,3,0,0,62,6,0,0,196,255,255,255,196,255,255,255,104,248,2,0,150,4,0,0,238,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,248,2,0,44,2,0,0,22,4,0,0,50,0,0,0,180,0,0,0,156,0,0,0,36,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,248,2,0,182,4,0,0,140,0,0,0,80,0,0,0,2,0,0,0,6,0,0,0,22,0,0,0,210,0,0,0,152,0,0,0,10,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,248,2,0,182,4,0,0,152,6,0,0,80,0,0,0,2,0,0,0,6,0,0,0,22,0,0,0,210,0,0,0,152,0,0,0,10,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,248,2,0,194,5,0,0,46,7,0,0,58,0,0,0,176,0,0,0,8,0,0,0,8,0,0,0,162,0,0,0,180,0,0,0,158,0,0,0,214,0,0,0,40,0,0,0,148,0,0,0,122,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,248,2,0,224,0,0,0,48,5,0,0,102,0,0,0,76,0,0,0,30,0,0,0,4,0,0,0,60,0,0,0,66,0,0,0,172,0,0,0,20,0,0,0,202,0,0,0,86,0,0,0,182,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,248,2,0,104,5,0,0,144,2,0,0,58,0,0,0,176,0,0,0,6,0,0,0,14,0,0,0,162,0,0,0,180,0,0,0,158,0,0,0,196,0,0,0,40,0,0,0,102,0,0,0,122,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,208,248,2,0,156,4,0,0,246,1,0,0,148,255,255,255,148,255,255,255,208,248,2,0,62,4,0,0,74,6,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,249,2,0,194,3,0,0,6,5,0,0,252,255,255,255,252,255,255,255,0,249,2,0,252,0,0,0,98,6,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,24,249,2,0,92,3,0,0,52,5,0,0,252,255,255,255,252,255,255,255,24,249,2,0,78,4,0,0,24,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,48,249,2,0,90,2,0,0,102,7,0,0,248,255,255,255,248,255,255,255,48,249,2,0,174,6,0,0,148,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,72,249,2,0,58,6,0,0,44,3,0,0,248,255,255,255,248,255,255,255,72,249,2,0,114,6,0,0,106,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,249,2,0,36,7,0,0,30,6,0,0,240,0,0,0,162,0,0,0,12,0,0,0,16,0,0,0,218,0,0,0,180,0,0,0,158,0,0,0,182,0,0,0,40,0,0,0,50,1,0,0,122,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,249,2,0,42,3,0,0,40,1,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,249,2,0,128,3,0,0,188,4,0,0,22,0,0,0,76,0,0,0,30,0,0,0,4,0,0,0,222,0,0,0,66,0,0,0,172,0,0,0,20,0,0,0,202,0,0,0,86,0,0,0,34,0,0,0,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,249,2,0,184,2,0,0,170,6,0,0,194,0,0,0,176,0,0,0,6,0,0,0,14,0,0,0,10,0,0,0,180,0,0,0,158,0,0,0,196,0,0,0,40,0,0,0,102,0,0,0,178,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,249,2,0,98,3,0,0,126,4,0,0,80,0,0,0,46,0,0,0,134,0,0,0,202,0,0,0,78,0,0,0,42,0,0,0,24,0,0,0,94,0,0,0,228,0,0,0,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,249,2,0,126,2,0,0,102,0,0,0,80,0,0,0,16,0,0,0,132,0,0,0,132,0,0,0,234,0,0,0,140,0,0,0,34,0,0,0,242,0,0,0,196,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,250,2,0,70,7,0,0,138,2,0,0,80,0,0,0,12,0,0,0,106,0,0,0,190,0,0,0,188,0,0,0,218,0,0,0,118,0,0,0,62,0,0,0,128,0,0,0,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,250,2,0,250,5,0,0,224,6,0,0,80,0,0,0,184,0,0,0,186,0,0,0,164,0,0,0,72,0,0,0,4,0,0,0,226,0,0,0,118,0,0,0,62,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,250,2,0,32,4,0,0,118,5,0,0,60,0,0,0,76,0,0,0,30,0,0,0,4,0,0,0,60,0,0,0,66,0,0,0,172,0,0,0,176,0,0,0,120,0,0,0,30,1,0,0,182,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,250,2,0,20,0,0,0,26,5,0,0,104,0,0,0,176,0,0,0,6,0,0,0,14,0,0,0,162,0,0,0,180,0,0,0,158,0,0,0,80,0,0,0,18,0,0,0,166,0,0,0,122,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,250,2,0,32,0,0,0,158,0,0,0,248,0,0,0,50,0,0,0,96,6,0,0,80,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,250,2,0,186,1,0,0,236,2,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,250,2,0,92,0,0,0,56,0,0,0,60,0,0,0,210,0,0,0,234,5,0,0,110,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,250,2,0,168,0,0,0,144,0,0,0,250,0,0,0,120,0,0,0,204,0,0,0,228,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,250,2,0,130,3,0,0,18,4,0,0,106,2,0,0,138,4,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,250,2,0,130,3,0,0,216,4,0,0,106,2,0,0,138,4,0,0,8,0,0,0,10,0,0,0,6,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,251,2,0,54,7,0,0,252,4,0,0,164,0,0,0,28,0,0,0,58,0,0,0,248,0,0,0,130,0,0,0,246,0,0,0,92,0,0,0,192,0,0,0,74,1,0,0,134,3,0,0,150,0,0,0,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,251,2,0,150,0,0,0,18,0,0,0,74,2,0,0,82,6,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,251,2,0,56,0,0,0,62,0,0,0,116,1,0,0,164,3,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,251,2,0,76,0,0,0,250,2,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,251,2,0,32,7,0,0,240,0,0,0,98,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,251,2,0,154,1,0,0,50,6,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,116,0,0,0,222,6,0,0,2,0,0,0,2,0,0,0,2,0,0,0,168,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,251,2,0,226,1,0,0,78,7,0,0,66,0,0,0,246,0,0,0,70,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,251,2,0,118,6,0,0,210,1,0,0,98,0,0,0,246,0,0,0,70,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,251,2,0,240,5,0,0,226,3,0,0,224,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,251,2,0,42,4,0,0,14,3,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,251,2,0,68,5,0,0,254,3,0,0,54,0,0,0,56,0,0,0,180,0,0,0,168,0,0,0,44,0,0,0,158,0,0,0,38,0,0,0,164,0,0,0,146,0,0,0,180,0,0,0,24,0,0,0,156,0,0,0,84,0,0,0,98,0,0,0,116,0,0,0,222,6,0,0,254,0,0,0,36,0,0,0,6,0,0,0,168,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,251,2,0,166,0,0,0,48,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,252,2,0,2,0,0,0,62,0,0,0,46,2,0,0,54,6,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,252,2,0,166,0,0,0,48,0,0,0,132,1,0,0,212,3,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,252,2,0,14,0,0,0,62,0,0,0,86,5,0,0,158,4,0,0,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,252,2,0,152,3,0,0,130,5,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,252,2,0,60,2,0,0,58,1,0,0,204,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,252,2,0,88,3,0,0,244,1,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,252,2,0,188,0,0,0,240,6,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,246,0,0,0,92,0,0,0,192,0,0,0,74,1,0,0,134,3,0,0,150,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,252,2,0,38,1,0,0,108,2,0,0,80,0,0,0,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,252,2,0,142,4,0,0,248,5,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,252,2,0,168,2,0,0,146,4,0,0,2,0,0,0,66,0,0,0,90,0,0,0,246,0,0,0,48,0,0,0,246,0,0,0,92,0,0,0,192,0,0,0,74,1,0,0,134,3,0,0,150,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,252,2,0,2,0,0,0,2,0,0,0,2,0,0,0,182,1,0,0,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,252,2,0,16,4,0,0,72,7,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,252,2,0,8,1,0,0,68,7,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,252,2,0,12,5,0,0,6,3,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,252,2,0,12,1,0,0,48,2,0,0,62,0,0,0,74,0,0,0,164,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,252,2,0,102,3,0,0,76,6,0,0,156,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,252,2,0,56,5,0,0,108,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,252,2,0,248,4,0,0,18,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,252,2,0,90,3,0,0,6,2,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,253,2,0,90,1,0,0,16,2,0,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,253,2,0,192,1,0,0,108,6,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,253,2,0,106,7,0,0,4,6,0,0,218,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,2,0,236,3,0,0,4,2,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,253,2,0,204,6,0,0,58,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,253,2,0,84,3,0,0,0,2,0,0,128,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,253,2,0,46,5,0,0,26,7,0,0,202,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,253,2,0,8,0,0,0,158,2,0,0,198,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,2,0,200,1,0,0,232,3,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,253,2,0,234,6,0,0,192,4,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,253,2,0,16,6,0,0,134,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,2,0,206,1,0,0,176,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,253,2,0,126,1,0,0,42,6,0,0,230,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,253,2,0,222,3,0,0,242,5,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,253,2,0,150,2,0,0,204,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,253,2,0,94,6,0,0,50,1,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,2,0,16,1,0,0,62,2,0,0,70,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,254,2,0,122,3,0,0,182,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,254,2,0,18,1,0,0,66,2,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,254,2,0,142,3,0,0,132,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,254,2,0,70,6,0,0,124,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,254,2,0,228,2,0,0,250,3,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,254,2,0,178,2,0,0,118,4,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,254,2,0,2,3,0,0,56,4,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,254,2,0,52,0,0,0,254,1,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,254,2,0,100,7,0,0,44,1,0,0,20,0,0,0,20,1,0,0,112,0,0,0,210,0,0,0,202,0,0,0,16,0,0,0,232,0,0,0,218,0,0,0,112,0,0,0,24,0,0,0,144,0,0,0,82,0,0,0,160,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,254,2,0,164,5,0,0,18,7,0,0,20,0,0,0,20,1,0,0,112,0,0,0,52,0,0,0,104,0,0,0,78,0,0,0,232,0,0,0,218,0,0,0,112,0,0,0,24,0,0,0,144,0,0,0,82,0,0,0,160,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,254,2,0,182,3,0,0,212,1,0,0,162,0,0,0,38,0,0,0,24,0,0,0,30,0,0,0,188,0,0,0,192,0,0,0,232,0,0,0,218,0,0,0,112,0,0,0,24,0,0,0,144,0,0,0,82,0,0,0,160,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,254,2,0,50,3,0,0,20,5,0,0,228,0,0,0,56,0,0,0,130,0,0,0,146], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+174088);
  /* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+184328);
  /* memory initializer */ allocate([2,0,0,0,232,247,2,0,2,0,0,0,96,250,2,0,2,0,0,0,88,198,2,0,208,228,2,0,0,0,0,0,2,0,0,0,232,247,2,0,2,0,0,0,96,250,2,0,2,0,0,0,0,0,0,0,232,228,2,0,0,0,0,0,16,229,2,0,0,0,0,0,56,229,2,0,24,249,2,0,0,0,0,0,0,0,0,0,128,229,2,0,72,249,2,0,0,0,0,0,0,0,0,0,200,229,2,0,136,249,2,0,0,0,0,0,0,0,0,0,232,229,2,0,200,247,2,0,0,0,0,0,0,0,0,0,16,230,2,0,200,247,2,0,0,0,0,0,0,0,0,0,56,230,2,0,192,248,2,0,0,0,0,0,0,0,0,0,128,230,2,0,0,0,0,0,184,230,2,0,0,0,0,0,240,230,2,0,0,0,0,0,16,231,2,0,72,249,2,0,0,0,0,0,0,0,0,0,64,231,2,0,0,0,0,0,96,231,2,0,0,0,0,0,128,231,2,0,0,0,0,0,160,231,2,0,88,198,2,0,184,231,2,0,0,0,0,0,1,0,0,0,64,245,2,0,3,244,255,255,88,198,2,0,232,231,2,0,0,0,0,0,1,0,0,0,80,245,2,0,3,244,255,255,88,198,2,0,24,232,2,0,0,0,0,0,1,0,0,0,64,245,2,0,3,244,255,255,88,198,2,0,72,232,2,0,0,0,0,0,1,0,0,0,80,245,2,0,3,244,255,255,0,0,0,0,120,232,2,0,192,248,2,0,0,0,0,0,0,0,0,0,168,232,2,0,88,244,2,0,0,0,0,0,0,0,0,0,192,232,2,0,0,0,0,0,216,232,2,0,200,248,2,0,0,0,0,0,0,0,0,0,240,232,2,0,184,248,2,0,0,0,0,0,0,0,0,0,16,233,2,0,192,248,2,0,0,0,0,0,0,0,0,0,48,233,2,0,0,0,0,0,80,233,2,0,0,0,0,0,112,233,2,0,0,0,0,0,144,233,2,0,88,198,2,0,176,233,2,0,0,0,0,0,2,0,0,0,232,247,2,0,2,0,0,0,88,250,2,0,2,0,0,0,88,198,2,0,208,233,2,0,0,0,0,0,2,0,0,0,232,247,2,0,2,0,0,0,88,250,2,0,2,0,0,0,88,198,2,0,240,233,2,0,0,0,0,0,2,0,0,0,232,247,2,0,2,0,0,0,88,250,2,0,2,0,0,0,88,198,2,0,16,234,2,0,0,0,0,0,2,0,0,0,232,247,2,0,2,0,0,0,88,250,2,0,2,0,0,0,0,0,0,0,48,234,2,0,0,0,0,0,72,234,2,0,0,0,0,0,96,234,2,0,0,0,0,0,120,234,2,0,184,248,2,0,0,0,0,0,0,0,0,0,144,234,2,0,192,248,2,0,0,0,0,0,0,0,0,0,168,234,2,0,0,0,0,0,192,234,2,0,168,250,2,0,0,0,0,0,0,0,0,0,216,234,2,0,0,0,0,0,240,234,2,0,152,1,3,0,0,0,0,0,0,0,0,0,0,235,2,0,168,250,2,0,0,0,0,0,0,0,0,0,16,235,2,0,168,250,2,0,0,0,0,0,0,0,0,0,32,235,2,0,64,251,2,0,0,0,0,0,0,0,0,0,72,235,2,0,48,251,2,0,0,0,0,0,0,0,0,0,112,235,2,0,48,251,2,0,0,0,0,0,0,0,0,0,152,235,2,0,32,251,2,0,0,0,0,0,0,0,0,0,192,235,2,0,64,251,2,0,0,0,0,0,0,0,0,0,232,235,2,0,64,251,2,0,0,0,0,0,0,0,0,0,16,236,2,0,48,244,2,0,0,0,0,0,48,198,2,0,56,236,2,0,0,0,0,0,64,236,2,0,96,252,2,0,0,0,0,0,0,0,0,0,80,236,2,0,128,1,3,0,0,0,0,0,0,0,0,0,96,236,2,0,8,252,2,0,0,0,0,0,0,0,0,0,112,236,2,0,152,1,3,0,0,0,0,0,0,0,0,0,128,236,2,0,160,252,2,0,0,0,0,0,0,0,0,0,144,236,2,0,0,0,0,0,160,236,2,0,248,255,2,0,0,0,0,0,0,0,0,0,176,236,2,0,248,255,2,0,0,0,0,0,0,0,0,0,192,236,2,0,128,253,2,0,0,0,0,0,0,0,0,0,208,236,2,0,0,0,0,0,224,236,2,0,168,251,2,0,0,0,0,0,0,0,0,0,240,236,2,0,152,1,3,0,0,0,0,0,0,0,0,0,0,237,2,0,0,0,0,0,16,237,2,0,8,252,2,0,0,0,0,0,0,0,0,0,32,237,2,0,8,252,2,0,0,0,0,0,0,0,0,0,48,237,2,0,152,1,3,0,0,0,0,0,0,0,0,0,64,237,2,0,160,252,2,0,0,0,0,0,0,0,0,0,80,237,2,0,152,1,3,0,0,0,0,0,0,0,0,0,96,237,2,0,0,0,0,0,112,237,2,0,128,253,2,0,0,0,0,0,0,0,0,0,128,237,2,0,152,1,3,0,0,0,0,0,0,0,0,0,144,237,2,0,96,252,2,0,0,0,0,0,0,0,0,0,160,237,2,0,0,0,0,0,176,237,2,0,0,0,0,0,192,237,2,0,160,252,2,0,0,0,0,0,0,0,0,0,208,237,2,0,0,0,0,0,224,237,2,0,0,0,0,0,240,237,2,0,160,252,2,0,0,0,0,0,0,0,0,0,248,237,2,0,152,1,3,0,0,0,0,0,0,0,0,0,0,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,8,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,16,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,24,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,32,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,40,238,2,0,0,0,0,0,48,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,56,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,64,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,72,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,80,238,2,0,0,0,0,0,88,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,96,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,104,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,112,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,120,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,128,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,136,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,144,238,2,0,160,252,2,0,0,0,0,0,0,0,0,0,152,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,160,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,168,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,176,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,184,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,192,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,200,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,208,238,2,0,152,1,3,0,0,0,0,0,0,0,0,0,216,238,2,0,144,1,3,0,0,0,0,0,0,0,0,0,248,238,2,0,136,254,2,0,0,0,0,0,0,0,0,0,24,239,2,0,136,254,2,0,0,0,0,0,0,0,0,0,56,239,2,0,144,1,3,0,0,0,0,0,0,0,0,0,88,239,2,0,144,1,3,0,0,0,0,0,0,0,0,0,120,239,2,0,144,1,3,0,0,0,0,0,0,0,0,0,152,239,2,0,144,1,3,0,0,0,0,0,0,0,0,0,176,239,2,0,144,1,3,0,0,0,0,0,0,0,0,0,200,239,2,0,144,1,3,0,0,0,0,0,0,0,0,0,224,239,2,0,128,0,3,0,0,0,0,0,0,0,0,0,248,239,2,0,24,0,3,0,0,0,0,0,0,0,0,0,16,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,40,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,64,240,2,0,152,1,3,0,0,0,0,0,0,0,0,0,88,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,112,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,136,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,160,240,2,0,168,254,2,0,0,0,0,0,0,0,0,0,184,240,2,0,56,253,2,0,0,0,0,0,0,0,0,0,208,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,232,240,2,0,144,1,3,0,0,0,0,0,0,0,0,0,0,241,2,0,160,1,3,0,0,0,0,0,0,0,0,0,24,241,2,0,144,1,3,0,0,0,0,0,0,0,0,0,48,241,2,0,56,253,2,0,0,0,0,0,0,0,0,0,72,241,2,0,136,2,3,0,0,0,0,0,0,0,0,0,96,241,2,0,0,0,0,0,120,241,2,0,8,0,3,0,0,0,0,0,0,0,0,0,144,241,2,0,64,0,3,0,0,0,0,0,0,0,0,0,168,241,2,0,144,1,3,0,0,0,0,0,0,0,0,0,192,241,2,0,192,252,2,0,0,0,0,0,0,0,0,0,216,241,2,0,72,2,3,0,0,0,0,0,0,0,0,0,232,241,2,0,168,251,2,0,0,0,0,0,0,0,0,0,248,241,2,0,8,252,2,0,0,0,0,0,0,0,0,0,8,242,2,0,136,2,3,0,0,0,0,0,0,0,0,0,24,242,2,0,248,255,2,0,0,0,0,0,0,0,0,0,40,242,2,0,248,255,2,0,0,0,0,0,0,0,0,0,56,242,2,0,8,0,3,0,0,0,0,0,0,0,0,0,72,242,2,0,96,252,2,0,0,0,0,0,0,0,0,0,88,242,2,0,152,252,2,0,0,0,0,0,0,0,0,0,104,242,2,0,152,252,2,0,0,0,0,0,0,0,0,0,120,242,2,0,184,252,2,0,0,0,0,0,0,0,0,0,136,242,2,0,184,252,2,0,0,0,0,0,0,0,0,0,152,242,2,0,128,253,2,0,0,0,0,0,0,0,0,0,168,242,2,0,168,1,3,0,0,0,0,0,0,0,0,0,184,242,2,0,168,1,3,0,0,0,0,0,0,0,0,0,200,242,2,0,8,0,3,0,0,0,0,0,0,0,0,0,216,242,2,0,232,1,3,0,0,0,0,0,0,0,0,0,232,242,2,0,152,1,3,0,0,0,0,0,0,0,0,0,248,242,2,0,8,252,2,0,0,0,0,0,0,0,0,0,8,243,2,0,0,0,0,0,24,243,2,0,0,0,0,0,40,243,2,0,0,0,0,0,56,243,2,0,192,252,2,0,0,0,0,0,0,0,0,0,72,243,2,0,168,255,2,0,0,0,0,0,0,0,0,0,88,243,2,0,168,1,3,0,0,0,0,0,0,0,0,0,104,243,2,0,168,251,2,0,0,0,0,0,0,0,0,0,120,243,2,0,72,2,3,0,0,0,0,0,0,0,0,0,136,243,2,0,72,2,3,0,0,0,0,0,0,0,0,0,152,243,2,0,72,2,3,0,0,0,0,0,0,0,0,0,168,243,2,0,72,2,3,0,0,0,0,0,0,0,0,0,184,243,2,0,216,1,3,0,0,0,0,0,0,0,0,0,200,243,2,0,152,1,3,0,0,0,0,0,0,0,0,0,216,243,2,0,96,252,2,0,0,0,0,0,0,0,0,0,232,243,2,0,184,252,2,0,0,0,0,0,0,0,0,0,248,243,2,0,248,255,2,0,0,0,0,0,0,0,0,0,8,244,2,0,128,253,2,0,0,0,0,0,0,0,0,0,24,244,2,0,56,0,0,0,0,0,0,0,24,249,2,0,92,3,0,0,52,5,0,0,200,255,255,255,200,255,255,255,24,249,2,0,78,4,0,0,24,3,0,0,60,0,0,0,0,0,0,0,72,249,2,0,58,6,0,0,44,3,0,0,196,255,255,255,196,255,255,255,72,249,2,0,114,6,0,0,106,5,0,0,108,0,0,0,0,0,0,0,72,249,2,0,58,6,0,0,44,3,0,0,148,255,255,255,148,255,255,255,72,249,2,0,114,6,0,0,106,5,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,4,5,6,7,8,10,12,14,16,20,24,28,32,0,0,0,69,55,46,40,35,29,23,20,19,15,11,10,9,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,2,0,1,64,32,24,19,16,12,11,10,8,6,5,4,3,2,1,0,255,3,255,3,255,1,255,1,255,3,255,3,0,2,255,3,0,0,0,2,0,2,0,8,0,10,0,12,0,1,0,4,31,1,2,0,0,0,0,0,1,0,1,30,129,128,129,158,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,255,3,0,0,255,1,0,0,255,1,0,0,255,3,0,0,255,2,0,0,0,2,0,0,255,3,0,0,0,4,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,208,63,0,0,0,0,0,0,240,63,0,1,2,0,1,2,0,0,3,4,5,3,4,5,0,0,6,7,8,6,7,8,18,19,20,18,19,20,0,0,21,22,23,21,22,23,0,0,24,25,26,24,25,26,0,0,0,0,0,1,2,8,9,10,16,17,18,0,0,0,0,0,0,0,43,160,88,76,158,17,154,63,69,244,146,134,33,76,160,63,51,128,64,33,211,143,163,63,38,140,205,130,106,207,166,63,227,103,148,248,25,165,214,63,232,162,139,46,186,104,220,63,234,77,111,122,211,251,224,63,131,52,72,131,52,8,228,63,0,1,2,9,10,11,0,0,3,4,5,12,13,14,0,0,6,7,8,15,16,17,18,19,20,27,28,29,0,0,21,22,23,30,31,32,0,0,24,25,26,33,34,35,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,32,64,0,0,0,0,0,0,34,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,40,64,0,0,0,0,0,0,40,64,0,0,0,0,0,0,46,64,0,0,0,0,0,0,46,64,218,4,0,0,176,1,0,0,184,5,0,0,48,6,0,0,184,5,0,0,248,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,1,2,0,0,3,4,5,3,4,5,0,0,6,7,8,6,7,8,0,0,0,1,2,9,10,11,0,0,3,4,5,12,13,14,0,0,6,7,8,15,16,17,0,0,242,6,0,0,126,5,0,0,30,4,0,0,202,1,0,0,30,4,0,0,100,3,0,0,82,73,70,70,0,0,0,0,87,65,86,69,102,109,116,32,16,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,4,0,16,0,100,97,116,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,0,4,187,64,0,180,74,205,33,254,56,0,0,184,0,76,205,33,0,0,0,0,0,63,207,243,252,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,3,7,11,12,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,3,5,6,7,0,0,168,111,2,0,0,0,0,0,174,0,0,0,0,0,0,0,168,26,2,0,104,111,2,0,1,0,0,0,244,0,0,0,0,0,0,0,80,50,2,0,48,111,2,0,1,0,0,0,138,0,0,0,0,0,0,0,232,128,2,0,208,110,2,0,1,0,0,0,108,0,0,0,0,0,0,0,160,147,2,0,176,110,2,0,0,0,0,0,244,0,0,0,0,0,0,0,80,50,2,0,88,110,2,0,1,0,0,0,220,0,0,0,0,0,0,0,56,133,2,0,8,110,2,0,0,0,0,0,36,0,0,0,0,0,0,0,248,20,2,0,136,109,2,0,0,0,0,0,110,0,0,0,0,0,0,0,56,241,1,0,56,108,2,0,0,0,0,0,144,0,0,0,0,0,0,0,216,164,2,0,96,107,2,0,1,0,0,0,144,0,0,0,0,0,0,0,216,164,2,0,248,106,2,0,1,0,0,0,144,0,0,0,0,0,0,0,216,164,2,0,192,106,2,0,1,0,0,0,136,0,0,0,0,0,0,0,128,60,2,0,64,106,2,0,0,0,0,0,106,0,0,0,0,0,0,0,16,54,2,0,232,105,2,0,1,0,0,0,208,0,0,0,0,0,0,0,184,168,2,0,200,105,2,0,1,0,0,0,158,0,0,0,0,0,0,0,16,113,2,0,152,105,2,0,1,0,0,0,192,0,0,0,0,0,0,0,48,176,2,0,80,105,2,0,1,0,0,0,180,0,0,0,0,0,0,0,136,136,2,0,208,104,2,0,1,0,0,0,180,0,0,0,0,0,0,0,136,136,2,0,168,103,2,0,1,0,0,0,184,0,0,0,0,0,0,0,160,37,2,0,8,103,2,0,0,0,0,0,184,0,0,0,0,0,0,0,160,37,2,0,224,122,2,0,1,0,0,0,10,0,0,0,0,0,0,0,208,124,2,0,88,101,2,0,1,0,0,0,168,0,0,0,0,0,0,0,208,150,2,0,56,101,2,0,1,0,0,0,162,0,0,0,0,0,0,0,128,31,2,0,192,100,2,0,0,0,0,0,162,0,0,0,0,0,0,0,128,31,2,0,120,100,2,0,1,0,0,0,86,0,0,0,0,0,0,0,8,153,2,0,24,100,2,0,1,0,0,0,88,0,0,0,0,0,0,0,144,83,2,0,248,99,2,0,0,0,0,0,88,0,0,0,0,0,0,0,144,83,2,0,120,99,2,0,1,0,0,0,82,0,0,0,0,0,0,0,96,217,1,0,32,99,2,0,1,0,0,0,142,0,0,0,0,0,0,0,64,160,2,0,16,98,2,0,1,0,0,0,148,0,0,0,0,0,0,0,16,144,2,0,128,97,2,0,0,0,0,0,252,0,0,0,0,0,0,0,248,157,2,0,96,97,2,0,0,0,0,0,170,0,0,0,0,0,0,0,168,120,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,32,6,183,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,40,6,183,1,116,210,176,1,120,210,176,1,124,210,176,1,96,210,176,1,100,210,176,1,104,210,176,1,108,210,176,1,48,6,183,1,116,210,176,1,120,210,176,1,124,210,176,1,255,255,255,255,0,0,0,0,56,40,45,10,31,6,25,28,2,7,6,7,0,0,0,0,113,80,90,10,31,6,25,28,2,7,6,7,0,0,0,0,56,40,45,10,127,6,100,112,2,1,6,7,0,0,0,0,97,80,82,15,25,6,25,25,2,13,11,12,0,0,0,0,0,8,0,16,0,64,0,64,40,40,80,80,40,40,80,80,44,40,45,41,42,46,30,41,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,255,0,0,0,16,48,255,0,0,255,32,0,0,0,0,0,40,78,2,0,232,41,2,0,37,0,0,0,32,78,2,0,168,40,2,0,38,0,0,0,8,78,2,0,0,40,2,0,39,0,0,0,0,78,2,0,88,38,2,0,40,0,0,0,104,77,2,0,232,35,2,0,41,0,0,0,240,76,2,0,176,33,2,0,42,0,0,0,208,76,2,0,8,33,2,0,43,0,0,0,152,76,2,0,208,31,2,0,44,0,0,0,144,76,2,0,0,31,2,0,45,0,0,0,112,76,2,0,128,29,2,0,46,0,0,0,104,76,2,0,80,28,2,0,47,0,0,0,96,76,2,0,16,27,2,0,48,0,0,0,136,82,2,0,64,130,2,0,74,0,0,0,144,217,1,0,144,217,1,0,30,0,0,0,64,222,1,0,64,222,1,0,31,0,0,0,136,9,2,0,136,9,2,0,32,0,0,0,152,227,1,0,152,227,1,0,33,0,0,0,88,11,2,0,88,11,2,0,34,0,0,0,184,246,1,0,184,246,1,0,35,0,0,0,80,248,1,0,80,248,1,0,36,0,0,0,112,82,2,0,184,159,2,0,72,0,0,0,128,99,2,0,0,159,2,0,71,0,0,0,128,100,2,0,48,158,2,0,73,0,0,0,0,0,0,0,0,13,2,0,0,13,2,0,21,0,0,0,136,234,1,0,136,234,1,0,22,0,0,0,224,7,2,0,224,7,2,0,23,0,0,0,56,4,2,0,56,4,2,0,24,0,0,0,224,2,2,0,224,2,2,0,25,0,0,0,248,1,2,0,248,1,2,0,26,0,0,0,232,254,1,0,232,254,1,0,27,0,0,0,248,252,1,0,248,252,1,0,28,0,0,0,152,251,1,0,152,251,1,0,29,0,0,0,56,82,2,0,40,171,2,0,69,0,0,0,48,82,2,0,120,170,2,0,70,0,0,0,176,81,2,0,232,169,2,0,66,0,0,0,240,235,1,0,240,235,1,0,11,0,0,0,120,223,1,0,120,223,1,0,12,0,0,0,88,5,2,0,88,5,2,0,13,0,0,0,48,235,1,0,48,235,1,0,14,0,0,0,48,233,1,0,48,233,1,0,15,0,0,0,224,218,1,0,224,218,1,0,16,0,0,0,96,229,1,0,96,229,1,0,17,0,0,0,216,255,1,0,216,255,1,0,18,0,0,0,104,241,1,0,104,241,1,0,19,0,0,0,176,240,1,0,176,240,1,0,20,0,0,0,248,80,2,0,160,173,2,0,67,0,0,0,240,80,2,0,16,173,2,0,68,0,0,0,200,80,2,0,112,214,1,0,63,0,0,0,192,80,2,0,128,25,2,0,1,0,0,0,120,80,2,0,208,23,2,0,2,0,0,0,112,80,2,0,216,21,2,0,3,0,0,0,104,80,2,0,40,20,2,0,4,0,0,0,88,80,2,0,216,18,2,0,5,0,0,0,80,80,2,0,168,17,2,0,6,0,0,0,144,79,2,0,192,16,2,0,7,0,0,0,104,78,2,0,232,15,2,0,8,0,0,0,96,78,2,0,248,14,2,0,9,0,0,0,88,78,2,0,216,13,2,0,10,0,0,0,80,78,2,0,88,172,2,0,64,0,0,0,48,78,2,0,200,215,1,0,65,0,0,0,16,103,2,0,224,174,2,0,51,0,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,234,1,0,0,110,0,0,0,164,6,0,0,116,7,0,0,26,14,0,0,50,11,0,0,204,5,0,0,134,10,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,154,3,0,0,60,14,0,0,124,0,0,0,252,11,0,0,246,13,0,0,64,7,0,0,36,12,0,0,6,12,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,246,7,0,0,70,14,0,0,222,6,0,0,36,13,0,0,70,5,0,0,86,1,0,0,92,13,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,250,3,0,0,164,7,0,0,180,10,0,0,104,0,0,0,52,2,0,0,40,2,0,0,130,11,0,0,192,10,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,78,3,0,0,94,3,0,0,112,1,0,0,252,6,0,0,90,2,0,0,46,9,0,0,30,6,0,0,24,13,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,82,8,0,0,108,8,0,0,64,0,0,0,48,4,0,0,244,13,0,0,144,13,0,0,236,11,0,0,118,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,12,14,0,0,176,7,0,0,220,10,0,0,164,9,0,0,214,5,0,0,224,8,0,0,234,8,0,0,122,7,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,130,13,0,0,158,5,0,0,180,0,0,0,208,1,0,0,218,5,0,0,150,6,0,0,36,8,0,0,20,9,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,232,8,0,0,28,2,0,0,154,13,0,0,134,11,0,0,184,4,0,0,212,6,0,0,68,7,0,0,128,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,168,1,0,0,98,0,0,0,184,9,0,0,136,1,0,0,22,0,0,0,76,2,0,0,74,13,0,0,110,2,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,138,1,0,0,0,8,0,0,66,3,0,0,242,0,0,0,234,11,0,0,236,13,0,0,126,11,0,0,240,1,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,88,9,0,0,96,7,0,0,74,5,0,0,46,7,0,0,18,7,0,0,100,5,0,0,2,10,0,0,94,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,150,0,0,0,84,0,0,0,238,6,0,0,10,5,0,0,176,6,0,0,158,12,0,0,202,10,0,0,138,12,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+194572);
  /* memory initializer */ allocate([200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,142,3,0,0,200,1,0,0,236,9,0,0,106,5,0,0,46,10,0,0,12,6,0,0,104,10,0,0,132,8,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,162,1,0,0,146,3,0,0,226,1,0,0,220,3,0,0,106,13,0,0,170,11,0,0,230,9,0,0,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,16,11,0,0,40,5,0,0,238,2,0,0,0,1,0,0,82,4,0,0,174,0,0,0,242,9,0,0,138,7,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,188,2,0,0,194,4,0,0,134,2,0,0,120,4,0,0,196,6,0,0,214,1,0,0,230,0,0,0,104,12,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,60,12,0,0,72,10,0,0,48,8,0,0,80,2,0,0,50,4,0,0,118,2,0,0,90,12,0,0,148,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,2,20,0,4,2,20,0,7,2,20,0,10,2,20,0,13,2,20,0,16,2,20,0,19,2,20,0,22,0,20,0,2,5,23,0,5,5,23,0,8,5,23,0,11,5,23,0,14,5,23,0,17,5,23,0,20,5,23,0,23,0,23,0,3,8,29,0,6,8,29,0,9,8,29,0,12,8,29,0,15,8,29,0,18,8,29,0,21,8,29,0,24,0,29,0,2,5,24,0,5,5,24,0,8,5,24,0,11,5,24,0,14,5,24,0,17,5,24,0,20,5,24,0,23,0,24,0,3,8,30,0,6,8,30,0,9,8,30,0,12,8,30,0,15,8,30,0,18,8,30,0,21,8,30,0,24,0,30,0,43,2,2,0,46,2,2,0,49,2,2,0,52,2,2,0,34,2,2,0,37,2,2,0,34,2,2,0,40,2,2,0,44,5,7,0,47,5,7,0,50,5,7,0,53,5,7,0,35,5,7,0,38,5,7,0,35,5,7,0,41,5,7,0,45,8,14,0,48,8,14,0,51,8,14,0,54,8,14,0,36,8,14,0,39,8,14,0,36,8,14,0,42,8,14,0,31,0,20,0,31,0,20,0,101,2,2,0,55,2,2,0,104,0,2,0,107,0,2,0,110,0,2,0,113,0,2,0,32,0,23,0,32,0,23,0,101,5,7,0,56,5,7,0,105,0,7,0,108,0,7,0,111,0,7,0,114,0,7,0,33,0,29,0,33,0,29,0,101,8,14,0,57,8,14,0,106,0,14,0,109,0,14,0,112,0,14,0,115,0,14,0,25,2,2,0,28,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,36,0,26,5,7,0,29,5,7,0,73,24,7,0,75,0,33,0,0,24,7,0,77,0,33,0,0,15,7,0,0,0,0,0,27,8,14,0,30,8,14,0,74,24,14,0,76,0,34,0,0,24,14,0,78,0,34,0,0,16,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,5,21,0,151,5,21,0,152,5,21,0,153,5,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,8,22,0,155,8,22,0,156,8,22,0,157,8,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,24,8,0,64,9,0,0,2,99,45,39,40,144,43,128,191,31,0,193,0,0,0,0,0,0,156,142,143,20,0,150,185,162,255,0,19,21,23,2,4,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,32,15,15,255,40,24,8,0,64,9,0,0,2,99,45,39,40,144,43,128,191,31,0,193,0,0,0,0,0,0,156,142,143,20,0,150,185,162,255,0,19,21,23,2,4,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,32,15,15,255,80,24,8,0,64,9,15,0,2,99,95,79,80,130,84,128,191,31,0,193,0,0,0,0,0,0,156,142,143,40,0,150,185,194,255,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,1,0,1,0,0,0,0,0,0,0,15,15,255,80,24,16,0,16,0,15,0,7,102,95,79,80,130,85,129,191,31,0,79,13,14,0,0,0,0,156,142,143,40,15,150,185,163,255,0,1,2,3,4,5,20,7,56,57,58,59,60,61,62,63,12,0,15,8,0,0,0,0,0,16,10,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,24,8,0,32,9,15,0,2,99,45,39,40,144,43,128,191,31,0,192,0,0,0,0,0,0,156,142,143,20,0,150,185,227,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,0,5,15,255,80,24,8,0,64,1,15,0,2,99,95,79,80,130,84,128,191,31,0,192,0,0,0,0,0,0,156,142,143,40,0,150,185,227,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,0,5,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,24,14,0,128,1,15,0,2,162,95,79,80,130,84,128,191,31,0,64,0,0,0,0,0,0,131,133,93,40,15,99,186,227,255,0,8,0,0,24,24,0,0,0,8,0,0,0,24,0,0,11,0,15,0,0,0,0,0,0,0,5,15,255,80,24,14,0,128,1,15,0,2,163,95,79,80,130,84,128,191,31,0,64,0,0,0,0,0,0,131,133,93,40,15,99,186,227,255,0,1,2,3,4,5,20,7,56,57,58,59,60,61,62,63,1,0,15,0,0,0,0,0,0,0,5,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,24,16,0,8,8,15,0,7,103,45,39,40,144,43,160,191,31,0,79,13,14,0,0,0,0,156,142,143,20,31,150,185,163,255,0,1,2,3,4,5,20,7,56,57,58,59,60,61,62,63,12,0,15,8,0,0,0,0,0,16,14,15,255,80,24,16,0,16,0,15,0,7,103,95,79,80,130,85,129,191,31,0,79,13,14,0,0,0,0,156,142,143,40,31,150,185,163,255,0,1,2,3,4,5,20,7,56,57,58,59,60,61,62,63,12,0,15,8,0,0,0,0,0,16,14,15,255,80,24,16,0,16,0,15,0,7,102,95,79,80,130,85,129,191,31,0,79,13,14,0,0,0,0,156,142,143,40,15,150,185,163,255,0,1,2,3,4,5,20,7,56,57,58,59,60,61,62,63,12,0,15,8,0,0,0,0,0,16,10,15,255,80,29,16,0,160,1,15,0,2,227,95,79,80,130,84,128,11,62,0,64,0,0,0,0,0,0,234,140,223,40,0,231,4,195,255,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,1,0,15,0,0,0,0,0,0,0,5,15,255,80,29,16,0,160,1,15,0,2,227,95,79,80,130,84,128,11,62,0,64,0,0,0,0,0,0,234,140,223,40,0,231,4,227,255,0,1,2,3,4,5,20,7,56,57,58,59,60,61,62,63,1,0,15,0,0,0,0,0,0,0,5,15,255,40,24,8,0,32,1,15,0,14,99,95,79,80,130,84,128,191,31,0,65,0,0,0,0,0,0,156,142,143,40,64,150,185,163,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,65,0,15,0,0,0,0,0,0,64,5,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,24,8,0,64,9,3,0,2,99,55,39,40,154,43,138,4,17,0,65,0,0,0,0,0,0,212,134,199,20,0,208,252,178,255,0,19,21,23,2,4,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,48,15,15,255,40,24,8,0,64,9,3,0,2,99,55,39,40,154,43,138,4,17,0,65,0,0,0,0,0,0,212,134,199,20,0,208,252,178,255,0,19,21,23,2,4,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,48,15,15,255,80,24,8,0,64,1,15,0,6,99,115,79,80,150,84,148,4,17,0,65,0,0,0,0,0,0,212,134,199,40,0,208,252,210,255,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,1,0,1,0,0,0,0,0,0,0,13,15,255,80,24,14,0,16,0,15,0,3,162,115,79,80,150,85,149,182,31,0,77,11,12,0,0,0,0,131,133,93,40,15,99,177,179,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,8,0,15,0,0,0,0,0,0,16,14,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,24,8,0,32,9,15,0,6,99,55,39,40,154,43,138,4,17,0,64,0,0,0,0,0,0,212,134,199,20,0,208,252,211,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,0,5,15,255,80,24,8,0,64,1,15,0,6,99,115,79,80,150,84,148,4,17,0,64,0,0,0,0,0,0,212,134,199,40,0,208,252,211,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,0,5,15,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,24,14,0,128,1,15,0,6,162,115,79,80,150,84,148,182,31,0,64,0,0,0,0,0,0,131,133,93,20,15,99,177,155,255,0,8,0,0,24,24,0,0,0,8,0,0,0,24,0,0,11,0,15,0,0,0,0,0,0,0,5,15,255,80,24,14,0,128,1,15,0,6,163,91,79,80,158,84,28,78,31,0,64,0,0,0,0,0,0,131,133,93,20,15,99,73,155,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,1,0,15,0,0,0,0,0,0,0,5,15,255,40,24,14,0,8,9,15,0,3,163,55,39,40,154,43,170,4,31,0,77,11,12,0,0,0,0,131,133,93,20,15,99,255,179,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,8,0,15,0,0,0,0,0,0,16,14,15,255,40,24,14,0,8,9,15,0,3,163,55,39,40,154,43,170,4,31,0,77,11,12,0,0,0,0,131,133,93,20,15,99,255,179,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,8,0,15,0,0,0,0,0,0,16,14,15,255,80,24,14,0,16,1,15,0,3,163,115,79,80,150,85,149,182,31,0,77,11,12,0,0,0,0,131,133,93,40,15,99,177,179,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,8,0,15,0,0,0,0,0,0,16,14,15,255,80,24,14,0,16,1,15,0,3,163,115,79,80,150,85,149,182,31,0,77,11,12,0,0,0,0,131,133,93,40,15,99,177,179,255,0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,8,0,15,0,0,0,0,0,0,16,14,15,255,0,0,0,0,0,0,0,0,232,208,2,0,48,0,0,0,255,255,15,0,0,0,0,7,4,2,255,14,0,0,0,0,80,210,2,0,48,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,79,83,66,111,120,32,45,32,84,104,101,32,68,79,83,32,69,109,117,108,97,116,111,114,0,0,0,0,0,0,0,68,79,83,66,111,120,32,68,101,118,101,108,111,112,109,101,110,116,32,84,101,97,109,0,4,3,4,3,0,0,0,0,0,0,0,0,0,0,0,0,27,1,27,1,27,1,240,1,49,2,33,2,0,0,0,120,50,3,64,3,0,3,0,121,51,4,35,4,0,0,0,122,52,5,36,5,0,0,0,123,53,6,37,6,0,0,0,124,54,7,94,7,30,7,0,125,55,8,38,8,0,0,0,126,56,9,42,9,0,0,0,127,57,10,40,10,0,0,0,128,48,11,41,11,0,0,0,129,45,12,95,12,31,12,0,130,61,13,43,13,0,0,0,131,8,14,8,14,127,14,240,14,9,15,0,15,0,148,0,0,113,16,81,16,17,16,0,16,119,17,87,17,23,17,0,17,101,18,69,18,5,18,0,18,114,19,82,19,18,19,0,19,116,20,84,20,20,20,0,20,121,21,89,21,25,21,0,21,117,22,85,22,21,22,0,22,105,23,73,23,9,23,0,23,111,24,79,24,15,24,0,24,112,25,80,25,16,25,0,25,91,26,123,26,27,26,240,26,93,27,125,27,29,27,240,27,13,28,13,28,10,28,0,0,0,0,0,0,0,0,0,0,97,30,65,30,1,30,0,30,115,31,83,31,19,31,0,31,100,32,68,32,4,32,0,32,102,33,70,33,6,33,0,33,103,34,71,34,7,34,0,34,104,35,72,35,8,35,0,35,106,36,74,36,10,36,0,36,107,37,75,37,11,37,0,37,108,38,76,38,12,38,0,38,59,39,58,39,0,0,240,39,39,40,34,40,0,0,240,40,96,41,126,41,0,0,240,41,0,0,0,0,0,0,0,0,92,43,124,43,28,43,240,43,122,44,90,44,26,44,0,44,120,45,88,45,24,45,0,45,99,46,67,46,3,46,0,46,118,47,86,47,22,47,0,47,98,48,66,48,2,48,0,48,110,49,78,49,14,49,0,49,109,50,77,50,13,50,0,50,44,51,60,51,0,0,240,51,46,52,62,52,0,0,240,52,47,53,63,53,0,0,240,53,0,0,0,0,0,0,0,0,42,55,42,55,0,150,240,55,0,0,0,0,0,0,0,0,32,57,32,57,32,57,32,57,0,0,0,0,0,0,0,0,0,59,0,84,0,94,0,104,0,60,0,85,0,95,0,105,0,61,0,86,0,96,0,106,0,62,0,87,0,97,0,107,0,63,0,88,0,98,0,108,0,64,0,89,0,99,0,109,0,65,0,90,0,100,0,110,0,66,0,91,0,101,0,111,0,67,0,92,0,102,0,112,0,68,0,93,0,103,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,55,71,0,119,7,0,0,72,56,72,0,141,8,0,0,73,57,73,0,132,9,0,45,74,45,74,0,142,240,74,0,75,52,75,0,115,4,0,240,76,53,76,0,143,5,0,0,77,54,77,0,116,6,0,43,78,43,78,0,144,240,78,0,79,49,79,0,117,1,0,0,80,50,80,0,145,2,0,0,81,51,81,0,118,3,0,0,82,48,82,0,146,0,0,0,83,46,83,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,86,124,86,0,0,0,0,0,133,0,135,0,137,0,139,0,134,0,136,0,138,0,140,208,212,2,0,48,0,0,0,255,63,255,31,255,15,255,7,255,3,255,1,255,0,127,0,63,0,31,0,255,1,255,0,255,48,127,248,127,248,255,252,0,0,0,64,0,96,0,112,0,120,0,124,0,126,0,127,128,127,0,124,0,108,0,70,0,6,0,3,0,3,0,0,128,213,2,0,5,0,0,0,208,213,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,255,7,0,0,255,15,0,0,255,23,0,0,255,31,0,0,255,39,0,0,255,47,0,0,255,55,0,0,255,63,0,0,255,71,0,0,255,79,0,0,255,87,0,0,255,95,0,0,255,103,0,0,255,111,0,0,255,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,0,0,0,0,2,1,1,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,248,3,248,2,232,3,232,2,0,0,0,0,0,0,0,0,144,152,2,0,144,143,2,0,112,134,2,0,216,125,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,40,44,8,31,6,25,28,2,7,6,7,0,0,0,0,113,80,88,16,31,6,25,28,2,7,6,7,0,0,0,0,56,40,44,8,127,6,100,112,2,1,6,7,0,0,0,0,113,80,88,16,63,6,50,56,2,3,6,7,0,0,0,0,0,8,0,16,0,64,0,64,40,40,80,80,40,40,80,80,44,40,45,41,42,46,30,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,32,186,202,1,32,187,202,1,32,188,202,1,32,189,202,1,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,21,0,42,42,42,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,21,0,42,42,42,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,21,0,42,42,42,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,21,0,42,42,42,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,1,0,0,0,254,255,255,255,252,255,255,255,8,0,0,0,240,255,255,255,32,0,0,0,64,0,0,0,128,255,255,255,150,255,255,255,255,255,255,255,2,0,0,0,252,255,255,255,8,0,0,0,16,0,0,0,224,255,255,255,64,0,0,0,128,255,255,255,165,0,0,0,255,255,255,255,2,0,0,0,4,0,0,0,248,255,255,255,16,0,0,0,224,255,255,255,192,255,255,255,128,0,0,0,105,255,255,255,1,0,0,0,254,255,255,255,4,0,0,0,248,255,255,255,240,255,255,255,32,0,0,0,192,255,255,255,128,0,0,0,90,0,0,0,255,255,0,0,255,255,255,255,255,255,0,0,255,255,255,255,255,255,0,0,255,255,255,255,0,0,0,0,0,0,0,0,56,40,44,6,31,6,25,28,2,7,6,7,0,0,0,0,113,80,90,12,31,6,25,28,2,7,6,7,0,0,0,0,56,40,43,6,127,6,100,112,2,1,38,7,0,0,0,0,113,80,86,12,63,6,50,56,2,3,38,7,0,0,0,0,0,8,0,16,0,64,0,64,40,40,80,80,40,40,80,80,44,40,45,41,42,46,30,41,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,42,0,42,42,42,0,0,21,0,0,63,0,42,21,0,42,63,42,0,21,42,0,63,42,42,21,42,42,63,0,21,0,0,21,42,0,63,0,0,63,42,42,21,0,42,21,42,42,63,0,42,63,42,0,21,21,0,21,63,0,63,21,0,63,63,42,21,21,42,21,63,42,63,21,42,63,63,21,0,0,21,0,42,21,42,0,21,42,42,63,0,0,63,0,42,63,42,0,63,42,42,21,0,21,21,0,63,21,42,21,21,42,63,63,0,21,63,0,63,63,42,21,63,42,63,21,21,0,21,21,42,21,63,0,21,63,42,63,21,0,63,21,42,63,63,0,63,63,42,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,36,0,0,0,0,44,0,46,0,45,0,58,0,0,2,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,7,0,0,90,1,0,0,146,7,0,0,254,1,0,0,52,8,0,0,156,4,0,0,14,14,0,0,22,7,0,0,110,5,0,0,248,10,0,0,226,9,0,0,176,4,0,0,148,3,0,0,70,11,0,0,92,6,0,0,228,1,0,0,26,9,0,0,240,12,0,0,212,10,0,0,192,8,0,0,100,3,0,0,204,6,0,0,82,5,0,0,186,10,0,0,34,14,0,0,240,8,0,0,112,6,0,0,42,0,0,0,8,11,0,0,136,11,0,0,28,4,0,0,244,6,0,0,140,7,0,0,58,12,0,0,116,1,0,0,4,13,0,0,178,13,0,0,208,4,0,0,114,6,0,0,8,14,0,0,212,2,0,0,70,7,0,0,196,3,0,0,16,6,0,0,2,14,0,0,178,8,0,0,200,12,0,0,8,2,0,0,124,3,0,0,46,6,0,0,154,4,0,0,46,8,0,0,22,1,0,0,168,3,0,0,226,5,0,0,220,4,0,0,166,1,0,0,118,1,0,0,146,4,0,0,112,5,0,0,138,3,0,0,248,2,0,0,76,13,0,0,144,4,0,0,2,0,0,0,10,11,0,0,148,11,0,0,90,9,0,0,100,11,0,0,232,2,0,0,106,2,0,0,24,3,0,0,204,1,0,0,32,6,0,0,188,7,0,0,184,5,0,0,252,4,0,0,190,11,0,0,248,0,0,0,146,8,0,0,224,0,0,0,16,12,0,0,88,10,0,0,124,12,0,0,150,5,0,0,58,6,0,0,4,9,0,0,240,9,0,0,156,3,0,0,192,7,0,0,206,5,0,0,174,9,0,0,120,6,0,0,124,1,0,0,10,12,0,0,224,4,0,0,226,6,0,0,190,9,0,0,224,3,0,0,154,1,0,0,36,7,0,0,206,8,0,0,166,12,0,0,210,12,0,0,122,3,0,0,196,2,0,0,228,11,0,0,204,3,0,0,24,1,0,0,2,11,0,0,72,3,0,0,96,2,0,0,18,0,0,0,160,4,0,0,68,5,0,0,126,7,0,0,154,9,0,0,36,1,0,0,200,4,0,0,32,0,0,0,112,2,0,0,94,10,0,0,48,1,0,0,180,11,0,0,34,13,0,0,102,5,0,0,250,8,0,0,118,6,0,0,168,6,0,0,244,10,0,0,168,6,0,0,40,11,0,0,160,0,0,0,192,12,0,0,74,10,0,0,218,6,0,0,120,10,0,0,114,1,0,0,252,1,0,0,230,12,0,0,8,10,0,0,160,2,0,0,74,9,0,0,88,12,0,0,176,2,0,0,230,6,0,0,208,6,0,0,214,9,0,0,92,3,0,0,86,3,0,0,150,8,0,0,50,9,0,0,138,10,0,0,100,2,0,0,4,1,0,0,176,2,0,0,22,10,0,0,74,6,0,0,162,7,0,0,180,8,0,0,238,3,0,0,98,6,0,0,134,8,0,0,164,4,0,0,124,4,0,0,106,3,0,0,72,11,0,0,60,10,0,0,140,2,0,0,196,1,0,0,60,6,0,0,38,13,0,0,254,11,0,0,188,1,0,0,42,11,0,0,174,7,0,0,46,3,0,0,190,8,0,0,48,9,0,0,238,9,0,0,192,0,0,0,54,10,0,0,128,5,0,0,198,5,0,0,18,6,0,0,152,1,0,0,92,0,0,0,130,1,0,0,30,8,0,0,174,13,0,0,216,7,0,0,128,7,0,0,30,10,0,0,0,5,0,0,218,8,0,0,234,6,0,0,72,13,0,0,18,13,0,0,36,6,0,0,34,9,0,0,88,6,0,0,174,8,0,0,226,8,0,0,240,3,0,0,148,6,0,0,168,11,0,0,150,3,0,0,128,12,0,0,40,14,0,0,188,0,0,0,174,11,0,0,190,0,0,0,56,8,0,0,106,7,0,0,168,8,0,0,154,2,0,0,134,4,0,0,176,3,0,0,144,2,0,0,194,1,0,0,144,8,0,0,202,7,0,0,142,6,0,0,190,5,0,0,162,13,0,0,236,0,0,0,202,4,0,0,146,5,0,0,148,7,0,0,230,5,0,0,142,13,0,0,56,10,0,0,114,4,0,0,212,0,0,0,76,10,0,0,250,13,0,0,156,10,0,0,156,0,0,0,8,5,0,0,156,2,0,0,248,8,0,0,24,9,0,0,152,12,0,0,94,0,0,0,230,4,0,0,250,12,0,0,84,4,0,0,98,2,0,0,122,6,0,0,202,5,0,0,132,0,0,0,158,1,0,0,242,3,0,0,56,6,0,0,78,5,0,0,206,2,0,0,102,12,0,0,110,7,0,0,116,8,0,0,208,2,0,0,164,13,0,0,164,13,0,0,184,6,0,0,164,13,0,0,40,7,0,0,40,7,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,142,2,0,0,62,4,0,0,26,12,0,0,202,9,0,0,76,8,0,0,164,13,0,0,162,0,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,2,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,24,10,0,0,60,3,0,0,204,4,0,0,152,3,0,0,56,0,0,0,88,0,0,0,254,3,0,0,232,7,0,0,68,3,0,0,146,0,0,0,132,4,0,0,102,6,0,0,228,6,0,0,30,4,0,0,152,13,0,0,90,0,0,0,74,1,0,0,58,10,0,0,18,1,0,0,48,13,0,0,42,9,0,0,68,9,0,0,82,11,0,0,108,1,0,0,240,11,0,0,56,14,0,0,178,4,0,0,248,12,0,0,72,5,0,0,0,9,0,0,184,2,0,0,132,2,0,0,98,7,0,0,68,14,0,0,66,4,0,0,46,1,0,0,104,1,0,0,116,11,0,0,164,13,0,0,164,13,0,0,116,0,0,0,124,7,0,0,164,13,0,0,140,1,0,0,14,2,0,0,214,0,0,0,164,13,0,0,244,12,0,0,216,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+204812);
  /* memory initializer */ allocate([134,0,0,0,90,3,0,0,130,12,0,0,102,3,0,0,148,0,0,0,48,14,0,0,230,12,0,0,164,13,0,0,164,13,0,0,158,3,0,0,108,7,0,0,82,6,0,0,108,10,0,0,164,3,0,0,230,12,0,0,16,2,0,0,190,1,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,86,13,0,0,106,9,0,0,228,0,0,0,188,10,0,0,76,7,0,0,216,4,0,0,10,3,0,0,196,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,42,7,0,0,158,10,0,0,146,7,0,0,126,3,0,0,52,8,0,0,118,11,0,0,74,12,0,0,28,12,0,0,110,5,0,0,142,11,0,0,226,9,0,0,124,8,0,0,148,3,0,0,108,4,0,0,44,12,0,0,228,1,0,0,26,9,0,0,130,0,0,0,212,10,0,0,240,0,0,0,100,3,0,0,148,1,0,0,234,4,0,0,78,2,0,0,34,14,0,0,242,8,0,0,112,6,0,0,94,5,0,0,8,11,0,0,104,11,0,0,104,4,0,0,218,10,0,0,140,7,0,0,202,2,0,0,116,1,0,0,172,1,0,0,178,13,0,0,84,10,0,0,114,6,0,0,8,14,0,0,212,2,0,0,70,2,0,0,196,3,0,0,92,9,0,0,2,14,0,0,126,6,0,0,200,12,0,0,8,2,0,0,124,3,0,0,10,13,0,0,154,4,0,0,22,9,0,0,22,1,0,0,10,6,0,0,226,5,0,0,220,4,0,0,166,1,0,0,118,10,0,0,146,4,0,0,16,4,0,0,138,3,0,0,134,12,0,0,76,13,0,0,144,4,0,0,200,11,0,0,214,11,0,0,224,1,0,0,30,1,0,0,170,12,0,0,8,4,0,0,114,9,0,0,162,2,0,0,246,11,0,0,86,6,0,0,68,8,0,0,200,5,0,0,156,7,0,0,234,13,0,0,24,2,0,0,38,5,0,0,36,5,0,0,64,1,0,0,208,0,0,0,182,4,0,0,50,2,0,0,30,11,0,0,130,5,0,0,182,3,0,0,52,5,0,0,230,8,0,0,42,5,0,0,78,13,0,0,54,0,0,0,82,1,0,0,162,5,0,0,72,4,0,0,122,1,0,0,146,6,0,0,0,14,0,0,108,6,0,0,36,7,0,0,206,8,0,0,166,12,0,0,210,12,0,0,206,0,0,0,108,9,0,0,152,7,0,0,112,11,0,0,24,1,0,0,188,3,0,0,72,3,0,0,92,1,0,0,44,8,0,0,246,9,0,0,240,4,0,0,62,0,0,0,188,9,0,0,102,8,0,0,84,2,0,0,186,6,0,0,2,4,0,0,56,7,0,0,56,5,0,0,100,4,0,0,100,9,0,0,148,12,0,0,44,3,0,0,142,8,0,0,168,6,0,0,68,4,0,0,168,6,0,0,122,10,0,0,160,0,0,0,76,3,0,0,74,10,0,0,190,6,0,0,120,10,0,0,118,0,0,0,252,1,0,0,180,1,0,0,190,12,0,0,32,5,0,0,74,9,0,0,132,9,0,0,176,2,0,0,90,5,0,0,66,12,0,0,238,12,0,0,32,12,0,0,194,0,0,0,164,10,0,0,90,8,0,0,202,1,0,0,2,3,0,0,164,12,0,0,176,2,0,0,162,4,0,0,218,11,0,0,162,7,0,0,180,8,0,0,238,3,0,0,184,13,0,0,134,8,0,0,140,4,0,0,124,4,0,0,216,5,0,0,72,11,0,0,150,1,0,0,140,2,0,0,234,7,0,0,60,6,0,0,176,12,0,0,254,11,0,0,162,3,0,0,42,11,0,0,170,4,0,0,46,3,0,0,190,8,0,0,48,9,0,0,238,9,0,0,192,0,0,0,54,10,0,0,128,5,0,0,198,5,0,0,244,5,0,0,186,2,0,0,174,3,0,0,96,12,0,0,162,12,0,0,80,11,0,0,42,10,0,0,22,13,0,0,30,10,0,0,220,5,0,0,56,2,0,0,28,13,0,0,44,5,0,0,6,13,0,0,36,6,0,0,80,12,0,0,246,6,0,0,164,5,0,0,128,11,0,0,4,5,0,0,148,6,0,0,168,11,0,0,150,3,0,0,218,4,0,0,40,14,0,0,144,11,0,0,174,11,0,0,254,13,0,0,56,8,0,0,106,7,0,0,168,8,0,0,154,2,0,0,134,4,0,0,176,3,0,0,144,2,0,0,194,1,0,0,144,8,0,0,202,7,0,0,142,6,0,0,190,5,0,0,178,2,0,0,172,5,0,0,250,2,0,0,108,3,0,0,148,7,0,0,154,10,0,0,142,13,0,0,134,7,0,0,218,13,0,0,6,10,0,0,12,4,0,0,214,6,0,0,156,10,0,0,236,6,0,0,8,5,0,0,18,14,0,0,248,8,0,0,24,9,0,0,152,12,0,0,94,0,0,0,230,4,0,0,250,12,0,0,84,4,0,0,154,6,0,0,122,6,0,0,202,5,0,0,132,0,0,0,158,1,0,0,242,3,0,0,56,6,0,0,78,5,0,0,126,9,0,0,70,3,0,0,128,3,0,0,172,11,0,0,140,6,0,0,164,13,0,0,164,13,0,0,184,6,0,0,164,13,0,0,40,7,0,0,40,7,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,142,2,0,0,62,4,0,0,26,12,0,0,202,9,0,0,76,8,0,0,164,13,0,0,162,0,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,2,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,100,12,0,0,64,5,0,0,244,2,0,0,182,7,0,0,132,11,0,0,110,3,0,0,232,0,0,0,172,6,0,0,192,3,0,0,132,10,0,0,24,7,0,0,228,7,0,0,246,0,0,0,212,9,0,0,166,8,0,0,110,13,0,0,74,1,0,0,58,10,0,0,18,1,0,0,48,13,0,0,42,9,0,0,68,9,0,0,82,11,0,0,108,1,0,0,240,11,0,0,56,14,0,0,178,4,0,0,248,12,0,0,72,5,0,0,0,9,0,0,184,2,0,0,132,2,0,0,84,3,0,0,20,3,0,0,66,4,0,0,130,2,0,0,66,14,0,0,60,7,0,0,164,13,0,0,164,13,0,0,98,1,0,0,230,10,0,0,164,13,0,0,94,2,0,0,74,11,0,0,58,3,0,0,164,13,0,0,170,1,0,0,216,3,0,0,188,12,0,0,160,6,0,0,10,8,0,0,200,6,0,0,104,13,0,0,140,3,0,0,138,6,0,0,164,13,0,0,164,13,0,0,240,13,0,0,98,8,0,0,20,5,0,0,40,6,0,0,4,12,0,0,228,10,0,0,16,2,0,0,252,3,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,36,0,0,0,38,10,0,0,216,12,0,0,126,13,0,0,66,0,0,0,64,4,0,0,12,0,0,0,222,5,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,164,13,0,0,82,2,0,0,48,11,0,0,102,11,0,0,34,10,0,0,192,6,0,0,170,7,0,0,44,13,0,0,8,8,0,0,26,10,0,0,18,5,0,0,160,1,0,0,144,6,0,0,116,9,0,0,134,3,0,0,14,8,0,0,222,11,0,0,46,14,0,0,158,4,0,0,212,8,0,0,62,7,0,0,50,0,0,0,24,4,0,0,30,0,0,0,122,8,0,0,26,7,0,0,222,7,0,0,86,10,0,0,76,12,0,0,18,11,0,0,252,8,0,0,180,6,0,0,136,9,0,0,222,12,0,0,170,9,0,0,202,13,0,0,234,5,0,0,158,2,0,0,82,3,0,0,28,9,0,0,148,9,0,0,34,1,0,0,12,8,0,0,26,6,0,0,250,5,0,0,64,9,0,0,92,4,0,0,102,9,0,0,228,9,0,0,190,10,0,0,180,12,0,0,142,10,0,0,130,10,0,0,210,0,0,0,78,4,0,0,54,8,0,0,52,3,0,0,108,11,0,0,14,3,0,0,250,9,0,0,22,6,0,0,30,9,0,0,52,1,0,0,48,0,0,0,62,13,0,0,76,9,0,0,42,14,0,0,56,3,0,0,80,7,0,0,232,3,0,0,218,1,0,0,120,11,0,0,194,5,0,0,216,2,0,0,194,12,0,0,226,11,0,0,72,0,0,0,236,5,0,0,124,6,0,0,236,10,0,0,36,10,0,0,46,0,0,0,148,2,0,0,20,12,0,0,166,0,0,0,28,1,0,0,4,7,0,0,74,8,0,0,176,9,0,0,68,2,0,0,142,12,0,0,188,6,0,0,14,10,0,0,228,12,0,0,106,4,0,0,226,3,0,0,34,4,0,0,220,7,0,0,50,1,0,0,202,12,0,0,54,3,0,0,114,7,0,0,134,5,0,0,110,1,0,0,172,9,0,0,8,7,0,0,176,13,0,0,32,8,0,0,224,5,0,0,208,3,0,0,42,13,0,0,58,7,0,0,20,4,0,0,142,9,0,0,224,13,0,0,154,12,0,0,52,6,0,0,62,6,0,0,136,12,0,0,0,11,0,0,138,4,0,0,68,1,0,0,120,8,0,0,12,2,0,0,134,6,0,0,162,10,0,0,116,13,0,0,166,11,0,0,204,13,0,0,246,4,0,0,180,5,0,0,246,4,0,0,170,8,0,0,206,9,0,0,186,13,0,0,216,11,0,0,10,10,0,0,174,2,0,0,70,13,0,0,218,0,0,0,24,5,0,0,74,3,0,0,226,10,0,0,12,3,0,0,68,13,0,0,120,7,0,0,30,2,0,0,42,8,0,0,78,0,0,0,132,7,0,0,236,8,0,0,64,11,0,0,152,0,0,0,58,13,0,0,48,7,0,0,60,2,0,0,120,7,0,0,148,4,0,0,88,11,0,0,220,13,0,0,140,0,0,0,50,14,0,0,78,10,0,0,156,12,0,0,180,3,0,0,182,6,0,0,80,8,0,0,226,13,0,0,206,10,0,0,252,9,0,0,226,7,0,0,136,6,0,0,106,0,0,0,232,9,0,0,180,4,0,0,196,8,0,0,204,12,0,0,114,12,0,0,128,2,0,0,26,11,0,0,236,12,0,0,178,9,0,0,40,13,0,0,194,2,0,0,32,3,0,0,254,9,0,0,16,10,0,0,164,11,0,0,170,5,0,0,152,4,0,0,132,1,0,0,84,13,0,0,238,5,0,0,142,1,0,0,14,11,0,0,32,7,0,0,254,6,0,0,28,8,0,0,34,0,0,0,222,2,0,0,226,2,0,0,70,4,0,0,54,2,0,0,58,14,0,0,172,7,0,0,184,0,0,0,0,13,0,0,84,1,0,0,102,4,0,0,144,3,0,0,182,13,0,0,164,1,0,0,226,4,0,0,8,6,0,0,250,6,0,0,70,0,0,0,40,1,0,0,64,6,0,0,160,7,0,0,112,8,0,0,186,9,0,0,98,10,0,0,176,11,0,0,94,12,0,0,158,13,0,0,76,6,0,0,194,13,0,0,178,10,0,0,224,6,0,0,188,8,0,0,64,10,0,0,122,13,0,0,168,4,0,0,12,13,0,0,232,6,0,0,88,1,0,0,232,13,0,0,168,10,0,0,244,11,0,0,198,2,0,0,90,11,0,0,156,11,0,0,166,6,0,0,198,13,0,0,242,5,0,0,124,9,0,0,38,9,0,0,146,1,0,0,188,11,0,0,58,1,0,0,178,6,0,0,126,5,0,0,248,11,0,0,96,8,0,0,88,13,0,0,120,0,0,0,228,5,0,0,108,13,0,0,42,2,0,0,42,1,0,0,96,10,0,0,128,1,0,0,128,1,0,0,160,3,0,0,128,1,0,0,232,10,0,0,232,10,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,152,2,0,0,106,1,0,0,156,13,0,0,12,9,0,0,228,13,0,0,128,1,0,0,176,8,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,132,6,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,92,2,0,0,146,2,0,0,44,11,0,0,168,5,0,0,70,1,0,0,0,10,0,0,80,3,0,0,84,11,0,0,66,6,0,0,210,4,0,0,140,5,0,0,152,5,0,0,134,1,0,0,252,7,0,0,202,6,0,0,156,8,0,0,70,12,0,0,208,9,0,0,96,4,0,0,180,9,0,0,60,13,0,0,244,4,0,0,190,3,0,0,28,6,0,0,66,10,0,0,22,12,0,0,56,4,0,0,64,13,0,0,110,10,0,0,98,9,0,0,96,11,0,0,6,14,0,0,220,0,0,0,84,5,0,0,46,5,0,0,54,4,0,0,114,11,0,0,50,5,0,0,128,1,0,0,128,1,0,0,198,8,0,0,14,5,0,0,128,1,0,0,74,14,0,0,32,10,0,0,54,9,0,0,128,1,0,0,78,1,0,0,240,5,0,0,224,10,0,0,72,9,0,0,16,1,0,0,148,5,0,0,242,11,0,0,254,2,0,0,24,5,0,0,128,1,0,0,128,1,0,0,168,7,0,0,206,13,0,0,144,1,0,0,112,4,0,0,242,4,0,0,24,5,0,0,94,13,0,0,38,6,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,62,1,0,0,80,0,0,0,52,10,0,0,116,12,0,0,14,0,0,0,24,6,0,0,22,11,0,0,88,7,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,82,2,0,0,26,2,0,0,102,11,0,0,230,11,0,0,192,6,0,0,64,12,0,0,108,5,0,0,4,10,0,0,26,10,0,0,252,5,0,0,160,1,0,0,126,4,0,0,116,9,0,0,22,4,0,0,100,13,0,0,222,11,0,0,46,14,0,0,224,2,0,0,212,8,0,0,178,1,0,0,50,0,0,0,176,1,0,0,176,5,0,0,254,4,0,0,26,7,0,0,114,13,0,0,86,10,0,0,238,13,0,0,18,11,0,0,168,2,0,0,214,3,0,0,212,7,0,0,222,12,0,0,80,5,0,0,202,13,0,0,196,11,0,0,158,2,0,0,104,3,0,0,28,9,0,0,148,9,0,0,34,1,0,0,86,7,0,0,26,6,0,0,186,8,0,0,64,9,0,0,208,13,0,0,102,9,0,0,228,9,0,0,190,10,0,0,62,2,0,0,142,10,0,0,12,12,0,0,210,0,0,0,120,9,0,0,54,8,0,0,52,3,0,0,108,11,0,0,174,6,0,0,250,9,0,0,128,8,0,0,30,9,0,0,158,0,0,0,48,0,0,0,62,13,0,0,2,6,0,0,128,10,0,0,174,1,0,0,10,2,0,0,166,9,0,0,198,3,0,0,60,8,0,0,128,4,0,0,242,6,0,0,210,10,0,0,182,0,0,0,98,11,0,0,86,9,0,0,62,3,0,0,210,3,0,0,132,3,0,0,34,3,0,0,36,14,0,0,60,0,0,0,92,12,0,0,232,4,0,0,0,6,0,0,118,5,0,0,228,8,0,0,72,8,0,0,212,5,0,0,28,0,0,0,104,2,0,0,6,5,0,0,114,10,0,0,52,12,0,0,8,1,0,0,88,2,0,0,168,9,0,0,236,2,0,0,26,0,0,0,114,7,0,0,134,5,0,0,110,1,0,0,172,9,0,0,14,6,0,0,72,1,0,0,160,5,0,0,146,13,0,0,208,3,0,0,230,1,0,0,58,7,0,0,76,1,0,0,116,5,0,0,78,9,0,0,74,2,0,0,86,4,0,0,98,12,0,0,16,14,0,0,192,11,0,0,52,14,0,0,172,4,0,0,100,7,0,0,114,2,0,0,50,8,0,0,52,4,0,0,102,10,0,0,112,13,0,0,74,0,0,0,246,4,0,0,214,2,0,0,246,4,0,0,128,0,0,0,206,9,0,0,50,13,0,0,216,11,0,0,110,6,0,0,174,2,0,0,20,14,0,0,218,0,0,0,22,8,0,0,24,14,0,0,2,12,0,0,12,3,0,0,106,8,0,0,120,7,0,0,26,1,0,0,160,8,0,0,200,2,0,0,60,1,0,0,34,6,0,0,212,3,0,0,254,5,0,0,244,1,0,0,32,11,0,0,222,0,0,0,120,7,0,0,194,10,0,0,114,0,0,0,220,13,0,0,140,0,0,0,50,14,0,0,106,11,0,0,156,12,0,0,200,7,0,0,182,6,0,0,16,13,0,0,226,13,0,0,26,8,0,0,252,9,0,0,6,8,0,0,136,6,0,0,172,8,0,0,232,9,0,0,24,8,0,0,196,8,0,0,72,12,0,0,114,12,0,0,128,2,0,0,26,11,0,0,236,12,0,0,178,9,0,0,40,13,0,0,194,2,0,0,32,3,0,0,32,9,0,0,124,13,0,0,28,11,0,0,2,13,0,0,110,4,0,0,154,7,0,0,96,3,0,0,88,8,0,0,142,1,0,0,228,4,0,0,228,2,0,0,46,12,0,0,170,3,0,0,114,3,0,0,222,2,0,0,4,2,0,0,184,12,0,0,66,9,0,0,250,7,0,0,38,4,0,0,184,0,0,0,0,13,0,0,84,1,0,0,86,0,0,0,144,3,0,0,136,2,0,0,164,1,0,0,20,11,0,0,8,6,0,0,250,6,0,0,70,0,0,0,40,1,0,0,64,6,0,0,160,7,0,0,112,8,0,0,186,9,0,0,98,10,0,0,176,11,0,0,94,12,0,0,158,13,0,0,248,6,0,0,154,11,0,0,208,10,0,0,72,6,0,0,188,8,0,0,118,4,0,0,122,13,0,0,4,3,0,0,166,3,0,0,118,7,0,0,130,9,0,0,72,2,0,0,168,10,0,0,112,10,0,0,198,2,0,0,216,6,0,0,156,11,0,0,166,6,0,0,198,13,0,0,242,5,0,0,124,9,0,0,38,9,0,0,146,1,0,0,160,9,0,0,58,1,0,0,178,6,0,0,126,5,0,0,248,11,0,0,96,8,0,0,88,13,0,0,120,0,0,0,230,3,0,0,178,3,0,0,56,1,0,0,134,9,0,0,224,12,0,0,128,1,0,0,128,1,0,0,160,3,0,0,128,1,0,0,232,10,0,0,232,10,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,152,2,0,0,106,1,0,0,156,13,0,0,12,9,0,0,228,13,0,0,128,1,0,0,176,8,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,132,6,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,116,10,0,0,62,14,0,0,26,5,0,0,12,5,0,0,14,1,0,0,108,12,0,0,100,6,0,0,204,11,0,0,238,10,0,0,64,2,0,0,94,9,0,0,222,4,0,0,62,11,0,0,16,3,0,0,208,12,0,0,144,7,0,0,70,12,0,0,208,9,0,0,96,4,0,0,180,9,0,0,60,13,0,0,244,4,0,0,190,3,0,0,28,6,0,0,66,10,0,0,22,12,0,0,56,4,0,0,64,13,0,0,110,10,0,0,98,9,0,0,96,11,0,0,6,14,0,0,2,7,0,0,66,5,0,0,46,5,0,0,92,10,0,0,44,10,0,0,82,9,0,0,128,1,0,0,128,1,0,0,74,7,0,0,168,0,0,0,128,1,0,0,54,13,0,0,248,4,0,0,26,13,0,0,128,1,0,0,150,10,0,0,240,5,0,0,220,1,0,0,28,10,0,0,46,13,0,0,16,9,0,0,220,12,0,0,94,11,0,0,122,12,0,0,128,1,0,0,128,1,0,0,0,3,0,0,164,8,0,0,64,3,0,0,128,9,0,0,146,11,0,0,246,5,0,0,94,13,0,0,38,0,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,58,2,0,0,34,5,0,0,236,1,0,0,22,3,0,0,102,13,0,0,104,9,0,0,110,8,0,0,198,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,128,1,0,0,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,21,0,42,42,42,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,0,0,0,5,5,5,8,8,8,11,11,11,14,14,14,17,17,17,20,20,20,24,24,24,28,28,28,32,32,32,36,36,36,40,40,40,45,45,45,50,50,50,56,56,56,63,63,63,0,0,63,16,0,63,31,0,63,47,0,63,63,0,63,63,0,47,63,0,31,63,0,16,63,0,0,63,16,0,63,31,0,63,47,0,63,63,0,47,63,0,31,63,0,16,63,0,0,63,0,0,63,16,0,63,31,0,63,47,0,63,63,0,47,63,0,31,63,0,16,63,31,31,63,39,31,63,47,31,63,55,31,63,63,31,63,63,31,55,63,31,47,63,31,39,63,31,31,63,39,31,63,47,31,63,55,31,63,63,31,55,63,31,47,63,31,39,63,31,31,63,31,31,63,39,31,63,47,31,63,55,31,63,63,31,55,63,31,47,63,31,39,63,45,45,63,49,45,63,54,45,63,58,45,63,63,45,63,63,45,58,63,45,54,63,45,49,63,45,45,63,49,45,63,54,45,63,58,45,63,63,45,58,63,45,54,63,45,49,63,45,45,63,45,45,63,49,45,63,54,45,63,58,45,63,63,45,58,63,45,54,63,45,49,63,0,0,28,7,0,28,14,0,28,21,0,28,28,0,28,28,0,21,28,0,14,28,0,7,28,0,0,28,7,0,28,14,0,28,21,0,28,28,0,21,28,0,14,28,0,7,28,0,0,28,0,0,28,7,0,28,14,0,28,21,0,28,28,0,21,28,0,14,28,0,7,28,14,14,28,17,14,28,21,14,28,24,14,28,28,14,28,28,14,24,28,14,21,28,14,17,28,14,14,28,17,14,28,21,14,28,24,14,28,28,14,24,28,14,21,28,14,17,28,14,14,28,14,14,28,17,14,28,21,14,28,24,14,28,28,14,24,28,14,21,28,14,17,28,20,20,28,22,20,28,24,20,28,26,20,28,28,20,28,28,20,26,28,20,24,28,20,22,28,20,20,28,22,20,28,24,20,28,26,20,28,28,20,26,28,20,24,28,20,22,28,20,20,28,20,20,28,22,20,28,24,20,28,26,20,28,28,20,26,28,20,24,28,20,22,28,0,0,16,4,0,16,8,0,16,12,0,16,16,0,16,16,0,12,16,0,8,16,0,4,16,0,0,16,4,0,16,8,0,16,12,0,16,16,0,12,16,0,8,16,0,4,16,0,0,16,0,0,16,4,0,16,8,0,16,12,0,16,16,0,12,16,0,8,16,0,4,16,8,8,16,10,8,16,12,8,16,14,8,16,16,8,16,16,8,14,16,8,12,16,8,10,16,8,8,16,10,8,16,12,8,16,14,8,16,16,8,14,16,8,12,16,8,10,16,8,8,16,8,8,16,10,8,16,12,8,16,14,8,16,16,8,14,16,8,12,16,8,10,16,11,11,16,12,11,16,13,11,16,15,11,16,16,11,16,16,11,15,16,11,13,16,11,12,16,11,11,16,12,11,16,13,11,16,15,11,16,16,11,15,16,11,13,16,11,12,16,11,11,16,11,11,16,12,11,16,13,11,16,15,11,16,16,11,15,16,11,13,16,11,12,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,84,104,100,0,0,0,6,0,0,0,1,1,244,77,84,114,107,0,0,0,0,0,0,0,0,0,0,0,42,0,42,0,0,42,42,42,0,0,42,0,42,42,21,0,42,42,42,21,21,21,21,21,63,21,63,21,21,63,63,63,21,21,63,21,63,63,63,21,63,63,63,2,1,2,4,2,2,5,9,2,1,3,5,2,2,6,10,18,1,12,0,19,2,13,0,25,0,15,0,41,0,0,0,2,4,2,4,2,5,5,9,2,4,3,5,2,5,6,10,18,4,12,0,19,5,13,0,25,0,15,1,29,0,0,0,2,7,2,4,2,8,5,9,2,7,3,5,2,8,6,10,18,7,12,0,19,8,13,0,25,0,15,2,41,0,0,2,2,10,2,4,2,11,5,9,2,10,3,5,2,11,6,10,18,10,12,0,19,11,13,0,25,0,15,3,41,0,0,3,2,13,2,4,2,14,5,9,2,13,3,5,2,14,6,10,18,13,12,0,19,14,13,0,28,0,0,0,43,0,0,0,2,16,2,4,2,17,5,9,2,16,3,5,2,17,6,10,18,16,12,0,19,17,13,0,28,0,0,1,44,0,0,0,2,19,2,4,2,20,5,9,2,19,3,5,2,20,6,10,18,19,12,0,19,20,13,0,28,0,0,2,45,0,0,0,2,22,0,4,2,23,0,9,2,22,0,5,2,23,0,10,18,22,0,0,19,23,0,0,28,0,0,3,46,0,0,0,16,26,13,0,16,26,13,1,16,26,13,2,16,26,13,3,16,26,13,4,16,26,13,5,16,26,13,6,16,26,13,7,16,29,13,0,16,29,13,1,16,29,13,2,16,29,13,3,16,29,13,4,16,29,13,5,16,29,13,6,16,29,13,7,16,0,15,0,16,0,15,1,16,0,15,2,16,0,15,3,16,0,15,4,16,0,15,5,16,0,15,6,16,0,15,7,21,0,13,0,21,0,13,1,21,0,13,2,21,0,13,3,21,0,13,4,21,0,13,5,21,0,13,6,21,0,13,7,37,0,0,0,39,0,0,0,2,71,0,8,3,149,5,9,28,0,0,4,28,0,0,5,30,0,0,0,31,0,0,0,7,0,15,0,2,69,6,26,9,0,15,0,2,69,6,25,34,3,0,0,34,4,0,0,34,0,0,0,34,1,0,0,9,121,21,0,9,122,21,0,9,123,21,0,9,124,21,0,9,125,21,0,9,126,21,0,9,127,21,0,9,128,21,0,9,129,21,0,9,130,21,0,9,131,21,0,9,132,21,0,9,133,21,0,9,134,21,0,9,135,21,0,9,136,21,0,2,0,0,40,2,1,0,40,2,0,0,40,2,3,0,40,2,31,0,4,2,32,0,9,2,0,4,5,2,0,7,10,2,0,2,3,2,0,5,8,2,0,3,2,2,0,6,7,2,0,5,38,2,0,6,39,2,0,17,7,4,0,5,0,60,0,0,0,16,67,13,1,16,67,13,2,16,67,13,3,16,67,13,4,16,67,13,5,16,67,13,6,16,67,13,7,47,0,0,0,49,0,0,0,12,75,0,0,61,0,0,0,71,0,0,0,70,0,0,0,72,0,0,0,73,0,0,0,14,80,0,0,14,82,0,0,14,79,0,0,14,81,0,0,34,6,0,0,34,7,0,0,34,18,0,0,34,19,0,0,18,31,0,0,19,32,0,0,34,12,0,0,34,13,0,0,34,9,0,0,34,10,0,0,34,15,0,0,34,16,0,0,6,0,12,0,6,0,12,1,6,0,12,2,6,0,12,3,6,0,12,4,6,0,12,5,6,0,12,6,6,0,12,7,7,0,13,0,7,0,13,1,7,0,13,2,7,0,13,3,7,0,13,4,7,0,13,5,7,0,13,6,7,0,13,7,2,5,0,41,2,6,0,41,21,0,25,0,21,0,24,0,2,87,18,33,2,86,18,33,2,0,2,35,2,0,5,36,62,0,0,0,64,0,0,0,68,0,0,0,66,0,0,0,27,85,0,3,6,85,0,0,26,85,0,0,35,0,0,0,2,5,0,43,2,6,0,43,2,5,0,42,2,6,0,42,6,102,0,0,6,103,0,0,51,0,0,0,52,0,0,0,2,165,0,0,2,165,1,0,2,165,2,0,2,165,3,0,2,165,4,0,2,165,5,0,2,165,6,0,2,165,7,0,9,93,20,0,9,92,20,0,9,91,20,0,9,94,20,0,6,95,0,0,6,96,0,0,6,98,0,0,6,99,0,0,7,73,20,0,10,0,20,0,12,77,0,0,9,0,20,0,16,95,0,2,16,96,0,2,16,98,0,2,16,99,0,2,77,0,0,0,78,0,0,0,33,0,0,0,32,0,0,0,75,0,0,0,57,0,0,0,2,8,0,40,2,9,0,40,56,0,0,0,55,0,0,0,53,0,0,0,54,0,0,0,58,0,0,0,59,0,0,0,2,11,0,40,2,12,0,40,2,137,5,7,2,139,5,7,3,147,6,9,3,148,6,9,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,142,8,0,2,144,8,0,2,141,0,14,2,143,0,14,2,146,8,0,0,0,0,0,2,145,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,121,21,0,10,122,21,0,10,123,21,0,10,124,21,0,10,125,21,0,10,126,21,0,10,127,21,0,10,128,21,0,10,129,21,0,10,130,21,0,10,131,21,0,10,132,21,0,10,133,21,0,10,134,21,0,10,135,21,0,10,136,21,0,2,121,1,0,2,122,1,0,2,123,1,0,2,124,1,0,2,125,1,0,2,126,1,0,2,127,1,0,2,128,1,0,2,129,1,0,2,130,1,0,2,131,1,0,2,132,1,0,2,133,1,0,2,134,1,0,2,135,1,0,2,136,1,0,25,0,15,4,41,0,0,4,74,0,0,0,2,150,5,12,2,117,5,27,2,117,5,28,0,0,0,0,0,0,0,0,25,0,15,5,41,0,0,5,0,0,0,0,2,151,5,12,2,119,5,27,2,119,5,28,0,0,0,0,2,69,6,11,0,0,0,0,0,0,0,0,2,90,18,33,2,152,5,12,2,88,18,33,2,89,18,33,2,0,6,2,2,0,6,7,0,0,0,0,0,0,0,0,2,14,0,40,2,153,5,12,2,158,6,7,2,159,6,7,2,0,6,1,2,0,6,6,2,1,4,5,2,2,7,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,162,13,0,16,162,13,1,16,162,13,2,16,162,13,3,16,162,13,4,16,162,13,5,16,162,13,6,16,162,13,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,4,2,3,8,16,2,1,3,5,2,3,9,17,18,1,12,0,20,3,14,0,25,0,16,0,42,0,0,0,2,4,2,4,2,6,8,16,2,4,3,5,2,6,9,17,18,4,12,0,20,6,14,0,25,0,16,1,29,0,0,0,2,7,2,4,2,9,8,16,2,7,3,5,2,9,9,17,18,7,12,0,20,9,14,0,25,0,16,2,42,0,0,2,2,10,2,4,2,12,8,16,2,10,3,5,2,12,9,17,18,10,12,0,20,12,14,0,25,0,16,3,42,0,0,3,2,13,2,4,2,15,8,16,2,13,3,5,2,15,9,17,18,13,12,0,20,15,14,0,28,0,0,0,43,0,0,0,2,16,2,4,2,18,8,16,2,16,3,5,2,18,9,17,18,16,12,0,20,18,14,0,28,0,0,1,44,0,0,0,2,19,2,4,2,21,8,16,2,19,3,5,2,21,9,17,18,19,12,0,20,21,14,0,28,0,0,2,45,0,0,0,2,22,0,4,2,24,0,16,2,22,0,5,2,24,0,17,18,22,0,0,20,24,0,0,28,0,0,3,46,0,0,0,17,27,14,0,17,27,14,1,17,27,14,2,17,27,14,3,17,27,14,4,17,27,14,5,17,27,14,6,17,27,14,7,17,30,14,0,17,30,14,1,17,30,14,2,17,30,14,3,17,30,14,4,17,30,14,5,17,30,14,6,17,30,14,7,17,0,16,0,17,0,16,1,17,0,16,2,17,0,16,3,17,0,16,4,17,0,16,5,17,0,16,6,17,0,16,7,22,0,14,0,22,0,14,1,22,0,14,2,22,0,14,3,22,0,14,4,22,0,14,5,22,0,14,6,22,0,14,7,38,0,0,0,40,0,0,0,2,72,0,0,0,0,0,0,28,0,0,4,28,0,0,5,30,0,0,0,31,0,0,0,8,0,16,0,2,70,9,29,9,0,16,0,2,70,9,30,34,3,0,0,34,5,0,0,34,0,0,0,34,2,0,0,9,121,23,0,9,122,23,0,9,123,23,0,9,124,23,0,9,125,23,0,9,126,23,0,9,127,23,0,9,128,23,0,9,129,23,0,9,130,23,0,9,131,23,0,9,132,23,0,9,133,23,0,9,134,23,0,9,135,23,0,9,136,23,0,2,0,0,40,2,2,0,40,2,0,0,40,2,4,0,40,2,31,0,4,2,33,0,16,2,0,4,5,2,0,10,17,2,0,2,3,2,0,8,15,2,0,3,2,2,0,9,14,2,0,11,38,2,0,9,39,2,0,17,7,5,0,8,0,60,0,0,0,17,68,14,1,17,68,14,2,17,68,14,3,17,68,14,4,17,68,14,5,17,68,14,6,17,68,14,7,48,0,0,0,50,0,0,0,13,76,0,0,61,0,0,0,71,0,0,1,70,0,0,1,72,0,0,0,73,0,0,0,14,80,0,0,14,84,0,0,14,79,0,0,14,83,0,0,34,6,0,0,34,8,0,0,34,18,0,0,34,20,0,0,18,31,0,0,20,33,0,0,34,12,0,0,34,14,0,0,34,9,0,0,34,11,0,0,34,15,0,0,34,17,0,0,6,0,12,0,6,0,12,1,6,0,12,2,6,0,12,3,6,0,12,4,6,0,12,5,6,0,12,6,6,0,12,7,8,0,14,0,8,0,14,1,8,0,14,2,8,0,14,3,8,0,14,4,8,0,14,5,8,0,14,6,8,0,14,7,2,5,0,41,2,7,0,41,22,0,25,0,22,0,24,0,2,87,19,34,2,86,19,34,2,0,2,35,2,0,8,37,63,0,0,0,65,0,0,0,69,0,0,0,67,0,0,0,27,85,0,3,6,85,0,0,26,85,0,0,36,0,0,0,2,5,0,43,2,7,0,43,2,5,0,42,2,7,0,42,6,102,0,0,6,103,0,0,51,0,0,0,52,0,0,0,2,165,0,0,2,165,1,0,2,165,2,0,2,165,3,0,2,165,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+215052);
  /* memory initializer */ allocate([2,165,5,0,2,165,6,0,2,165,7,0,9,93,22,0,9,92,22,0,9,91,22,0,9,94,22,0,6,95,0,0,6,97,0,0,6,98,0,0,6,100,0,0,8,74,22,0,11,0,22,0,13,78,0,0,9,0,22,0,16,95,0,2,16,97,0,2,16,98,0,2,16,100,0,2,77,0,0,0,78,0,0,0,33,0,0,0,32,0,0,0,75,0,0,0,57,0,0,0,2,8,0,40,2,10,0,40,56,0,0,0,55,0,0,0,53,0,0,0,54,0,0,0,58,0,0,0,59,0,0,0,2,11,0,40,2,13,0,40,2,138,5,7,2,140,5,7,3,147,9,16,3,148,9,16,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,142,8,0,2,144,8,0,2,141,0,14,2,143,0,14,2,146,8,0,0,0,0,0,2,145,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,121,23,0,11,122,23,0,11,123,23,0,11,124,23,0,11,125,23,0,11,126,23,0,11,127,23,0,11,128,23,0,11,129,23,0,11,130,23,0,11,131,23,0,11,132,23,0,11,133,23,0,11,134,23,0,11,135,23,0,11,136,23,0,2,121,1,0,2,122,1,0,2,123,1,0,2,124,1,0,2,125,1,0,2,126,1,0,2,127,1,0,2,128,1,0,2,129,1,0,2,130,1,0,2,131,1,0,2,132,1,0,2,133,1,0,2,134,1,0,2,135,1,0,2,136,1,0,25,0,16,4,42,0,0,4,74,0,0,0,2,154,8,19,2,118,8,31,2,118,8,32,0,0,0,0,0,0,0,0,25,0,16,5,42,0,0,5,0,0,0,0,2,155,8,19,2,120,8,31,2,120,8,32,0,0,0,0,2,70,9,18,0,0,0,0,2,164,8,14,2,90,19,34,2,156,8,19,2,88,19,34,2,89,19,34,2,0,9,2,2,0,9,7,0,0,0,0,0,0,0,0,2,15,0,40,2,157,8,19,2,160,9,14,2,161,9,14,2,0,9,1,2,0,9,6,2,1,4,5,2,3,10,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,163,14,0,17,163,14,1,17,163,14,2,17,163,14,3,17,163,14,4,17,163,14,5,17,163,14,6,17,163,14,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,41,2,0,58,4,0,0,168,40,2,0,59,4,0,0,0,40,2,0,60,4,0,0,88,38,2,0,61,4,0,0,232,35,2,0,62,4,0,0,176,33,2,0,63,4,0,0,8,33,2,0,64,4,0,0,208,31,2,0,65,4,0,0,0,31,2,0,66,4,0,0,128,29,2,0,67,4,0,0,80,28,2,0,68,4,0,0,16,27,2,0,69,4,0,0,128,25,2,0,49,0,0,0,208,23,2,0,50,0,0,0,216,21,2,0,51,0,0,0,40,20,2,0,52,0,0,0,216,18,2,0,53,0,0,0,168,17,2,0,54,0,0,0,192,16,2,0,55,0,0,0,232,15,2,0,56,0,0,0,248,14,2,0,57,0,0,0,216,13,2,0,48,0,0,0,0,13,2,0,97,0,0,0,88,11,2,0,98,0,0,0,136,9,2,0,99,0,0,0,224,7,2,0,100,0,0,0,88,5,2,0,101,0,0,0,56,4,2,0,102,0,0,0,224,2,2,0,103,0,0,0,248,1,2,0,104,0,0,0,216,255,1,0,105,0,0,0,232,254,1,0,106,0,0,0,248,252,1,0,107,0,0,0,152,251,1,0,108,0,0,0,80,248,1,0,109,0,0,0,184,246,1,0,110,0,0,0,104,241,1,0,111,0,0,0,176,240,1,0,112,0,0,0,240,235,1,0,113,0,0,0,48,235,1,0,114,0,0,0,136,234,1,0,115,0,0,0,48,233,1,0,116,0,0,0,96,229,1,0,117,0,0,0,152,227,1,0,118,0,0,0,120,223,1,0,119,0,0,0,64,222,1,0,120,0,0,0,224,218,1,0,121,0,0,0,144,217,1,0,122,0,0,0,8,217,1,0,32,0,0,0,112,216,1,0,27,0,0,0,200,215,1,0,61,0,0,0,112,214,1,0,96,0,0,0,40,177,2,0,9,0,0,0,152,176,2,0,13,0,0,0,224,174,2,0,8,0,0,0,160,173,2,0,91,0,0,0,16,173,2,0,93,0,0,0,88,172,2,0,45,0,0,0,240,171,2,0,57,4,0,0,40,171,2,0,59,0,0,0,120,170,2,0,222,0,0,0,232,169,2,0,92,0,0,0,232,168,2,0,225,4,0,0,192,167,2,0,229,4,0,0,184,165,2,0,226,4,0,0,168,163,2,0,230,4,0,0,144,161,2,0,224,4,0,0,120,160,2,0,228,4,0,0,184,159,2,0,44,0,0,0,0,159,2,0,46,0,0,0,48,158,2,0,47,0,0,0,128,157,2,0,70,4,0,0,160,156,2,0,145,0,0,0,152,155,2,0,72,4,0,0,112,153,2,0,78,4,0,0,8,152,2,0,75,4,0,0,144,151,2,0,73,4,0,0,0,151,2,0,74,4,0,0,96,150,2,0,127,0,0,0,160,149,2,0,77,4,0,0,160,148,2,0,82,4,0,0,208,147,2,0,80,4,0,0,104,146,2,0,81,4,0,0,112,145,2,0,79,4,0,0,72,144,2,0,98,4,0,0,88,143,2,0,89,4,0,0,184,142,2,0,90,4,0,0,248,141,2,0,91,4,0,0,152,141,2,0,92,4,0,0,24,141,2,0,93,4,0,0,160,140,2,0,94,4,0,0,144,139,2,0,95,4,0,0,248,138,2,0,96,4,0,0,208,136,2,0,97,4,0,0,64,135,2,0,83,4,0,0,16,134,2,0,84,4,0,0,136,133,2,0,85,4,0,0,192,132,2,0,86,4,0,0,24,132,2,0,87,4,0,0,136,131,2,0,99,4,0,0,72,131,2,0,88,4,0,0,64,130,2,0,60,0,0,0,0,0,0,0,0,0,0,0,44,6,0,0,106,6,0,0,50,12,0,0,162,6,0,0,190,4,0,0,4,11,0,0,150,12,0,0,216,10,0,0,222,9,0,0,80,6,0,0,176,10,0,0,190,2,0,0,190,13,0,0,52,0,0,0,8,9,0,0,184,10,0,0,208,5,0,0,166,2,0,0,170,2,0,0,140,10,0,0,154,5,0,0,0,2,0,0,232,12,0,0,38,12,0,0,170,10,0,0,102,7,0,0,126,12,0,0,182,5,0,0,40,8,0,0,52,9,0,0,12,11,0,0,38,14,0,0,104,7,0,0,58,9,0,0,144,0,0,0,248,9,0,0,66,13,0,0,210,6,0,0,26,3,0,0,94,1,0,0,84,6,0,0,218,12,0,0,96,5,0,0,86,11,0,0,208,8,0,0,22,5,0,0,32,4,0,0,124,5,0,0,0,7,0,0,48,5,0,0,130,3,0,0,136,3,0,0,62,12,0,0,194,9,0,0,248,13,0,0,186,0,0,0,192,1,0,0,152,8,0,0,96,0,0,0,142,4,0,0,246,2,0,0,242,7,0,0,204,10,0,0,212,4,0,0,52,11,0,0,82,13,0,0,234,0,0,0,178,11,0,0,252,2,0,0,36,3,0,0,44,9,0,0,232,1,0,0,198,11,0,0,212,13,0,0,24,11,0,0,24,12,0,0,172,12,0,0,10,4,0,0,112,9,0,0,210,2,0,0,118,9,0,0,224,7,0,0,184,11,0,0,78,8,0,0,184,7,0,0,242,1,0,0,210,8,0,0,60,5,0,0,38,7,0,0,144,9,0,0,92,8,0,0,160,11,0,0,156,9,0,0,118,3,0,0,126,10,0,0,36,11,0,0,106,10,0,0,238,7,0,0,238,8,0,0,78,6,0,0,30,13,0,0,202,8,0,0,250,11,0,0,86,5,0,0,42,12,0,0,30,3,0,0,120,5,0,0,196,7,0,0,138,5,0,0,78,12,0,0,238,0,0,0,198,6,0,0,216,1,0,0,20,1,0,0,200,0,0,0,234,12,0,0,220,8,0,0,136,8,0,0,86,12,0,0,124,10,0,0,182,1,0,0,54,1,0,0,144,12,0,0,186,12,0,0,250,4,0,0,30,12,0,0,2,9,0,0,104,5,0,0,250,10,0,0,120,12,0,0,250,10,0,0,8,12,0,0,6,11,0,0,44,0,0,0,68,10,0,0,150,13,0,0,110,9,0,0,206,11,0,0,22,2,0,0,26,4,0,0,206,1,0,0,16,7,0,0,20,7,0,0,156,6,0,0,112,0,0,0,18,8,0,0,142,0,0,0,92,5,0,0,16,0,0,0,244,0,0,0,40,0,0,0,94,7,0,0,182,2,0,0,184,1,0,0,66,8,0,0,112,0,0,0,52,7,0,0,158,11,0,0,238,1,0,0,220,6,0,0,130,7,0,0,182,10,0,0,204,9,0,0,192,5,0,0,208,11,0,0,102,2,0,0,168,13,0,0,194,6,0,0,150,2,0,0,150,11,0,0,64,8,0,0,8,13,0,0,60,4,0,0,40,3,0,0,122,9,0,0,140,9,0,0,194,7,0,0,214,12,0,0,32,2,0,0,2,1,0,0,206,7,0,0,78,11,0,0,242,12,0,0,94,8,0,0,210,1,0,0,38,8,0,0,172,10,0,0,92,11,0,0,14,9,0,0,70,10,0,0,54,6,0,0,16,8,0,0,96,9,0,0,42,3,0,0,38,3,0,0,38,2,0,0,160,10,0,0,14,4,0,0,10,0,0,0,46,11,0,0,60,9,0,0,100,0,0,0,116,4,0,0,140,8,0,0,204,8,0,0,58,5,0,0,196,9,0,0,48,6,0,0,32,14,0,0,172,3,0,0,20,13,0,0,20,8,0,0,68,11,0,0,186,4,0,0,218,7,0,0,12,1,0,0,36,9,0,0,84,8,0,0,6,7,0,0,42,6,0,0,238,4,0,0,36,4,0,0,98,3,0,0,44,2,0,0,74,4,0,0,194,8,0,0,84,9,0,0,28,7,0,0,234,3,0,0,200,9,0,0,52,13,0,0,166,7,0,0,116,6,0,0,166,10,0,0,80,13,0,0,190,7,0,0,194,11,0,0,150,7,0,0,244,8,0,0,58,0,0,0,104,8,0,0,100,1,0,0,178,7,0,0,170,0,0,0,220,9,0,0,220,2,0,0,226,12,0,0,222,13,0,0,94,4,0,0,166,5,0,0,100,8,0,0,210,11,0,0,128,13,0,0,130,8,0,0,224,9,0,0,158,9,0,0,120,1,0,0,200,10,0,0,116,2,0,0,8,0,0,0,126,2,0,0,126,2,0,0,202,0,0,0,126,2,0,0,100,10,0,0,100,10,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,204,7,0,0,138,2,0,0,56,12,0,0,66,7,0,0,98,5,0,0,126,2,0,0,106,12,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,182,8,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,10,1,0,0,54,5,0,0,20,2,0,0,40,4,0,0,68,12,0,0,48,12,0,0,186,3,0,0,132,13,0,0,2,5,0,0,174,4,0,0,240,10,0,0,228,3,0,0,14,12,0,0,248,3,0,0,136,13,0,0,88,5,0,0,2,2,0,0,54,14,0,0,108,0,0,0,252,0,0,0,254,8,0,0,78,7,0,0,18,10,0,0,178,12,0,0,166,13,0,0,6,0,0,0,154,0,0,0,80,1,0,0,150,4,0,0,164,0,0,0,6,2,0,0,96,1,0,0,110,11,0,0,200,3,0,0,252,10,0,0,56,11,0,0,82,10,0,0,62,10,0,0,126,2,0,0,126,2,0,0,152,6,0,0,182,12,0,0,126,2,0,0,250,1,0,0,160,13,0,0,72,14,0,0,126,2,0,0,40,12,0,0,174,5,0,0,158,7,0,0,180,13,0,0,170,6,0,0,200,13,0,0,56,9,0,0,216,8,0,0,26,4,0,0,126,2,0,0,126,2,0,0,136,0,0,0,206,6,0,0,186,11,0,0,146,12,0,0,194,3,0,0,26,4,0,0,56,13,0,0,42,4,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,76,11,0,0,84,7,0,0,122,5,0,0,40,9,0,0,36,2,0,0,192,2,0,0,114,5,0,0,122,4,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,44,6,0,0,218,9,0,0,50,12,0,0,242,2,0,0,190,4,0,0,158,6,0,0,4,6,0,0,90,10,0,0,222,9,0,0,66,2,0,0,176,10,0,0,158,8,0,0,190,13,0,0,244,9,0,0,6,6,0,0,184,10,0,0,208,5,0,0,174,10,0,0,170,2,0,0,32,1,0,0,154,5,0,0,156,1,0,0,92,7,0,0,146,9,0,0,170,10,0,0,30,7,0,0,126,12,0,0,200,8,0,0,40,8,0,0,48,3,0,0,232,11,0,0,222,10,0,0,104,7,0,0,70,9,0,0,144,0,0,0,160,12,0,0,66,13,0,0,120,2,0,0,26,3,0,0,94,1,0,0,84,6,0,0,166,4,0,0,96,5,0,0,174,12,0,0,208,8,0,0,124,11,0,0,32,4,0,0,124,5,0,0,0,7,0,0,50,7,0,0,130,3,0,0,154,8,0,0,62,12,0,0,198,0,0,0,248,13,0,0,186,0,0,0,192,1,0,0,242,10,0,0,96,0,0,0,210,7,0,0,246,2,0,0,14,7,0,0,204,10,0,0,212,4,0,0,130,6,0,0,222,3,0,0,76,4,0,0,34,2,0,0,214,4,0,0,40,10,0,0,168,12,0,0,44,7,0,0,234,9,0,0,0,12,0,0,188,4,0,0,162,11,0,0,202,11,0,0,120,3,0,0,114,8,0,0,214,10,0,0,142,5,0,0,44,1,0,0,86,2,0,0,240,2,0,0,188,13,0,0,122,11,0,0,192,9,0,0,62,8,0,0,198,4,0,0,222,8,0,0,10,7,0,0,88,4,0,0,236,7,0,0,180,2,0,0,124,2,0,0,180,7,0,0,66,1,0,0,230,2,0,0,138,0,0,0,22,14,0,0,30,13,0,0,202,8,0,0,250,11,0,0,86,5,0,0,254,12,0,0,196,5,0,0,226,0,0,0,130,4,0,0,138,5,0,0,98,13,0,0,238,0,0,0,80,9,0,0,34,11,0,0,142,7,0,0,214,13,0,0,58,4,0,0,198,10,0,0,24,0,0,0,178,5,0,0,138,11,0,0,90,13,0,0,30,5,0,0,50,10,0,0,98,4,0,0,248,7,0,0,50,6,0,0,10,14,0,0,254,10,0,0,250,10,0,0,126,0,0,0,250,10,0,0,132,12,0,0,6,11,0,0,186,5,0,0,68,10,0,0,206,12,0,0,110,9,0,0,96,6,0,0,22,2,0,0,70,8,0,0,126,1,0,0,12,10,0,0,20,7,0,0,86,8,0,0,112,0,0,0,202,3,0,0,246,1,0,0,192,13,0,0,132,5,0,0,218,3,0,0,62,5,0,0,82,7,0,0,242,13,0,0,196,12,0,0,72,7,0,0,112,0,0,0,46,2,0,0,2,8,0,0,238,1,0,0,220,6,0,0,130,7,0,0,138,13,0,0,204,9,0,0,70,6,0,0,208,11,0,0,88,3,0,0,168,13,0,0,198,7,0,0,150,2,0,0,68,0,0,0,64,8,0,0,110,12,0,0,60,4,0,0,140,12,0,0,122,9,0,0,84,12,0,0,194,7,0,0,214,12,0,0,32,2,0,0,2,1,0,0,206,7,0,0,78,11,0,0,242,12,0,0,94,8,0,0,198,12,0,0,246,12,0,0,20,10,0,0,144,5,0,0,186,7,0,0,248,5,0,0,28,3,0,0,76,0,0,0,96,9,0,0,60,11,0,0,64,14,0,0,148,8,0,0,234,2,0,0,68,6,0,0,10,0,0,0,44,14,0,0,46,4,0,0,126,8,0,0,162,9,0,0,18,3,0,0,204,8,0,0,58,5,0,0,196,9,0,0,138,8,0,0,32,14,0,0,196,4,0,0,20,13,0,0,224,11,0,0,68,11,0,0,186,4,0,0,218,7,0,0,12,1,0,0,36,9,0,0,84,8,0,0,6,7,0,0,42,6,0,0,238,4,0,0,36,4,0,0,98,3,0,0,44,2,0,0,216,9,0,0,30,14,0,0,162,8,0,0,14,13,0,0,234,3,0,0,18,2,0,0,52,13,0,0,244,7,0,0,248,1,0,0,216,13,0,0,206,4,0,0,232,5,0,0,194,11,0,0,218,2,0,0,244,8,0,0,246,3,0,0,104,8,0,0,100,1,0,0,178,7,0,0,170,0,0,0,220,9,0,0,220,2,0,0,226,12,0,0,240,7,0,0,94,4,0,0,166,5,0,0,100,8,0,0,210,11,0,0,128,13,0,0,130,8,0,0,224,9,0,0,188,5,0,0,20,0,0,0,238,11,0,0,0,4,0,0,186,1,0,0,126,2,0,0,126,2,0,0,202,0,0,0,126,2,0,0,100,10,0,0,100,10,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,204,7,0,0,138,2,0,0,56,12,0,0,66,7,0,0,98,5,0,0,126,2,0,0,106,12,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,182,8,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,4,0,0,0,206,3,0,0,182,11,0,0,34,7,0,0,112,3,0,0,66,11,0,0,104,6,0,0,134,13,0,0,184,8,0,0,20,6,0,0,140,11,0,0,8,3,0,0,50,3,0,0,178,0,0,0,230,13,0,0,212,12,0,0,2,2,0,0,54,14,0,0,108,0,0,0,252,0,0,0,254,8,0,0,78,7,0,0,18,10,0,0,178,12,0,0,166,13,0,0,6,0,0,0,154,0,0,0,80,1,0,0,150,4,0,0,164,0,0,0,6,2,0,0,96,1,0,0,76,14,0,0,210,9,0,0,252,10,0,0,12,7,0,0,32,13,0,0,54,12,0,0,126,2,0,0,126,2,0,0,4,14,0,0,222,1,0,0,126,2,0,0,182,9,0,0,28,14,0,0,18,12,0,0,126,2,0,0,196,10,0,0,174,5,0,0,146,10,0,0,152,9,0,0,210,13,0,0,234,10,0,0,44,4,0,0,214,7,0,0,152,11,0,0,126,2,0,0,126,2,0,0,252,13,0,0,198,9,0,0,240,6,0,0,54,7,0,0,136,7,0,0,144,10,0,0,56,13,0,0,10,9,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,122,2,0,0,136,5,0,0,16,5,0,0,172,0,0,0,136,4,0,0,62,9,0,0,140,13,0,0,18,4,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,126,2,0,0,83,51,32,73,110,99,111,114,112,111,114,97,116,101,100,46,32,84,114,105,111,54,52,0,0,0,0,64,0,128,0,192,0,32,0,96,0,160,0,224,0,0,0,0,0,0,0,0,128,2,0,0,144,1,0,0,3,0,0,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,165,186,61,0,3,189,68,9,177,74,23,176,59,2,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,254,186,61,0,12,192,77,20,207,129,91,225,188,169,240,237,234,161,126,109,31,31,31,44,34,28,66,39,24,93,43,19,121,49,13,144,53,8,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,245,186,61,0,3,195,89,37,212,146,114,228,197,182,132,242,242,242,1,161,126,109,135,31,31,31,6,36,32,30,63,38,25,89,42,19,113,47,15,136,52,10,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,236,186,61,0,3,200,106,60,216,157,128,235,220,211,135,242,242,242,1,161,126,109,142,31,31,31,6,58,37,26,83,41,21,104,45,16,128,50,12,156,55,6,183,61,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,225,186,61,0,4,189,68,9,203,117,75,221,174,151,237,226,223,138,242,242,242,1,161,126,109,148,31,31,31,6,51,35,27,73,41,23,98,44,18,124,49,12,151,54,7,176,59,2,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,216,186,61,0,4,192,77,20,207,129,91,225,188,169,240,237,234,141,242,242,242,1,161,126,109,154,31,31,31,6,43,33,29,66,39,24,93,43,19,121,49,13,144,53,8,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,207,186,61,0,3,193,84,31,212,146,114,228,197,182,145,242,242,242,1,161,126,109,160,31,31,31,6,36,32,30,63,38,25,89,42,19,113,47,15,136,52,10,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,198,186,61,0,3,200,106,60,216,157,128,235,220,211,148,242,242,242,1,161,126,109,167,31,31,31,6,58,37,26,83,41,21,104,45,16,128,50,12,156,55,6,183,61,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,187,186,61,0,4,189,68,9,203,117,75,221,174,151,237,226,223,151,242,242,242,1,161,126,109,173,31,31,31,6,49,34,27,73,41,23,98,44,18,124,49,12,151,54,7,173,59,3,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,178,186,61,0,4,192,77,20,207,129,91,225,188,169,240,237,234,154,242,242,242,1,161,126,109,179,31,31,31,6,43,33,29,66,39,24,93,43,19,121,49,13,143,53,9,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,169,186,61,0,3,193,84,31,212,146,114,228,197,182,158,242,242,242,1,161,126,109,185,31,31,31,6,36,32,30,63,38,25,89,42,19,111,47,15,136,52,10,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,160,186,61,0,3,200,106,60,216,157,128,234,217,208,161,242,242,242,1,161,126,109,138,31,31,31,5,160,160,160,170,170,170,138,138,138,103,103,103,71,71,71,177,31,31,31,6,58,37,26,81,41,21,104,45,16,128,50,12,156,55,6,183,61,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,149,186,61,0,4,189,68,9,203,117,75,221,174,151,237,226,223,164,242,242,242,1,161,126,109,138,31,31,31,1,192,192,192,133,242,242,242,6,207,207,207,175,175,175,140,140,140,108,108,108,73,73,73,33,33,33,176,31,31,31,6,49,34,27,73,41,23,98,44,18,124,49,12,151,54,7,173,59,3,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,140,186,61,0,4,192,77,20,207,129,91,225,188,169,240,237,234,167,242,242,242,1,161,126,109,138,31,31,31,1,185,185,185,139,242,242,242,6,212,212,212,177,177,177,145,145,145,113,113,113,73,73,73,38,38,38,176,31,31,31,6,43,33,29,66,39,24,93,43,19,121,49,13,143,53,9,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,134,186,61,0,1,232,210,200,170,242,242,242,1,161,126,109,138,31,31,31,1,180,180,180,145,242,242,242,5,215,215,215,177,177,177,133,133,133,91,91,91,38,38,38,177,31,31,31,6,36,32,30,63,38,25,88,42,20,111,47,15,136,52,10,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,1,232,210,200,170,242,242,242,1,161,126,109,138,31,31,31,1,180,180,180,149,242,242,242,3,235,235,235,177,177,177,103,103,103,182,31,31,31,6,58,37,26,81,41,21,104,45,16,128,50,12,156,55,6,181,60,1,255,186,61,0,255,186,61,0,255,186,61,0,248,186,61,0,1,232,210,200,170,242,242,242,1,161,126,109,138,31,31,31,1,180,180,180,152,242,242,242,3,210,210,210,115,115,115,36,36,36,185,31,31,31,6,49,34,27,73,41,23,98,44,18,124,49,12,151,54,7,173,59,3,255,186,61,0,255,186,61,0,255,186,61,0,242,186,61,0,1,232,210,200,170,242,242,242,1,161,126,109,138,31,31,31,1,180,180,180,154,242,242,242,2,220,220,220,120,120,120,190,31,31,31,6,43,33,29,66,39,24,93,43,19,119,48,13,143,53,9,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,236,186,61,0,1,232,210,200,170,242,242,242,1,161,126,109,138,31,31,31,1,180,180,180,156,242,242,242,2,182,182,182,48,48,48,194,31,31,31,6,36,32,30,63,38,25,88,42,20,111,47,15,136,52,10,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,230,186,61,0,1,232,210,200,170,242,242,242,1,160,128,110,138,31,31,31,1,180,180,180,157,242,242,242,2,220,220,220,81,81,81,151,31,31,31,3,86,86,86,115,115,115,128,128,128,130,158,158,158,130,115,115,115,1,83,83,83,169,31,31,31,6,58,37,26,81,41,21,104,45,16,126,50,12,156,55,6,181,60,1,255,186,61,0,255,186,61,0,255,186,61,0,223,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,180,180,180,158,242,242,242,2,240,240,240,118,118,118,147,31,31,31,3,71,71,71,163,163,163,225,225,225,136,242,242,242,4,232,232,232,180,180,180,125,125,125,46,46,46,171,31,31,31,6,49,34,27,73,41,23,96,44,18,124,49,12,151,54,7,173,59,3,255,186,61,0,255,186,61,0,255,186,61,0,217,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,180,180,180,160,242,242,242,1,113,113,113,144,31,31,31,3,43,43,43,153,153,153,240,240,240,141,242,242,242,3,232,232,232,143,143,143,46,46,46,175,31,31,31,3,43,33,29,64,37,24,171,58,3,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,172,172,172,160,242,242,242,2,240,240,240,91,91,91,142,31,31,31,2,63,63,63,217,217,217,145,242,242,242,2,232,232,232,115,115,115,176,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,161,242,242,242,2,230,230,230,58,58,58,140,31,31,31,2,61,61,61,225,225,225,148,242,242,242,2,160,160,160,38,38,38,174,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,162,242,242,242,1,192,192,192,139,31,31,31,2,36,36,36,207,207,207,150,242,242,242,2,197,197,197,43,43,43,173,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,138,242,242,242,3,210,210,210,200,200,200,232,232,232,150,242,242,242,1,118,118,118,138,31,31,31,1,143,143,143,152,242,242,242,2,177,177,177,33,33,33,148,31,31,31,1,58,58,58,151,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,138,242,242,242,1,143,143,143,130,31,31,31,7,43,43,43,73,73,73,108,108,108,133,133,133,158,158,158,197,197,197,227,227,227,143,242,242,242,2,222,222,222,41,41,41,136,31,31,31,2,58,58,58,237,237,237,153,242,242,242,1,145,145,145,143,31,31,31,4,61,61,61,135,135,135,195,195,195,240,240], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+225292);
  /* memory initializer */ allocate([240,132,242,242,242,4,207,207,207,170,170,170,120,120,120,66,66,66,145,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,138,242,242,242,1,143,143,143,137,31,31,31,3,58,58,58,105,105,105,180,180,180,141,242,242,242,1,130,130,130,136,31,31,31,1,153,153,153,155,242,242,242,1,88,88,88,140,31,31,31,2,63,63,63,187,187,187,140,242,242,242,3,205,205,205,125,125,125,46,46,46,142,31,31,31,1,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,138,242,242,242,1,143,143,143,140,31,31,31,2,53,53,53,168,168,168,139,242,242,242,2,222,222,222,36,36,36,134,31,31,31,2,38,38,38,232,232,232,155,242,242,242,2,202,202,202,33,33,33,138,31,31,31,2,128,128,128,237,237,237,143,242,242,242,3,230,230,230,130,130,130,33,33,33,140,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,138,242,242,242,1,143,143,143,142,31,31,31,2,96,96,96,235,235,235,138,242,242,242,1,101,101,101,134,31,31,31,1,103,103,103,157,242,242,242,1,108,108,108,137,31,31,31,1,140,140,140,147,242,242,242,2,195,195,195,56,56,56,139,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,168,168,168,138,242,242,242,1,143,143,143,143,31,31,31,2,86,86,86,237,237,237,137,242,242,242,1,180,180,180,134,31,31,31,1,165,165,165,157,242,242,242,2,215,215,215,33,33,33,135,31,31,31,1,130,130,130,149,242,242,242,2,227,227,227,58,58,58,138,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,158,158,158,138,242,242,242,1,143,143,143,144,31,31,31,1,133,133,133,137,242,242,242,2,235,235,235,41,41,41,133,31,31,31,1,215,215,215,141,242,242,242,3,210,210,210,200,200,200,205,205,205,142,242,242,242,1,88,88,88,134,31,31,31,2,68,68,68,237,237,237,149,242,242,242,2,235,235,235,38,38,38,138,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,144,31,31,31,2,36,36,36,210,210,210,137,242,242,242,1,96,96,96,132,31,31,31,1,46,46,46,139,242,242,242,3,215,215,215,101,101,101,33,33,33,131,31,31,31,4,41,41,41,91,91,91,158,158,158,237,237,237,138,242,242,242,1,168,168,168,134,31,31,31,1,200,200,200,150,242,242,242,1,182,182,182,139,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,145,31,31,31,1,125,125,125,137,242,242,242,1,148,148,148,132,31,31,31,1,83,83,83,138,242,242,242,2,210,210,210,51,51,51,136,31,31,31,2,56,56,56,185,185,185,137,242,242,242,2,227,227,227,33,33,33,132,31,31,31,1,83,83,83,151,242,242,242,1,130,130,130,139,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,145,31,31,31,1,48,48,48,137,242,242,242,1,195,195,195,132,31,31,31,1,113,113,113,138,242,242,242,1,81,81,81,138,31,31,31,2,36,36,36,180,180,180,137,242,242,242,1,76,76,76,132,31,31,31,1,175,175,175,151,242,242,242,1,71,71,71,139,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,146,31,31,31,1,212,212,212,136,242,242,242,1,232,232,232,132,31,31,31,1,133,133,133,137,242,242,242,1,182,182,182,140,31,31,31,2,53,53,53,230,230,230,136,242,242,242,1,123,123,123,131,31,31,31,2,46,46,46,240,240,240,150,242,242,242,2,227,227,227,33,33,33,139,31,31,31,1,176,59,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,146,31,31,31,1,172,172,172,137,242,242,242,1,56,56,56,131,31,31,31,1,150,150,150,137,242,242,242,1,118,118,118,141,31,31,31,1,133,133,133,136,242,242,242,1,165,165,165,131,31,31,31,1,96,96,96,139,242,242,242,6,225,225,225,185,185,185,158,158,158,170,170,170,200,200,200,240,240,240,134,242,242,242,1,170,170,170,140,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,146,31,31,31,1,145,145,145,137,242,242,242,1,81,81,81,131,31,31,31,1,158,158,158,137,242,242,242,1,66,66,66,141,31,31,31,1,56,56,56,136,242,242,242,1,195,195,195,131,31,31,31,1,138,138,138,137,242,242,242,2,225,225,225,105,105,105,134,31,31,31,3,86,86,86,155,155,155,230,230,230,131,242,242,242,1,118,118,118,140,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,146,31,31,31,1,133,133,133,137,242,242,242,1,101,101,101,131,31,31,31,1,168,168,168,136,242,242,242,2,237,237,237,33,33,33,142,31,31,31,1,210,210,210,135,242,242,242,1,222,222,222,131,31,31,31,1,168,168,168,136,242,242,242,2,225,225,225,48,48,48,137,31,31,31,5,46,46,46,155,155,155,240,240,240,242,242,242,58,58,58,140,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,155,155,155,138,242,242,242,1,143,143,143,146,31,31,31,1,120,120,120,137,242,242,242,1,118,118,118,131,31,31,31,1,168,168,168,136,242,242,242,1,215,215,215,143,31,31,31,1,172,172,172,135,242,242,242,1,240,240,240,131,31,31,31,1,187,187,187,136,242,242,242,1,105,105,105,140,31,31,31,2,63,63,63,155,155,155,141,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,145,145,145,138,242,242,242,1,150,150,150,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,168,168,168,136,242,242,242,1,197,197,197,143,31,31,31,1,138,138,138,136,242,242,242,1,43,43,43,130,31,31,31,1,192,192,192,135,242,242,242,2,230,230,230,33,33,33,155,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,168,168,168,136,242,242,242,1,182,182,182,143,31,31,31,1,118,118,118,136,242,242,242,1,53,53,53,130,31,31,31,1,192,192,192,135,242,242,242,1,200,200,200,156,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,138,138,138,131,31,31,31,1,168,168,168,136,242,242,242,1,180,180,180,143,31,31,31,1,103,103,103,136,242,242,242,1,56,56,56,130,31,31,31,1,182,182,182,135,242,242,242,1,197,197,197,156,31,31,31,1,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,168,168,168,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,56,56,56,130,31,31,31,1,168,168,168,135,242,242,242,2,230,230,230,33,33,33,155,31,31,31,1,183,61,1,255,186,61,0,255,186,61,0,255,186,61,0,214,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,175,175,175,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,56,56,56,130,31,31,31,1,143,143,143,136,242,242,242,1,93,93,93,155,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,56,56,56,130,31,31,31,1,105,105,105,136,242,242,242,2,200,200,200,33,33,33,154,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,48,48,48,130,31,31,31,1,66,66,66,137,242,242,242,1,145,145,145,154,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,43,43,43,131,31,31,31,1,217,217,217,137,242,242,242,1,120,120,120,153,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,143,143,143,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,43,43,43,131,31,31,31,1,138,138,138,138,242,242,242,1,138,138,138,152,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,133,133,133,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,168,168,168,143,31,31,31,1,93,93,93,136,242,242,242,1,43,43,43,131,31,31,31,2,53,53,53,240,240,240,138,242,242,242,2,180,180,180,46,46,46,150,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,163,163,163,143,31,31,31,1,103,103,103,136,242,242,242,1,43,43,43,132,31,31,31,1,170,170,170,139,242,242,242,2,217,217,217,78,78,78,149,31,31,31,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,105,105,105,136,242,242,242,1,33,33,33,132,31,31,31,2,53,53,53,232,232,232,139,242,242,242,2,237,237,237,130,130,130,147,31,31,31,1,36,32,30,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,105,105,105,136,242,242,242,134,31,31,31,1,123,123,123,141,242,242,242,2,180,180,180,46,46,46,145,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,105,105,105,136,242,242,242,135,31,31,31,1,172,172,172,141,242,242,242,2,217,217,217,78,78,78,144,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,155,155,155,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,105,105,105,136,242,242,242,135,31,31,31,2,38,38,38,197,197,197,141,242,242,242,2,237,237,237,110,110,110,143,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,165,165,165,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,105,105,105,136,242,242,242,136,31,31,31,2,43,43,43,190,190,190,142,242,242,242,1,135,135,135,142,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,113,113,113,135,242,242,242,1,232,232,232,137,31,31,31,2,38,38,38,172,172,172,142,242,242,242,2,163,163,163,33,33,33,140,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,130,130,130,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,118,118,118,135,242,242,242,1,230,230,230,139,31,31,31,2,118,118,118,235,235,235,141,242,242,242,2,182,182,182,38,38,38,139,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,118,118,118,135,242,242,242,1,230,230,230,140,31,31,31,2,66,66,66,207,207,207,141,242,242,242,2,177,177,177,33,33,33,138,31,31,31,1,41,33,29,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,156,126,110,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,130,130,130,131,31,31,31,1,180,180,180,136,242,242,242,1,155,155,155,143,31,31,31,1,118,118,118,135,242,242,242,1,230,230,230,141,31,31,31,2,38,38,38,153,153,153,141,242,242,242,1,155,155,155,138,31,31,31,1,44,34,28,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,151,124,111,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,120,120,120,131,31,31,31,1,190,190,190,136,242,242,242,1,155,155,155,143,31,31,31,1,118,118,118,135,242,242,242,1,230,230,230,143,31,31,31,2,91,91,91,220,220,220,140,242,242,242,1,108,108,108,137,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,118,118,118,135,242,242,242,1,217,217,217,144,31,31,31,2,43,43,43,168,168,168,139,242,242,242,2,230,230,230,58,58,58,136,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,125,125,125,135,242,242,242,1,217,217,217,146,31,31,31,2,91,91,91,227,227,227,138,242,242,242,1,180,180,180,136,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,130,130,130,135,242,242,242,1,217,217,217,147,31,31,31,2,56,56,56,202,202,202,138,242,242,242,1,83,83,83,135,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,130,130,130,135,242,242,242,1,217,217,217,148,31,31,31,2,38,38,38,187,187,187,137,242,242,242,1,192,192,192,135,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,130,130,130,135,242,242,242,1,217,217,217,149,31,31,31,2,38,38,38,182,182,182,137,242,242,242,1,71,71,71,134,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,130,130,130,135,242,242,242,1,205,205,205,150,31,31,31,2,43,43,43,210,210,210,136,242,242,242,1,148,148,148,134,31,31,31,1,49,34,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,105,105,105,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,130,130,130,135,242,242,242,1,205,205,205,151,31,31,31,2,66,66,66,237,237,237,135,242,242,242,2,220,220,220,33,33,33,133,31,31,31,1,51,35,27,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,105,105,105,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,135,135,135,135,242,242,242,1,205,205,205,152,31,31,31,1,153,153,153,136,242,242,242,1,68,68,68,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,105,105,105,138,242,242,242,1,168,168,168,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,143,143,143,135,242,242,242,1,205,205,205,152,31,31,31,2,53,53,53,235,235,235,135,242,242,242,1,118,118,118,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,105,105,105,138,242,242,242,1,177,177,177,146,31,31,31,1,118,118,118,137,242,242,242,1,118,118,118,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,143,143,143,135,242,242,242,1,202,202,202,153,31,31,31,1,170,170,170,135,242,242,242,1,155,155,155,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,105,105,105,138,242,242,242,1,180,180,180,146,31,31,31,1,118,118,118,137,242,242,242,1,115,115,115,131,31,31,31,1,192,192,192,136,242,242,242,1,143,143,143,143,31,31,31,1,143,143,143,135,242,242,242,1,192,192,192,153,31,31,31,1,108,108,108,135,242,242,242,1,185,185,185,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,150,125,112,138,31,31,31,1,105,105,105,138,242,242,242,1,180,180,180,146,31,31,31,1,123,123,123,137,242,242,242,1,105,105,105,131,31,31,31,1,192,192,192,136,242,242,242,1,145,145,145,143,31,31,31,1,145,145,145,135,242,242,242,1,192,192,192,153,31,31,31,1,61,61,61,135,242,242,242,1,202,202,202,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,152,127,114,138,31,31,31,1,105,105,105,138,242,242,242,1,180,180,180,146,31,31,31,1,135,135,135,137,242,242,242,1,98,98,98,131,31,31,31,1,192,192,192,136,242,242,242,1,158,158,158,143,31,31,31,1,160,160,160,135,242,242,242,1,192,192,192,153,31,31,31,2,33,33,33,237,237,237,134,242,242,242,1,217,217,217,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,105,105,105,138,242,242,242,1,180,180,180,146,31,31,31,1,165,165,165,137,242,242,242,1,86,86,86,131,31,31,31,1,182,182,182,136,242,242,242,1,182,182,182,143,31,31,31,1,185,185,185,135,242,242,242,1,190,190,190,132,31,31,31,7,63,63,63,88,88,88,115,115,115,158,158,158,182,182,182,207,207,207,56,56,56,143,31,31,31,1,225,225,225,134,242,242,242,1,220,220,220,133,31,31,31,1,58,37,26,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,105,105,105,138,242,242,242,1,180,180,180,146,31,31,31,1,210,210,210,137,242,242,242,1,61,61,61,131,31,31,31,1,177,177,177,136,242,242,242,1,222,222,222,143,31,31,31,1,227,227,227,135,242,242,242,4,180,180,180,31,31,31,108,108,108,207,207,207,135,242,242,242,1,83,83,83,143,31,31,31,1,217,217,217,134,242,242,242,1,217,217,217,133,31,31,31,1,61,36,25,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,138,242,242,242,1,180,180,180,145,31,31,31,1,71,71,71,137,242,242,242,2,240,240,240,36,36,36,131,31,31,31,1,155,155,155,137,242,242,242,1,73,73,73,141,31,31,31,1,71,71,71,136,242,242,242,3,168,168,168,31,31,31,115,115,115,136,242,242,242,1,120,120,120,143,31,31,31,1,230,230,230,134,242,242,242,1,210,210,210,133,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,138,242,242,242,1,180,180,180,145,31,31,31,1,175,175,175,137,242,242,242,1,210,210,210,132,31,31,31,1,128,128,128,137,242,242,242,1,150,150,150,141,31,31,31,1,148,148,148,136,242,242,242,3,153,153,153,31,31,31,96,96,96,136,242,242,242,1,180,180,180,142,31,31,31,1,51,51,51,135,242,242,242,1,197,197,197,133,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,138,242,242,242,1,180,180,180,144,31,31,31,1,118,118,118,138,242,242,242,1,168,168,168,132,31,31,31,1,101,101,101,137,242,242,242,2,232,232,232,53,53,53,139,31,31,31,2,53,53,53,232,232,232,136,242,242,242,3,125,125,125,31,31,31,66,66,66,136,242,242,242,2,237,237,237,51,51,51,141,31,31,31,1,110,110,110,135,242,242,242,1,172,172,172,133,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,138,242,242,242,1,180,180,180,142,31,31,31,2,41,41,41,140,140,140,139,242,242,242,1,118,118,118,132,31,31,31,1,53,53,53,138,242,242,242,2,187,187,187,36,36,36,138,31,31,31,1,175,175,175,137,242,242,242,4,96,96,96,31,31,31,33,33,33,232,232,232,136,242,242,242,1,148,148,148,141,31,31,31,1,197,197,197,135,242,242,242,1,143,143,143,133,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,138,242,242,242,1,192,192,192,132,73,73,73,1,43,43,43,133,31,31,31,5,58,58,58,73,73,73,96,96,96,150,150,150,227,227,227,140,242,242,242,1,56,56,56,133,31,31,31,1,217,217,217,138,242,242,242,2,177,177,177,43,43,43,135,31,31,31,2,36,36,36,155,155,155,138,242,242,242,1,51,51,51,130,31,31,31,1,180,180,180,136,242,242,242,2,240,240,240,78,78,78,139,31,31,31,1,113,113,113,136,242,242,242,1,105,105,105,133,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,165,242,242,242,1,195,195,195,134,31,31,31,1,155,155,155,139,242,242,242,3,220,220,220,125,125,125,48,48,48,131,31,31,31,3,38,38,38,103,103,103,205,205,205,138,242,242,242,1,215,215,215,131,31,31,31,1,118,118,118,137,242,242,242,2,225,225,225,71,71,71,137,31,31,31,2,91,91,91,235,235,235,136,242,242,242,1,56,56,56,133,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,165,242,242,242,1,108,108,108,134,31,31,31,1,81,81,81,142,242,242,242,3,232,232,232,200,200,200,215,215,215,141,242,242,242,1,145,145,145,131,31,31,31,2,51,51,51,240,240,240,137,242,242,242,3,232,232,232,123,123,123,36,36,36,133,31,31,31,3,43,43,43,145,145,145,240,240,240,136,242,242,242,1,210,210,210,134,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,93,93,93,164,242,242,242,2,212,212,212,36,36,36,135,31,31,31,1,207,207,207,157,242,242,242,1,76,76,76,132,31,31,31,1,177,177,177,139,242,242,242,7,230,230,230,168,168,168,138,138,138,118,118,118,158,158,158,177,177,177,232,232,232,138,242,242,242,1,130,130,130,134,31,31,31,1,68,38,24,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,91,91,91,164,242,242,242,1,105,105,105,136,31,31,31,1,108,108,108,156,242,242,242,1,195,195,195,133,31,31,31,1,76,76,76,155,242,242,242,2,240,240,240,53,53,53,134,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,81,81,81,163,242,242,242,1,170,170,170,137,31,31,31,2,33,33,33,202,202,202,155,242,242,242,1,93,93,93,134,31,31,31,1,165,165,165,154,242,242,242,1,172,172,172,135,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,81,81,81,162,242,242,242,2,207,207,207,43,43,43,138,31,31,31,2,71,71,71,237,237,237,153,242,242,242,1,185,185,185,135,31,31,31,2,46,46,46,225,225,225,152,242,242,242,2,232,232,232,53,53,53,135,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,81,81,81,161,242,242,242,2,207,207,207,53,53,53,140,31,31,31,1,115,115,115,152,242,242,242,2,217,217,217,48,48,48,136,31,31,31,1,98,98,98,152,242,242,242,1,130,130,130,136,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,81,81,81,160,242,242,242,2,160,160,160,38,38,38,142,31,31,31,1,138,138,138,150,242,242,242,2,235,235,235,68,68,68,138,31,31,31,1,120,120,120,150,242,242,242,2,187,187,187,36,36,36,136,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,81,81,81,158,242,242,242,2,220,220,220,98,98,98,145,31,31,31,2,115,115,115,235,235,235,147,242,242,242,2,232,232,232,88,88,88,140,31,31,31,1,125,125,125,148,242,242,242,2,197,197,197,43,43,43,137,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,81,81,81,156,242,242,242,2,187,187,187,98,98,98,148,31,31,31,2,71,71,71,212,212,212,145,242,242,242,2,205,205,205,66,66,66,142,31,31,31,2,98,98,98,225,225,225,145,242,242,242,2,172,172,172,41,41,41,138,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,138,31,31,31,1,71,71,71,130,200,200,200,1,227,227,227,147,242,242,242,6,225,225,225,200,200,200,187,187,187,143,143,143,98,98,98,51,51,51,151,31,31,31,3,38,38,38,115,115,115,215,215,215,141,242,242,242,3,215,215,215,120,120,120,36,36,36,144,31,31,31,2,48,48,48,168,168,168,142,242,242,242,2,217,217,217,103,103,103,140,31,31,31,1,78,40,22,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,193,31,31,31,3,98,98,98,158,158,158,215,215,215,135,242,242,242,4,220,220,220,170,170,170,103,103,103,33,33,33,148,31,31,31,3,68,68,68,155,155,155,222,222,222,136,242,242,242,4,230,230,230,168,168,168,96,96,96,36,36,36,141,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,196,31,31,31,7,56,56,56,73,73,73,91,91,91,115,115,115,98,98,98,73,73,73,61,61,61,155,31,31,31,5,66,66,66,76,76,76,115,115,115,130,130,130,148,148,148,130,115,115,115,2,73,73,73,36,36,36,144,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,255,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,255,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,255,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,255,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,255,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,159,136,125,255,31,31,31,1,86,42,20,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,157,135,125,255,31,31,31,1,93,43,19,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,255,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,255,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,194,31,31,31,4,33,33,33,91,91,91,115,115,115,135,135,135,131,158,158,158,3,138,138,138,115,115,115,83,83,83,170,31,31,31,1,66,66,66,130,73,73,73,1,36,36,36,133,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,191,31,31,31,4,36,36,36,105,105,105,172,172,172,230,230,230,137,242,242,242,3,222,222,222,155,155,155,73,73,73,138,31,31,31,1,110,110,110,130,158,158,158,1,145,145,145,152,31,31,31,1,115,115,115,130,242,242,242,2,212,212,212,33,33,33,133,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,151,31,31,31,1,46,46,46,137,73,73,73,1,41,41,41,156,31,31,31,2,113,113,113,220,220,220,143,242,242,242,2,153,153,153,43,43,43,136,31,31,31,1,115,115,115,131,242,242,242,1,88,88,88,150,31,31,31,2,33,33,33,207,207,207,130,242,242,242,1,118,118,118,134,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,51,51,51,130,200,200,200,1,212,212,212,149,242,242,242,3,195,195,195,140,140,140,88,88,88,150,31,31,31,2,51,51,51,187,187,187,146,242,242,242,2,222,222,222,71,71,71,135,31,31,31,2,36,36,36,222,222,222,130,242,242,242,1,182,182,182,150,31,31,31,1,96,96,96,130,242,242,242,2,225,225,225,38,38,38,134,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,56,56,56,155,242,242,242,3,210,210,210,110,110,110,33,33,33,146,31,31,31,2,66,66,66,217,217,217,135,242,242,242,2,210,210,210,197,197,197,131,158,158,158,2,192,192,192,217,217,217,134,242,242,242,2,225,225,225,68,68,68,135,31,31,31,1,133,133,133,131,242,242,242,1,71,71,71,149,31,31,31,1,190,190,190,130,242,242,242,1,140,140,140,135,31,31,31,1,96,44,18,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,56,56,56,157,242,242,242,2,215,215,215,86,86,86,144,31,31,31,2,61,61,61,222,222,222,133,242,242,242,3,200,200,200,128,128,128,56,56,56,135,31,31,31,3,61,61,61,130,130,130,220,220,220,132,242,242,242,2,225,225,225,58,58,58,134,31,31,31,2,43,43,43,232,232,232,130,242,242,242,1,168,168,168,148,31,31,31,1,78,78,78,130,242,242,242,2,235,235,235,51,51,51,135,31,31,31,1,101,45,17,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,56,56,56,159,242,242,242,1,130,130,130,142,31,31,31,2,38,38,38,207,207,207,132,242,242,242,2,222,222,222,108,108,108,140,31,31,31,2,38,38,38,140,140,140,132,242,242,242,1,190,190,190,135,31,31,31,1,150,150,150,130,242,242,242,2,240,240,240,56,56,56,147,31,31,31,1,170,170,170,130,242,242,242,1,158,158,158,136,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,56,56,56,160,242,242,242,1,153,153,153,141,31,31,31,1,155,155,155,132,242,242,242,2,192,192,192,43,43,43,143,31,31,31,2,113,113,113,240,240,240,131,242,242,242,1,105,105,105,134,31,31,31,2,56,56,56,240,240,240,130,242,242,242,1,153,153,153,146,31,31,31,2,61,61,61,240,240,240,130,242,242,242,1,66,66,66,136,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,53,53,53,161,242,242,242,1,125,125,125,139,31,31,31,2,71,71,71,240,240,240,131,242,242,242,2,185,185,185,38,38,38,145,31,31,31,1,115,115,115,131,242,242,242,2,212,212,212,33,33,33,134,31,31,31,1,168,168,168,130,242,242,242,2,232,232,232,48,48,48,145,31,31,31,1,153,153,153,130,242,242,242,1,182,182,182,137,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,161,242,242,242,2,240,240,240,78,78,78,138,31,31,31,1,182,182,182,131,242,242,242,2,215,215,215,41,41,41,147,31,31,31,1,182,182,182,131,242,242,242,1,93,93,93,134,31,31,31,1,71,71,71,131,242,242,242,1,135,135,135,144,31,31,31,2,48,48,48,235,235,235,130,242,242,242,1,83,83,83,137,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,162,242,242,242,1,190,190,190,137,31,31,31,1,71,71,71,131,242,242,242,2,240,240,240,83,83,83,148,31,31,31,2,53,53,53,237,237,237,130,242,242,242,1,168,168,168,135,31,31,31,1,187,187,187,130,242,242,242,2,225,225,225,38,38,38,143,31,31,31,1,133,133,133,130,242,242,242,1,202,202,202,138,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,163,242,242,242,1,88,88,88,136,31,31,31,1,148,148,148,131,242,242,242,1,160,160,160,150,31,31,31,1,163,163,163,130,242,242,242,2,230,230,230,33,33,33,134,31,31,31,1,91,91,91,131,242,242,242,1,118,118,118,142,31,31,31,2,38,38,38,225,225,225,130,242,242,242,1,108,108,108,138,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,163,242,242,242,1,192,192,192,135,31,31,31,2,33,33,33,222,222,222,130,242,242,242,2,240,240,240,61,61,61,150,31,31,31,1,83,83,83,131,242,242,242,1,76,76,76,135,31,31,31,1,205,205,205,130,242,242,242,2,212,212,212,33,33,33,141,31,31,31,1,115,115,115,130,242,242,242,2,217,217,217,33,33,33,138,31,31,31,1,104,45,16,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,164,242,242,242,1,63,63,63,134,31,31,31,1,68,68,68,131,242,242,242,1,187,187,187,151,31,31,31,2,33,33,33,230,230,230,130,242,242,242,1,123,123,123,135,31,31,31,1,108,108,108,131,242,242,242,1,103,103,103,140,31,31,31,2,33,33,33,210,210,210,130,242,242,242,1,128,128,128,139,31,31,31,1,109,46,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,140,242,242,242,1,217,217,217,134,200,200,200,1,237,237,237,144,242,242,242,1,130,130,130,134,31,31,31,1,128,128,128,131,242,242,242,1,123,123,123,152,31,31,31,1,185,185,185,130,242,242,242,1,158,158,158,135,31,31,31,2,36,36,36,217,217,217,130,242,242,242,1,200,200,200,140,31,31,31,1,96,96,96,130,242,242,242,2,232,232,232,43,43,43,139,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,138,242,242,242,1,217,217,217,137,31,31,31,3,36,36,36,96,96,96,190,190,190,141,242,242,242,1,177,177,177,134,31,31,31,1,168,168,168,131,242,242,242,1,68,68,68,152,31,31,31,1,145,145,145,130,242,242,242,1,187,187,187,136,31,31,31,1,128,128,128,131,242,242,242], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+235532);
  /* memory initializer */ allocate([1,86,86,86,139,31,31,31,1,195,195,195,130,242,242,242,1,148,148,148,140,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,43,43,43,138,242,242,242,1,217,217,217,140,31,31,31,1,120,120,120,140,242,242,242,1,222,222,222,134,31,31,31,1,205,205,205,130,242,242,242,2,235,235,235,33,33,33,152,31,31,31,1,123,123,123,130,242,242,242,1,207,207,207,136,31,31,31,2,41,41,41,230,230,230,130,242,242,242,1,182,182,182,138,31,31,31,1,78,78,78,130,242,242,242,2,240,240,240,56,56,56,140,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,138,31,31,31,1,41,41,41,138,242,242,242,1,217,217,217,141,31,31,31,1,148,148,148,140,242,242,242,1,41,41,41,133,31,31,31,1,235,235,235,130,242,242,242,1,202,202,202,153,31,31,31,1,103,103,103,130,242,242,242,1,225,225,225,137,31,31,31,1,145,145,145,131,242,242,242,1,68,68,68,137,31,31,31,1,175,175,175,130,242,242,242,1,170,170,170,141,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,141,31,31,31,2,43,43,43,232,232,232,139,242,242,242,1,63,63,63,132,31,31,31,1,43,43,43,131,242,242,242,1,180,180,180,153,31,31,31,1,93,93,93,130,242,242,242,1,230,230,230,137,31,31,31,2,51,51,51,237,237,237,130,242,242,242,1,165,165,165,136,31,31,31,2,61,61,61,240,240,240,130,242,242,242,1,73,73,73,141,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,155,155,155,139,242,242,242,1,73,73,73,132,31,31,31,1,63,63,63,131,242,242,242,1,163,163,163,153,31,31,31,1,93,93,93,130,242,242,242,1,232,232,232,138,31,31,31,1,163,163,163,130,242,242,242,2,240,240,240,56,56,56,135,31,31,31,1,155,155,155,130,242,242,242,1,190,190,190,142,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,110,110,110,139,242,242,242,1,81,81,81,132,31,31,31,1,71,71,71,131,242,242,242,1,155,155,155,153,31,31,31,1,93,93,93,130,242,242,242,1,230,230,230,138,31,31,31,1,66,66,66,131,242,242,242,1,150,150,150,134,31,31,31,2,48,48,48,235,235,235,130,242,242,242,1,96,96,96,142,31,31,31,1,113,47,15,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,86,86,86,139,242,242,242,1,76,76,76,132,31,31,31,1,81,81,81,131,242,242,242,1,155,155,155,153,31,31,31,1,93,93,93,130,242,242,242,1,230,230,230,139,31,31,31,1,182,182,182,130,242,242,242,2,232,232,232,46,46,46,133,31,31,31,1,138,138,138,130,242,242,242,2,210,210,210,33,33,33,142,31,31,31,1,118,48,14,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,73,73,73,139,242,242,242,1,66,66,66,132,31,31,31,1,81,81,81,131,242,242,242,1,145,145,145,153,31,31,31,1,93,93,93,130,242,242,242,1,230,230,230,139,31,31,31,1,83,83,83,131,242,242,242,1,133,133,133,132,31,31,31,2,38,38,38,225,225,225,130,242,242,242,1,115,115,115,143,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,68,68,68,139,242,242,242,1,56,56,56,132,31,31,31,1,81,81,81,131,242,242,242,1,143,143,143,153,31,31,31,1,103,103,103,130,242,242,242,1,230,230,230,140,31,31,31,1,200,200,200,130,242,242,242,2,222,222,222,38,38,38,131,31,31,31,1,118,118,118,130,242,242,242,2,225,225,225,38,38,38,143,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,73,73,73,138,242,242,242,2,240,240,240,36,36,36,132,31,31,31,1,81,81,81,131,242,242,242,1,143,143,143,153,31,31,31,1,105,105,105,130,242,242,242,1,230,230,230,140,31,31,31,1,103,103,103,131,242,242,242,1,115,115,115,130,31,31,31,2,33,33,33,212,212,212,130,242,242,242,1,140,140,140,144,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,138,242,242,242,1,217,217,217,142,31,31,31,1,93,93,93,138,242,242,242,1,215,215,215,133,31,31,31,1,81,81,81,131,242,242,242,1,143,143,143,153,31,31,31,1,105,105,105,130,242,242,242,1,217,217,217,140,31,31,31,2,33,33,33,215,215,215,130,242,242,242,4,212,212,212,33,33,33,31,31,31,98,98,98,130,242,242,242,2,235,235,235,48,48,48,144,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,240,240,240,137,242,242,242,1,230,230,230,142,31,31,31,1,125,125,125,138,242,242,242,1,170,170,170,133,31,31,31,1,91,91,91,131,242,242,242,1,143,143,143,153,31,31,31,1,105,105,105,130,242,242,242,1,217,217,217,141,31,31,31,1,120,120,120,131,242,242,242,3,101,101,101,31,31,31,195,195,195,130,242,242,242,1,158,158,158,145,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,142,31,31,31,1,177,177,177,138,242,242,242,1,118,118,118,133,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,105,105,105,130,242,242,242,1,217,217,217,141,31,31,31,2,41,41,41,225,225,225,130,242,242,242,2,197,197,197,81,81,81,131,242,242,242,1,66,66,66,145,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,141,31,31,31,2,51,51,51,235,235,235,137,242,242,242,2,240,240,240,53,53,53,133,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,110,110,110,130,242,242,242,1,217,217,217,142,31,31,31,1,140,140,140,131,242,242,242,1,212,212,212,130,242,242,242,1,177,177,177,146,31,31,31,1,123,49,13,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,141,31,31,31,1,143,143,143,138,242,242,242,1,185,185,185,134,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,118,118,118,130,242,242,242,1,217,217,217,142,31,31,31,2,48,48,48,235,235,235,133,242,242,242,1,83,83,83,146,31,31,31,1,126,50,12,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,140,31,31,31,2,88,88,88,240,240,240,138,242,242,242,1,86,86,86,134,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,118,118,118,130,242,242,242,1,207,207,207,143,31,31,31,1,158,158,158,132,242,242,242,1,202,202,202,147,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,139,31,31,31,2,96,96,96,230,230,230,138,242,242,242,1,185,185,185,135,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,118,118,118,130,242,242,242,1,205,205,205,143,31,31,31,2,61,61,61,240,240,240,131,242,242,242,1,105,105,105,147,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,137,31,31,31,2,73,73,73,170,170,170,139,242,242,242,2,230,230,230,58,58,58,135,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,118,118,118,130,242,242,242,1,205,205,205,144,31,31,31,1,190,190,190,131,242,242,242,1,58,58,58,147,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,1,230,230,230,131,31,31,31,6,38,38,38,73,73,73,103,103,103,143,143,143,180,180,180,220,220,220,141,242,242,242,1,105,105,105,136,31,31,31,1,93,93,93,131,242,242,242,1,143,143,143,153,31,31,31,1,118,118,118,130,242,242,242,1,205,205,205,143,31,31,31,2,48,48,48,232,232,232,131,242,242,242,1,155,155,155,147,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,137,242,242,242,3,240,240,240,200,200,200,225,225,225,147,242,242,242,1,125,125,125,137,31,31,31,1,93,93,93,131,242,242,242,1,135,135,135,153,31,31,31,1,130,130,130,130,242,242,242,1,205,205,205,143,31,31,31,1,138,138,138,132,242,242,242,2,235,235,235,51,51,51,146,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,230,230,230,158,242,242,242,1,150,150,150,138,31,31,31,1,93,93,93,131,242,242,242,1,130,130,130,153,31,31,31,1,130,130,130,130,242,242,242,1,197,197,197,142,31,31,31,2,41,41,41,227,227,227,133,242,242,242,1,143,143,143,146,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,217,217,217,158,242,242,242,3,235,235,235,145,145,145,41,41,41,136,31,31,31,1,93,93,93,131,242,242,242,1,130,130,130,153,31,31,31,1,130,130,130,130,242,242,242,1,192,192,192,142,31,31,31,1,125,125,125,131,242,242,242,1,230,230,230,130,242,242,242,2,232,232,232,43,43,43,145,31,31,31,1,131,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,155,137,127,139,31,31,31,1,217,217,217,160,242,242,242,2,210,210,210,66,66,66,135,31,31,31,1,93,93,93,131,242,242,242,1,130,130,130,153,31,31,31,1,130,130,130,130,242,242,242,1,192,192,192,141,31,31,31,2,36,36,36,220,220,220,130,242,242,242,2,182,182,182,125,125,125,131,242,242,242,1,135,135,135,145,31,31,31,1,133,51,11,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,161,242,242,242,2,230,230,230,76,76,76,134,31,31,31,1,93,93,93,131,242,242,242,1,130,130,130,153,31,31,31,1,130,130,130,130,242,242,242,1,192,192,192,141,31,31,31,1,113,113,113,131,242,242,242,3,83,83,83,41,41,41,225,225,225,130,242,242,242,2,225,225,225,41,41,41,144,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,162,242,242,242,2,230,230,230,66,66,66,133,31,31,31,1,93,93,93,131,242,242,242,1,130,130,130,153,31,31,31,1,140,140,140,130,242,242,242,1,192,192,192,140,31,31,31,2,33,33,33,210,210,210,130,242,242,242,1,195,195,195,130,31,31,31,1,135,135,135,131,242,242,242,1,125,125,125,144,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,163,242,242,242,2,207,207,207,36,36,36,132,31,31,31,1,93,93,93,131,242,242,242,1,130,130,130,153,31,31,31,1,143,143,143,130,242,242,242,1,187,187,187,140,31,31,31,1,101,101,101,131,242,242,242,1,98,98,98,130,31,31,31,2,43,43,43,230,230,230,130,242,242,242,2,220,220,220,36,36,36,143,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,164,242,242,242,1,143,143,143,132,31,31,31,1,101,101,101,131,242,242,242,1,130,130,130,153,31,31,31,1,143,143,143,130,242,242,242,1,180,180,180,140,31,31,31,1,200,200,200,130,242,242,242,2,207,207,207,33,33,33,131,31,31,31,1,138,138,138,131,242,242,242,1,115,115,115,143,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,164,242,242,242,2,232,232,232,48,48,48,131,31,31,31,1,105,105,105,131,242,242,242,1,130,130,130,153,31,31,31,1,143,143,143,130,242,242,242,1,180,180,180,139,31,31,31,1,88,88,88,131,242,242,242,1,110,110,110,132,31,31,31,2,46,46,46,232,232,232,130,242,242,242,2,212,212,212,33,33,33,142,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,165,242,242,242,1,145,145,145,131,31,31,31,1,105,105,105,131,242,242,242,1,130,130,130,153,31,31,31,1,143,143,143,130,242,242,242,1,180,180,180,139,31,31,31,1,187,187,187,130,242,242,242,2,217,217,217,36,36,36,133,31,31,31,1,148,148,148,131,242,242,242,1,105,105,105,142,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,217,217,217,145,242,242,242,1,235,235,235,130,200,200,200,1,212,212,212,144,242,242,242,2,225,225,225,33,33,33,130,31,31,31,1,105,105,105,131,242,242,242,1,130,130,130,153,31,31,31,1,148,148,148,130,242,242,242,1,180,180,180,138,31,31,31,1,76,76,76,131,242,242,242,1,123,123,123,134,31,31,31,2,51,51,51,235,235,235,130,242,242,242,1,205,205,205,142,31,31,31,1,141,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,137,242,242,242,7,237,237,237,158,158,158,148,148,148,115,115,115,98,98,98,73,73,73,48,48,48,134,31,31,31,3,76,76,76,135,135,135,225,225,225,141,242,242,242,1,81,81,81,130,31,31,31,1,105,105,105,131,242,242,242,1,130,130,130,153,31,31,31,1,155,155,155,130,242,242,242,1,177,177,177,138,31,31,31,1,175,175,175,130,242,242,242,2,225,225,225,41,41,41,135,31,31,31,1,150,150,150,131,242,242,242,1,96,96,96,141,31,31,31,1,143,53,9,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,137,242,242,242,1,235,235,235,142,31,31,31,2,43,43,43,172,172,172,140,242,242,242,1,140,140,140,130,31,31,31,1,105,105,105,131,242,242,242,1,125,125,125,153,31,31,31,1,155,155,155,130,242,242,242,1,168,168,168,137,31,31,31,1,66,66,66,131,242,242,242,1,135,135,135,136,31,31,31,2,53,53,53,237,237,237,130,242,242,242,1,197,197,197,141,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,144,31,31,31,1,168,168,168,139,242,242,242,1,180,180,180,130,31,31,31,1,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,155,155,155,130,242,242,242,1,168,168,168,137,31,31,31,1,165,165,165,130,242,242,242,2,232,232,232,48,48,48,137,31,31,31,1,160,160,160,131,242,242,242,1,86,86,86,140,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,144,31,31,31,2,41,41,41,227,227,227,138,242,242,242,1,222,222,222,130,31,31,31,1,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,155,155,155,130,242,242,242,1,168,168,168,136,31,31,31,2,56,56,56,240,240,240,130,242,242,242,1,150,150,150,138,31,31,31,2,58,58,58,240,240,240,130,242,242,242,1,187,187,187,140,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,145,31,31,31,1,135,135,135,139,242,242,242,3,43,43,43,31,31,31,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,155,155,155,130,242,242,242,1,168,168,168,136,31,31,31,1,153,153,153,130,242,242,242,2,237,237,237,56,56,56,139,31,31,31,1,163,163,163,131,242,242,242,1,76,76,76,139,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,145,31,31,31,1,68,68,68,139,242,242,242,3,63,63,63,31,31,31,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,168,168,168,130,242,242,242,1,160,160,160,135,31,31,31,2,48,48,48,235,235,235,130,242,242,242,1,163,163,163,140,31,31,31,2,63,63,63,240,240,240,130,242,242,242,1,175,175,175,139,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,145,31,31,31,2,33,33,33,230,230,230,138,242,242,242,3,78,78,78,31,31,31,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,172,172,172,130,242,242,242,1,150,150,150,135,31,31,31,1,140,140,140,130,242,242,242,2,240,240,240,66,66,66,141,31,31,31,1,170,170,170,131,242,242,242,1,66,66,66,138,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,146,31,31,31,1,200,200,200,138,242,242,242,3,81,81,81,31,31,31,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,185,185,185,130,242,242,242,1,140,140,140,134,31,31,31,2,41,41,41,230,230,230,130,242,242,242,1,175,175,175,142,31,31,31,1,68,68,68,131,242,242,242,1,168,168,168,138,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,205,205,205,138,242,242,242,146,31,31,31,1,187,187,187,138,242,242,242,3,81,81,81,31,31,31,105,105,105,131,242,242,242,1,118,118,118,153,31,31,31,1,207,207,207,130,242,242,242,1,115,115,115,134,31,31,31,1,128,128,128,131,242,242,242,1,76,76,76,143,31,31,31,1,175,175,175,130,242,242,242,2,240,240,240,58,58,58,137,31,31,31,1,151,54,7,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,146,31,31,31,1,185,185,185,138,242,242,242,3,71,71,71,31,31,31,105,105,105,131,242,242,242,1,118,118,118,152,31,31,31,2,33,33,33,232,232,232,130,242,242,242,1,88,88,88,133,31,31,31,2,36,36,36,222,222,222,130,242,242,242,1,190,190,190,144,31,31,31,1,73,73,73,131,242,242,242,1,158,158,158,137,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,146,31,31,31,1,192,192,192,138,242,242,242,3,56,56,56,31,31,31,105,105,105,131,242,242,242,1,128,128,128,152,31,31,31,1,68,68,68,131,242,242,242,1,51,51,51,133,31,31,31,1,115,115,115,131,242,242,242,1,91,91,91,145,31,31,31,1,182,182,182,130,242,242,242,2,237,237,237,53,53,53,136,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,146,31,31,31,1,212,212,212,137,242,242,242,4,240,240,240,36,36,36,31,31,31,96,96,96,131,242,242,242,1,143,143,143,152,31,31,31,1,118,118,118,130,242,242,242,1,215,215,215,133,31,31,31,2,33,33,33,212,212,212,130,242,242,242,1,202,202,202,146,31,31,31,1,81,81,81,131,242,242,242,1,148,148,148,136,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,145,31,31,31,2,33,33,33,237,237,237,137,242,242,242,1,215,215,215,130,31,31,31,1,81,81,81,131,242,242,242,1,168,168,168,152,31,31,31,1,185,185,185,130,242,242,242,1,168,168,168,133,31,31,31,1,103,103,103,131,242,242,242,1,103,103,103,147,31,31,31,1,187,187,187,130,242,242,242,2,232,232,232,46,46,46,135,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,145,31,31,31,1,71,71,71,138,242,242,242,1,180,180,180,130,31,31,31,1,58,58,58,131,242,242,242,1,215,215,215,151,31,31,31,1,71,71,71,131,242,242,242,1,96,96,96,133,31,31,31,1,202,202,202,130,242,242,242,2,212,212,212,33,33,33,147,31,31,31,1,86,86,86,131,242,242,242,1,138,138,138,135,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,1,33,33,33,144,31,31,31,1,130,130,130,138,242,242,242,1,133,133,133,130,31,31,31,2,33,33,33,230,230,230,131,242,242,242,1,53,53,53,150,31,31,31,1,165,165,165,130,242,242,242,2,222,222,222,38,38,38,132,31,31,31,1,91,91,91,131,242,242,242,1,115,115,115,149,31,31,31,1,195,195,195,130,242,242,242,2,227,227,227,41,41,41,134,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,1,43,43,43,144,31,31,31,1,207,207,207,138,242,242,242,1,81,81,81,131,31,31,31,1,180,180,180,131,242,242,242,1,115,115,115,149,31,31,31,2,71,71,71,237,237,237,130,242,242,242,1,130,130,130,133,31,31,31,1,190,190,190,130,242,242,242,2,222,222,222,36,36,36,149,31,31,31,1,93,93,93,131,242,242,242,1,128,128,128,134,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,1,43,43,43,143,31,31,31,1,105,105,105,138,242,242,242,2,227,227,227,33,33,33,131,31,31,31,1,130,130,130,131,242,242,242,2,212,212,212,33,33,33,147,31,31,31,2,38,38,38,207,207,207,130,242,242,242,2,230,230,230,43,43,43,132,31,31,31,1,78,78,78,131,242,242,242,1,128,128,128,151,31,31,31,4,200,200,200,242,242,242,200,200,200,138,138,138,134,31,31,31,1,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,192,192,192,138,242,242,242,1,43,43,43,142,31,31,31,2,53,53,53,222,222,222,138,242,242,242,1,160,160,160,132,31,31,31,1,81,81,81,132,242,242,242,1,103,103,103,146,31,31,31,2,33,33,33,165,165,165,131,242,242,242,1,140,140,140,133,31,31,31,1,177,177,177,130,242,242,242,2,230,230,230,43,43,43,151,31,31,31,1,53,53,53,137,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,138,242,242,242,1,43,43,43,141,31,31,31,2,56,56,56,207,207,207,139,242,242,242,1,76,76,76,133,31,31,31,1,210,210,210,131,242,242,242,2,230,230,230,58,58,58,144,31,31,31,2,36,36,36,170,170,170,131,242,242,242,2,210,210,210,36,36,36,132,31,31,31,1,68,68,68,131,242,242,242,1,143,143,143,162,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,138,242,242,242,1,43,43,43,140,31,31,31,2,115,115,115,232,232,232,139,242,242,242,1,192,192,192,134,31,31,31,1,115,115,115,132,242,242,242,2,202,202,202,51,51,51,142,31,31,31,2,61,61,61,190,190,190,131,242,242,242,2,235,235,235,68,68,68,133,31,31,31,1,168,168,168,130,242,242,242,2,235,235,235,51,51,51,162,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,138,242,242,242,1,43,43,43,137,31,31,31,3,56,56,56,128,128,128,215,215,215,141,242,242,242,1,78,78,78,134,31,31,31,2,33,33,33,210,210,210,132,242,242,242,2,217,217,217,81,81,81,139,31,31,31,3,46,46,46,138,138,138,235,235,235,131,242,242,242,2,240,240,240,96,96,96,133,31,31,31,2,58,58,58,240,240,240,130,242,242,242,1,155,155,155,163,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,138,242,242,242,1,43,43,43,132,31,31,31,5,43,43,43,78,78,78,115,115,115,163,163,163,215,215,215,143,242,242,242,1,175,175,175,136,31,31,31,2,76,76,76,237,237,237,133,242,242,242,3,182,182,182,93,93,93,33,33,33,133,31,31,31,4,48,48,48,98,98,98,165,165,165,237,237,237,132,242,242,242,2,237,237,237,101,101,101,134,31,31,31,5,155,155,155,242,242,242,235,235,235,200,200,200,58,58,58,163,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,138,242,242,242,5,118,118,118,133,133,133,160,160,160,200,200,200,227,227,227,147,242,242,242,2,235,235,235,61,61,61,137,31,31,31,1,105,105,105,135,242,242,242,1,240,240,240,130,200,200,200,3,180,180,180,200,200,200,212,212,212,135,242,242,242,2,220,220,220,83,83,83,135,31,31,31,2,86,86,86,58,58,58,166,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,162,242,242,242,1,120,120,120,139,31,31,31,2,96,96,96,232,232,232,145,242,242,242,2,153,153,153,41,41,41,176,31,31,31,1,168,58,4,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,161,242,242,242,1,168,168,168,141,31,31,31,2,66,66,66,195,195,195,141,242,242,242,3,240,240,240,170,170,170,73,73,73,176,31,31,31,3,36,32,30,63,38,25,173,59,3,255,186,61,0,255,186,61,0,255,186,61,0,215,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,160,242,242,242,2,175,175,175,33,33,33,143,31,31,31,3,83,83,83,180,180,180,232,232,232,135,242,242,242,4,240,240,240,190,190,190,138,138,138,51,51,51,172,31,31,31,6,36,32,30,63,38,25,89,42,19,116,48,14,141,53,9,166,57,4,255,186,61,0,255,186,61,0,255,186,61,0,218,186,61,0,1,232,210,200,170,242,242,242,1,149,134,127,139,31,31,31,1,180,180,180,159,242,242,242,2,145,145,145,33,33,33,147,31,31,31,1,78,78,78,130,115,115,115,5,123,123,123,115,115,115,105,105,105,73,73,73,36,36,36,169,31,31,31,6,33,32,31,63,38,25,89,42,19,113,47,15,139,52,9,164,57,4,255,186,61,0,255,186,61,0,255,186,61,0,224,186,61,0,1,228,196,180,170,242,242,242,1,149,134,127,139,31,31,31,1,168,168,168,157,242,242,242,2,235,235,235,108,108,108,193,31,31,31,5,63,38,25,88,42,20,113,47,15,138,52,10,163,57,5,255,186,61,0,255,186,61,0,255,186,61,0,231,186,61,0,2,202,112,68,226,191,174,168,242,242,242,1,149,134,127,139,31,31,31,1,168,168,168,156,242,242,242,2,197,197,197,71,71,71,188,31,31,31,5,63,38,25,86,42,20,111,47,15,138,52,10,161,56,5,255,186,61,0,255,186,61,0,255,186,61,0,239,186,61,0,3,194,87,34,218,164,138,239,232,229,165,242,242,242,1,149,134,127,139,31,31,31,1,168,168,168,154,242,242,242,2,207,207,207,110,110,110,184,31,31,31,5,61,36,25,86,42,20,109,46,15,136,52,10,161,56,5,255,186,61,0,255,186,61,0,255,186,61,0,247,186,61,0,3,189,70,11,209,137,101,233,213,203,163,242,242,242,1,149,134,127,139,31,31,31,1,168,168,168,151,242,242,242,3,230,230,230,168,168,168,88,88,88,180,31,31,31,5,58,37,26,84,41,20,109,46,15,133,51,11,159,56,5,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,3,186,61,0,200,109,64,224,185,166,161,242,242,242,1,149,134,127,139,31,31,31,1,168,168,168,147,242,242,242,5,210,210,210,175,175,175,128,128,128,83,83,83,33,33,33,176,31,31,31,5,58,37,26,83,41,21,108,46,16,133,51,11,158,56,6,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,137,186,61,0,3,194,83,28,216,160,132,238,229,226,158,242,242,242,1,149,134,127,139,31,31,31,1,168,168,168,141,242,242,242,6,215,215,215,180,180,180,145,145,145,110,110,110,73,73,73,33,33,33,175,31,31,31,5,58,37,26,83,41,21,106,46,16,131,51,11,158,56,6,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,145,186,61,0,3,189,68,9,208,132,94,231,208,197,156,242,242,242,1,149,135,127,139,31,31,31,1,168,168,168,135,242,242,242,6,220,220,220,185,185,185,150,150,150,115,115,115,73,73,73,38,38,38,175,31,31,31,5,56,36,26,81,41,21,106,46,16,129,50,11,156,55,6,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,154,186,61,0,3,199,104,57,223,180,159,241,239,239,153,242,242,242,1,145,135,129,139,31,31,31,8,168,168,168,242,242,242,225,225,225,190,190,190,155,155,155,115,115,115,78,78,78,43,43,43,175,31,31,31,6,53,36,27,78,40,22,104,45,16,129,50,11,156,55,6,184,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,161,186,61,0,3,191,78,23,215,155,125,237,226,223,151,242,242,242,1,145,135,129,139,31,31,31,2,58,58,58,48,48,48,175,31,31,31,6,53,36,27,78,40,22,103,45,17,128,50,12,156,55,6,184,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,169,186,61,0,3,188,66,6,206,127,88,230,205,192,149,242,242,242,1,145,135,129,182,31,31,31,6,51,35,27,78,40,22,103,45,17,126,50,12,156,55,6,183,61,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,178,186,61,0,3,199,100,51,222,177,154,241,238,237,146,242,242,242,1,145,135,129,176,31,31,31,6,49,34,27,76,40,22,101,45,17,126,50,12,156,55,6,181,60,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,186,186,61,0,3,192,77,20,213,149,117,237,226,219,144,242,242,242,1,145,135,129,170,31,31,31,6,49,34,27,73,41,23,98,44,18,124,49,12,156,55,6,181,60,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,194,186,61,0,3,187,64,3,206,126,86,230,205,192,142,242,242,242,1,145,135,129,164,31,31,31,6,48,34,28,73,41,23,98,44,18,124,49,12,153,55,7,179,60,1,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,203,186,61,0,3,199,100,51,222,177,154,241,238,237,139,242,242,242,1,145,135,129,158,31,31,31,6,46,35,28,71,39,23,98,44,18,124,49,12,153,55,7,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,211,186,61,0,3,192,77,20,213,149,117,237,226,219,137,242,242,242,1,145,135,129,152,31,31,31,6,46,35,28,69,38,23,96,44,18,124,49,12,151,54,7,178,60,2,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,219,186,61,0,3,187,64,3,205,123,83,229,200,185,135,242,242,242,1,149,139,133,146,31,31,31,6,44,34,28,69,38,23,93,43,19,124,49,12,151,54,7,176,59,2,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,228,186,61,0,3,198,96,46,220,172,148,240,237,234,132,242,242,242,1,156,145,140,140,31,31,31,6,43,33,29,68,38,24,93,43,19,124,49,12,148,54,8,173,59,3,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,236,186,61,0,3,191,74,17,212,145,112,235,222,215,130,242,242,242,1,156,145,140,134,31,31,31,6,43,33,29,66,39,24,93,43,19,123,49,13,148,54,8,171,58,3,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,245,186,61,0,9,204,120,78,228,196,180,156,145,140,41,33,29,66,39,24,93,43,19,121,49,13,146,53,8,171,58,3,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,253,186,61,0,1,178,65,10,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255,186,61,0,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+245772);
  /* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+256012);
  /* memory initializer */ allocate([200,0,0,0,193,1,0,0,160,0,0,0,144,1,0,0,0,0,0,0,144,1,0,0,8,0,0,0,64,1,0,0,240,0,0,0,40,0,0,0,30,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,50,0,0,0,13,2,0,0,40,0,0,0,224,1,0,0,6,0,0,0,145,1,0,0,8,0,0,0,64,1,0,0,144,1,0,0,40,0,0,0,50,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,50,0,0,0,193,1,0,0,40,0,0,0,144,1,0,0,4,0,0,0,146,1,0,0,8,0,0,0,64,1,0,0,224,1,0,0,40,0,0,0,60,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,50,0,0,0,13,2,0,0,40,0,0,0,224,1,0,0,4,0,0,0,7,2,0,0,5,0,0,0,128,4,0,0,96,3,0,0,160,0,0,0,64,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,182,0,0,0,180,3,0,0,144,0,0,0,96,3,0,0,0,0,0,0,9,2,0,0,6,0,0,0,128,4,0,0,96,3,0,0,160,0,0,0,64,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,108,1,0,0,180,3,0,0,32,1,0,0,96,3,0,0,0,0,0,0,10,2,0,0,7,0,0,0,128,4,0,0,96,3,0,0,160,0,0,0,64,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,108,1,0,0,180,3,0,0,32,1,0,0,96,3,0,0,0,0,0,0,19,2,0,0,8,0,0,0,128,2,0,0,144,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,100,0,0,0,193,1,0,0,80,0,0,0,144,1,0,0,0,0,0,0,34,2,0,0,5,0,0,0,80,3,0,0,224,1,0,0,80,0,0,0,30,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,132,0,0,0,13,2,0,0,106,0,0,0,224,1,0,0,0,0,0,0,35,2,0,0,6,0,0,0,80,3,0,0,224,1,0,0,80,0,0,0,30,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,8,1,0,0,13,2,0,0,212,0,0,0,224,1,0,0,0,0,0,0,36,2,0,0,7,0,0,0,80,3,0,0,224,1,0,0,80,0,0,0,30,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,8,1,0,0,13,2,0,0,212,0,0,0,224,1,0,0,0,0,0,0,37,2,0,0,8,0,0,0,80,3,0,0,224,1,0,0,80,0,0,0,30,0,0,0,8,0,0,0,16,0,0,0,1,0,0,0,0,0,10,0,0,0,1,0,132,0,0,0,13,2,0,0,106,0,0,0,224,1,0,0,0,0,0,0,255,255,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,64,1,0,0,144,1,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,128,11,0,0,8,0,0,56,0,0,0,31,0,0,0,40,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,64,1,0,0,144,1,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,128,11,0,0,8,0,0,56,0,0,0,31,0,0,0,40,0,0,0,25,0,0,0,0,0,0,0,2,0,0,0,9,0,0,0,128,2,0,0,144,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,128,11,0,0,16,0,0,113,0,0,0,31,0,0,0,80,0,0,0,25,0,0,0,0,0,0,0,3,0,0,0,9,0,0,0,128,2,0,0,144,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,128,11,0,0,16,0,0,113,0,0,0,31,0,0,0,80,0,0,0,25,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,64,1,0,0,200,0,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,128,11,0,0,8,0,0,56,0,0,0,127,0,0,0,40,0,0,0,100,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,64,1,0,0,200,0,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,128,11,0,0,8,0,0,56,0,0,0,127,0,0,0,40,0,0,0,100,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,128,2,0,0,200,0,0,0,80,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,128,11,0,0,8,0,0,56,0,0,0,127,0,0,0,40,0,0,0,100,0,0,0,0,0,0,0,8,0,0,0,15,0,0,0,160,0,0,0,200,0,0,0,20,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,128,11,0,0,32,0,0,56,0,0,0,127,0,0,0,40,0,0,0,100,0,0,0,0,0,0,0,9,0,0,0,15,0,0,0,64,1,0,0,200,0,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,128,11,0,0,32,0,0,113,0,0,0,63,0,0,0,80,0,0,0,50,0,0,0,0,0,0,0,10,0,0,0,1,0,0,0,128,2,0,0,200,0,0,0,80,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,128,11,0,0,32,0,0,113,0,0,0,63,0,0,0,80,0,0,0,50,0,0,0,0,0,0,0,255,255,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,64,1,0,0,94,1,0,0,40,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,8,0,0,0,0,128,11,0,0,8,0,0,50,0,0,0,110,1,0,0,40,0,0,0,94,1,0,0,1,0,0,0,1,0,0,0,9,0,0,0,64,1,0,0,94,1,0,0,40,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,8,0,0,0,0,128,11,0,0,8,0,0,50,0,0,0,110,1,0,0,40,0,0,0,94,1,0,0,1,0,0,0,2,0,0,0,9,0,0,0,128,2,0,0,94,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,8,0,0,0,0,128,11,0,0,16,0,0,96,0,0,0,110,1,0,0,80,0,0,0,94,1,0,0,0,0,0,0,3,0,0,0,9,0,0,0,128,2,0,0,94,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,8,0,0,0,0,128,11,0,0,16,0,0,96,0,0,0,110,1,0,0,80,0,0,0,94,1,0,0,0,0,0,0,4,0,0,0,1,0,0,0,64,1,0,0,200,0,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,0,128,11,0,0,64,0,0,60,0,0,0,6,1,0,0,40,0,0,0,200,0,0,0,3,0,0,0,5,0,0,0,1,0,0,0,64,1,0,0,200,0,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,0,128,11,0,0,64,0,0,60,0,0,0,6,1,0,0,40,0,0,0,200,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,128,2,0,0,200,0,0,0,80,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,1,0,0,0,0,128,11,0,0,64,0,0,120,0,0,0,6,1,0,0,80,0,0,0,200,0,0,0,2,0,0,0,7,0,0,0,9,0,0,0,208,2,0,0,94,1,0,0,80,0,0,0,25,0,0,0,9,0,0,0,14,0,0,0,8,0,0,0,0,0,11,0,0,16,0,0,120,0,0,0,184,1,0,0,80,0,0,0,94,1,0,0,0,0,0,0,13,0,0,0,2,0,0,0,64,1,0,0,200,0,0,0,40,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,10,0,0,32,0,0,60,0,0,0,6,1,0,0,40,0,0,0,200,0,0,0,3,0,0,0,14,0,0,0,2,0,0,0,128,2,0,0,200,0,0,0,80,0,0,0,25,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,0,0,10,0,0,64,0,0,120,0,0,0,6,1,0,0,80,0,0,0,200,0,0,0,2,0,0,0,15,0,0,0,2,0,0,0,128,2,0,0,94,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,2,0,0,0,0,0,10,0,0,128,0,0,96,0,0,0,110,1,0,0,80,0,0,0,94,1,0,0,0,0,0,0,16,0,0,0,2,0,0,0,128,2,0,0,94,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,2,0,0,0,0,0,10,0,0,128,0,0,96,0,0,0,110,1,0,0,80,0,0,0,94,1,0,0,0,0,0,0,255,255,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,212,2,0,56,25,4,0,0,0,0,0,0,0,0,0,64,218,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,2,3,2,0,0,1,0,1,0,1,1,1,0,1,0,7,0,0,0,9,0,0,0,128,2,0,0,144,1,0,0,80,0,0,0,25,0,0,0,8,0,0,0,14,0,0,0,1,0,0,0,0,0,11,0,0,16,0,0,97,0,0,0,25,0,0,0,80,0,0,0,25,0,0,0,0,0,0,0,160,0,0,0,8,0,1,0,40,0,0,0,180,0,0,0,9,0,1,0,40,0,0,0,200,0,0,0,10,0,1,0,40,0,0,0,64,1,0,0,8,0,2,0,40,0,1,0,104,1,0,0,9,0,2,0,40,0,1,0,144,1,0,0,10,0,2,0,40,0,1,0,208,2,0,0,9,0,2,0,80,0,3,0,176,4,0,0,15,0,2,0,80,0,2,0,160,5,0,0,18,0,2,0,80,0,4,0,64,11,0,0,36,0,2,0,80,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,11,0,0,0,0,0,0,100,0,0,0,0,0,0,0,184,11,0,0,0,0,0,0,255,255,255,255,0,0,0,0,184,11,0,0,0,0,0,0,255,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+266252);



  var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

  assert(tempDoublePtr % 8 == 0);

  function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

    HEAP8[tempDoublePtr] = HEAP8[ptr];

    HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

    HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

    HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  }

  function copyTempDouble(ptr) {

    HEAP8[tempDoublePtr] = HEAP8[ptr];

    HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

    HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

    HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

    HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

    HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

    HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

    HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

  }


    function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
        Module['noExitRuntime'] = true;

        Browser.mainLoop.runner = function Browser_mainLoop_runner() {
          if (ABORT) return;
          if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
              var remaining = Browser.mainLoop.remainingBlockers;
              var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
              if (blocker.counted) {
                Browser.mainLoop.remainingBlockers = next;
              } else {
                // not counted, but move the progress along a tiny bit
                next = next + 0.5; // do not steal all the next one's progress
                Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
              }
            }
            console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
            Browser.mainLoop.updateStatus();
            setTimeout(Browser.mainLoop.runner, 0);
            return;
          }
          if (Browser.mainLoop.shouldPause) {
            // catch pauses from non-main loop sources
            Browser.mainLoop.paused = true;
            Browser.mainLoop.shouldPause = false;
            return;
          }

          // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
          // VBO double-buffering and reduce GPU stalls.

          if (Module['preMainLoop']) {
            Module['preMainLoop']();
          }

          try {
            Runtime.dynCall('v', func);
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }

          if (Module['postMainLoop']) {
            Module['postMainLoop']();
          }

          if (Browser.mainLoop.shouldPause) {
            // catch pauses from the main loop itself
            Browser.mainLoop.paused = true;
            Browser.mainLoop.shouldPause = false;
            return;
          }
          Browser.mainLoop.scheduler();
        }
        if (fps && fps > 0) {
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
            setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
          }
        } else {
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner);
          }
        }
        Browser.mainLoop.scheduler();

        if (simulateInfiniteLoop) {
          throw 'SimulateInfiniteLoop';
        }
      }



    Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;


    function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
        return !!__ZSt18uncaught_exceptionv.uncaught_exception;
      }



    function ___cxa_is_number_type(type) {
        var isNumber = false;
        try { if (type == __ZTIi) isNumber = true } catch(e){}
        try { if (type == __ZTIj) isNumber = true } catch(e){}
        try { if (type == __ZTIl) isNumber = true } catch(e){}
        try { if (type == __ZTIm) isNumber = true } catch(e){}
        try { if (type == __ZTIx) isNumber = true } catch(e){}
        try { if (type == __ZTIy) isNumber = true } catch(e){}
        try { if (type == __ZTIf) isNumber = true } catch(e){}
        try { if (type == __ZTId) isNumber = true } catch(e){}
        try { if (type == __ZTIe) isNumber = true } catch(e){}
        try { if (type == __ZTIc) isNumber = true } catch(e){}
        try { if (type == __ZTIa) isNumber = true } catch(e){}
        try { if (type == __ZTIh) isNumber = true } catch(e){}
        try { if (type == __ZTIs) isNumber = true } catch(e){}
        try { if (type == __ZTIt) isNumber = true } catch(e){}
        return isNumber;
      }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
        if (possibility == 0) return false;
        if (possibilityType == 0 || possibilityType == definiteType)
          return true;
        var possibility_type_info;
        if (___cxa_is_number_type(possibilityType)) {
          possibility_type_info = possibilityType;
        } else {
          var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
          possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
        }
        switch (possibility_type_info) {
        case 0: // possibility is a pointer
          // See if definite type is a pointer
          var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
          var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
          if (definite_type_info == 0) {
            // Also a pointer; compare base types of pointers
            var defPointerBaseAddr = definiteType+8;
            var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
            var possPointerBaseAddr = possibilityType+8;
            var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
            return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
          } else
            return false; // one pointer and one non-pointer
        case 1: // class with no base class
          return false;
        case 2: // class with base class
          var parentTypeAddr = possibilityType + 8;
          var parentType = HEAP32[((parentTypeAddr)>>2)];
          return ___cxa_does_inherit(definiteType, parentType, possibility);
        default:
          return false; // some unencountered type
        }
      }

    function ___resumeException(ptr) {
        if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
        throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
      }

    var ___cxa_last_thrown_exception=0;

    var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
        if (thrown == -1) thrown = ___cxa_last_thrown_exception;
        header = thrown - ___cxa_exception_header_size;
        if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
        var typeArray = Array.prototype.slice.call(arguments, 2);

        // If throwntype is a pointer, this means a pointer has been
        // thrown. When a pointer is thrown, actually what's thrown
        // is a pointer to the pointer. We'll dereference it.
        if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
          var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
          var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
          if (throwntypeInfo == 0)
            thrown = HEAP32[((thrown)>>2)];
        }
        // The different catch blocks are denoted by different types.
        // Due to inheritance, those types may not precisely match the
        // type of the thrown object. Find one which matches, and
        // return the type of the catch block which should be called.
        for (var i = 0; i < typeArray.length; i++) {
          if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
            return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
        // Shouldn't happen unless we have bogus data in typeArray
        // or encounter a type for which emscripten doesn't have suitable
        // typeinfo defined. Best-efforts match just in case.
        return ((asm["setTempRet0"](throwntype),thrown)|0);
      }function ___gxx_personality_v0() {
      }


    Module["_strlen"] = _strlen;

    function ___cxa_allocate_exception(size) {
        var ptr = _malloc(size + ___cxa_exception_header_size);
        return ptr + ___cxa_exception_header_size;
      }

    function ___cxa_free_exception(ptr) {
        try {
          return _free(ptr - ___cxa_exception_header_size);
        } catch(e) { // XXX FIXME
        }
      }

    function ___cxa_throw(ptr, type, destructor) {
        if (!___cxa_throw.initialized) {
          try {
            HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
          } catch(e){}
          try {
            HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
          } catch(e){}
          try {
            HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
          } catch(e){}
          ___cxa_throw.initialized = true;
        }
        var header = ptr - ___cxa_exception_header_size;
        HEAP32[((header)>>2)]=type;
        HEAP32[(((header)+(4))>>2)]=destructor;
        ___cxa_last_thrown_exception = ptr;
        if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
          __ZSt18uncaught_exceptionv.uncaught_exception = 1;
        } else {
          __ZSt18uncaught_exceptionv.uncaught_exception++;
        }
        throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
      }

    function ___cxa_call_unexpected(exception) {
        Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
        ABORT = true;
        throw exception;
      }




    var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

    var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};


    var ___errno_state=0;function ___setErrNo(value) {
        // For convenient setting and returning of errno.
        HEAP32[((___errno_state)>>2)]=value;
        return value;
      }

    var PATH={splitPath:function (filename) {
          var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
          return splitPathRe.exec(filename).slice(1);
        },normalizeArray:function (parts, allowAboveRoot) {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;
          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          }
          // if the path is allowed to go above the root, restore leading ..s
          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }
          return parts;
        },normalize:function (path) {
          var isAbsolute = path.charAt(0) === '/',
              trailingSlash = path.substr(-1) === '/';
          // Normalize the path
          path = PATH.normalizeArray(path.split('/').filter(function(p) {
            return !!p;
          }), !isAbsolute).join('/');
          if (!path && !isAbsolute) {
            path = '.';
          }
          if (path && trailingSlash) {
            path += '/';
          }
          return (isAbsolute ? '/' : '') + path;
        },dirname:function (path) {
          var result = PATH.splitPath(path),
              root = result[0],
              dir = result[1];
          if (!root && !dir) {
            // No dirname whatsoever
            return '.';
          }
          if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
          }
          return root + dir;
        },basename:function (path) {
          // EMSCRIPTEN return '/'' for '/', not an empty string
          if (path === '/') return '/';
          var lastSlash = path.lastIndexOf('/');
          if (lastSlash === -1) return path;
          return path.substr(lastSlash+1);
        },extname:function (path) {
          return PATH.splitPath(path)[3];
        },join:function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return PATH.normalize(paths.join('/'));
        },join2:function (l, r) {
          return PATH.normalize(l + '/' + r);
        },resolve:function () {
          var resolvedPath = '',
            resolvedAbsolute = false;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = (i >= 0) ? arguments[i] : FS.cwd();
            // Skip empty and invalid entries
            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          }
          // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)
          resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
            return !!p;
          }), !resolvedAbsolute).join('/');
          return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
        },relative:function (from, to) {
          from = PATH.resolve(from).substr(1);
          to = PATH.resolve(to).substr(1);
          function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }
          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;
          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }
          var outputParts = [];
          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }
          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        }};

    var TTY={ttys:[],init:function () {
          // https://github.com/kripken/emscripten/pull/1555
          // if (ENVIRONMENT_IS_NODE) {
          //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
          //   // device, it always assumes it's a TTY device. because of this, we're forcing
          //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
          //   // with text files until FS.init can be refactored.
          //   process['stdin']['setEncoding']('utf8');
          // }
        },shutdown:function () {
          // https://github.com/kripken/emscripten/pull/1555
          // if (ENVIRONMENT_IS_NODE) {
          //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
          //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
          //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
          //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
          //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
          //   process['stdin']['pause']();
          // }
        },register:function (dev, ops) {
          TTY.ttys[dev] = { input: [], output: [], ops: ops };
          FS.registerDevice(dev, TTY.stream_ops);
        },stream_ops:{open:function (stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            stream.tty = tty;
            stream.seekable = false;
          },close:function (stream) {
            // flush any pending line data
            if (stream.tty.output.length) {
              stream.tty.ops.put_char(stream.tty, 10);
            }
          },read:function (stream, buffer, offset, length, pos /* ignored */) {
            if (!stream.tty || !stream.tty.ops.get_char) {
              throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = stream.tty.ops.get_char(stream.tty);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },write:function (stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
              throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
            }
            for (var i = 0; i < length; i++) {
              try {
                stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }},default_tty_ops:{get_char:function (tty) {
            if (!tty.input.length) {
              var result = null;
              if (ENVIRONMENT_IS_NODE) {
                result = process['stdin']['read']();
                if (!result) {
                  if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                    return null;  // EOF
                  }
                  return undefined;  // no data available
                }
              } else if (typeof window != 'undefined' &&
                typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');  // returns null on cancel
                if (result !== null) {
                  result += '\n';
                }
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
                if (result !== null) {
                  result += '\n';
                }
              }
              if (!result) {
                return null;
              }
              tty.input = intArrayFromString(result, true);
            }
            return tty.input.shift();
          },put_char:function (tty, val) {
            if (val === null || val === 10) {
              Module['print'](tty.output.join(''));
              tty.output = [];
            } else {
              tty.output.push(TTY.utf8.processCChar(val));
            }
          }},default_tty1_ops:{put_char:function (tty, val) {
            if (val === null || val === 10) {
              Module['printErr'](tty.output.join(''));
              tty.output = [];
            } else {
              tty.output.push(TTY.utf8.processCChar(val));
            }
          }}};

    var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
          return MEMFS.createNode(null, '/', 16384 | 0777, 0);
        },createNode:function (parent, name, mode, dev) {
          if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            // no supported
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
              dir: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr,
                  lookup: MEMFS.node_ops.lookup,
                  mknod: MEMFS.node_ops.mknod,
                  mknod: MEMFS.node_ops.mknod,
                  rename: MEMFS.node_ops.rename,
                  unlink: MEMFS.node_ops.unlink,
                  rmdir: MEMFS.node_ops.rmdir,
                  readdir: MEMFS.node_ops.readdir,
                  symlink: MEMFS.node_ops.symlink
                },
                stream: {
                  llseek: MEMFS.stream_ops.llseek
                }
              },
              file: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr
                },
                stream: {
                  llseek: MEMFS.stream_ops.llseek,
                  read: MEMFS.stream_ops.read,
                  write: MEMFS.stream_ops.write,
                  allocate: MEMFS.stream_ops.allocate,
                  mmap: MEMFS.stream_ops.mmap
                }
              },
              link: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr,
                  readlink: MEMFS.node_ops.readlink
                },
                stream: {}
              },
              chrdev: {
                node: {
                  getattr: MEMFS.node_ops.getattr,
                  setattr: MEMFS.node_ops.setattr
                },
                stream: FS.chrdev_stream_ops
              },
            };
          }
          var node = FS.createNode(parent, name, mode, dev);
          if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
          } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.contents = [];
            node.contentMode = MEMFS.CONTENT_FLEXIBLE;
          } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
          } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
          }
          node.timestamp = Date.now();
          // add the new node to the parent
          if (parent) {
            parent.contents[name] = node;
          }
          return node;
        },ensureFlexible:function (node) {
          if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
            var contents = node.contents;
            node.contents = Array.prototype.slice.call(contents);
            node.contentMode = MEMFS.CONTENT_FLEXIBLE;
          }
        },node_ops:{getattr:function (node) {
            var attr = {};
            // device numbers reuse inode numbers.
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
              attr.size = 4096;
            } else if (FS.isFile(node.mode)) {
              attr.size = node.contents.length;
            } else if (FS.isLink(node.mode)) {
              attr.size = node.link.length;
            } else {
              attr.size = 0;
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
            //       but this is not required by the standard.
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr;
          },setattr:function (node, attr) {
            if (attr.mode !== undefined) {
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              node.timestamp = attr.timestamp;
            }
            if (attr.size !== undefined) {
              MEMFS.ensureFlexible(node);
              var contents = node.contents;
              if (attr.size < contents.length) contents.length = attr.size;
              else while (attr.size > contents.length) contents.push(0);
            }
          },lookup:function (parent, name) {
            throw FS.genericErrors[ERRNO_CODES.ENOENT];
          },mknod:function (parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev);
          },rename:function (old_node, new_dir, new_name) {
            // if we're overwriting a directory at new_name, make sure it's empty.
            if (FS.isDir(old_node.mode)) {
              var new_node;
              try {
                new_node = FS.lookupNode(new_dir, new_name);
              } catch (e) {
              }
              if (new_node) {
                for (var i in new_node.contents) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                }
              }
            }
            // do the internal rewiring
            delete old_node.parent.contents[old_node.name];
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            old_node.parent = new_dir;
          },unlink:function (parent, name) {
            delete parent.contents[name];
          },rmdir:function (parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
            }
            delete parent.contents[name];
          },readdir:function (node) {
            var entries = ['.', '..']
            for (var key in node.contents) {
              if (!node.contents.hasOwnProperty(key)) {
                continue;
              }
              entries.push(key);
            }
            return entries;
          },symlink:function (parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
            node.link = oldpath;
            return node;
          },readlink:function (node) {
            if (!FS.isLink(node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return node.link;
          }},stream_ops:{read:function (stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= contents.length)
              return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) { // non-trivial, and typed array
              buffer.set(contents.subarray(position, position + size), offset);
            } else
            {
              for (var i = 0; i < size; i++) {
                buffer[offset + i] = contents[position + i];
              }
            }
            return size;
          },write:function (stream, buffer, offset, length, position, canOwn) {
            var node = stream.node;
            node.timestamp = Date.now();
            var contents = node.contents;
            if (length && contents.length === 0 && position === 0 && buffer.subarray) {
              // just replace it with the new data
              if (canOwn && offset === 0) {
                node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
                node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
              } else {
                node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
                node.contentMode = MEMFS.CONTENT_FIXED;
              }
              return length;
            }
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            while (contents.length < position) contents.push(0);
            for (var i = 0; i < length; i++) {
              contents[position + i] = buffer[offset + i];
            }
            return length;
          },llseek:function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {  // SEEK_CUR.
              position += stream.position;
            } else if (whence === 2) {  // SEEK_END.
              if (FS.isFile(stream.node.mode)) {
                position += stream.node.contents.length;
              }
            }
            if (position < 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            stream.ungotten = [];
            stream.position = position;
            return position;
          },allocate:function (stream, offset, length) {
            MEMFS.ensureFlexible(stream.node);
            var contents = stream.node.contents;
            var limit = offset + length;
            while (limit > contents.length) contents.push(0);
          },mmap:function (stream, buffer, offset, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            // Only make a new copy when MAP_PRIVATE is specified.
            if ( !(flags & 2) &&
                  (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
              // We can't emulate MAP_SHARED when the file is not backed by the buffer
              // we're mapping to (e.g. the HEAP buffer).
              allocated = false;
              ptr = contents.byteOffset;
            } else {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              allocated = true;
              ptr = _malloc(length);
              if (!ptr) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
              }
              buffer.set(contents, ptr);
            }
            return { ptr: ptr, allocated: allocated };
          }}};

    var IDBFS={dbs:{},indexedDB:function () {
          return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
          return MEMFS.mount.apply(null, arguments);
        },syncfs:function (mount, populate, callback) {
          IDBFS.getLocalSet(mount, function(err, local) {
            if (err) return callback(err);

            IDBFS.getRemoteSet(mount, function(err, remote) {
              if (err) return callback(err);

              var src = populate ? remote : local;
              var dst = populate ? local : remote;

              IDBFS.reconcile(src, dst, callback);
            });
          });
        },reconcile:function (src, dst, callback) {
          var total = 0;

          var create = {};
          for (var key in src.files) {
            if (!src.files.hasOwnProperty(key)) continue;
            var e = src.files[key];
            var e2 = dst.files[key];
            if (!e2 || e.timestamp > e2.timestamp) {
              create[key] = e;
              total++;
            }
          }

          var remove = {};
          for (var key in dst.files) {
            if (!dst.files.hasOwnProperty(key)) continue;
            var e = dst.files[key];
            var e2 = src.files[key];
            if (!e2) {
              remove[key] = e;
              total++;
            }
          }

          if (!total) {
            // early out
            return callback(null);
          }

          var completed = 0;
          function done(err) {
            if (err) return callback(err);
            if (++completed >= total) {
              return callback(null);
            }
          };

          // create a single transaction to handle and IDB reads / writes we'll need to do
          var db = src.type === 'remote' ? src.db : dst.db;
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

          for (var path in create) {
            if (!create.hasOwnProperty(path)) continue;
            var entry = create[path];

            if (dst.type === 'local') {
              // save file to local
              try {
                if (FS.isDir(entry.mode)) {
                  FS.mkdir(path, entry.mode);
                } else if (FS.isFile(entry.mode)) {
                  var stream = FS.open(path, 'w+', 0666);
                  FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                  FS.close(stream);
                }
                done(null);
              } catch (e) {
                return done(e);
              }
            } else {
              // save file to IDB
              var req = store.put(entry, path);
              req.onsuccess = function req_onsuccess() { done(null); };
              req.onerror = function req_onerror() { done(this.error); };
            }
          }

          for (var path in remove) {
            if (!remove.hasOwnProperty(path)) continue;
            var entry = remove[path];

            if (dst.type === 'local') {
              // delete file from local
              try {
                if (FS.isDir(entry.mode)) {
                  // TODO recursive delete?
                  FS.rmdir(path);
                } else if (FS.isFile(entry.mode)) {
                  FS.unlink(path);
                }
                done(null);
              } catch (e) {
                return done(e);
              }
            } else {
              // delete file from IDB
              var req = store.delete(path);
              req.onsuccess = function req_onsuccess() { done(null); };
              req.onerror = function req_onerror() { done(this.error); };
            }
          }
        },getLocalSet:function (mount, callback) {
          var files = {};

          function isRealDir(p) {
            return p !== '.' && p !== '..';
          };
          function toAbsolute(root) {
            return function(p) {
              return PATH.join2(root, p);
            }
          };

          var check = FS.readdir(mount.mountpoint)
            .filter(isRealDir)
            .map(toAbsolute(mount.mountpoint));

          while (check.length) {
            var path = check.pop();
            var stat, node;

            try {
              var lookup = FS.lookupPath(path);
              node = lookup.node;
              stat = FS.stat(path);
            } catch (e) {
              return callback(e);
            }

            if (FS.isDir(stat.mode)) {
              check.push.apply(check, FS.readdir(path)
                .filter(isRealDir)
                .map(toAbsolute(path)));

              files[path] = { mode: stat.mode, timestamp: stat.mtime };
            } else if (FS.isFile(stat.mode)) {
              files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
            } else {
              return callback(new Error('node type not supported'));
            }
          }

          return callback(null, { type: 'local', files: files });
        },getDB:function (name, callback) {
          // look it up in the cache
          var db = IDBFS.dbs[name];
          if (db) {
            return callback(null, db);
          }
          var req;
          try {
            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          req.onupgradeneeded = function req_onupgradeneeded() {
            db = req.result;
            db.createObjectStore(IDBFS.DB_STORE_NAME);
          };
          req.onsuccess = function req_onsuccess() {
            db = req.result;
            // add to the cache
            IDBFS.dbs[name] = db;
            callback(null, db);
          };
          req.onerror = function req_onerror() {
            callback(this.error);
          };
        },getRemoteSet:function (mount, callback) {
          var files = {};

          IDBFS.getDB(mount.mountpoint, function(err, db) {
            if (err) return callback(err);

            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function transaction_onerror() { callback(this.error); };

            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
              var cursor = event.target.result;
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, files: files });
              }

              files[cursor.key] = cursor.value;
              cursor.continue();
            };
          });
        }};

    var NODEFS={isWindows:false,staticInit:function () {
          NODEFS.isWindows = !!process.platform.match(/^win/);
        },mount:function (mount) {
          assert(ENVIRONMENT_IS_NODE);
          return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
        },createNode:function (parent, name, mode, dev) {
          if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var node = FS.createNode(parent, name, mode);
          node.node_ops = NODEFS.node_ops;
          node.stream_ops = NODEFS.stream_ops;
          return node;
        },getMode:function (path) {
          var stat;
          try {
            stat = fs.lstatSync(path);
            if (NODEFS.isWindows) {
              // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
              // propagate write bits to execute bits.
              stat.mode = stat.mode | ((stat.mode & 146) >> 1);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return stat.mode;
        },realPath:function (node) {
          var parts = [];
          while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
          }
          parts.push(node.mount.opts.root);
          parts.reverse();
          return PATH.join.apply(null, parts);
        },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
          if (flags in NODEFS.flagsToPermissionStringMap) {
            return NODEFS.flagsToPermissionStringMap[flags];
          } else {
            return flags;
          }
        },node_ops:{getattr:function (node) {
            var path = NODEFS.realPath(node);
            var stat;
            try {
              stat = fs.lstatSync(path);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
            // See http://support.microsoft.com/kb/140365
            if (NODEFS.isWindows && !stat.blksize) {
              stat.blksize = 4096;
            }
            if (NODEFS.isWindows && !stat.blocks) {
              stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
            }
            return {
              dev: stat.dev,
              ino: stat.ino,
              mode: stat.mode,
              nlink: stat.nlink,
              uid: stat.uid,
              gid: stat.gid,
              rdev: stat.rdev,
              size: stat.size,
              atime: stat.atime,
              mtime: stat.mtime,
              ctime: stat.ctime,
              blksize: stat.blksize,
              blocks: stat.blocks
            };
          },setattr:function (node, attr) {
            var path = NODEFS.realPath(node);
            try {
              if (attr.mode !== undefined) {
                fs.chmodSync(path, attr.mode);
                // update the common node structure mode as well
                node.mode = attr.mode;
              }
              if (attr.timestamp !== undefined) {
                var date = new Date(attr.timestamp);
                fs.utimesSync(path, date, date);
              }
              if (attr.size !== undefined) {
                fs.truncateSync(path, attr.size);
              }
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },lookup:function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            var mode = NODEFS.getMode(path);
            return NODEFS.createNode(parent, name, mode);
          },mknod:function (parent, name, mode, dev) {
            var node = NODEFS.createNode(parent, name, mode, dev);
            // create the backing node for this in the fs root as well
            var path = NODEFS.realPath(node);
            try {
              if (FS.isDir(node.mode)) {
                fs.mkdirSync(path, node.mode);
              } else {
                fs.writeFileSync(path, '', { mode: node.mode });
              }
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return node;
          },rename:function (oldNode, newDir, newName) {
            var oldPath = NODEFS.realPath(oldNode);
            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
            try {
              fs.renameSync(oldPath, newPath);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },unlink:function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
              fs.unlinkSync(path);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },rmdir:function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
              fs.rmdirSync(path);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },readdir:function (node) {
            var path = NODEFS.realPath(node);
            try {
              return fs.readdirSync(path);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },symlink:function (parent, newName, oldPath) {
            var newPath = PATH.join2(NODEFS.realPath(parent), newName);
            try {
              fs.symlinkSync(oldPath, newPath);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },readlink:function (node) {
            var path = NODEFS.realPath(node);
            try {
              return fs.readlinkSync(path);
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          }},stream_ops:{open:function (stream) {
            var path = NODEFS.realPath(stream.node);
            try {
              if (FS.isFile(stream.node.mode)) {
                stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
              }
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },close:function (stream) {
            try {
              if (FS.isFile(stream.node.mode) && stream.nfd) {
                fs.closeSync(stream.nfd);
              }
            } catch (e) {
              if (!e.code) throw e;
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
          },read:function (stream, buffer, offset, length, position) {
            // FIXME this is terrible.
            var nbuffer = new Buffer(length);
            var res;
            try {
              res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            if (res > 0) {
              for (var i = 0; i < res; i++) {
                buffer[offset + i] = nbuffer[i];
              }
            }
            return res;
          },write:function (stream, buffer, offset, length, position) {
            // FIXME this is terrible.
            var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
            var res;
            try {
              res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return res;
          },llseek:function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {  // SEEK_CUR.
              position += stream.position;
            } else if (whence === 2) {  // SEEK_END.
              if (FS.isFile(stream.node.mode)) {
                try {
                  var stat = fs.fstatSync(stream.nfd);
                  position += stat.size;
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              }
            }

            if (position < 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }

            stream.position = position;
            return position;
          }}};

    var _stdin=allocate(1, "i32*", ALLOC_STATIC);

    var _stdout=allocate(1, "i32*", ALLOC_STATIC);

    var _stderr=allocate(1, "i32*", ALLOC_STATIC);

    function _fflush(stream) {
        // int fflush(FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
        // we don't currently perform any user-space buffering of data
      }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
          if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
          return ___setErrNo(e.errno);
        },lookupPath:function (path, opts) {
          path = PATH.resolve(FS.cwd(), path);
          opts = opts || { recurse_count: 0 };

          if (opts.recurse_count > 8) {  // max recursive lookup of 8
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
          }

          // split the path
          var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
            return !!p;
          }), false);

          // start at the root
          var current = FS.root;
          var current_path = '/';

          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }

            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);

            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current)) {
              current = current.mount.root;
            }

            // follow symlinks
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (!islast || opts.follow) {
              var count = 0;
              while (FS.isLink(current.mode)) {
                var link = FS.readlink(current_path);
                current_path = PATH.resolve(PATH.dirname(current_path), link);

                var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                current = lookup.node;

                if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                  throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
                }
              }
            }
          }

          return { path: current_path, node: current };
        },getPath:function (node) {
          var path;
          while (true) {
            if (FS.isRoot(node)) {
              var mount = node.mount.mountpoint;
              if (!path) return mount;
              return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
            }
            path = path ? node.name + '/' + path : node.name;
            node = node.parent;
          }
        },hashName:function (parentid, name) {
          var hash = 0;


          for (var i = 0; i < name.length; i++) {
            hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
          }
          return ((parentid + hash) >>> 0) % FS.nameTable.length;
        },hashAddNode:function (node) {
          var hash = FS.hashName(node.parent.id, node.name);
          node.name_next = FS.nameTable[hash];
          FS.nameTable[hash] = node;
        },hashRemoveNode:function (node) {
          var hash = FS.hashName(node.parent.id, node.name);
          if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
          } else {
            var current = FS.nameTable[hash];
            while (current) {
              if (current.name_next === node) {
                current.name_next = node.name_next;
                break;
              }
              current = current.name_next;
            }
          }
        },lookupNode:function (parent, name) {
          var err = FS.mayLookup(parent);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          var hash = FS.hashName(parent.id, name);
          for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
              return node;
            }
          }
          // if we failed to find it in the cache, call into the VFS
          return FS.lookup(parent, name);
        },createNode:function (parent, name, mode, rdev) {
          if (!FS.FSNode) {
            FS.FSNode = function(parent, name, mode, rdev) {
              this.id = FS.nextInode++;
              this.name = name;
              this.mode = mode;
              this.node_ops = {};
              this.stream_ops = {};
              this.rdev = rdev;
              this.parent = null;
              this.mount = null;
              if (!parent) {
                parent = this;  // root node sets parent to itself
              }
              this.parent = parent;
              this.mount = parent.mount;
              FS.hashAddNode(this);
            };

            // compatibility
            var readMode = 292 | 73;
            var writeMode = 146;

            FS.FSNode.prototype = {};

            // NOTE we must use Object.defineProperties instead of individual calls to
            // Object.defineProperty in order to make closure compiler happy
            Object.defineProperties(FS.FSNode.prototype, {
              read: {
                get: function() { return (this.mode & readMode) === readMode; },
                set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
              },
              write: {
                get: function() { return (this.mode & writeMode) === writeMode; },
                set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
              },
              isFolder: {
                get: function() { return FS.isDir(this.mode); },
              },
              isDevice: {
                get: function() { return FS.isChrdev(this.mode); },
              },
            });
          }
          return new FS.FSNode(parent, name, mode, rdev);
        },destroyNode:function (node) {
          FS.hashRemoveNode(node);
        },isRoot:function (node) {
          return node === node.parent;
        },isMountpoint:function (node) {
          return node.mounted;
        },isFile:function (mode) {
          return (mode & 61440) === 32768;
        },isDir:function (mode) {
          return (mode & 61440) === 16384;
        },isLink:function (mode) {
          return (mode & 61440) === 40960;
        },isChrdev:function (mode) {
          return (mode & 61440) === 8192;
        },isBlkdev:function (mode) {
          return (mode & 61440) === 24576;
        },isFIFO:function (mode) {
          return (mode & 61440) === 4096;
        },isSocket:function (mode) {
          return (mode & 49152) === 49152;
        },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
          var flags = FS.flagModes[str];
          if (typeof flags === 'undefined') {
            throw new Error('Unknown file open mode: ' + str);
          }
          return flags;
        },flagsToPermissionString:function (flag) {
          var accmode = flag & 2097155;
          var perms = ['r', 'w', 'rw'][accmode];
          if ((flag & 512)) {
            perms += 'w';
          }
          return perms;
        },nodePermissions:function (node, perms) {
          if (FS.ignorePermissions) {
            return 0;
          }
          // return 0 if any user, group or owner bits are set.
          if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
            return ERRNO_CODES.EACCES;
          } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
            return ERRNO_CODES.EACCES;
          } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
            return ERRNO_CODES.EACCES;
          }
          return 0;
        },mayLookup:function (dir) {
          return FS.nodePermissions(dir, 'x');
        },mayCreate:function (dir, name) {
          try {
            var node = FS.lookupNode(dir, name);
            return ERRNO_CODES.EEXIST;
          } catch (e) {
          }
          return FS.nodePermissions(dir, 'wx');
        },mayDelete:function (dir, name, isdir) {
          var node;
          try {
            node = FS.lookupNode(dir, name);
          } catch (e) {
            return e.errno;
          }
          var err = FS.nodePermissions(dir, 'wx');
          if (err) {
            return err;
          }
          if (isdir) {
            if (!FS.isDir(node.mode)) {
              return ERRNO_CODES.ENOTDIR;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
              return ERRNO_CODES.EBUSY;
            }
          } else {
            if (FS.isDir(node.mode)) {
              return ERRNO_CODES.EISDIR;
            }
          }
          return 0;
        },mayOpen:function (node, flags) {
          if (!node) {
            return ERRNO_CODES.ENOENT;
          }
          if (FS.isLink(node.mode)) {
            return ERRNO_CODES.ELOOP;
          } else if (FS.isDir(node.mode)) {
            if ((flags & 2097155) !== 0 ||  // opening for write
                (flags & 512)) {
              return ERRNO_CODES.EISDIR;
            }
          }
          return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
        },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
          fd_start = fd_start || 1;
          fd_end = fd_end || FS.MAX_OPEN_FDS;
          for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
              return fd;
            }
          }
          throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
        },getStream:function (fd) {
          return FS.streams[fd];
        },createStream:function (stream, fd_start, fd_end) {
          if (!FS.FSStream) {
            FS.FSStream = function(){};
            FS.FSStream.prototype = {};
            // compatibility
            Object.defineProperties(FS.FSStream.prototype, {
              object: {
                get: function() { return this.node; },
                set: function(val) { this.node = val; }
              },
              isRead: {
                get: function() { return (this.flags & 2097155) !== 1; }
              },
              isWrite: {
                get: function() { return (this.flags & 2097155) !== 0; }
              },
              isAppend: {
                get: function() { return (this.flags & 1024); }
              }
            });
          }
          if (stream.__proto__) {
            // reuse the object
            stream.__proto__ = FS.FSStream.prototype;
          } else {
            var newStream = new FS.FSStream();
            for (var p in stream) {
              newStream[p] = stream[p];
            }
            stream = newStream;
          }
          var fd = FS.nextfd(fd_start, fd_end);
          stream.fd = fd;
          FS.streams[fd] = stream;
          return stream;
        },closeStream:function (fd) {
          FS.streams[fd] = null;
        },chrdev_stream_ops:{open:function (stream) {
            var device = FS.getDevice(stream.node.rdev);
            // override node's stream ops with the device's
            stream.stream_ops = device.stream_ops;
            // forward the open call
            if (stream.stream_ops.open) {
              stream.stream_ops.open(stream);
            }
          },llseek:function () {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
          }},major:function (dev) {
          return ((dev) >> 8);
        },minor:function (dev) {
          return ((dev) & 0xff);
        },makedev:function (ma, mi) {
          return ((ma) << 8 | (mi));
        },registerDevice:function (dev, ops) {
          FS.devices[dev] = { stream_ops: ops };
        },getDevice:function (dev) {
          return FS.devices[dev];
        },syncfs:function (populate, callback) {
          if (typeof(populate) === 'function') {
            callback = populate;
            populate = false;
          }

          var completed = 0;
          var total = FS.mounts.length;
          function done(err) {
            if (err) {
              return callback(err);
            }
            if (++completed >= total) {
              callback(null);
            }
          };

          // sync all mounts
          for (var i = 0; i < FS.mounts.length; i++) {
            var mount = FS.mounts[i];
            if (!mount.type.syncfs) {
              done(null);
              continue;
            }
            mount.type.syncfs(mount, populate, done);
          }
        },mount:function (type, opts, mountpoint) {
          var lookup;
          if (mountpoint) {
            lookup = FS.lookupPath(mountpoint, { follow: false });
            mountpoint = lookup.path;  // use the absolute path
          }
          var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            root: null
          };
          // create a root node for the fs
          var root = type.mount(mount);
          root.mount = mount;
          mount.root = root;
          // assign the mount info to the mountpoint's node
          if (lookup) {
            lookup.node.mount = mount;
            lookup.node.mounted = true;
            // compatibility update FS.root if we mount to /
            if (mountpoint === '/') {
              FS.root = mount.root;
            }
          }
          // add to our cached list of mounts
          FS.mounts.push(mount);
          return root;
        },lookup:function (parent, name) {
          return parent.node_ops.lookup(parent, name);
        },mknod:function (path, mode, dev) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          var err = FS.mayCreate(parent, name);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          return parent.node_ops.mknod(parent, name, mode, dev);
        },create:function (path, mode) {
          mode = mode !== undefined ? mode : 0666;
          mode &= 4095;
          mode |= 32768;
          return FS.mknod(path, mode, 0);
        },mkdir:function (path, mode) {
          mode = mode !== undefined ? mode : 0777;
          mode &= 511 | 512;
          mode |= 16384;
          return FS.mknod(path, mode, 0);
        },mkdev:function (path, mode, dev) {
          if (typeof(dev) === 'undefined') {
            dev = mode;
            mode = 0666;
          }
          mode |= 8192;
          return FS.mknod(path, mode, dev);
        },symlink:function (oldpath, newpath) {
          var lookup = FS.lookupPath(newpath, { parent: true });
          var parent = lookup.node;
          var newname = PATH.basename(newpath);
          var err = FS.mayCreate(parent, newname);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          return parent.node_ops.symlink(parent, newname, oldpath);
        },rename:function (old_path, new_path) {
          var old_dirname = PATH.dirname(old_path);
          var new_dirname = PATH.dirname(new_path);
          var old_name = PATH.basename(old_path);
          var new_name = PATH.basename(new_path);
          // parents must exist
          var lookup, old_dir, new_dir;
          try {
            lookup = FS.lookupPath(old_path, { parent: true });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, { parent: true });
            new_dir = lookup.node;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
          // need to be part of the same mount
          if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
          }
          // source must exist
          var old_node = FS.lookupNode(old_dir, old_name);
          // old path should not be an ancestor of the new path
          var relative = PATH.relative(old_path, new_dirname);
          if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          // new path should not be an ancestor of the old path
          relative = PATH.relative(new_path, old_dirname);
          if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          // see if the new path already exists
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {
            // not fatal
          }
          // early out if nothing needs to change
          if (old_node === new_node) {
            return;
          }
          // we'll need to delete the old entry
          var isdir = FS.isDir(old_node.mode);
          var err = FS.mayDelete(old_dir, old_name, isdir);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          // need delete permissions if we'll be overwriting.
          // need create permissions if new doesn't already exist.
          err = new_node ?
            FS.mayDelete(new_dir, new_name, isdir) :
            FS.mayCreate(new_dir, new_name);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
          // if we are going to change the parent, check write permissions
          if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, 'w');
            if (err) {
              throw new FS.ErrnoError(err);
            }
          }
          // remove the node from the lookup hash
          FS.hashRemoveNode(old_node);
          // do the underlying fs rename
          try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
          } catch (e) {
            throw e;
          } finally {
            // add the node back to the hash (in case node_ops.rename
            // changed its name)
            FS.hashAddNode(old_node);
          }
        },rmdir:function (path) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          var node = FS.lookupNode(parent, name);
          var err = FS.mayDelete(parent, name, true);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
          parent.node_ops.rmdir(parent, name);
          FS.destroyNode(node);
        },readdir:function (path) {
          var lookup = FS.lookupPath(path, { follow: true });
          var node = lookup.node;
          if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
          return node.node_ops.readdir(node);
        },unlink:function (path) {
          var lookup = FS.lookupPath(path, { parent: true });
          var parent = lookup.node;
          var name = PATH.basename(path);
          var node = FS.lookupNode(parent, name);
          var err = FS.mayDelete(parent, name, false);
          if (err) {
            // POSIX says unlink should set EPERM, not EISDIR
            if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
            throw new FS.ErrnoError(err);
          }
          if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
          parent.node_ops.unlink(parent, name);
          FS.destroyNode(node);
        },readlink:function (path) {
          var lookup = FS.lookupPath(path, { follow: false });
          var link = lookup.node;
          if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return link.node_ops.readlink(link);
        },stat:function (path, dontFollow) {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          var node = lookup.node;
          if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          return node.node_ops.getattr(node);
        },lstat:function (path) {
          return FS.stat(path, true);
        },chmod:function (path, mode, dontFollow) {
          var node;
          if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          node.node_ops.setattr(node, {
            mode: (mode & 4095) | (node.mode & ~4095),
            timestamp: Date.now()
          });
        },lchmod:function (path, mode) {
          FS.chmod(path, mode, true);
        },fchmod:function (fd, mode) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
          }
          FS.chmod(stream.node, mode);
        },chown:function (path, uid, gid, dontFollow) {
          var node;
          if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          node.node_ops.setattr(node, {
            timestamp: Date.now()
            // we ignore the uid / gid for now
          });
        },lchown:function (path, uid, gid) {
          FS.chown(path, uid, gid, true);
        },fchown:function (fd, uid, gid) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
          }
          FS.chown(stream.node, uid, gid);
        },truncate:function (path, len) {
          if (len < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var node;
          if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
          } else {
            node = path;
          }
          if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
          }
          if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
          }
          if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var err = FS.nodePermissions(node, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
          node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
          });
        },ftruncate:function (fd, len) {
          var stream = FS.getStream(fd);
          if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          FS.truncate(stream.node, len);
        },utime:function (path, atime, mtime) {
          var lookup = FS.lookupPath(path, { follow: true });
          var node = lookup.node;
          node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
          });
        },open:function (path, flags, mode, fd_start, fd_end) {
          flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
          mode = typeof mode === 'undefined' ? 0666 : mode;
          if ((flags & 64)) {
            mode = (mode & 4095) | 32768;
          } else {
            mode = 0;
          }
          var node;
          if (typeof path === 'object') {
            node = path;
          } else {
            path = PATH.normalize(path);
            try {
              var lookup = FS.lookupPath(path, {
                follow: !(flags & 131072)
              });
              node = lookup.node;
            } catch (e) {
              // ignore
            }
          }
          // perhaps we need to create the node
          if ((flags & 64)) {
            if (node) {
              // if O_CREAT and O_EXCL are set, error out if the node already exists
              if ((flags & 128)) {
                throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
              }
            } else {
              // node doesn't exist, try to create it
              node = FS.mknod(path, mode, 0);
            }
          }
          if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
          }
          // can't truncate a device
          if (FS.isChrdev(node.mode)) {
            flags &= ~512;
          }
          // check permissions
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
          // do truncation if necessary
          if ((flags & 512)) {
            FS.truncate(node, 0);
          }
          // we've already handled these, don't pass down to the underlying vfs
          flags &= ~(128 | 512);

          // register the stream with the filesystem
          var stream = FS.createStream({
            node: node,
            path: FS.getPath(node),  // we want the absolute path to the node
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            ungotten: [],
            error: false
          }, fd_start, fd_end);
          // call the new stream's open function
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
          if (Module['logReadFiles'] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path in FS.readFiles)) {
              FS.readFiles[path] = 1;
              Module['printErr']('read file: ' + path);
            }
          }
          return stream;
        },close:function (stream) {
          try {
            if (stream.stream_ops.close) {
              stream.stream_ops.close(stream);
            }
          } catch (e) {
            throw e;
          } finally {
            FS.closeStream(stream.fd);
          }
        },llseek:function (stream, offset, whence) {
          if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
          }
          return stream.stream_ops.llseek(stream, offset, whence);
        },read:function (stream, buffer, offset, length, position) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
          }
          if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var seeking = true;
          if (typeof position === 'undefined') {
            position = stream.position;
            seeking = false;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
          }
          var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
          if (!seeking) stream.position += bytesRead;
          return bytesRead;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
          }
          if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
          }
          if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var seeking = true;
          if (typeof position === 'undefined') {
            position = stream.position;
            seeking = false;
          } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
          }
          if (stream.flags & 1024) {
            // seek to the end before writing in append mode
            FS.llseek(stream, 0, 2);
          }
          var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
          if (!seeking) stream.position += bytesWritten;
          return bytesWritten;
        },allocate:function (stream, offset, length) {
          if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
          }
          if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          stream.stream_ops.allocate(stream, offset, length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          // TODO if PROT is PROT_WRITE, make sure we have write access
          if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EACCES);
          }
          if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
        },ioctl:function (stream, cmd, arg) {
          if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
          }
          return stream.stream_ops.ioctl(stream, cmd, arg);
        },readFile:function (path, opts) {
          opts = opts || {};
          opts.flags = opts.flags || 'r';
          opts.encoding = opts.encoding || 'binary';
          var ret;
          var stream = FS.open(path, opts.flags);
          var stat = FS.stat(path);
          var length = stat.size;
          var buf = new Uint8Array(length);
          FS.read(stream, buf, 0, length, 0);
          if (opts.encoding === 'utf8') {
            ret = '';
            var utf8 = new Runtime.UTF8Processor();
            for (var i = 0; i < length; i++) {
              ret += utf8.processCChar(buf[i]);
            }
          } else if (opts.encoding === 'binary') {
            ret = buf;
          } else {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
          }
          FS.close(stream);
          return ret;
        },writeFile:function (path, data, opts) {
          opts = opts || {};
          opts.flags = opts.flags || 'w';
          opts.encoding = opts.encoding || 'utf8';
          var stream = FS.open(path, opts.flags, opts.mode);
          if (opts.encoding === 'utf8') {
            var utf8 = new Runtime.UTF8Processor();
            var buf = new Uint8Array(utf8.processJSString(data));
            FS.write(stream, buf, 0, buf.length, 0);
          } else if (opts.encoding === 'binary') {
            FS.write(stream, data, 0, data.length, 0);
          } else {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
          }
          FS.close(stream);
        },cwd:function () {
          return FS.currentPath;
        },chdir:function (path) {
          var lookup = FS.lookupPath(path, { follow: true });
          if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
          var err = FS.nodePermissions(lookup.node, 'x');
          if (err) {
            throw new FS.ErrnoError(err);
          }
          FS.currentPath = lookup.path;
        },createDefaultDirectories:function () {
          FS.mkdir('/tmp');
        },createDefaultDevices:function () {
          // create /dev
          FS.mkdir('/dev');
          // setup /dev/null
          FS.registerDevice(FS.makedev(1, 3), {
            read: function() { return 0; },
            write: function() { return 0; }
          });
          FS.mkdev('/dev/null', FS.makedev(1, 3));
          // setup /dev/tty and /dev/tty1
          // stderr needs to print output using Module['printErr']
          // so we register a second tty just for it.
          TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
          TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
          FS.mkdev('/dev/tty', FS.makedev(5, 0));
          FS.mkdev('/dev/tty1', FS.makedev(6, 0));
          // we're not going to emulate the actual shm device,
          // just create the tmp dirs that reside in it commonly
          FS.mkdir('/dev/shm');
          FS.mkdir('/dev/shm/tmp');
        },createStandardStreams:function () {
          // TODO deprecate the old functionality of a single
          // input / output callback and that utilizes FS.createDevice
          // and instead require a unique set of stream ops

          // by default, we symlink the standard streams to the
          // default tty devices. however, if the standard streams
          // have been overwritten we create a unique device for
          // them instead.
          if (Module['stdin']) {
            FS.createDevice('/dev', 'stdin', Module['stdin']);
          } else {
            FS.symlink('/dev/tty', '/dev/stdin');
          }
          if (Module['stdout']) {
            FS.createDevice('/dev', 'stdout', null, Module['stdout']);
          } else {
            FS.symlink('/dev/tty', '/dev/stdout');
          }
          if (Module['stderr']) {
            FS.createDevice('/dev', 'stderr', null, Module['stderr']);
          } else {
            FS.symlink('/dev/tty1', '/dev/stderr');
          }

          // open default streams for the stdin, stdout and stderr devices
          var stdin = FS.open('/dev/stdin', 'r');
          HEAP32[((_stdin)>>2)]=stdin.fd;
          assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');

          var stdout = FS.open('/dev/stdout', 'w');
          HEAP32[((_stdout)>>2)]=stdout.fd;
          assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');

          var stderr = FS.open('/dev/stderr', 'w');
          HEAP32[((_stderr)>>2)]=stderr.fd;
          assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
        },ensureErrnoError:function () {
          if (FS.ErrnoError) return;
          FS.ErrnoError = function ErrnoError(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
            this.message = ERRNO_MESSAGES[errno];
          };
          FS.ErrnoError.prototype = new Error();
          FS.ErrnoError.prototype.constructor = FS.ErrnoError;
          // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
          [ERRNO_CODES.ENOENT].forEach(function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = '<generic error, no stack>';
          });
        },staticInit:function () {
          FS.ensureErrnoError();

          FS.nameTable = new Array(4096);

          FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
          FS.mount(MEMFS, {}, '/');

          FS.createDefaultDirectories();
          FS.createDefaultDevices();
        },init:function (input, output, error) {
          assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
          FS.init.initialized = true;

          FS.ensureErrnoError();

          // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
          Module['stdin'] = input || Module['stdin'];
          Module['stdout'] = output || Module['stdout'];
          Module['stderr'] = error || Module['stderr'];

          FS.createStandardStreams();
        },quit:function () {
          FS.init.initialized = false;
          for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
              continue;
            }
            FS.close(stream);
          }
        },getMode:function (canRead, canWrite) {
          var mode = 0;
          if (canRead) mode |= 292 | 73;
          if (canWrite) mode |= 146;
          return mode;
        },joinPath:function (parts, forceRelative) {
          var path = PATH.join.apply(null, parts);
          if (forceRelative && path[0] == '/') path = path.substr(1);
          return path;
        },absolutePath:function (relative, base) {
          return PATH.resolve(base, relative);
        },standardizePath:function (path) {
          return PATH.normalize(path);
        },findObject:function (path, dontResolveLastLink) {
          var ret = FS.analyzePath(path, dontResolveLastLink);
          if (ret.exists) {
            return ret.object;
          } else {
            ___setErrNo(ret.error);
            return null;
          }
        },analyzePath:function (path, dontResolveLastLink) {
          // operate from within the context of the symlink's target
          try {
            var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            path = lookup.path;
          } catch (e) {
          }
          var ret = {
            isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
            parentExists: false, parentPath: null, parentObject: null
          };
          try {
            var lookup = FS.lookupPath(path, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === '/';
          } catch (e) {
            ret.error = e.errno;
          };
          return ret;
        },createFolder:function (parent, name, canRead, canWrite) {
          var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.mkdir(path, mode);
        },createPath:function (parent, path, canRead, canWrite) {
          parent = typeof parent === 'string' ? parent : FS.getPath(parent);
          var parts = path.split('/').reverse();
          while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
              FS.mkdir(current);
            } catch (e) {
              // ignore EEXIST
            }
            parent = current;
          }
          return current;
        },createFile:function (parent, name, properties, canRead, canWrite) {
          var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(canRead, canWrite);
          return FS.create(path, mode);
        },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
          var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
          var mode = FS.getMode(canRead, canWrite);
          var node = FS.create(path, mode);
          if (data) {
            if (typeof data === 'string') {
              var arr = new Array(data.length);
              for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
              data = arr;
            }
            // make sure we can write to the file
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, 'w');
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
          }
          return node;
        },createDevice:function (parent, name, input, output) {
          var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
          var mode = FS.getMode(!!input, !!output);
          if (!FS.createDevice.major) FS.createDevice.major = 64;
          var dev = FS.makedev(FS.createDevice.major++, 0);
          // Create a fake device that a set of stream ops to emulate
          // the old behavior.
          FS.registerDevice(dev, {
            open: function(stream) {
              stream.seekable = false;
            },
            close: function(stream) {
              // flush any pending line data
              if (output && output.buffer && output.buffer.length) {
                output(10);
              }
            },
            read: function(stream, buffer, offset, length, pos /* ignored */) {
              var bytesRead = 0;
              for (var i = 0; i < length; i++) {
                var result;
                try {
                  result = input();
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                if (result === undefined && bytesRead === 0) {
                  throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset+i] = result;
              }
              if (bytesRead) {
                stream.node.timestamp = Date.now();
              }
              return bytesRead;
            },
            write: function(stream, buffer, offset, length, pos) {
              for (var i = 0; i < length; i++) {
                try {
                  output(buffer[offset+i]);
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
              }
              if (length) {
                stream.node.timestamp = Date.now();
              }
              return i;
            }
          });
          return FS.mkdev(path, mode, dev);
        },createLink:function (parent, name, target, canRead, canWrite) {
          var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
          return FS.symlink(target, path);
        },forceLoadFile:function (obj) {
          if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
          var success = true;
          if (typeof XMLHttpRequest !== 'undefined') {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
          } else if (Module['read']) {
            // Command-line.
            try {
              // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
              //          read() will try to parse UTF8.
              obj.contents = intArrayFromString(Module['read'](obj.url), true);
            } catch (e) {
              success = false;
            }
          } else {
            throw new Error('Cannot load without read() or XMLHttpRequest.');
          }
          if (!success) ___setErrNo(ERRNO_CODES.EIO);
          return success;
        },createLazyFile:function (parent, name, url, canRead, canWrite) {
          if (typeof XMLHttpRequest !== 'undefined') {
            if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
            // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
            function LazyUint8Array() {
              this.lengthKnown = false;
              this.chunks = []; // Loaded chunks. Index is the chunk number
            }
            LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
              if (idx > this.length-1 || idx < 0) {
                return undefined;
              }
              var chunkOffset = idx % this.chunkSize;
              var chunkNum = Math.floor(idx / this.chunkSize);
              return this.getter(chunkNum)[chunkOffset];
            }
            LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
              this.getter = getter;
            }
            LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                // Find length
                var xhr = new XMLHttpRequest();
                xhr.open('HEAD', url, false);
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                var datalength = Number(xhr.getResponseHeader("Content-length"));
                var header;
                var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
                var chunkSize = 1024*1024; // Chunk size in bytes

                if (!hasByteServing) chunkSize = datalength;

                // Function to get a range from the remote URL.
                var doXHR = (function(from, to) {
                  if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                  if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

                  // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                  var xhr = new XMLHttpRequest();
                  xhr.open('GET', url, false);
                  if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

                  // Some hints to the browser that we want binary data.
                  if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                  if (xhr.overrideMimeType) {
                    xhr.overrideMimeType('text/plain; charset=x-user-defined');
                  }

                  xhr.send(null);
                  if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                  if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || []);
                  } else {
                    return intArrayFromString(xhr.responseText || '', true);
                  }
                });
                var lazyArray = this;
                lazyArray.setDataGetter(function(chunkNum) {
                  var start = chunkNum * chunkSize;
                  var end = (chunkNum+1) * chunkSize - 1; // including this byte
                  end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                  if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end);
                  }
                  if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                  return lazyArray.chunks[chunkNum];
                });

                this._length = datalength;
                this._chunkSize = chunkSize;
                this.lengthKnown = true;
            }

            var lazyArray = new LazyUint8Array();
            Object.defineProperty(lazyArray, "length", {
                get: function() {
                    if(!this.lengthKnown) {
                        this.cacheLength();
                    }
                    return this._length;
                }
            });
            Object.defineProperty(lazyArray, "chunkSize", {
                get: function() {
                    if(!this.lengthKnown) {
                        this.cacheLength();
                    }
                    return this._chunkSize;
                }
            });

            var properties = { isDevice: false, contents: lazyArray };
          } else {
            var properties = { isDevice: false, url: url };
          }

          var node = FS.createFile(parent, name, properties, canRead, canWrite);
          // This is a total hack, but I want to get this lazy file code out of the
          // core of MEMFS. If we want to keep this lazy file concept I feel it should
          // be its own thin LAZYFS proxying calls to MEMFS.
          if (properties.contents) {
            node.contents = properties.contents;
          } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
          }
          // override each stream op with one that tries to force load the lazy file first
          var stream_ops = {};
          var keys = Object.keys(node.stream_ops);
          keys.forEach(function(key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
              if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              return fn.apply(null, arguments);
            };
          });
          // use a custom read function
          stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            var contents = stream.node.contents;
            if (position >= contents.length)
              return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) { // normal array
              for (var i = 0; i < size; i++) {
                buffer[offset + i] = contents[position + i];
              }
            } else {
              for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                buffer[offset + i] = contents.get(position + i);
              }
            }
            return size;
          };
          node.stream_ops = stream_ops;
          return node;
        },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
          Browser.init();
          // TODO we should allow people to just pass in a complete filename instead
          // of parent and name being that we just join them anyways
          var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
          function processData(byteArray) {
            function finish(byteArray) {
              if (!dontCreateFile) {
                FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
              }
              if (onload) onload();
              removeRunDependency('cp ' + fullname);
            }
            var handled = false;
            Module['preloadPlugins'].forEach(function(plugin) {
              if (handled) return;
              if (plugin['canHandle'](fullname)) {
                plugin['handle'](byteArray, fullname, finish, function() {
                  if (onerror) onerror();
                  removeRunDependency('cp ' + fullname);
                });
                handled = true;
              }
            });
            if (!handled) finish(byteArray);
          }
          addRunDependency('cp ' + fullname);
          if (typeof url == 'string') {
            Browser.asyncLoad(url, function(byteArray) {
              processData(byteArray);
            }, onerror);
          } else {
            processData(url);
          }
        },indexedDB:function () {
          return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        },DB_NAME:function () {
          return 'EM_FS_' + window.location.pathname;
        },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
          onload = onload || function(){};
          onerror = onerror || function(){};
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log('creating db');
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
          };
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0) onload(); else onerror();
            }
            paths.forEach(function(path) {
              var putRequest = files.put(FS.analyzePath(path).object.contents, path);
              putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
              putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        },loadFilesFromDB:function (paths, onload, onerror) {
          onload = onload || function(){};
          onerror = onerror || function(){};
          var indexedDB = FS.indexedDB();
          try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
          } catch (e) {
            return onerror(e);
          }
          openRequest.onupgradeneeded = onerror; // no database to load from
          openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
              var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
            } catch(e) {
              onerror(e);
              return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
              if (fail == 0) onload(); else onerror();
            }
            paths.forEach(function(path) {
              var getRequest = files.get(path);
              getRequest.onsuccess = function getRequest_onsuccess() {
                if (FS.analyzePath(path).exists) {
                  FS.unlink(path);
                }
                FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                ok++;
                if (ok + fail == total) finish();
              };
              getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
            });
            transaction.onerror = onerror;
          };
          openRequest.onerror = onerror;
        }};

    var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
            Browser.mainLoop.shouldPause = true;
          },resume:function () {
            if (Browser.mainLoop.paused) {
              Browser.mainLoop.paused = false;
              Browser.mainLoop.scheduler();
            }
            Browser.mainLoop.shouldPause = false;
          },updateStatus:function () {
            if (Module['setStatus']) {
              var message = Module['statusMessage'] || 'Please wait...';
              var remaining = Browser.mainLoop.remainingBlockers;
              var expected = Browser.mainLoop.expectedBlockers;
              if (remaining) {
                if (remaining < expected) {
                  Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
                } else {
                  Module['setStatus'](message);
                }
              } else {
                Module['setStatus']('');
              }
            }
          }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
          if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

          if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
          Browser.initted = true;

          try {
            new Blob();
            Browser.hasBlobConstructor = true;
          } catch(e) {
            Browser.hasBlobConstructor = false;
            console.log("warning: no blob constructor, cannot create blobs with mimetypes");
          }
          Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
          Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
          if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
            console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
            Module.noImageDecoding = true;
          }

          // Support for plugins that can process preloaded files. You can add more of these to
          // your app by creating and appending to Module.preloadPlugins.
          //
          // Each plugin is asked if it can handle a file based on the file's name. If it can,
          // it is given the file's raw data. When it is done, it calls a callback with the file's
          // (possibly modified) data. For example, a plugin might decompress a file, or it
          // might create some side data structure for use later (like an Image element, etc.).

          var imagePlugin = {};
          imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
            return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
          };
          imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
            var b = null;
            if (Browser.hasBlobConstructor) {
              try {
                b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                if (b.size !== byteArray.length) { // Safari bug #118630
                  // Safari's Blob can only take an ArrayBuffer
                  b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
                }
              } catch(e) {
                Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
              }
            }
            if (!b) {
              var bb = new Browser.BlobBuilder();
              bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
              b = bb.getBlob();
            }
            var url = Browser.URLObject.createObjectURL(b);
            var img = new Image();
            img.onload = function img_onload() {
              assert(img.complete, 'Image ' + name + ' could not be decoded');
              var canvas = document.createElement('canvas');
              canvas.width = img.width;
              canvas.height = img.height;
              var ctx = canvas.getContext('2d');
              ctx.drawImage(img, 0, 0);
              Module["preloadedImages"][name] = canvas;
              Browser.URLObject.revokeObjectURL(url);
              if (onload) onload(byteArray);
            };
            img.onerror = function img_onerror(event) {
              console.log('Image ' + url + ' could not be decoded');
              if (onerror) onerror();
            };
            img.src = url;
          };
          Module['preloadPlugins'].push(imagePlugin);

          var audioPlugin = {};
          audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
            return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
          };
          audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
            var done = false;
            function finish(audio) {
              if (done) return;
              done = true;
              Module["preloadedAudios"][name] = audio;
              if (onload) onload(byteArray);
            }
            function fail() {
              if (done) return;
              done = true;
              Module["preloadedAudios"][name] = new Audio(); // empty shim
              if (onerror) onerror();
            }
            if (Browser.hasBlobConstructor) {
              try {
                var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              } catch(e) {
                return fail();
              }
              var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
              var audio = new Audio();
              audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
              audio.onerror = function audio_onerror(event) {
                if (done) return;
                console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
                function encode64(data) {
                  var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                  var PAD = '=';
                  var ret = '';
                  var leftchar = 0;
                  var leftbits = 0;
                  for (var i = 0; i < data.length; i++) {
                    leftchar = (leftchar << 8) | data[i];
                    leftbits += 8;
                    while (leftbits >= 6) {
                      var curr = (leftchar >> (leftbits-6)) & 0x3f;
                      leftbits -= 6;
                      ret += BASE[curr];
                    }
                  }
                  if (leftbits == 2) {
                    ret += BASE[(leftchar&3) << 4];
                    ret += PAD + PAD;
                  } else if (leftbits == 4) {
                    ret += BASE[(leftchar&0xf) << 2];
                    ret += PAD;
                  }
                  return ret;
                }
                audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
                finish(audio); // we don't wait for confirmation this worked - but it's worth trying
              };
              audio.src = url;
              // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
              Browser.safeSetTimeout(function() {
                finish(audio); // try to use it even though it is not necessarily ready to play
              }, 10000);
            } else {
              return fail();
            }
          };
          Module['preloadPlugins'].push(audioPlugin);

          // Canvas event setup

          var canvas = Module['canvas'];
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'];
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);

          function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                  document['mozPointerLockElement'] === canvas ||
                                  document['webkitPointerLockElement'] === canvas;
          }

          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);

          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
          var ctx;
          try {
            if (useWebGL) {
              var contextAttributes = {
                antialias: false,
                alpha: false
              };

              if (webGLContextAttributes) {
                for (var attribute in webGLContextAttributes) {
                  contextAttributes[attribute] = webGLContextAttributes[attribute];
                }
              }


              var errorInfo = '?';
              function onContextCreationError(event) {
                errorInfo = event.statusMessage || errorInfo;
              }
              canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
              try {
                ['experimental-webgl', 'webgl'].some(function(webglId) {
                  return ctx = canvas.getContext(webglId, contextAttributes);
                });
              } finally {
                canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
              }
            } else {
              ctx = canvas.getContext('2d');
            }
            if (!ctx) throw ':(';
          } catch (e) {
            Module.print('Could not create canvas: ' + [errorInfo, e]);
            return null;
          }
          if (useWebGL) {
            // Set the background of the WebGL canvas to black
            canvas.style.backgroundColor = "black";

            // Warn on context loss
            canvas.addEventListener('webglcontextlost', function(event) {
              alert('WebGL context lost. You will need to reload the page.');
            }, false);
          }
          if (setInModule) {
            GLctx = Module.ctx = ctx;
            Module.useWebGL = useWebGL;
            Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
            Browser.init();
          }
          return ctx;
        },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
          Browser.lockPointer = lockPointer;
          Browser.resizeCanvas = resizeCanvas;
          if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
          if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;

          var canvas = Module['canvas'];
          function fullScreenChange() {
            Browser.isFullScreen = false;
            if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
                 document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
                 document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
              canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                        document['mozCancelFullScreen'] ||
                                        document['webkitCancelFullScreen'];
              canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
              if (Browser.lockPointer) canvas.requestPointerLock();
              Browser.isFullScreen = true;
              if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
            } else if (Browser.resizeCanvas){
              Browser.setWindowedCanvasSize();
            }
            if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          }

          if (!Browser.fullScreenHandlersInstalled) {
            Browser.fullScreenHandlersInstalled = true;
            document.addEventListener('fullscreenchange', fullScreenChange, false);
            document.addEventListener('mozfullscreenchange', fullScreenChange, false);
            document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          }

          canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                     canvas['mozRequestFullScreen'] ||
                                     (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
          canvas.requestFullScreen();
        },requestAnimationFrame:function requestAnimationFrame(func) {
          if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
            setTimeout(func, 1000/60);
          } else {
            if (!window.requestAnimationFrame) {
              window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                             window['mozRequestAnimationFrame'] ||
                                             window['webkitRequestAnimationFrame'] ||
                                             window['msRequestAnimationFrame'] ||
                                             window['oRequestAnimationFrame'] ||
                                             window['setTimeout'];
            }
            window.requestAnimationFrame(func);
          }
        },safeCallback:function (func) {
          return function() {
            if (!ABORT) return func.apply(null, arguments);
          };
        },safeRequestAnimationFrame:function (func) {
          return Browser.requestAnimationFrame(function() {
            if (!ABORT) func();
          });
        },safeSetTimeout:function (func, timeout) {
          return setTimeout(function() {
            if (!ABORT) func();
          }, timeout);
        },safeSetInterval:function (func, timeout) {
          return setInterval(function() {
            if (!ABORT) func();
          }, timeout);
        },getMimetype:function (name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        },getUserMedia:function (func) {
          if(!window.getUserMedia) {
            window.getUserMedia = navigator['getUserMedia'] ||
                                  navigator['mozGetUserMedia'];
          }
          window.getUserMedia(func);
        },getMovementX:function (event) {
          return event['movementX'] ||
                 event['mozMovementX'] ||
                 event['webkitMovementX'] ||
                 0;
        },getMovementY:function (event) {
          return event['movementY'] ||
                 event['mozMovementY'] ||
                 event['webkitMovementY'] ||
                 0;
        },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
          if (Browser.pointerLock) {
            // When the pointer is locked, calculate the coordinates
            // based on the movement of the mouse.
            // Workaround for Firefox bug 764498
            if (event.type != 'mousemove' &&
                ('mozMovementX' in event)) {
              Browser.mouseMovementX = Browser.mouseMovementY = 0;
            } else {
              Browser.mouseMovementX = Browser.getMovementX(event);
              Browser.mouseMovementY = Browser.getMovementY(event);
            }

            // check if SDL is available
            if (typeof SDL != "undefined") {
            	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
            } else {
            	// just add the mouse delta to the current absolut mouse position
            	// FIXME: ideally this should be clamped against the canvas size and zero
            	Browser.mouseX += Browser.mouseMovementX;
            	Browser.mouseY += Browser.mouseMovementY;
            }
          } else {
            // Otherwise, calculate the movement based on the changes
            // in the coordinates.
            var rect = Module["canvas"].getBoundingClientRect();
            var x, y;

            // Neither .scrollX or .pageXOffset are defined in a spec, but
            // we prefer .scrollX because it is currently in a spec draft.
            // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
            var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
            var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
            if (event.type == 'touchstart' ||
                event.type == 'touchend' ||
                event.type == 'touchmove') {
              var t = event.touches.item(0);
              if (t) {
                x = t.pageX - (scrollX + rect.left);
                y = t.pageY - (scrollY + rect.top);
              } else {
                return;
              }
            } else {
              x = event.pageX - (scrollX + rect.left);
              y = event.pageY - (scrollY + rect.top);
            }

            // the canvas might be CSS-scaled compared to its backbuffer;
            // SDL-using content will want mouse coordinates in terms
            // of backbuffer units.
            var cw = Module["canvas"].width;
            var ch = Module["canvas"].height;
            x = x * (cw / rect.width);
            y = y * (ch / rect.height);

            Browser.mouseMovementX = x - Browser.mouseX;
            Browser.mouseMovementY = y - Browser.mouseY;
            Browser.mouseX = x;
            Browser.mouseY = y;
          }
        },xhrLoad:function (url, onload, onerror) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, true);
          xhr.responseType = 'arraybuffer';
          xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
              onload(xhr.response);
            } else {
              onerror();
            }
          };
          xhr.onerror = onerror;
          xhr.send(null);
        },asyncLoad:function (url, onload, onerror, noRunDep) {
          Browser.xhrLoad(url, function(arrayBuffer) {
            assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
            onload(new Uint8Array(arrayBuffer));
            if (!noRunDep) removeRunDependency('al ' + url);
          }, function(event) {
            if (onerror) {
              onerror();
            } else {
              throw 'Loading data file "' + url + '" failed.';
            }
          });
          if (!noRunDep) addRunDependency('al ' + url);
        },resizeListeners:[],updateResizeListeners:function () {
          var canvas = Module['canvas'];
          Browser.resizeListeners.forEach(function(listener) {
            listener(canvas.width, canvas.height);
          });
        },setCanvasSize:function (width, height, noUpdates) {
          var canvas = Module['canvas'];
          canvas.width = width;
          canvas.height = height;
          if (!noUpdates) Browser.updateResizeListeners();
        },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
          var canvas = Module['canvas'];
          this.windowedWidth = canvas.width;
          this.windowedHeight = canvas.height;
          canvas.width = screen.width;
          canvas.height = screen.height;
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
          	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
          }
          Browser.updateResizeListeners();
        },setWindowedCanvasSize:function () {
          var canvas = Module['canvas'];
          canvas.width = this.windowedWidth;
          canvas.height = this.windowedHeight;
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
          	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
          }
          Browser.updateResizeListeners();
        }};var SDL={defaults:{width:320,height:200,copyOnLock:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},keyCodes:{16:1249,17:1248,18:1250,33:1099,34:1102,37:1104,38:1106,39:1103,40:1105,46:127,96:1112,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,173:45,188:44,190:46,191:47,192:96},scanCodes:{8:42,9:43,13:40,27:41,32:44,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,305:224,308:226},loadRect:function (rect) {
          return {
            x: HEAP32[((rect + 0)>>2)],
            y: HEAP32[((rect + 4)>>2)],
            w: HEAP32[((rect + 8)>>2)],
            h: HEAP32[((rect + 12)>>2)]
          };
        },loadColorToCSSRGB:function (color) {
          var rgba = HEAP32[((color)>>2)];
          return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
        },loadColorToCSSRGBA:function (color) {
          var rgba = HEAP32[((color)>>2)];
          return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
        },translateColorToCSSRGBA:function (rgba) {
          return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
        },translateRGBAToCSSRGBA:function (r, g, b, a) {
          return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
        },translateRGBAToColor:function (r, g, b, a) {
          return r | g << 8 | b << 16 | a << 24;
        },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
          flags = flags || 0;
          var surf = _malloc(60);  // SDL_Surface has 15 fields of quantum size
          var buffer = _malloc(width*height*4); // TODO: only allocate when locked the first time
          var pixelFormat = _malloc(44);
          flags |= 1; // SDL_HWSURFACE - this tells SDL_MUSTLOCK that this needs to be locked

          //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
          var is_SDL_HWPALETTE = flags & 0x00200000;
          var bpp = is_SDL_HWPALETTE ? 1 : 4;

          HEAP32[((surf)>>2)]=flags;        // SDL_Surface.flags
          HEAP32[(((surf)+(4))>>2)]=pixelFormat;// SDL_Surface.format TODO
          HEAP32[(((surf)+(8))>>2)]=width;        // SDL_Surface.w
          HEAP32[(((surf)+(12))>>2)]=height;       // SDL_Surface.h
          HEAP32[(((surf)+(16))>>2)]=width * bpp;      // SDL_Surface.pitch, assuming RGBA or indexed for now,
                                                                                   // since that is what ImageData gives us in browsers
          HEAP32[(((surf)+(20))>>2)]=buffer;     // SDL_Surface.pixels
          HEAP32[(((surf)+(36))>>2)]=0;     // SDL_Surface.offset

          HEAP32[(((surf)+(56))>>2)]=1;

          HEAP32[((pixelFormat)>>2)]=0 /* XXX missing C define SDL_PIXELFORMAT_RGBA8888 */;// SDL_PIXELFORMAT_RGBA8888
          HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
          HEAP8[(((pixelFormat)+(8))|0)]=bpp * 8;
          HEAP8[(((pixelFormat)+(9))|0)]=bpp;

          HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
          HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
          HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
          HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;

          // Decide if we want to use WebGL or not
          var useWebGL = (flags & 0x04000000) != 0; // SDL_OPENGL
          SDL.GL = SDL.GL || useWebGL;
          var canvas;
          if (!usePageCanvas) {
            if (SDL.canvasPool.length > 0) {
              canvas = SDL.canvasPool.pop();
            } else {
              canvas = document.createElement('canvas');
            }
            canvas.width = width;
            canvas.height = height;
          } else {
            canvas = Module['canvas'];
          }

          var webGLContextAttributes = {
            antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
            depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
            stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
          };

          var ctx = Browser.createContext(canvas, useWebGL, usePageCanvas, webGLContextAttributes);

          SDL.surfaces[surf] = {
            width: width,
            height: height,
            canvas: canvas,
            ctx: ctx,
            surf: surf,
            buffer: buffer,
            pixelFormat: pixelFormat,
            alpha: 255,
            flags: flags,
            locked: 0,
            usePageCanvas: usePageCanvas,
            source: source,

            isFlagSet: function(flag) {
              return flags & flag;
            }
          };

          return surf;
        },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
          // HWPALETTE works with palette
          // setted by SDL_SetColors
          if (!surfData.colors) {
            return;
          }

          var fullWidth  = Module['canvas'].width;
          var fullHeight = Module['canvas'].height;

          var startX  = rX || 0;
          var startY  = rY || 0;
          var endX    = (rW || (fullWidth - startX)) + startX;
          var endY    = (rH || (fullHeight - startY)) + startY;

          var buffer  = surfData.buffer;
          var data    = surfData.image.data;
          var colors  = surfData.colors;

          for (var y = startY; y < endY; ++y) {
            var indexBase = y * fullWidth;
            var colorBase = indexBase * 4;
            for (var x = startX; x < endX; ++x) {
              // HWPALETTE have only 256 colors (not rgba)
              var index = HEAPU8[((buffer + indexBase + x)|0)] * 3;
              var colorOffset = colorBase + x * 4;

              data[colorOffset   ] = colors[index   ];
              data[colorOffset +1] = colors[index +1];
              data[colorOffset +2] = colors[index +2];
              //unused: data[colorOffset +3] = color[index +3];
            }
          }
        },freeSurface:function (surf) {
          var refcountPointer = surf + 56;
          var refcount = HEAP32[((refcountPointer)>>2)];
          if (refcount > 1) {
            HEAP32[((refcountPointer)>>2)]=refcount - 1;
            return;
          }

          var info = SDL.surfaces[surf];
          if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
          _free(info.buffer);
          _free(info.pixelFormat);
          _free(surf);
          SDL.surfaces[surf] = null;
        },touchX:0,touchY:0,savedKeydown:null,receiveEvent:function (event) {
          switch(event.type) {
            case 'touchstart':
              event.preventDefault();
              var touch = event.touches[0];
              touchX = touch.pageX;
              touchY = touch.pageY;
              var event = {
                type: 'mousedown',
                button: 0,
                pageX: touchX,
                pageY: touchY
              };
              SDL.DOMButtons[0] = 1;
              SDL.events.push(event);
              break;
            case 'touchmove':
              event.preventDefault();
              var touch = event.touches[0];
              touchX = touch.pageX;
              touchY = touch.pageY;
              event = {
                type: 'mousemove',
                button: 0,
                pageX: touchX,
                pageY: touchY
              };
              SDL.events.push(event);
              break;
            case 'touchend':
              event.preventDefault();
              event = {
                type: 'mouseup',
                button: 0,
                pageX: touchX,
                pageY: touchY
              };
              SDL.DOMButtons[0] = 0;
              SDL.events.push(event);
              break;
            case 'mousemove':
              if (Browser.pointerLock) {
                // workaround for firefox bug 750111
                if ('mozMovementX' in event) {
                  event['movementX'] = event['mozMovementX'];
                  event['movementY'] = event['mozMovementY'];
                }
                // workaround for Firefox bug 782777
                if (event['movementX'] == 0 && event['movementY'] == 0) {
                  // ignore a mousemove event if it doesn't contain any movement info
                  // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                  event.preventDefault();
                  return;
                }
              }
              // fall through
            case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup': case 'DOMMouseScroll': case 'mousewheel':
              // If we preventDefault on keydown events, the subsequent keypress events
              // won't fire. However, it's fine (and in some cases necessary) to
              // preventDefault for keys that don't generate a character. Otherwise,
              // preventDefault is the right thing to do in general.
              if (event.type !== 'keydown' || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
                event.preventDefault();
              }

              if (event.type == 'DOMMouseScroll' || event.type == 'mousewheel') {
                var button = (event.type == 'DOMMouseScroll' ? event.detail : -event.wheelDelta) > 0 ? 4 : 3;
                var event2 = {
                  type: 'mousedown',
                  button: button,
                  pageX: event.pageX,
                  pageY: event.pageY
                };
                SDL.events.push(event2);
                event = {
                  type: 'mouseup',
                  button: button,
                  pageX: event.pageX,
                  pageY: event.pageY
                };
              } else if (event.type == 'mousedown') {
                SDL.DOMButtons[event.button] = 1;
              } else if (event.type == 'mouseup') {
                // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
                // since we add a mouseup in that case
                if (!SDL.DOMButtons[event.button]) {
                  return;
                }

                SDL.DOMButtons[event.button] = 0;
              }

              // We can only request fullscreen as the result of user input.
              // Due to this limitation, we toggle a boolean on keydown which
              // SDL_WM_ToggleFullScreen will check and subsequently set another
              // flag indicating for us to request fullscreen on the following
              // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
              // to work as the result of a keypress (which is an extremely
              // common use case).
              if (event.type === 'keydown') {
                SDL.canRequestFullscreen = true;
              } else if (event.type === 'keyup') {
                if (SDL.isRequestingFullscreen) {
                  Module['requestFullScreen'](true, true);
                  SDL.isRequestingFullscreen = false;
                }
                SDL.canRequestFullscreen = false;
              }

              // SDL expects a unicode character to be passed to its keydown events.
              // Unfortunately, the browser APIs only provide a charCode property on
              // keypress events, so we must backfill in keydown events with their
              // subsequent keypress event's charCode.
              if (event.type === 'keypress' && SDL.savedKeydown) {
                // charCode is read-only
                SDL.savedKeydown.keypressCharCode = event.charCode;
                SDL.savedKeydown = null;
              } else if (event.type === 'keydown') {
                SDL.savedKeydown = event;
              }

              // Don't push keypress events unless SDL_StartTextInput has been called.
              if (event.type !== 'keypress' || SDL.textInput) {
                SDL.events.push(event);
              }
              break;
            case 'mouseout':
              // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
              for (var i = 0; i < 3; i++) {
                if (SDL.DOMButtons[i]) {
                  SDL.events.push({
                    type: 'mouseup',
                    button: i,
                    pageX: event.pageX,
                    pageY: event.pageY
                  });
                  SDL.DOMButtons[i] = 0;
                }
              }
              event.preventDefault();
              break;
            case 'blur':
            case 'visibilitychange': {
              // Un-press all pressed keys: TODO
              for (var code in SDL.keyboardMap) {
                SDL.events.push({
                  type: 'keyup',
                  keyCode: SDL.keyboardMap[code]
                });
              }
              event.preventDefault();
              break;
            }
            case 'unload':
              if (Browser.mainLoop.runner) {
                SDL.events.push(event);
                // Force-run a main event loop, since otherwise this event will never be caught!
                Browser.mainLoop.runner();
              }
              return;
            case 'resize':
              SDL.events.push(event);
              // manually triggered resize event doesn't have a preventDefault member
              if (event.preventDefault) {
                event.preventDefault();
              }
              break;
          }
          if (SDL.events.length >= 10000) {
            Module.printErr('SDL event queue full, dropping events');
            SDL.events = SDL.events.slice(0, 10000);
          }
          return;
        },handleEvent:function (event) {
          if (event.handled) return;
          event.handled = true;

          switch (event.type) {
            case 'keydown': case 'keyup': {
              var down = event.type === 'keydown';
              var code = event.keyCode;
              if (code >= 65 && code <= 90) {
                code += 32; // make lowercase for SDL
              } else {
                code = SDL.keyCodes[event.keyCode] || event.keyCode;
              }

              HEAP8[(((SDL.keyboardState)+(code))|0)]=down;
              // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
              SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))|0)] ? 0x0040 | 0x0080 : 0) | // KMOD_LCTRL & KMOD_RCTRL
                (HEAP8[(((SDL.keyboardState)+(1249))|0)] ? 0x0001 | 0x0002 : 0) | // KMOD_LSHIFT & KMOD_RSHIFT
                (HEAP8[(((SDL.keyboardState)+(1250))|0)] ? 0x0100 | 0x0200 : 0); // KMOD_LALT & KMOD_RALT

              if (down) {
                SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
              } else {
                delete SDL.keyboardMap[code];
              }

              break;
            }
            case 'mousedown': case 'mouseup':
              if (event.type == 'mousedown') {
                // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
                // and DOM buttons are 0-2, so this means that the below formula is
                // correct.
                SDL.buttonState |= 1 << event.button;
              } else if (event.type == 'mouseup') {
                SDL.buttonState &= ~(1 << event.button);
              }
              // fall through
            case 'mousemove': {
              Browser.calculateMouseEvent(event);
              break;
            }
          }
        },makeCEvent:function (event, ptr) {
          if (typeof event === 'number') {
            // This is a pointer to a native C event that was SDL_PushEvent'ed
            _memcpy(ptr, event, 28); // XXX
            return;
          }

          SDL.handleEvent(event);

          switch (event.type) {
            case 'keydown': case 'keyup': {
              var down = event.type === 'keydown';
              //Module.print('Received key event: ' + event.keyCode);
              var key = event.keyCode;
              if (key >= 65 && key <= 90) {
                key += 32; // make lowercase for SDL
              } else {
                key = SDL.keyCodes[event.keyCode] || event.keyCode;
              }
              var scan;
              if (key >= 1024) {
                scan = key - 1024;
              } else {
                scan = SDL.scanCodes[key] || key;
              }

              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(8))|0)]=down ? 1 : 0;
              HEAP8[(((ptr)+(9))|0)]=0; // TODO
              HEAP32[(((ptr)+(12))>>2)]=scan;
              HEAP32[(((ptr)+(16))>>2)]=key;
              HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
              // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
              HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;

              break;
            }
            case 'keypress': {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              // Not filling in windowID for now
              var cStr = intArrayFromString(String.fromCharCode(event.charCode));
              for (var i = 0; i < cStr.length; ++i) {
                HEAP8[(((ptr)+(8 + i))|0)]=cStr[i];
              }
              break;
            }
            case 'mousedown': case 'mouseup': case 'mousemove': {
              if (event.type != 'mousemove') {
                var down = event.type === 'mousedown';
                HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
                HEAP8[(((ptr)+(8))|0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
                HEAP8[(((ptr)+(9))|0)]=down ? 1 : 0;
                HEAP32[(((ptr)+(12))>>2)]=Browser.mouseX;
                HEAP32[(((ptr)+(16))>>2)]=Browser.mouseY;
              } else {
                HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
                HEAP8[(((ptr)+(8))|0)]=SDL.buttonState;
                HEAP32[(((ptr)+(12))>>2)]=Browser.mouseX;
                HEAP32[(((ptr)+(16))>>2)]=Browser.mouseY;
                HEAP32[(((ptr)+(20))>>2)]=Browser.mouseMovementX;
                HEAP32[(((ptr)+(24))>>2)]=Browser.mouseMovementY;
              }
              break;
            }
            case 'unload': {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              break;
            }
            case 'resize': {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=event.w;
              HEAP32[(((ptr)+(8))>>2)]=event.h;
              break;
            }
            case 'joystick_button_up': case 'joystick_button_down': {
              var state = event.type === 'joystick_button_up' ? 0 : 1;
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(4))|0)]=event.index;
              HEAP8[(((ptr)+(5))|0)]=event.button;
              HEAP8[(((ptr)+(6))|0)]=state;
              break;
            }
            case 'joystick_axis_motion': {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP8[(((ptr)+(4))|0)]=event.index;
              HEAP8[(((ptr)+(5))|0)]=event.axis;
              HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
              break;
            }
            default: throw 'Unhandled SDL event: ' + event.type;
          }
        },estimateTextWidth:function (fontData, text) {
          var h = fontData.size;
          var fontString = h + 'px ' + fontData.name;
          var tempCtx = SDL.ttfContext;
          tempCtx.save();
          tempCtx.font = fontString;
          var ret = tempCtx.measureText(text).width | 0;
          tempCtx.restore();
          return ret;
        },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
          if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
          SDL.numChannels = num;
          SDL.channels = [];
          for (var i = 0; i < num; i++) {
            SDL.channels[i] = {
              audio: null,
              volume: 1.0
            };
          }
        },setGetVolume:function (info, volume) {
          if (!info) return 0;
          var ret = info.volume * 128; // MIX_MAX_VOLUME
          if (volume != -1) {
            info.volume = volume / 128;
            if (info.audio) info.audio.volume = info.volume;
          }
          return ret;
        },debugSurface:function (surfData) {
          console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
          var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          var data = image.data;
          var num = Math.min(surfData.width, surfData.height);
          for (var i = 0; i < num; i++) {
            console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
          }
        },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
          // Standardize button state.
          var buttons = new Array(state.buttons.length);
          for (var i = 0; i < state.buttons.length; i++) {
            buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
          }

          SDL.lastJoystickState[joystick] = {
            buttons: buttons,
            axes: state.axes.slice(0),
            timestamp: state.timestamp,
            index: state.index,
            id: state.id
          };
        },getJoystickButtonState:function (button) {
          if (typeof button === 'object') {
            // Current gamepad API editor's draft (Firefox Nightly)
            // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
            return button.pressed;
          } else {
            // Current gamepad API working draft (Firefox / Chrome Stable)
            // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
            return button > 0;
          }
        },queryJoysticks:function () {
          for (var joystick in SDL.lastJoystickState) {
            var state = SDL.getGamepad(joystick - 1);
            var prevState = SDL.lastJoystickState[joystick];
            // Check only if the timestamp has differed.
            // NOTE: Timestamp is not available in Firefox.
            if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
              var i;
              for (i = 0; i < state.buttons.length; i++) {
                var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
                // NOTE: The previous state already has a boolean representation of
                //       its button, so no need to standardize its button state here.
                if (buttonState !== prevState.buttons[i]) {
                  // Insert button-press event.
                  SDL.events.push({
                    type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                    joystick: joystick,
                    index: joystick - 1,
                    button: i
                  });
                }
              }
              for (i = 0; i < state.axes.length; i++) {
                if (state.axes[i] !== prevState.axes[i]) {
                  // Insert axes-change event.
                  SDL.events.push({
                    type: 'joystick_axis_motion',
                    joystick: joystick,
                    index: joystick - 1,
                    axis: i,
                    value: state.axes[i]
                  });
                }
              }

              SDL.recordJoystickState(joystick, state);
            }
          }
        },joystickAxisValueConversion:function (value) {
          // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
          return Math.ceil(((value+1) * 32767.5) - 32768);
        },getGamepads:function () {
          var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
          if (fcn !== undefined) {
            // The function must be applied on the navigator object.
            return fcn.apply(navigator);
          } else {
            return [];
          }
        },getGamepad:function (deviceIndex) {
          var gamepads = SDL.getGamepads();
          if (gamepads.length > deviceIndex && deviceIndex >= 0) {
            return gamepads[deviceIndex];
          }
          return null;
        }};function _SDL_GetTicks() {
        return Math.floor(Date.now() - SDL.startTime);
      }


    Module["_memcmp"] = _memcmp;

    function _llvm_lifetime_start() {}

    function _llvm_lifetime_end() {}



    Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;


    Module["_strcpy"] = _strcpy;


    var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
        __ZSt18uncaught_exceptionv.uncaught_exception--;
        ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
        return ptr;
      }



    function __exit(status) {
        // void _exit(int status);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
        Module['exit'](status);
      }function _exit(status) {
        __exit(status);
      }function __ZSt9terminatev() {
        _exit(-1234);
      }


    var ____cxa_exception_header_size=undefined;function ___cxa_end_catch() {
        if (___cxa_end_catch.rethrown) {
          ___cxa_end_catch.rethrown = false;
          return;
        }
        // Clear state flag.
        asm['setThrew'](0);
        // Call destructor if one is registered then clear it.
        var ptr = ___cxa_caught_exceptions.pop();
        if (ptr) {
          header = ptr - ___cxa_exception_header_size;
          var destructor = HEAP32[(((header)+(4))>>2)];
          if (destructor) {
            Runtime.dynCall('vi', destructor, [ptr]);
            HEAP32[(((header)+(4))>>2)]=0;
          }
          ___cxa_free_exception(ptr);
          ___cxa_last_thrown_exception = 0;
        }
      }




    Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;

    function _memchr(ptr, chr, num) {
        chr = unSign(chr);
        for (var i = 0; i < num; i++) {
          if (HEAP8[(ptr)] == chr) return ptr;
          ptr++;
        }
        return 0;
      }

    var _llvm_memset_p0i8_i64=_memset;

    function _llvm_bswap_i32(x) {
        return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
      }

    function _time(ptr) {
        var ret = Math.floor(Date.now()/1000);
        if (ptr) {
          HEAP32[((ptr)>>2)]=ret;
        }
        return ret;
      }


    var ___tm_current=allocate(44, "i8", ALLOC_STATIC);


    var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);


    var _tzname=allocate(8, "i32*", ALLOC_STATIC);

    var _daylight=allocate(1, "i32*", ALLOC_STATIC);

    var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
        // TODO: Use (malleable) environment variables instead of system settings.
        if (_tzset.called) return;
        _tzset.called = true;

        HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;

        var winter = new Date(2000, 0, 1);
        var summer = new Date(2000, 6, 1);
        HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());

        var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
        var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
        var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
        var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      }function _localtime_r(time, tmPtr) {
        _tzset();
        var date = new Date(HEAP32[((time)>>2)]*1000);
        HEAP32[((tmPtr)>>2)]=date.getSeconds();
        HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
        HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
        HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
        HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
        HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
        HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();

        var start = new Date(date.getFullYear(), 0, 1);
        var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
        HEAP32[(((tmPtr)+(28))>>2)]=yday;
        HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;

        var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
        HEAP32[(((tmPtr)+(32))>>2)]=dst;

        HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;

        return tmPtr;
      }function _localtime(time) {
        return _localtime_r(time, ___tm_current);
      }

    function _toupper(chr) {
        if (chr >= 97 && chr <= 122) {
          return chr - 97 + 65;
        } else {
          return chr;
        }
      }

    function _strrchr(ptr, chr) {
        var ptr2 = ptr + _strlen(ptr);
        do {
          if (HEAP8[(ptr2)] == chr) return ptr2;
          ptr2--;
        } while (ptr2 >= ptr);
        return 0;
      }


    function _strncmp(px, py, n) {
        var i = 0;
        while (i < n) {
          var x = HEAPU8[(((px)+(i))|0)];
          var y = HEAPU8[(((py)+(i))|0)];
          if (x == y && x == 0) return 0;
          if (x == 0) return -1;
          if (y == 0) return 1;
          if (x == y) {
            i ++;
            continue;
          } else {
            return x > y ? 1 : -1;
          }
        }
        return 0;
      }function _strcmp(px, py) {
        return _strncmp(px, py, TOTAL_MEMORY);
      }




    Module["_tolower"] = _tolower;
    Module["_strncasecmp"] = _strncasecmp;
    Module["_strcasecmp"] = _strcasecmp;

    function ___cxa_pure_virtual() {
        ABORT = true;
        throw 'Pure virtual function called!';
      }


    Module["_strcat"] = _strcat;

    function _strchr(ptr, chr) {
        ptr--;
        do {
          ptr++;
          var val = HEAP8[(ptr)];
          if (val == chr) return ptr;
        } while (val);
        return 0;
      }


    function _rand() {
        return Math.floor(Math.random()*0x80000000);
      }

    function _strcspn(pstr, pset) {
        var str = pstr, set, strcurr, setcurr;
        while (1) {
          strcurr = HEAP8[(str)];
          if (!strcurr) return str - pstr;
          set = pset;
          while (1) {
            setcurr = HEAP8[(set)];
            if (!setcurr || setcurr == strcurr) break;
            set++;
          }
          if (setcurr) return str - pstr;
          str++;
        }
      }

    function _isalpha(chr) {
        return (chr >= 97 && chr <= 122) ||
               (chr >= 65 && chr <= 90);
      }


    function _atexit(func, arg) {
        __ATEXIT__.unshift({ func: func, arg: arg });
      }var ___cxa_atexit=_atexit;




    function _isspace(chr) {
        return (chr == 32) || (chr >= 9 && chr <= 13);
      }function __parseInt(str, endptr, base, min, max, bits, unsign) {
        // Skip space.
        while (_isspace(HEAP8[(str)])) str++;

        // Check for a plus/minus sign.
        var multiplier = 1;
        if (HEAP8[(str)] == 45) {
          multiplier = -1;
          str++;
        } else if (HEAP8[(str)] == 43) {
          str++;
        }

        // Find base.
        var finalBase = base;
        if (!finalBase) {
          if (HEAP8[(str)] == 48) {
            if (HEAP8[((str+1)|0)] == 120 ||
                HEAP8[((str+1)|0)] == 88) {
              finalBase = 16;
              str += 2;
            } else {
              finalBase = 8;
              str++;
            }
          }
        } else if (finalBase==16) {
          if (HEAP8[(str)] == 48) {
            if (HEAP8[((str+1)|0)] == 120 ||
                HEAP8[((str+1)|0)] == 88) {
              str += 2;
            }
          }
        }
        if (!finalBase) finalBase = 10;

        // Get digits.
        var chr;
        var ret = 0;
        while ((chr = HEAP8[(str)]) != 0) {
          var digit = parseInt(String.fromCharCode(chr), finalBase);
          if (isNaN(digit)) {
            break;
          } else {
            ret = ret * finalBase + digit;
            str++;
          }
        }

        // Apply sign.
        ret *= multiplier;

        // Set end pointer.
        if (endptr) {
          HEAP32[((endptr)>>2)]=str;
        }

        // Unsign if needed.
        if (unsign) {
          if (Math.abs(ret) > max) {
            ret = max;
            ___setErrNo(ERRNO_CODES.ERANGE);
          } else {
            ret = unSign(ret, bits);
          }
        }

        // Validate range.
        if (ret > max || ret < min) {
          ret = ret > max ? max : min;
          ___setErrNo(ERRNO_CODES.ERANGE);
        }

        if (bits == 64) {
          return ((asm["setTempRet0"]((tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)),ret>>>0)|0);
        }

        return ret;
      }function _strtol(str, endptr, base) {
        return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
      }function _atoi(ptr) {
        return _strtol(ptr, null, 10);
      }


    Module["_strncpy"] = _strncpy;


    function _lseek(fildes, offset, whence) {
        // off_t lseek(int fildes, off_t offset, int whence);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        try {
          return FS.llseek(stream, offset, whence);
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _fseek(stream, offset, whence) {
        // int fseek(FILE *stream, long offset, int whence);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
        var ret = _lseek(stream, offset, whence);
        if (ret == -1) {
          return -1;
        }
        stream = FS.getStream(stream);
        stream.eof = false;
        return 0;
      }



    var _recv=undefined;

    function _pread(fildes, buf, nbyte, offset) {
        // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        try {
          var slab = HEAP8;
          return FS.read(stream, slab, buf, nbyte, offset);
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _read(fildes, buf, nbyte) {
        // ssize_t read(int fildes, void *buf, size_t nbyte);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }

        if (stream && ('socket' in stream)) {
          return _recv(fildes, buf, nbyte, 0);
        }

        try {
          var slab = HEAP8;
          return FS.read(stream, slab, buf, nbyte);
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _fread(ptr, size, nitems, stream) {
        // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
        var bytesToRead = nitems * size;
        if (bytesToRead == 0) {
          return 0;
        }
        var bytesRead = 0;
        var streamObj = FS.getStream(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        while (streamObj.ungotten.length && bytesToRead > 0) {
          HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
          bytesToRead--;
          bytesRead++;
        }
        var err = _read(stream, ptr, bytesToRead);
        if (err == -1) {
          if (streamObj) streamObj.error = true;
          return 0;
        }
        bytesRead += err;
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }


    function _close(fildes) {
        // int close(int fildes);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        try {
          FS.close(stream);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }

    function _fsync(fildes) {
        // int fsync(int fildes);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
        var stream = FS.getStream(fildes);
        if (stream) {
          // We write directly to the file system, so there's nothing to do here.
          return 0;
        } else {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
      }function _fclose(stream) {
        // int fclose(FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
        _fsync(stream);
        return _close(stream);
      }


    function _open(path, oflag, varargs) {
        // int open(const char *path, int oflag, ...);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
        var mode = HEAP32[((varargs)>>2)];
        path = Pointer_stringify(path);
        try {
          var stream = FS.open(path, oflag, mode);
          return stream.fd;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _fopen(filename, mode) {
        // FILE *fopen(const char *restrict filename, const char *restrict mode);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
        var flags;
        mode = Pointer_stringify(mode);
        if (mode[0] == 'r') {
          if (mode.indexOf('+') != -1) {
            flags = 2;
          } else {
            flags = 0;
          }
        } else if (mode[0] == 'w') {
          if (mode.indexOf('+') != -1) {
            flags = 2;
          } else {
            flags = 1;
          }
          flags |= 64;
          flags |= 512;
        } else if (mode[0] == 'a') {
          if (mode.indexOf('+') != -1) {
            flags = 2;
          } else {
            flags = 1;
          }
          flags |= 64;
          flags |= 1024;
        } else {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return 0;
        }
        var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
        return (ret == -1) ? 0 : ret;
      }

    function _ftell(stream) {
        // long ftell(FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
        stream = FS.getStream(stream);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        if (FS.isChrdev(stream.node.mode)) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      }




    function __reallyNegative(x) {
        return x < 0 || (x === 0 && (1/x) === -Infinity);
      }function __formatString(format, varargs) {
        var textIndex = format;
        var argIndex = 0;
        function getNextArg(type) {
          // NOTE: Explicitly ignoring type safety. Otherwise this fails:
          //       int x = 4; printf("%c\n", (char)x);
          var ret;
          if (type === 'double') {
            ret = HEAPF64[(((varargs)+(argIndex))>>3)];
          } else if (type == 'i64') {
            ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                   HEAP32[(((varargs)+(argIndex+8))>>2)]];
            argIndex += 8; // each 32-bit chunk is in a 64-bit block

          } else {
            type = 'i32'; // varargs are always i32, i64, or double
            ret = HEAP32[(((varargs)+(argIndex))>>2)];
          }
          argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
          return ret;
        }

        var ret = [];
        var curr, next, currArg;
        while(1) {
          var startTextIndex = textIndex;
          curr = HEAP8[(textIndex)];
          if (curr === 0) break;
          next = HEAP8[((textIndex+1)|0)];
          if (curr == 37) {
            // Handle flags.
            var flagAlwaysSigned = false;
            var flagLeftAlign = false;
            var flagAlternative = false;
            var flagZeroPad = false;
            var flagPadSign = false;
            flagsLoop: while (1) {
              switch (next) {
                case 43:
                  flagAlwaysSigned = true;
                  break;
                case 45:
                  flagLeftAlign = true;
                  break;
                case 35:
                  flagAlternative = true;
                  break;
                case 48:
                  if (flagZeroPad) {
                    break flagsLoop;
                  } else {
                    flagZeroPad = true;
                    break;
                  }
                case 32:
                  flagPadSign = true;
                  break;
                default:
                  break flagsLoop;
              }
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }

            // Handle width.
            var width = 0;
            if (next == 42) {
              width = getNextArg('i32');
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            } else {
              while (next >= 48 && next <= 57) {
                width = width * 10 + (next - 48);
                textIndex++;
                next = HEAP8[((textIndex+1)|0)];
              }
            }

            // Handle precision.
            var precisionSet = false, precision = -1;
            if (next == 46) {
              precision = 0;
              precisionSet = true;
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
              if (next == 42) {
                precision = getNextArg('i32');
                textIndex++;
              } else {
                while(1) {
                  var precisionChr = HEAP8[((textIndex+1)|0)];
                  if (precisionChr < 48 ||
                      precisionChr > 57) break;
                  precision = precision * 10 + (precisionChr - 48);
                  textIndex++;
                }
              }
              next = HEAP8[((textIndex+1)|0)];
            }
            if (precision === -1) {
              precision = 6; // Standard default.
              precisionSet = false;
            }

            // Handle integer sizes. WARNING: These assume a 32-bit architecture!
            var argSize;
            switch (String.fromCharCode(next)) {
              case 'h':
                var nextNext = HEAP8[((textIndex+2)|0)];
                if (nextNext == 104) {
                  textIndex++;
                  argSize = 1; // char (actually i32 in varargs)
                } else {
                  argSize = 2; // short (actually i32 in varargs)
                }
                break;
              case 'l':
                var nextNext = HEAP8[((textIndex+2)|0)];
                if (nextNext == 108) {
                  textIndex++;
                  argSize = 8; // long long
                } else {
                  argSize = 4; // long
                }
                break;
              case 'L': // long long
              case 'q': // int64_t
              case 'j': // intmax_t
                argSize = 8;
                break;
              case 'z': // size_t
              case 't': // ptrdiff_t
              case 'I': // signed ptrdiff_t or unsigned size_t
                argSize = 4;
                break;
              default:
                argSize = null;
            }
            if (argSize) textIndex++;
            next = HEAP8[((textIndex+1)|0)];

            // Handle type specifier.
            switch (String.fromCharCode(next)) {
              case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
                // Integer.
                var signed = next == 100 || next == 105;
                argSize = argSize || 4;
                var currArg = getNextArg('i' + (argSize * 8));
                var origArg = currArg;
                var argText;
                // Flatten i64-1 [low, high] into a (slightly rounded) double
                if (argSize == 8) {
                  currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
                }
                // Truncate to requested size.
                if (argSize <= 4) {
                  var limit = Math.pow(256, argSize) - 1;
                  currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
                }
                // Format the number.
                var currAbsArg = Math.abs(currArg);
                var prefix = '';
                if (next == 100 || next == 105) {
                  if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                  argText = reSign(currArg, 8 * argSize, 1).toString(10);
                } else if (next == 117) {
                  if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                  argText = unSign(currArg, 8 * argSize, 1).toString(10);
                  currArg = Math.abs(currArg);
                } else if (next == 111) {
                  argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
                } else if (next == 120 || next == 88) {
                  prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                  if (argSize == 8 && i64Math) {
                    if (origArg[1]) {
                      argText = (origArg[1]>>>0).toString(16);
                      var lower = (origArg[0]>>>0).toString(16);
                      while (lower.length < 8) lower = '0' + lower;
                      argText += lower;
                    } else {
                      argText = (origArg[0]>>>0).toString(16);
                    }
                  } else
                  if (currArg < 0) {
                    // Represent negative numbers in hex as 2's complement.
                    currArg = -currArg;
                    argText = (currAbsArg - 1).toString(16);
                    var buffer = [];
                    for (var i = 0; i < argText.length; i++) {
                      buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                    }
                    argText = buffer.join('');
                    while (argText.length < argSize * 2) argText = 'f' + argText;
                  } else {
                    argText = currAbsArg.toString(16);
                  }
                  if (next == 88) {
                    prefix = prefix.toUpperCase();
                    argText = argText.toUpperCase();
                  }
                } else if (next == 112) {
                  if (currAbsArg === 0) {
                    argText = '(nil)';
                  } else {
                    prefix = '0x';
                    argText = currAbsArg.toString(16);
                  }
                }
                if (precisionSet) {
                  while (argText.length < precision) {
                    argText = '0' + argText;
                  }
                }

                // Add sign if needed
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    prefix = '+' + prefix;
                  } else if (flagPadSign) {
                    prefix = ' ' + prefix;
                  }
                }

                // Move sign to prefix so we zero-pad after the sign
                if (argText.charAt(0) == '-') {
                  prefix = '-' + prefix;
                  argText = argText.substr(1);
                }

                // Add padding.
                while (prefix.length + argText.length < width) {
                  if (flagLeftAlign) {
                    argText += ' ';
                  } else {
                    if (flagZeroPad) {
                      argText = '0' + argText;
                    } else {
                      prefix = ' ' + prefix;
                    }
                  }
                }

                // Insert the result into the buffer.
                argText = prefix + argText;
                argText.split('').forEach(function(chr) {
                  ret.push(chr.charCodeAt(0));
                });
                break;
              }
              case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
                // Float.
                var currArg = getNextArg('double');
                var argText;
                if (isNaN(currArg)) {
                  argText = 'nan';
                  flagZeroPad = false;
                } else if (!isFinite(currArg)) {
                  argText = (currArg < 0 ? '-' : '') + 'inf';
                  flagZeroPad = false;
                } else {
                  var isGeneral = false;
                  var effectivePrecision = Math.min(precision, 20);

                  // Convert g/G to f/F or e/E, as per:
                  // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                  if (next == 103 || next == 71) {
                    isGeneral = true;
                    precision = precision || 1;
                    var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                    if (precision > exponent && exponent >= -4) {
                      next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                      precision -= exponent + 1;
                    } else {
                      next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                      precision--;
                    }
                    effectivePrecision = Math.min(precision, 20);
                  }

                  if (next == 101 || next == 69) {
                    argText = currArg.toExponential(effectivePrecision);
                    // Make sure the exponent has at least 2 digits.
                    if (/[eE][-+]\d$/.test(argText)) {
                      argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                    }
                  } else if (next == 102 || next == 70) {
                    argText = currArg.toFixed(effectivePrecision);
                    if (currArg === 0 && __reallyNegative(currArg)) {
                      argText = '-' + argText;
                    }
                  }

                  var parts = argText.split('e');
                  if (isGeneral && !flagAlternative) {
                    // Discard trailing zeros and periods.
                    while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                           (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                      parts[0] = parts[0].slice(0, -1);
                    }
                  } else {
                    // Make sure we have a period in alternative mode.
                    if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                    // Zero pad until required precision.
                    while (precision > effectivePrecision++) parts[0] += '0';
                  }
                  argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');

                  // Capitalize 'E' if needed.
                  if (next == 69) argText = argText.toUpperCase();

                  // Add sign.
                  if (currArg >= 0) {
                    if (flagAlwaysSigned) {
                      argText = '+' + argText;
                    } else if (flagPadSign) {
                      argText = ' ' + argText;
                    }
                  }
                }

                // Add padding.
                while (argText.length < width) {
                  if (flagLeftAlign) {
                    argText += ' ';
                  } else {
                    if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                      argText = argText[0] + '0' + argText.slice(1);
                    } else {
                      argText = (flagZeroPad ? '0' : ' ') + argText;
                    }
                  }
                }

                // Adjust case.
                if (next < 97) argText = argText.toUpperCase();

                // Insert the result into the buffer.
                argText.split('').forEach(function(chr) {
                  ret.push(chr.charCodeAt(0));
                });
                break;
              }
              case 's': {
                // String.
                var arg = getNextArg('i8*');
                var argLength = arg ? _strlen(arg) : '(null)'.length;
                if (precisionSet) argLength = Math.min(argLength, precision);
                if (!flagLeftAlign) {
                  while (argLength < width--) {
                    ret.push(32);
                  }
                }
                if (arg) {
                  for (var i = 0; i < argLength; i++) {
                    ret.push(HEAPU8[((arg++)|0)]);
                  }
                } else {
                  ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
                }
                if (flagLeftAlign) {
                  while (argLength < width--) {
                    ret.push(32);
                  }
                }
                break;
              }
              case 'c': {
                // Character.
                if (flagLeftAlign) ret.push(getNextArg('i8'));
                while (--width > 0) {
                  ret.push(32);
                }
                if (!flagLeftAlign) ret.push(getNextArg('i8'));
                break;
              }
              case 'n': {
                // Write the length written so far to the next parameter.
                var ptr = getNextArg('i32*');
                HEAP32[((ptr)>>2)]=ret.length;
                break;
              }
              case '%': {
                // Literal percent sign.
                ret.push(curr);
                break;
              }
              default: {
                // Unknown specifiers remain untouched.
                for (var i = startTextIndex; i < textIndex + 2; i++) {
                  ret.push(HEAP8[(i)]);
                }
              }
            }
            textIndex += 2;
            // TODO: Support a/A (hex float) and m (last error) specifiers.
            // TODO: Support %1${specifier} for arg selection.
          } else {
            ret.push(curr);
            textIndex += 1;
          }
        }
        return ret;
      }function _snprintf(s, n, format, varargs) {
        // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
        var result = __formatString(format, varargs);
        var limit = (n === undefined) ? result.length
                                      : Math.min(result.length, Math.max(n - 1, 0));
        if (s < 0) {
          s = -s;
          var buf = _malloc(limit+1);
          HEAP32[((s)>>2)]=buf;
          s = buf;
        }
        for (var i = 0; i < limit; i++) {
          HEAP8[(((s)+(i))|0)]=result[i];
        }
        if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
        return result.length;
      }function _sprintf(s, format, varargs) {
        // int sprintf(char *restrict s, const char *restrict format, ...);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
        return _snprintf(s, undefined, format, varargs);
      }

    function _stat(path, buf, dontResolveLastLink) {
        // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
        // int stat(const char *path, struct stat *buf);
        // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
        //       used in client code.
        path = typeof path !== 'string' ? Pointer_stringify(path) : path;
        try {
          var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
          HEAP32[((buf)>>2)]=stat.dev;
          HEAP32[(((buf)+(4))>>2)]=0;
          HEAP32[(((buf)+(8))>>2)]=stat.ino;
          HEAP32[(((buf)+(12))>>2)]=stat.mode;
          HEAP32[(((buf)+(16))>>2)]=stat.nlink;
          HEAP32[(((buf)+(20))>>2)]=stat.uid;
          HEAP32[(((buf)+(24))>>2)]=stat.gid;
          HEAP32[(((buf)+(28))>>2)]=stat.rdev;
          HEAP32[(((buf)+(32))>>2)]=0;
          HEAP32[(((buf)+(36))>>2)]=stat.size;
          HEAP32[(((buf)+(40))>>2)]=4096;
          HEAP32[(((buf)+(44))>>2)]=stat.blocks;
          HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
          HEAP32[(((buf)+(52))>>2)]=0;
          HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
          HEAP32[(((buf)+(60))>>2)]=0;
          HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
          HEAP32[(((buf)+(68))>>2)]=0;
          HEAP32[(((buf)+(72))>>2)]=stat.ino;
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }

    function _isdigit(chr) {
        return chr >= 48 && chr <= 57;
      }

    function _unlink(path) {
        // int unlink(const char *path);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
        path = Pointer_stringify(path);
        try {
          FS.unlink(path);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }


    function _mknod(path, mode, dev) {
        // int mknod(const char *path, mode_t mode, dev_t dev);
        // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
        path = Pointer_stringify(path);
        // we don't want this in the JS API as the JS API
        // uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default:
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
        }
        try {
          FS.mknod(path, mode, dev);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _mkdir(path, mode) {
        // int mkdir(const char *path, mode_t mode);
        // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
        path = Pointer_stringify(path);
        try {
          FS.mkdir(path, mode, 0);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }

    function _rmdir(path) {
        // int rmdir(const char *path);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
        path = Pointer_stringify(path);
        try {
          FS.rmdir(path);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }

    function _access(path, amode) {
        // int access(const char *path, int amode);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
        path = Pointer_stringify(path);
        if (amode & ~7) {
          // need a valid mode
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        return 0;
      }

    function _rename(old_path, new_path) {
        // int rename(const char *old, const char *new);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
        old_path = Pointer_stringify(old_path);
        new_path = Pointer_stringify(new_path);
        try {
          FS.rename(old_path, new_path);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }


    function _truncate(path, length) {
        // int truncate(const char *path, off_t length);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/truncate.html
        // NOTE: The path argument may be a string, to simplify ftruncate().
        if (typeof path !== 'string') path = Pointer_stringify(path);
        try {
          FS.truncate(path, length);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _ftruncate(fildes, length) {
        // int ftruncate(int fildes, off_t length);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftruncate.html
        try {
          FS.ftruncate(fildes, length);
          return 0;
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }

    function _fileno(stream) {
        // int fileno(FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
        // We use file descriptor numbers and FILE* streams interchangeably.
        return stream;
      }



    var _send=undefined;

    function _pwrite(fildes, buf, nbyte, offset) {
        // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        try {
          var slab = HEAP8;
          return FS.write(stream, slab, buf, nbyte, offset);
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _write(fildes, buf, nbyte) {
        // ssize_t write(int fildes, const void *buf, size_t nbyte);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }

        if (stream && ('socket' in stream)) {
          return _send(fildes, buf, nbyte, 0);
        }

        try {
          var slab = HEAP8;
          return FS.write(stream, slab, buf, nbyte);
        } catch (e) {
          FS.handleFSError(e);
          return -1;
        }
      }function _fwrite(ptr, size, nitems, stream) {
        // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
        var bytesToWrite = nitems * size;
        if (bytesToWrite == 0) return 0;
        var bytesWritten = _write(stream, ptr, bytesToWrite);
        if (bytesWritten == -1) {
          var streamObj = FS.getStream(stream);
          if (streamObj) streamObj.error = true;
          return 0;
        } else {
          return Math.floor(bytesWritten / size);
        }
      }

    function _fstat(fildes, buf) {
        // int fstat(int fildes, struct stat *buf);
        // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        return _stat(stream.path, buf);
      }

    function _strncat(pdest, psrc, num) {
        var len = _strlen(pdest);
        var i = 0;
        while(1) {
          HEAP8[((pdest+len+i)|0)]=HEAP8[((psrc+i)|0)];
          if (HEAP8[(((pdest)+(len+i))|0)] == 0) break;
          i ++;
          if (i == num) {
            HEAP8[(((pdest)+(len+i))|0)]=0;
            break;
          }
        }
        return pdest;
      }


    var ___strtok_state=0;

    function _strtok_r(s, delim, lasts) {
        var skip_leading_delim = 1;
        var spanp;
        var c, sc;
        var tok;


        if (s == 0 && (s = getValue(lasts, 'i8*')) == 0) {
          return 0;
        }

        cont: while (1) {
          c = getValue(s++, 'i8');
          for (spanp = delim; (sc = getValue(spanp++, 'i8')) != 0;) {
            if (c == sc) {
              if (skip_leading_delim) {
                continue cont;
              } else {
                setValue(lasts, s, 'i8*');
                setValue(s - 1, 0, 'i8');
                return s - 1;
              }
            }
          }
          break;
        }

        if (c == 0) {
          setValue(lasts, 0, 'i8*');
          return 0;
        }
        tok = s - 1;

        for (;;) {
          c = getValue(s++, 'i8');
          spanp = delim;
          do {
            if ((sc = getValue(spanp++, 'i8')) == c) {
              if (c == 0) {
                s = 0;
              } else {
                setValue(s - 1, 0, 'i8');
              }
              setValue(lasts, s, 'i8*');
              return tok;
            }
          } while (sc != 0);
        }
        abort('strtok_r error!');
      }function _strtok(s, delim) {
        return _strtok_r(s, delim, ___strtok_state);
      }

    function _strspn(pstr, pset) {
        var str = pstr, set, strcurr, setcurr;
        while (1) {
          strcurr = HEAP8[(str)];
          if (!strcurr) return str - pstr;
          set = pset;
          while (1) {
            setcurr = HEAP8[(set)];
            if (!setcurr || setcurr == strcurr) break;
            set++;
          }
          if (!setcurr) return str - pstr;
          str++;
        }
      }


    var _floor=Math_floor;

    var _ceil=Math_ceil;

    var _cos=Math_cos;

    var _sin=Math_sin;

    var _sqrt=Math_sqrt;

    var _log=Math_log;

    var _atan2=Math_atan2;

    var _tan=Math_tan;

    var _fabs=Math_abs;

    function _exp2(x) {
        return Math.pow(2, x);
      }

    function _strstr(ptr1, ptr2) {
        var check = 0, start;
        do {
          if (!check) {
            start = ptr1;
            check = ptr2;
          }
          var curr1 = HEAP8[((ptr1++)|0)];
          var curr2 = HEAP8[((check++)|0)];
          if (curr2 == 0) return start;
          if (curr2 != curr1) {
            // rewind to one character after start, to find ez in eeez
            ptr1 = start + 1;
            check = 0;
          }
        } while (curr1);
        return 0;
      }

    function _SDL_LockAudio() {}

    function _SDL_UnlockAudio() {}

    function _SDL_OpenAudio(desired, obtained) {
        try {
          SDL.audio = {
            freq: HEAPU32[((desired)>>2)],
            format: HEAPU16[(((desired)+(4))>>1)],
            channels: HEAPU8[(((desired)+(6))|0)],
            samples: HEAPU16[(((desired)+(8))>>1)], // Samples in the CB buffer per single sound channel.
            callback: HEAPU32[(((desired)+(16))>>2)],
            userdata: HEAPU32[(((desired)+(20))>>2)],
            paused: true,
            timer: null
          };
          // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
          if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
          } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
          } else {
            throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
          }
          // Round the desired audio frequency up to the next 'common' frequency value.
          // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
          if (SDL.audio.freq <= 0) {
            throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
          } else if (SDL.audio.freq <= 22050) {
            SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
          } else if (SDL.audio.freq <= 32000) {
            SDL.audio.freq = 32000;
          } else if (SDL.audio.freq <= 44100) {
            SDL.audio.freq = 44100;
          } else if (SDL.audio.freq <= 48000) {
            SDL.audio.freq = 48000;
          } else if (SDL.audio.freq <= 96000) {
            SDL.audio.freq = 96000;
          } else {
            throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
          }
          if (SDL.audio.channels == 0) {
            SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
          } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
            throw 'Unsupported number of audio channels for SDL audio: ' + SDL.audio.channels + '!';
          } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) { // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
            console.log('Warning: Using untested number of audio channels ' + SDL.audio.channels);
          }
          if (SDL.audio.samples < 128 || SDL.audio.samples > 524288 /* arbitrary cap */) {
            throw 'Unsupported audio callback buffer size ' + SDL.audio.samples + '!';
          } else if ((SDL.audio.samples & (SDL.audio.samples-1)) != 0) {
            throw 'Audio callback buffer size ' + SDL.audio.samples + ' must be a power-of-two!';
          }

          var totalSamples = SDL.audio.samples*SDL.audio.channels;
          SDL.audio.bytesPerSample = (SDL.audio.format == 0x0008 /*AUDIO_U8*/ || SDL.audio.format == 0x8008 /*AUDIO_S8*/) ? 1 : 2;
          SDL.audio.bufferSize = totalSamples*SDL.audio.bytesPerSample;
          SDL.audio.buffer = _malloc(SDL.audio.bufferSize);

          // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
          // This helps that we won't starve that easily if a frame takes long to complete.
          SDL.audio.numSimultaneouslyQueuedBuffers = Module['SDL_numSimultaneouslyQueuedBuffers'] || 3;

          // Create a callback function that will be routinely called to ask more audio data from the user application.
          SDL.audio.caller = function SDL_audio_caller() {
            if (!SDL.audio) {
              return;
            }
            Runtime.dynCall('viii', SDL.audio.callback, [SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize]);
            SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
          };

          SDL.audio.audioOutput = new Audio();
          // As a workaround use Mozilla Audio Data API on Firefox until it ships with Web Audio and sound quality issues are fixed.
          if (typeof(SDL.audio.audioOutput['mozSetup'])==='function') {
            SDL.audio.audioOutput['mozSetup'](SDL.audio.channels, SDL.audio.freq); // use string attributes on mozOutput for closure compiler
            SDL.audio.mozBuffer = new Float32Array(totalSamples);
            SDL.audio.nextPlayTime = 0;
            SDL.audio.pushAudio = function SDL_audio_pushAudio(ptr, size) {
              --SDL.audio.numAudioTimersPending;
              var mozBuffer = SDL.audio.mozBuffer;
              // The input audio data for SDL audio is either 8-bit or 16-bit interleaved across channels, output for Mozilla Audio Data API
              // needs to be Float32 interleaved, so perform a sample conversion.
              if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
                for (var i = 0; i < totalSamples; i++) {
                  mozBuffer[i] = (HEAP16[(((ptr)+(i*2))>>1)]) / 0x8000;
                }
              } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
                for (var i = 0; i < totalSamples; i++) {
                  var v = (HEAP8[(((ptr)+(i))|0)]);
                  mozBuffer[i] = ((v >= 0) ? v-128 : v+128) /128;
                }
              }
              // Submit the audio data to audio device.
              SDL.audio.audioOutput['mozWriteAudio'](mozBuffer);

              // Compute when the next audio callback should be called.
              var curtime = Date.now() / 1000.0 - SDL.audio.startTime;
              var playtime = Math.max(curtime, SDL.audio.nextPlayTime);
              var buffer_duration = SDL.audio.samples / SDL.audio.freq;
              SDL.audio.nextPlayTime = playtime + buffer_duration;
              // Schedule the next audio callback call to occur when the current one finishes.
              SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1000.0 * (playtime-curtime));
              ++SDL.audio.numAudioTimersPending;
              // And also schedule extra buffers _now_ if we have too few in queue.
              if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
                ++SDL.audio.numAudioTimersPending;
                Browser.safeSetTimeout(SDL.audio.caller, 1.0);
              }
            }
          } else {
            // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
            // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
            if (!SDL.audioContext) {
              if (typeof(AudioContext) === 'function') {
                SDL.audioContext = new AudioContext();
              } else if (typeof(webkitAudioContext) === 'function') {
                SDL.audioContext = new webkitAudioContext();
              } else {
                throw 'Web Audio API is not available!';
              }
            }
            SDL.audio.soundSource = new Array(); // Use an array of sound sources as a ring buffer to queue blocks of synthesized audio to Web Audio API.
            SDL.audio.nextSoundSource = 0; // Index of the next sound buffer in the ring buffer queue to play.
            SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.

            // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
            SDL.audio.pushAudio=function(ptr,sizeBytes) {
              try {
                --SDL.audio.numAudioTimersPending;

                var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
                var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
                if (sizeSamplesPerChannel != SDL.audio.samples) {
                  throw 'Received mismatching audio buffer size!';
                }
                // Allocate new sound buffer to be played.
                var source = SDL.audioContext['createBufferSource']();
                if (SDL.audio.soundSource[SDL.audio.nextSoundSource]) {
                  SDL.audio.soundSource[SDL.audio.nextSoundSource]['disconnect'](); // Explicitly disconnect old source, since we know it shouldn't be running anymore.
                }
                SDL.audio.soundSource[SDL.audio.nextSoundSource] = source;
                var soundBuffer = SDL.audioContext['createBuffer'](SDL.audio.channels,sizeSamplesPerChannel,SDL.audio.freq);
                SDL.audio.soundSource[SDL.audio.nextSoundSource]['connect'](SDL.audioContext['destination']);

                // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
                // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
                // so perform a buffer conversion for the data.
                var numChannels = SDL.audio.channels;
                for(var i = 0; i < numChannels; ++i) {
                  var channelData = soundBuffer['getChannelData'](i);
                  if (channelData.length != sizeSamplesPerChannel) {
                    throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
                  }
                  if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
                    for(var j = 0; j < sizeSamplesPerChannel; ++j) {
                      channelData[j] = (HEAP16[(((ptr)+((j*numChannels + i)*2))>>1)]) / 0x8000;
                    }
                  } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
                    for(var j = 0; j < sizeSamplesPerChannel; ++j) {
                      var v = (HEAP8[(((ptr)+(j*numChannels + i))|0)]);
                      channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
                    }
                  }
                }
                // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
                source['buffer'] = soundBuffer;

                // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
                // sample buffer has finished.
                var curtime = SDL.audioContext['currentTime'];
                var playtime = Math.max(curtime, SDL.audio.nextPlayTime);
                SDL.audio.soundSource[SDL.audio.nextSoundSource]['start'](playtime);
                var buffer_duration = sizeSamplesPerChannel / SDL.audio.freq;
                SDL.audio.nextPlayTime = playtime + buffer_duration;
                SDL.audio.nextSoundSource = (SDL.audio.nextSoundSource + 1) % 4;
                var secsUntilNextCall = playtime-curtime;

                // Queue the next audio frame push to be performed when the previously queued buffer has finished playing.
                if (SDL.audio.numAudioTimersPending == 0) {
                  var preemptBufferFeedMSecs = buffer_duration/2.0;
                  SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, Math.max(0.0, 1000.0*secsUntilNextCall-preemptBufferFeedMSecs));
                  ++SDL.audio.numAudioTimersPending;
                }

                // If we are risking starving, immediately queue extra buffers.
                if (secsUntilNextCall <= buffer_duration && SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
                  ++SDL.audio.numAudioTimersPending;
                  Browser.safeSetTimeout(SDL.audio.caller, 1.0);
                }
              } catch(e) {
                console.log('Web Audio API error playing back audio: ' + e.toString());
              }
            }
          }

          if (obtained) {
            // Report back the initialized audio parameters.
            HEAP32[((obtained)>>2)]=SDL.audio.freq;
            HEAP16[(((obtained)+(4))>>1)]=SDL.audio.format;
            HEAP8[(((obtained)+(6))|0)]=SDL.audio.channels;
            HEAP8[(((obtained)+(7))|0)]=SDL.audio.silence;
            HEAP16[(((obtained)+(8))>>1)]=SDL.audio.samples;
            HEAP32[(((obtained)+(16))>>2)]=SDL.audio.callback;
            HEAP32[(((obtained)+(20))>>2)]=SDL.audio.userdata;
          }
          SDL.allocateChannels(32);

        } catch(e) {
          console.log('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
          SDL.audio = null;
          SDL.allocateChannels(0);
          if (obtained) {
            HEAP32[((obtained)>>2)]=0;
            HEAP16[(((obtained)+(4))>>1)]=0;
            HEAP8[(((obtained)+(6))|0)]=0;
            HEAP8[(((obtained)+(7))|0)]=0;
            HEAP16[(((obtained)+(8))>>1)]=0;
            HEAP32[(((obtained)+(16))>>2)]=0;
            HEAP32[(((obtained)+(20))>>2)]=0;
          }
        }
        if (!SDL.audio) {
          return -1;
        }
        return 0;
      }

    function _SDL_GetError() {
        if (!SDL.errorMessage) {
          SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
        }
        return SDL.errorMessage;
      }

    function _SDL_PauseAudio(pauseOn) {
        if (!SDL.audio) {
          return;
        }
        if (pauseOn) {
          if (SDL.audio.timer !== undefined) {
            clearTimeout(SDL.audio.timer);
            SDL.audio.numAudioTimersPending = 0;
            SDL.audio.timer = undefined;
          }
        } else if (!SDL.audio.timer) {
          // Start the audio playback timer callback loop.
          SDL.audio.numAudioTimersPending = 1;
          SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
          SDL.audio.startTime = Date.now() / 1000.0; // Only used for Mozilla Audio Data API. Not needed for Web Audio API.
        }
        SDL.audio.paused = pauseOn;
      }

    var _llvm_pow_f32=Math_pow;

    var _fabsf=Math_abs;

    var _llvm_pow_f64=Math_pow;

    function _fmod(x, y) {
        return x % y;
      }


    function _llvm_bswap_i16(x) {
        return ((x&0xff)<<8) | ((x>>8)&0xff);
      }

    function _SDL_WM_SetCaption(title, icon) {
        title = title && Pointer_stringify(title);
        icon = icon && Pointer_stringify(icon);
      }

    function _SDL_VideoModeOK(width, height, depth, flags) {
        // SDL_VideoModeOK returns 0 if the requested mode is not supported under any bit depth, or returns the
        // bits-per-pixel of the closest available mode with the given width, height and requested surface flags
        return depth; // all modes are ok.
      }

    function _SDL_FreeSurface(surf) {
        if (surf) SDL.freeSurface(surf);
      }

    function _SDL_SetVideoMode(width, height, depth, flags) {
        ['mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'mouseout'].forEach(function(event) {
          Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
        });

        // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
        if (width == 0 && height == 0) {
          var canvas = Module['canvas'];
          width = canvas.width;
          height = canvas.height;
        }

        Browser.setCanvasSize(width, height, true);
        // Free the old surface first.
        if (SDL.screen) {
          SDL.freeSurface(SDL.screen);
          SDL.screen = null;
        }
        SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
        if (!SDL.addedResizeListener) {
          SDL.addedResizeListener = true;
          Browser.resizeListeners.push(function(w, h) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          });
        }
        return SDL.screen;
      }

    function _SDL_CreateRGBSurface(flags, width, height, depth, rmask, gmask, bmask, amask) {
        return SDL.makeSurface(width, height, flags, false, 'CreateRGBSurface', rmask, gmask, bmask, amask);
      }

    function _SDL_ShowCursor(toggle) {
        switch (toggle) {
          case 0: // SDL_DISABLE
            if (Browser.isFullScreen) { // only try to lock the pointer when in full screen mode
              Module['canvas'].requestPointerLock();
              return 0;
            } else { // else return SDL_ENABLE to indicate the failure
              return 1;
            }
            break;
          case 1: // SDL_ENABLE
            Module['canvas'].exitPointerLock();
            return 1;
            break;
          case -1: // SDL_QUERY
            return !Browser.pointerLock;
            break;
          default:
            console.log( "SDL_ShowCursor called with unknown toggle parameter value: " + toggle + "." );
            break;
        }
      }

    function _SDL_WM_GrabInput() {}

    function _SDL_LockSurface(surf) {
        var surfData = SDL.surfaces[surf];

        surfData.locked++;
        if (surfData.locked > 1) return 0;

        // Mark in C/C++-accessible SDL structure
        // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
        // So we have fields all of the same size, and 5 of them before us.
        // TODO: Use macros like in library.js
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;

        if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;

        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        if (surf == SDL.screen) {
          var data = surfData.image.data;
          var num = data.length;
          for (var i = 0; i < num/4; i++) {
            data[i*4+3] = 255; // opacity, as canvases blend alpha
          }
        }

        if (SDL.defaults.copyOnLock) {
          // Copy pixel data to somewhere accessible to 'C/C++'
          if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
            // If this is neaded then
            // we should compact the data from 32bpp to 8bpp index.
            // I think best way to implement this is use
            // additional colorMap hash (color->index).
            // Something like this:
            //
            // var size = surfData.width * surfData.height;
            // var data = '';
            // for (var i = 0; i<size; i++) {
            //   var color = SDL.translateRGBAToColor(
            //     surfData.image.data[i*4   ],
            //     surfData.image.data[i*4 +1],
            //     surfData.image.data[i*4 +2],
            //     255);
            //   var index = surfData.colorMap[color];
            //   HEAP8[(((surfData.buffer)+(i))|0)]=index;
            // }
            throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
          } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
          }
        }

        return 0;
      }

    function _SDL_UnlockSurface(surf) {
        assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts

        var surfData = SDL.surfaces[surf];

        surfData.locked--;
        if (surfData.locked > 0) return;

        // Copy pixel data to image
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          SDL.copyIndexedColorData(surfData);
        } else if (!surfData.colors) {
          var data = surfData.image.data;
          var buffer = surfData.buffer;
          assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
          var src = buffer >> 2;
          var dst = 0;
          var isScreen = surf == SDL.screen;
          var num;
          if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
            // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
            // not UInt8ClampedArray. These don't have buffers, so we need to revert
            // to copying a byte at a time. We do the undefined check because modern
            // browsers do not define CanvasPixelArray anymore.
            num = data.length;
            while (dst < num) {
              var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
              data[dst  ] = val & 0xff;
              data[dst+1] = (val >> 8) & 0xff;
              data[dst+2] = (val >> 16) & 0xff;
              data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
              src++;
              dst += 4;
            }
          } else {
            var data32 = new Uint32Array(data.buffer);
            num = data32.length;
            if (isScreen) {
              while (dst < num) {
                // HEAP32[src++] is an optimization. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
                data32[dst++] = HEAP32[src++] | 0xff000000;
              }
            } else {
              while (dst < num) {
                data32[dst++] = HEAP32[src++];
              }
            }
          }
        } else {
          var width = Module['canvas'].width;
          var height = Module['canvas'].height;
          var s = surfData.buffer;
          var data = surfData.image.data;
          var colors = surfData.colors;
          for (var y = 0; y < height; y++) {
            var base = y*width*4;
            for (var x = 0; x < width; x++) {
              // See comment above about signs
              var val = HEAPU8[((s++)|0)] * 3;
              var start = base + x*4;
              data[start]   = colors[val];
              data[start+1] = colors[val+1];
              data[start+2] = colors[val+2];
            }
            s += width*3;
          }
        }
        // Copy to canvas
        surfData.ctx.putImageData(surfData.image, 0, 0);
        // Note that we save the image, so future writes are fast. But, memory is not yet released
      }

    function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: -1, h: -1 };
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, sr.w, sr.h);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          console.log('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      }

    function _SDL_Flip(surf) {
        // We actually do this in Unlock, since the screen surface has as its canvas
        // backing the page canvas element
      }


    function _SDL_SetColors(surf, colors, firstColor, nColors) {
        var surfData = SDL.surfaces[surf];

        // we should create colors array
        // only once cause client code
        // often wants to change portion
        // of palette not all palette.
        if (!surfData.colors) {
          surfData.colors = new Uint8Array(256 * 3); //256 RGB colors
        }

        for (var i = 0; i < nColors; ++i) {
          var index = (firstColor + i) * 3;
          surfData.colors[index] = HEAPU8[(((colors)+(i*4))|0)];
          surfData.colors[index + 1] = HEAPU8[(((colors)+(i*4 + 1))|0)];
          surfData.colors[index + 2] = HEAPU8[(((colors)+(i*4 + 2))|0)];
        }

        return 1;
      }function _SDL_SetPalette(surf, flags, colors, firstColor, nColors) {
        return _SDL_SetColors(surf, colors, firstColor, nColors);
      }

    function _SDL_MapRGB(fmt, r, g, b) {
        // Canvas screens are always RGBA. We assume the machine is little-endian.
        return r&0xff|(g&0xff)<<8|(b&0xff)<<16|0xff000000;
      }

    function _SDL_JoystickUpdate() {
        SDL.queryJoysticks();
      }

    function _SDL_PollEvent(ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (SDL.events.length === 0) return 0;
        if (ptr) {
          SDL.makeCEvent(SDL.events.shift(), ptr);
        }
        return 1;
      }

    function _SDL_WaitEvent() {
    Module['printErr']('missing function: SDL_WaitEvent'); abort(-1);
    }

    var _llvm_va_start=undefined;

    function _vsprintf(s, format, va_arg) {
        return _sprintf(s, format, HEAP32[((va_arg)>>2)]);
      }

    function _llvm_va_end() {}


    function _fprintf(stream, format, varargs) {
        // int fprintf(FILE *restrict stream, const char *restrict format, ...);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
        var result = __formatString(format, varargs);
        var stack = Runtime.stackSave();
        var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
        Runtime.stackRestore(stack);
        return ret;
      }function _printf(format, varargs) {
        // int printf(const char *restrict format, ...);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
        var stdout = HEAP32[((_stdout)>>2)];
        return _fprintf(stdout, format, varargs);
      }





    var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
        // WARNING: Arbitrary limit!
        var MAX_ENV_VALUES = 64;
        var TOTAL_ENV_SIZE = 1024;

        // Statically allocate memory for the environment.
        var poolPtr;
        var envPtr;
        if (!___buildEnvironment.called) {
          ___buildEnvironment.called = true;
          // Set default values. Use string keys for Closure Compiler compatibility.
          ENV['USER'] = 'root';
          ENV['PATH'] = '/';
          ENV['PWD'] = '/';
          ENV['HOME'] = '/home/emscripten';
          ENV['LANG'] = 'en_US.UTF-8';
          ENV['_'] = './this.program';
          // Allocate memory.
          poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
          envPtr = allocate(MAX_ENV_VALUES * 4,
                            'i8*', ALLOC_STATIC);
          HEAP32[((envPtr)>>2)]=poolPtr;
          HEAP32[((_environ)>>2)]=envPtr;
        } else {
          envPtr = HEAP32[((_environ)>>2)];
          poolPtr = HEAP32[((envPtr)>>2)];
        }

        // Collect key=value lines.
        var strings = [];
        var totalSize = 0;
        for (var key in env) {
          if (typeof env[key] === 'string') {
            var line = key + '=' + env[key];
            strings.push(line);
            totalSize += line.length;
          }
        }
        if (totalSize > TOTAL_ENV_SIZE) {
          throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
        }

        // Make new.
        var ptrSize = 4;
        for (var i = 0; i < strings.length; i++) {
          var line = strings[i];
          writeAsciiToMemory(line, poolPtr);
          HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
          poolPtr += line.length + 1;
        }
        HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
      }var ENV={};function _putenv(string) {
        // int putenv(char *string);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
        // WARNING: According to the standard (and the glibc implementation), the
        //          string is taken by reference so future changes are reflected.
        //          We copy it instead, possibly breaking some uses.
        if (string === 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        }
        string = Pointer_stringify(string);
        var splitPoint = string.indexOf('=')
        if (string === '' || string.indexOf('=') === -1) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        }
        var name = string.slice(0, splitPoint);
        var value = string.slice(splitPoint + 1);
        if (!(name in ENV) || ENV[name] !== value) {
          ENV[name] = value;
          ___buildEnvironment(ENV);
        }
        return 0;
      }

    function _SDL_Init(initFlags) {
        SDL.startTime = Date.now();
        SDL.initFlags = initFlags;

        // capture all key events. we just keep down and up, but also capture press to prevent default actions
        if (!Module['doNotCaptureKeyboard']) {
          document.addEventListener("keydown", SDL.receiveEvent);
          document.addEventListener("keyup", SDL.receiveEvent);
          document.addEventListener("keypress", SDL.receiveEvent);
          window.addEventListener("blur", SDL.receiveEvent);
          document.addEventListener("visibilitychange", SDL.receiveEvent);
        }

        if (initFlags & 0x200) {
          // SDL_INIT_JOYSTICK
          // Firefox will not give us Joystick data unless we register this NOP
          // callback.
          // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
          addEventListener("gamepadconnected", function() {});
        }

        window.addEventListener("unload", SDL.receiveEvent);
        SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
        _memset(SDL.keyboardState, 0, 0x10000);
        // Initialize this structure carefully for closure
        SDL.DOMEventToSDLEvent['keydown'] = 0x300 /* SDL_KEYDOWN */;
        SDL.DOMEventToSDLEvent['keyup'] = 0x301 /* SDL_KEYUP */;
        SDL.DOMEventToSDLEvent['keypress'] = 0x303 /* SDL_TEXTINPUT */;
        SDL.DOMEventToSDLEvent['mousedown'] = 0x401 /* SDL_MOUSEBUTTONDOWN */;
        SDL.DOMEventToSDLEvent['mouseup'] = 0x402 /* SDL_MOUSEBUTTONUP */;
        SDL.DOMEventToSDLEvent['mousemove'] = 0x400 /* SDL_MOUSEMOTION */;
        SDL.DOMEventToSDLEvent['unload'] = 0x100 /* SDL_QUIT */;
        SDL.DOMEventToSDLEvent['resize'] = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
        // These are not technically DOM events; the HTML gamepad API is poll-based.
        // However, we define them here, as the rest of the SDL code assumes that
        // all SDL events originate as DOM events.
        SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
        SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
        SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
        return 0; // success
      }

    function _SDL_InitSubSystem(flags) { return 0 }

    function _SDL_NumJoysticks() {
        var count = 0;
        var gamepads = SDL.getGamepads();
        // The length is not the number of gamepads; check which ones are defined.
        for (var i = 0; i < gamepads.length; i++) {
          if (gamepads[i] !== undefined) count++;
        }
        return count;
      }

    function _llvm_eh_typeid_for(type) {
        return type;
      }

    function ___cxa_rethrow() {
        ___cxa_end_catch.rethrown = true;
        var ptr = ___cxa_caught_exceptions.pop();
        throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
      }


    function _SDL_Quit() {
        for (var i = 0; i < SDL.numChannels; ++i) {
          if (SDL.channels[i].audio) {
            SDL.channels[i].audio.pause();
          }
        }
        if (SDL.music.audio) {
          SDL.music.audio.pause();
        }
        Module.print('SDL_Quit called (and ignored)');
      }


    function _SDL_Delay(delay) {
        if (!ENVIRONMENT_IS_WORKER) abort('SDL_Delay called on the main thread! Potential infinite loop, quitting.');
        // horrible busy-wait, but in a worker it at least does not block rendering
        var now = Date.now();
        while (Date.now() - now < delay) {}
      }


    function _execl(/* ... */) {
        // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
        // We don't support executing external code.
        ___setErrNo(ERRNO_CODES.ENOEXEC);
        return -1;
      }var _execlp=_execl;

    function _SDL_FillRect(surf, rect, color) {
        var surfData = SDL.surfaces[surf];
        assert(!surfData.locked); // but we could unlock and re-lock if we must..

        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          //in SDL_HWPALETTE color is index (0..255)
          //so we should translate 1 byte value to
          //32 bit canvas
          var index = color * 3;
          color = SDL.translateRGBAToColor(surfData.colors[index], surfData.colors[index +1], surfData.colors[index +2], 255);
        }

        var r = rect ? SDL.loadRect(rect) : { x: 0, y: 0, w: surfData.width, h: surfData.height };
        surfData.ctx.save();
        surfData.ctx.fillStyle = SDL.translateColorToCSSRGBA(color);
        surfData.ctx.fillRect(r.x, r.y, r.w, r.h);
        surfData.ctx.restore();
        return 0;
      }

    function _SDL_SetAlpha(surf, flag, alpha) {
        SDL.surfaces[surf].alpha = alpha;
      }

    function _SDL_GetModState() {
        return SDL.modState;
      }


    function _fputs(s, stream) {
        // int fputs(const char *restrict s, FILE *restrict stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
        return _write(stream, s, _strlen(s));
      }

    function _fputc(c, stream) {
        // int fputc(int c, FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
        var chr = unSign(c & 0xFF);
        HEAP8[((_fputc.ret)|0)]=chr;
        var ret = _write(stream, _fputc.ret, 1);
        if (ret == -1) {
          var streamObj = FS.getStream(stream);
          if (streamObj) streamObj.error = true;
          return -1;
        } else {
          return chr;
        }
      }function _puts(s) {
        // int puts(const char *s);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
        // NOTE: puts() always writes an extra newline.
        var stdout = HEAP32[((_stdout)>>2)];
        var ret = _fputs(s, stdout);
        if (ret < 0) {
          return ret;
        } else {
          var newlineRet = _fputc(10, stdout);
          return (newlineRet < 0) ? -1 : ret + 1;
        }
      }

    function _SDL_JoystickEventState(state) {
        if (state < 0) {
          // SDL_QUERY: Return current state.
          return SDL.joystickEventState;
        }
        return SDL.joystickEventState = state;
      }


    function _fgetc(stream) {
        // int fgetc(FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
        var streamObj = FS.getStream(stream);
        if (!streamObj) return -1;
        if (streamObj.eof || streamObj.error) return -1;
        var ret = _fread(_fgetc.ret, 1, 1, stream);
        if (ret == 0) {
          return -1;
        } else if (ret == -1) {
          streamObj.error = true;
          return -1;
        } else {
          return HEAPU8[((_fgetc.ret)|0)];
        }
      }function _fgets(s, n, stream) {
        // char *fgets(char *restrict s, int n, FILE *restrict stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
        var streamObj = FS.getStream(stream);
        if (!streamObj) return 0;
        if (streamObj.error || streamObj.eof) return 0;
        var byte_;
        for (var i = 0; i < n - 1 && byte_ != 10; i++) {
          byte_ = _fgetc(stream);
          if (byte_ == -1) {
            if (streamObj.error || (streamObj.eof && i == 0)) return 0;
            else if (streamObj.eof) break;
          }
          HEAP8[(((s)+(i))|0)]=byte_;
        }
        HEAP8[(((s)+(i))|0)]=0;
        return s;
      }

    function _SDL_JoystickGetButton(joystick, button) {
        var gamepad = SDL.getGamepad(joystick - 1);
        if (gamepad && gamepad.buttons.length > button) {
          return SDL.getJoystickButtonState(gamepad.buttons[button]) ? 1 : 0;
        }
        return 0;
      }

    function _SDL_JoystickGetAxis(joystick, axis) {
        var gamepad = SDL.getGamepad(joystick - 1);
        if (gamepad && gamepad.axes.length > axis) {
          return SDL.joystickAxisValueConversion(gamepad.axes[axis]);
        }
        return 0;
      }

    function _SDL_JoystickGetHat(joystick, hat) { return 0; }

    function _SDL_JoystickName(deviceIndex) {
        var gamepad = SDL.getGamepad(deviceIndex);
        if (gamepad) {
          var name = gamepad.id;
          if (SDL.joystickNamePool.hasOwnProperty(name)) {
            return SDL.joystickNamePool[name];
          }
          return SDL.joystickNamePool[name] = allocate(intArrayFromString(name), 'i8', ALLOC_NORMAL);
        }
        return 0;
      }

    function _SDL_JoystickClose(joystick) {
        delete SDL.lastJoystickState[joystick];
      }

    function _SDL_JoystickOpen(deviceIndex) {
        var gamepad = SDL.getGamepad(deviceIndex);
        if (gamepad) {
          // Use this as a unique 'pointer' for this joystick.
          var joystick = deviceIndex+1;
          SDL.recordJoystickState(joystick, gamepad);
          return joystick;
        }
        return 0;
      }

    function _SDL_JoystickNumAxes(joystick) {
        var gamepad = SDL.getGamepad(joystick - 1);
        if (gamepad) {
          return gamepad.axes.length;
        }
        return 0;
      }

    function _SDL_JoystickNumButtons(joystick) {
        var gamepad = SDL.getGamepad(joystick - 1);
        if (gamepad) {
          return gamepad.buttons.length;
        }
        return 0;
      }

    function _SDL_JoystickNumHats(joystick) { return 0; }

    function _llvm_umul_with_overflow_i32(x, y) {
        x = x>>>0;
        y = y>>>0;
        return ((asm["setTempRet0"](x*y > 4294967295),(x*y)>>>0)|0);
      }

    function _llvm_uadd_with_overflow_i32(x, y) {
        x = x>>>0;
        y = y>>>0;
        return ((asm["setTempRet0"](x+y > 4294967295),(x+y)>>>0)|0);
      }

    function ___assert_fail(condition, filename, line, func) {
        ABORT = true;
        throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
      }

    function _SDL_GetKeyName(key) {
        if (!SDL.keyName) {
          SDL.keyName = allocate(intArrayFromString('unknown key'), 'i8', ALLOC_NORMAL);
        }
        return SDL.keyName;
      }






    function _getenv(name) {
        // char *getenv(const char *name);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
        if (name === 0) return 0;
        name = Pointer_stringify(name);
        if (!ENV.hasOwnProperty(name)) return 0;

        if (_getenv.ret) _free(_getenv.ret);
        _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
        return _getenv.ret;
      }

    function _getpwnam() { throw 'getpwnam: TODO' }

    function _opendir(dirname) {
        // DIR *opendir(const char *dirname);
        // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
        // NOTE: Calculating absolute path redundantly since we need to associate it
        //       with the opened stream.
        var path = Pointer_stringify(dirname);
        if (!path) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return 0;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } catch (e) {
          FS.handleFSError(e);
          return 0;
        }
        if (!FS.isDir(node.mode)) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          return 0;
        }
        var err = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
        // open returns 0 on failure, not -1
        return err === -1 ? 0 : err;
      }


    function _readdir_r(dirp, entry, result) {
        // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
        // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
        var stream = FS.getStream(dirp);
        if (!stream) {
          return ___setErrNo(ERRNO_CODES.EBADF);
        }
        var entries;
        try {
          entries = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
        if (stream.position < 0 || stream.position >= entries.length) {
          HEAP32[((result)>>2)]=0;
          return 0;
        }
        var id;
        var type;
        var name = entries[stream.position];
        var offset = stream.position + 1;
        if (!name.indexOf('.')) {
          id = 1;
          type = 4;
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((entry)>>2)]=id;
        HEAP32[(((entry)+(4))>>2)]=offset;
        HEAP32[(((entry)+(8))>>2)]=name.length + 1;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((entry + 11)+(i))|0)]=name.charCodeAt(i);
        }
        HEAP8[(((entry + 11)+(i))|0)]=0;
        HEAP8[(((entry)+(10))|0)]=type;
        HEAP32[((result)>>2)]=entry;
        stream.position++;
        return 0;
      }function _readdir(dirp) {
        // struct dirent *readdir(DIR *dirp);
        // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
        var stream = FS.getStream(dirp);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        // TODO Is it supposed to be safe to execute multiple readdirs?
        if (!_readdir.entry) _readdir.entry = _malloc(268);
        if (!_readdir.result) _readdir.result = _malloc(4);
        var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
        if (err) {
          ___setErrNo(err);
          return 0;
        }
        return HEAP32[((_readdir.result)>>2)];
      }

    function _closedir(dirp) {
        // int closedir(DIR *dirp);
        // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
        return _close(dirp);
      }

    function _vsnprintf(s, n, format, va_arg) {
        return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
      }



    function __getFloat(text) {
        return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
      }function __scanString(format, get, unget, varargs) {
        if (!__scanString.whiteSpace) {
          __scanString.whiteSpace = {};
          __scanString.whiteSpace[32] = 1;
          __scanString.whiteSpace[9] = 1;
          __scanString.whiteSpace[10] = 1;
          __scanString.whiteSpace[11] = 1;
          __scanString.whiteSpace[12] = 1;
          __scanString.whiteSpace[13] = 1;
        }
        // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
        // TODO: Support all format specifiers.
        format = Pointer_stringify(format);
        var soFar = 0;
        if (format.indexOf('%n') >= 0) {
          // need to track soFar
          var _get = get;
          get = function get() {
            soFar++;
            return _get();
          }
          var _unget = unget;
          unget = function unget() {
            soFar--;
            return _unget();
          }
        }
        var formatIndex = 0;
        var argsi = 0;
        var fields = 0;
        var argIndex = 0;
        var next;

        mainLoop:
        for (var formatIndex = 0; formatIndex < format.length;) {
          if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            HEAP32[((argPtr)>>2)]=soFar;
            formatIndex += 2;
            continue;
          }

          if (format[formatIndex] === '%') {
            var nextC = format.indexOf('c', formatIndex+1);
            if (nextC > 0) {
              var maxx = 1;
              if (nextC > formatIndex+1) {
                var sub = format.substring(formatIndex+1, nextC);
                maxx = parseInt(sub);
                if (maxx != sub) maxx = 0;
              }
              if (maxx) {
                var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
                argIndex += Runtime.getAlignSize('void*', null, true);
                fields++;
                for (var i = 0; i < maxx; i++) {
                  next = get();
                  HEAP8[((argPtr++)|0)]=next;
                }
                formatIndex += nextC - formatIndex + 1;
                continue;
              }
            }
          }

          // handle %[...]
          if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
            var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
            if (match) {
              var maxNumCharacters = parseInt(match[1]) || Infinity;
              var negateScanList = (match[2] === '^');
              var scanList = match[3];

              // expand "middle" dashs into character sets
              var middleDashMatch;
              while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
                var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
                var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
                for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
                scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
              }

              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;

              for (var i = 0; i < maxNumCharacters; i++) {
                next = get();
                if (negateScanList) {
                  if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                    HEAP8[((argPtr++)|0)]=next;
                  } else {
                    unget();
                    break;
                  }
                } else {
                  if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                    HEAP8[((argPtr++)|0)]=next;
                  } else {
                    unget();
                    break;
                  }
                }
              }

              // write out null-terminating character
              HEAP8[((argPtr++)|0)]=0;
              formatIndex += match[0].length;

              continue;
            }
          }
          // remove whitespace
          while (1) {
            next = get();
            if (next == 0) return fields;
            if (!(next in __scanString.whiteSpace)) break;
          }
          unget();

          if (format[formatIndex] === '%') {
            formatIndex++;
            var suppressAssignment = false;
            if (format[formatIndex] == '*') {
              suppressAssignment = true;
              formatIndex++;
            }
            var maxSpecifierStart = formatIndex;
            while (format[formatIndex].charCodeAt(0) >= 48 &&
                   format[formatIndex].charCodeAt(0) <= 57) {
              formatIndex++;
            }
            var max_;
            if (formatIndex != maxSpecifierStart) {
              max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
            }
            var long_ = false;
            var half = false;
            var longLong = false;
            if (format[formatIndex] == 'l') {
              long_ = true;
              formatIndex++;
              if (format[formatIndex] == 'l') {
                longLong = true;
                formatIndex++;
              }
            } else if (format[formatIndex] == 'h') {
              half = true;
              formatIndex++;
            }
            var type = format[formatIndex];
            formatIndex++;
            var curr = 0;
            var buffer = [];
            // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
            if (type == 'f' || type == 'e' || type == 'g' ||
                type == 'F' || type == 'E' || type == 'G') {
              next = get();
              while (next > 0 && (!(next in __scanString.whiteSpace)))  {
                buffer.push(String.fromCharCode(next));
                next = get();
              }
              var m = __getFloat(buffer.join(''));
              var last = m ? m[0].length : 0;
              for (var i = 0; i < buffer.length - last + 1; i++) {
                unget();
              }
              buffer.length = last;
            } else {
              next = get();
              var first = true;

              // Strip the optional 0x prefix for %x.
              if ((type == 'x' || type == 'X') && (next == 48)) {
                var peek = get();
                if (peek == 120 || peek == 88) {
                  next = get();
                } else {
                  unget();
                }
              }

              while ((curr < max_ || isNaN(max_)) && next > 0) {
                if (!(next in __scanString.whiteSpace) && // stop on whitespace
                    (type == 's' ||
                     ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                       (first && next == 45))) ||
                     ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                       next >= 97 && next <= 102 ||
                                       next >= 65 && next <= 70))) &&
                    (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                  buffer.push(String.fromCharCode(next));
                  next = get();
                  curr++;
                  first = false;
                } else {
                  break;
                }
              }
              unget();
            }
            if (buffer.length === 0) return 0;  // Failure.
            if (suppressAssignment) continue;

            var text = buffer.join('');
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            switch (type) {
              case 'd': case 'u': case 'i':
                if (half) {
                  HEAP16[((argPtr)>>1)]=parseInt(text, 10);
                } else if (longLong) {
                  (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
                } else {
                  HEAP32[((argPtr)>>2)]=parseInt(text, 10);
                }
                break;
              case 'X':
              case 'x':
                HEAP32[((argPtr)>>2)]=parseInt(text, 16);
                break;
              case 'F':
              case 'f':
              case 'E':
              case 'e':
              case 'G':
              case 'g':
              case 'E':
                // fallthrough intended
                if (long_) {
                  HEAPF64[((argPtr)>>3)]=parseFloat(text);
                } else {
                  HEAPF32[((argPtr)>>2)]=parseFloat(text);
                }
                break;
              case 's':
                var array = intArrayFromString(text);
                for (var j = 0; j < array.length; j++) {
                  HEAP8[(((argPtr)+(j))|0)]=array[j];
                }
                break;
            }
            fields++;
          } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
            next = get();
            while (next in __scanString.whiteSpace) {
              if (next <= 0) break mainLoop;  // End of input.
              next = get();
            }
            unget(next);
            formatIndex++;
          } else {
            // Not a specifier.
            next = get();
            if (format[formatIndex].charCodeAt(0) !== next) {
              unget(next);
              break mainLoop;
            }
            formatIndex++;
          }
        }
        return fields;
      }function _sscanf(s, format, varargs) {
        // int sscanf(const char *restrict s, const char *restrict format, ... );
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
        var index = 0;
        function get() { return HEAP8[(((s)+(index++))|0)]; };
        function unget() { index--; };
        return __scanString(format, get, unget, varargs);
      }



    function _isascii(chr) {
        return chr >= 0 && (chr & 0x80) == 0;
      }

    var _fseeko=_fseek;

    var _ftello=_ftell;



    function _strpbrk(ptr1, ptr2) {
        var curr;
        var searchSet = {};
        while (1) {
          var curr = HEAP8[((ptr2++)|0)];
          if (!curr) break;
          searchSet[curr] = 1;
        }
        while (1) {
          curr = HEAP8[(ptr1)];
          if (!curr) break;
          if (curr in searchSet) return ptr1;
          ptr1++;
        }
        return 0;
      }

    function _getcwd(buf, size) {
        // char *getcwd(char *buf, size_t size);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
        if (size == 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return 0;
        }
        var cwd = FS.cwd();
        if (size < cwd.length + 1) {
          ___setErrNo(ERRNO_CODES.ERANGE);
          return 0;
        } else {
          writeAsciiToMemory(cwd, buf);
          return buf;
        }
      }

    function _getpeername() {
    Module['printErr']('missing function: getpeername'); abort(-1);
    }

    function _getsockname() {
    Module['printErr']('missing function: getsockname'); abort(-1);
    }

    function ___errno_location() {
        return ___errno_state;
      }

    function _signal(sig, func) {
        // TODO
        return 0;
      }


    function __inet_pton4_raw(str) {
        var b = str.split('.');
        for (var i = 0; i < 4; i++) {
          var tmp = Number(b[i]);
          if (isNaN(tmp)) return null;
          b[i] = tmp;
        }
        return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
      }function _inet_addr(ptr) {
        var addr = __inet_pton4_raw(Pointer_stringify(ptr));
        if (addr === null) {
          return -1;
        }
        return addr;
      }




    function _htons(value) {
        return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
      }function __inet_pton6_raw(str) {
        var words;
        var w, offset, z, i;
        /* http://home.deds.nl/~aeron/regex/ */
        var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
        var parts = [];
        if (!valid6regx.test(str)) {
          return null;
        }
        if (str === "::") {
          return [0, 0, 0, 0, 0, 0, 0, 0];
        }
        // Z placeholder to keep track of zeros when splitting the string on ":"
        if (str.indexOf("::") === 0) {
          str = str.replace("::", "Z:"); // leading zeros case
        } else {
          str = str.replace("::", ":Z:");
        }

        if (str.indexOf(".") > 0) {
          // parse IPv4 embedded stress
          str = str.replace(new RegExp('[.]', 'g'), ":");
          words = str.split(":");
          words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
          words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
          words = words.slice(0, words.length-2);
        } else {
          words = str.split(":");
        }

        offset = 0; z = 0;
        for (w=0; w < words.length; w++) {
          if (typeof words[w] === 'string') {
            if (words[w] === 'Z') {
              // compressed zeros - write appropriate number of zero words
              for (z = 0; z < (8 - words.length+1); z++) {
                parts[w+z] = 0;
              }
              offset = z-1;
            } else {
              // parse hex to field to 16-bit value and write it in network byte-order
              parts[w+offset] = _htons(parseInt(words[w],16));
            }
          } else {
            // parsed IPv4 words
            parts[w+offset] = words[w];
          }
        }
        return [
          (parts[1] << 16) | parts[0],
          (parts[3] << 16) | parts[2],
          (parts[5] << 16) | parts[4],
          (parts[7] << 16) | parts[6]
        ];
      }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
          // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
          var res = __inet_pton4_raw(name);
          if (res) {
            return name;
          }
          res = __inet_pton6_raw(name);
          if (res) {
            return name;
          }

          // See if this name is already mapped.
          var addr;

          if (DNS.address_map.addrs[name]) {
            addr = DNS.address_map.addrs[name];
          } else {
            var id = DNS.address_map.id++;
            assert(id < 65535, 'exceeded max address mappings of 65535');

            addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);

            DNS.address_map.names[addr] = name;
            DNS.address_map.addrs[name] = addr;
          }

          return addr;
        },lookup_addr:function (addr) {
          if (DNS.address_map.names[addr]) {
            return DNS.address_map.names[addr];
          }

          return null;
        }};function _gethostbyname(name) {
        name = Pointer_stringify(name);

        // generate hostent
        var ret = _malloc(20); // XXX possibly leaked, as are others here
        var nameBuf = _malloc(name.length+1);
        writeStringToMemory(name, nameBuf);
        HEAP32[((ret)>>2)]=nameBuf;
        var aliasesBuf = _malloc(4);
        HEAP32[((aliasesBuf)>>2)]=0;
        HEAP32[(((ret)+(4))>>2)]=aliasesBuf;
        var afinet = 2;
        HEAP32[(((ret)+(8))>>2)]=afinet;
        HEAP32[(((ret)+(12))>>2)]=4;
        var addrListBuf = _malloc(12);
        HEAP32[((addrListBuf)>>2)]=addrListBuf+8;
        HEAP32[(((addrListBuf)+(4))>>2)]=0;
        HEAP32[(((addrListBuf)+(8))>>2)]=__inet_pton4_raw(DNS.lookup_name(name));
        HEAP32[(((ret)+(16))>>2)]=addrListBuf;
        return ret;
      }


    var SocketIO = /*! Socket.IO.js build:0.9.11, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */

    (function(global) {

    var io = ('undefined' === typeof module ? {} : module.exports);

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports) {

      /**
       * IO namespace.
       *
       * @namespace
       */

      var io = exports;

      /**
       * Socket.IO version
       *
       * @api public
       */

      io.version = '0.9.11';

      /**
       * Protocol implemented.
       *
       * @api public
       */

      io.protocol = 1;

      /**
       * Available transports, these will be populated with the available transports
       *
       * @api public
       */

      io.transports = [];

      /**
       * Keep track of jsonp callbacks.
       *
       * @api private
       */

      io.j = [];

      /**
       * Keep track of our io.Sockets
       *
       * @api private
       */
      io.sockets = {};


      /**
       * Manages connections to hosts.
       *
       * @param {String} uri
       * @Param {Boolean} force creation of new socket (defaults to false)
       * @api public
       */

      io.connect = function (host, details) {
        var uri = io.util.parseUri(host)
          , uuri
          , socket;

        if (global && global.location) {
          uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);
          uri.host = uri.host || (global.document
            ? global.document.domain : global.location.hostname);
          uri.port = uri.port || global.location.port;
        }

        uuri = io.util.uniqueUri(uri);

        var options = {
            host: uri.host
          , secure: 'https' == uri.protocol
          , port: uri.port || ('https' == uri.protocol ? 443 : 80)
          , query: uri.query || ''
        };

        io.util.merge(options, details);

        if (options['force new connection'] || !io.sockets[uuri]) {
          socket = new io.Socket(options);
        }

        if (!options['force new connection'] && socket) {
          io.sockets[uuri] = socket;
        }

        socket = socket || io.sockets[uuri];

        // if path is different from '' or /
        return socket.of(uri.path.length > 1 ? uri.path : '');
      };

    })('object' === typeof module ? module.exports : (io = {}));
    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports) {

      /**
       * Utilities namespace.
       *
       * @namespace
       */

      var util = exports.util = {};

      /**
       * Parses an URI
       *
       * @author Steven Levithan <stevenlevithan.com> (MIT license)
       * @api public
       */

      var re = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

      var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',
                   'host', 'port', 'relative', 'path', 'directory', 'file', 'query',
                   'anchor'];

      util.parseUri = function (str) {
        var m = re.exec(str || '')
          , uri = {}
          , i = 14;

        while (i--) {
          uri[parts[i]] = m[i] || '';
        }

        return uri;
      };

      /**
       * Produces a unique url that identifies a Socket.IO connection.
       *
       * @param {Object} uri
       * @api public
       */

      util.uniqueUri = function (uri) {
        var protocol = uri.protocol
          , host = uri.host
          , port = uri.port;

        if ('document' in global) {
          host = host || document.domain;
          port = port || (protocol == 'https'
            && document.location.protocol !== 'https:' ? 443 : document.location.port);
        } else {
          host = host || 'localhost';

          if (!port && protocol == 'https') {
            port = 443;
          }
        }

        return (protocol || 'http') + '://' + host + ':' + (port || 80);
      };

      /**
       * Mergest 2 query strings in to once unique query string
       *
       * @param {String} base
       * @param {String} addition
       * @api public
       */

      util.query = function (base, addition) {
        var query = util.chunkQuery(base || '')
          , components = [];

        util.merge(query, util.chunkQuery(addition || ''));
        for (var part in query) {
          if (query.hasOwnProperty(part)) {
            components.push(part + '=' + query[part]);
          }
        }

        return components.length ? '?' + components.join('&') : '';
      };

      /**
       * Transforms a querystring in to an object
       *
       * @param {String} qs
       * @api public
       */

      util.chunkQuery = function (qs) {
        var query = {}
          , params = qs.split('&')
          , i = 0
          , l = params.length
          , kv;

        for (; i < l; ++i) {
          kv = params[i].split('=');
          if (kv[0]) {
            query[kv[0]] = kv[1];
          }
        }

        return query;
      };

      /**
       * Executes the given function when the page is loaded.
       *
       *     io.util.load(function () { console.log('page loaded'); });
       *
       * @param {Function} fn
       * @api public
       */

      var pageLoaded = false;

      util.load = function (fn) {
        if ('document' in global && document.readyState === 'complete' || pageLoaded) {
          return fn();
        }

        util.on(global, 'load', fn, false);
      };

      /**
       * Adds an event.
       *
       * @api private
       */

      util.on = function (element, event, fn, capture) {
        if (element.attachEvent) {
          element.attachEvent('on' + event, fn);
        } else if (element.addEventListener) {
          element.addEventListener(event, fn, capture);
        }
      };

      /**
       * Generates the correct `XMLHttpRequest` for regular and cross domain requests.
       *
       * @param {Boolean} [xdomain] Create a request that can be used cross domain.
       * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.
       * @api private
       */

      util.request = function (xdomain) {

        if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {
          return new XDomainRequest();
        }

        if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {
          return new XMLHttpRequest();
        }

        if (!xdomain) {
          try {
            return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');
          } catch(e) { }
        }

        return null;
      };

      /**
       * XHR based transport constructor.
       *
       * @constructor
       * @api public
       */

      /**
       * Change the internal pageLoaded value.
       */

      if ('undefined' != typeof window) {
        util.load(function () {
          pageLoaded = true;
        });
      }

      /**
       * Defers a function to ensure a spinner is not displayed by the browser
       *
       * @param {Function} fn
       * @api public
       */

      util.defer = function (fn) {
        if (!util.ua.webkit || 'undefined' != typeof importScripts) {
          return fn();
        }

        util.load(function () {
          setTimeout(fn, 100);
        });
      };

      /**
       * Merges two objects.
       *
       * @api public
       */

      util.merge = function merge (target, additional, deep, lastseen) {
        var seen = lastseen || []
          , depth = typeof deep == 'undefined' ? 2 : deep
          , prop;

        for (prop in additional) {
          if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {
            if (typeof target[prop] !== 'object' || !depth) {
              target[prop] = additional[prop];
              seen.push(additional[prop]);
            } else {
              util.merge(target[prop], additional[prop], depth - 1, seen);
            }
          }
        }

        return target;
      };

      /**
       * Merges prototypes from objects
       *
       * @api public
       */

      util.mixin = function (ctor, ctor2) {
        util.merge(ctor.prototype, ctor2.prototype);
      };

      /**
       * Shortcut for prototypical and static inheritance.
       *
       * @api private
       */

      util.inherit = function (ctor, ctor2) {
        function f() {};
        f.prototype = ctor2.prototype;
        ctor.prototype = new f;
      };

      /**
       * Checks if the given object is an Array.
       *
       *     io.util.isArray([]); // true
       *     io.util.isArray({}); // false
       *
       * @param Object obj
       * @api public
       */

      util.isArray = Array.isArray || function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };

      /**
       * Intersects values of two arrays into a third
       *
       * @api public
       */

      util.intersect = function (arr, arr2) {
        var ret = []
          , longest = arr.length > arr2.length ? arr : arr2
          , shortest = arr.length > arr2.length ? arr2 : arr;

        for (var i = 0, l = shortest.length; i < l; i++) {
          if (~util.indexOf(longest, shortest[i]))
            ret.push(shortest[i]);
        }

        return ret;
      };

      /**
       * Array indexOf compatibility.
       *
       * @see bit.ly/a5Dxa2
       * @api public
       */

      util.indexOf = function (arr, o, i) {

        for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;
             i < j && arr[i] !== o; i++) {}

        return j <= i ? -1 : i;
      };

      /**
       * Converts enumerables to array.
       *
       * @api public
       */

      util.toArray = function (enu) {
        var arr = [];

        for (var i = 0, l = enu.length; i < l; i++)
          arr.push(enu[i]);

        return arr;
      };

      /**
       * UA / engines detection namespace.
       *
       * @namespace
       */

      util.ua = {};

      /**
       * Whether the UA supports CORS for XHR.
       *
       * @api public
       */

      util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {
        try {
          var a = new XMLHttpRequest();
        } catch (e) {
          return false;
        }

        return a.withCredentials != undefined;
      })();

      /**
       * Detect webkit.
       *
       * @api public
       */

      util.ua.webkit = 'undefined' != typeof navigator
        && /webkit/i.test(navigator.userAgent);

       /**
       * Detect iPad/iPhone/iPod.
       *
       * @api public
       */

      util.ua.iDevice = 'undefined' != typeof navigator
          && /iPad|iPhone|iPod/i.test(navigator.userAgent);

    })('undefined' != typeof io ? io : module.exports);
    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.EventEmitter = EventEmitter;

      /**
       * Event emitter constructor.
       *
       * @api public.
       */

      function EventEmitter () {};

      /**
       * Adds a listener
       *
       * @api public
       */

      EventEmitter.prototype.on = function (name, fn) {
        if (!this.$events) {
          this.$events = {};
        }

        if (!this.$events[name]) {
          this.$events[name] = fn;
        } else if (io.util.isArray(this.$events[name])) {
          this.$events[name].push(fn);
        } else {
          this.$events[name] = [this.$events[name], fn];
        }

        return this;
      };

      EventEmitter.prototype.addListener = EventEmitter.prototype.on;

      /**
       * Adds a volatile listener.
       *
       * @api public
       */

      EventEmitter.prototype.once = function (name, fn) {
        var self = this;

        function on () {
          self.removeListener(name, on);
          fn.apply(this, arguments);
        };

        on.listener = fn;
        this.on(name, on);

        return this;
      };

      /**
       * Removes a listener.
       *
       * @api public
       */

      EventEmitter.prototype.removeListener = function (name, fn) {
        if (this.$events && this.$events[name]) {
          var list = this.$events[name];

          if (io.util.isArray(list)) {
            var pos = -1;

            for (var i = 0, l = list.length; i < l; i++) {
              if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
                pos = i;
                break;
              }
            }

            if (pos < 0) {
              return this;
            }

            list.splice(pos, 1);

            if (!list.length) {
              delete this.$events[name];
            }
          } else if (list === fn || (list.listener && list.listener === fn)) {
            delete this.$events[name];
          }
        }

        return this;
      };

      /**
       * Removes all listeners for an event.
       *
       * @api public
       */

      EventEmitter.prototype.removeAllListeners = function (name) {
        if (name === undefined) {
          this.$events = {};
          return this;
        }

        if (this.$events && this.$events[name]) {
          this.$events[name] = null;
        }

        return this;
      };

      /**
       * Gets all listeners for a certain event.
       *
       * @api publci
       */

      EventEmitter.prototype.listeners = function (name) {
        if (!this.$events) {
          this.$events = {};
        }

        if (!this.$events[name]) {
          this.$events[name] = [];
        }

        if (!io.util.isArray(this.$events[name])) {
          this.$events[name] = [this.$events[name]];
        }

        return this.$events[name];
      };

      /**
       * Emits an event.
       *
       * @api public
       */

      EventEmitter.prototype.emit = function (name) {
        if (!this.$events) {
          return false;
        }

        var handler = this.$events[name];

        if (!handler) {
          return false;
        }

        var args = Array.prototype.slice.call(arguments, 1);

        if ('function' == typeof handler) {
          handler.apply(this, args);
        } else if (io.util.isArray(handler)) {
          var listeners = handler.slice();

          for (var i = 0, l = listeners.length; i < l; i++) {
            listeners[i].apply(this, args);
          }
        } else {
          return false;
        }

        return true;
      };

    })(
        'undefined' != typeof io ? io : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    /**
     * Based on JSON2 (http://www.JSON.org/js.html).
     */

    (function (exports, nativeJSON) {
      "use strict";

      // use native JSON if it's available
      if (nativeJSON && nativeJSON.parse){
        return exports.JSON = {
          parse: nativeJSON.parse
        , stringify: nativeJSON.stringify
        };
      }

      var JSON = exports.JSON = {};

      function f(n) {
          // Format integers to have at least two digits.
          return n < 10 ? '0' + n : n;
      }

      function date(d, key) {
        return isFinite(d.valueOf()) ?
            d.getUTCFullYear()     + '-' +
            f(d.getUTCMonth() + 1) + '-' +
            f(d.getUTCDate())      + 'T' +
            f(d.getUTCHours())     + ':' +
            f(d.getUTCMinutes())   + ':' +
            f(d.getUTCSeconds())   + 'Z' : null;
      };

      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          gap,
          indent,
          meta = {    // table of character substitutions
              '\b': '\\b',
              '\t': '\\t',
              '\n': '\\n',
              '\f': '\\f',
              '\r': '\\r',
              '"' : '\\"',
              '\\': '\\\\'
          },
          rep;


      function quote(string) {

    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.

          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
              var c = meta[a];
              return typeof c === 'string' ? c :
                  '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
      }


      function str(key, holder) {

    // Produce a string from holder[key].

          var i,          // The loop counter.
              k,          // The member key.
              v,          // The member value.
              length,
              mind = gap,
              partial,
              value = holder[key];

    // If the value has a toJSON method, call it to obtain a replacement value.

          if (value instanceof Date) {
              value = date(key);
          }

    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.

          if (typeof rep === 'function') {
              value = rep.call(holder, key, value);
          }

    // What happens next depends on the value's type.

          switch (typeof value) {
          case 'string':
              return quote(value);

          case 'number':

    // JSON numbers must be finite. Encode non-finite numbers as null.

              return isFinite(value) ? String(value) : 'null';

          case 'boolean':
          case 'null':

    // If the value is a boolean or null, convert it to a string. Note:
    // typeof null does not produce 'null'. The case is included here in
    // the remote chance that this gets fixed someday.

              return String(value);

    // If the type is 'object', we might be dealing with an object or an array or
    // null.

          case 'object':

    // Due to a specification blunder in ECMAScript, typeof null is 'object',
    // so watch out for that case.

              if (!value) {
                  return 'null';
              }

    // Make an array to hold the partial results of stringifying this object value.

              gap += indent;
              partial = [];

    // Is the value an array?

              if (Object.prototype.toString.apply(value) === '[object Array]') {

    // The value is an array. Stringify every element. Use null as a placeholder
    // for non-JSON values.

                  length = value.length;
                  for (i = 0; i < length; i += 1) {
                      partial[i] = str(i, value) || 'null';
                  }

    // Join all of the elements together, separated with commas, and wrap them in
    // brackets.

                  v = partial.length === 0 ? '[]' : gap ?
                      '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                      '[' + partial.join(',') + ']';
                  gap = mind;
                  return v;
              }

    // If the replacer is an array, use it to select the members to be stringified.

              if (rep && typeof rep === 'object') {
                  length = rep.length;
                  for (i = 0; i < length; i += 1) {
                      if (typeof rep[i] === 'string') {
                          k = rep[i];
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              } else {

    // Otherwise, iterate through all of the keys in the object.

                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }

    // Join all of the member texts together, separated with commas,
    // and wrap them in braces.

              v = partial.length === 0 ? '{}' : gap ?
                  '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
                  '{' + partial.join(',') + '}';
              gap = mind;
              return v;
          }
      }

    // If the JSON object does not yet have a stringify method, give it one.

      JSON.stringify = function (value, replacer, space) {

    // The stringify method takes a value and an optional replacer, and an optional
    // space parameter, and returns a JSON text. The replacer can be a function
    // that can replace values, or an array of strings that will select the keys.
    // A default replacer method can be provided. Use of the space parameter can
    // produce text that is more easily readable.

          var i;
          gap = '';
          indent = '';

    // If the space parameter is a number, make an indent string containing that
    // many spaces.

          if (typeof space === 'number') {
              for (i = 0; i < space; i += 1) {
                  indent += ' ';
              }

    // If the space parameter is a string, it will be used as the indent string.

          } else if (typeof space === 'string') {
              indent = space;
          }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.

          rep = replacer;
          if (replacer && typeof replacer !== 'function' &&
                  (typeof replacer !== 'object' ||
                  typeof replacer.length !== 'number')) {
              throw new Error('JSON.stringify');
          }

    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.

          return str('', {'': value});
      };

    // If the JSON object does not yet have a parse method, give it one.

      JSON.parse = function (text, reviver) {
      // The parse method takes a text and an optional reviver function, and returns
      // a JavaScript value if the text is a valid JSON text.

          var j;

          function walk(holder, key) {

      // The walk method is used to recursively walk the resulting structure so
      // that modifications can be made.

              var k, v, value = holder[key];
              if (value && typeof value === 'object') {
                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = walk(value, k);
                          if (v !== undefined) {
                              value[k] = v;
                          } else {
                              delete value[k];
                          }
                      }
                  }
              }
              return reviver.call(holder, key, value);
          }


      // Parsing happens in four stages. In the first stage, we replace certain
      // Unicode characters with escape sequences. JavaScript handles many characters
      // incorrectly, either silently deleting them, or treating them as line endings.

          text = String(text);
          cx.lastIndex = 0;
          if (cx.test(text)) {
              text = text.replace(cx, function (a) {
                  return '\\u' +
                      ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
              });
          }

      // In the second stage, we run the text against regular expressions that look
      // for non-JSON patterns. We are especially concerned with '()' and 'new'
      // because they can cause invocation, and '=' because it can cause mutation.
      // But just to be safe, we want to reject all unexpected forms.

      // We split the second stage into 4 regexp operations in order to work around
      // crippling inefficiencies in IE's and Safari's regexp engines. First we
      // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
      // replace all simple value tokens with ']' characters. Third, we delete all
      // open brackets that follow a colon or comma or that begin the text. Finally,
      // we look to see that the remaining characters are only whitespace or ']' or
      // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

          if (/^[\],:{}\s]*$/
                  .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                      .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                      .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

      // In the third stage we use the eval function to compile the text into a
      // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
      // in JavaScript: it can begin a block or an object literal. We wrap the text
      // in parens to eliminate the ambiguity.

              j = eval('(' + text + ')');

      // In the optional fourth stage, we recursively walk the new structure, passing
      // each name/value pair to a reviver function for possible transformation.

              return typeof reviver === 'function' ?
                  walk({'': j}, '') : j;
          }

      // If the text is not JSON parseable, then a SyntaxError is thrown.

          throw new SyntaxError('JSON.parse');
      };

    })(
        'undefined' != typeof io ? io : module.exports
      , typeof JSON !== 'undefined' ? JSON : undefined
    );

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Parser namespace.
       *
       * @namespace
       */

      var parser = exports.parser = {};

      /**
       * Packet types.
       */

      var packets = parser.packets = [
          'disconnect'
        , 'connect'
        , 'heartbeat'
        , 'message'
        , 'json'
        , 'event'
        , 'ack'
        , 'error'
        , 'noop'
      ];

      /**
       * Errors reasons.
       */

      var reasons = parser.reasons = [
          'transport not supported'
        , 'client not handshaken'
        , 'unauthorized'
      ];

      /**
       * Errors advice.
       */

      var advice = parser.advice = [
          'reconnect'
      ];

      /**
       * Shortcuts.
       */

      var JSON = io.JSON
        , indexOf = io.util.indexOf;

      /**
       * Encodes a packet.
       *
       * @api private
       */

      parser.encodePacket = function (packet) {
        var type = indexOf(packets, packet.type)
          , id = packet.id || ''
          , endpoint = packet.endpoint || ''
          , ack = packet.ack
          , data = null;

        switch (packet.type) {
          case 'error':
            var reason = packet.reason ? indexOf(reasons, packet.reason) : ''
              , adv = packet.advice ? indexOf(advice, packet.advice) : '';

            if (reason !== '' || adv !== '')
              data = reason + (adv !== '' ? ('+' + adv) : '');

            break;

          case 'message':
            if (packet.data !== '')
              data = packet.data;
            break;

          case 'event':
            var ev = { name: packet.name };

            if (packet.args && packet.args.length) {
              ev.args = packet.args;
            }

            data = JSON.stringify(ev);
            break;

          case 'json':
            data = JSON.stringify(packet.data);
            break;

          case 'connect':
            if (packet.qs)
              data = packet.qs;
            break;

          case 'ack':
            data = packet.ackId
              + (packet.args && packet.args.length
                  ? '+' + JSON.stringify(packet.args) : '');
            break;
        }

        // construct packet with required fragments
        var encoded = [
            type
          , id + (ack == 'data' ? '+' : '')
          , endpoint
        ];

        // data fragment is optional
        if (data !== null && data !== undefined)
          encoded.push(data);

        return encoded.join(':');
      };

      /**
       * Encodes multiple messages (payload).
       *
       * @param {Array} messages
       * @api private
       */

      parser.encodePayload = function (packets) {
        var decoded = '';

        if (packets.length == 1)
          return packets[0];

        for (var i = 0, l = packets.length; i < l; i++) {
          var packet = packets[i];
          decoded += '\ufffd' + packet.length + '\ufffd' + packets[i];
        }

        return decoded;
      };

      /**
       * Decodes a packet
       *
       * @api private
       */

      var regexp = /([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/;

      parser.decodePacket = function (data) {
        var pieces = data.match(regexp);

        if (!pieces) return {};

        var id = pieces[2] || ''
          , data = pieces[5] || ''
          , packet = {
                type: packets[pieces[1]]
              , endpoint: pieces[4] || ''
            };

        // whether we need to acknowledge the packet
        if (id) {
          packet.id = id;
          if (pieces[3])
            packet.ack = 'data';
          else
            packet.ack = true;
        }

        // handle different packet types
        switch (packet.type) {
          case 'error':
            var pieces = data.split('+');
            packet.reason = reasons[pieces[0]] || '';
            packet.advice = advice[pieces[1]] || '';
            break;

          case 'message':
            packet.data = data || '';
            break;

          case 'event':
            try {
              var opts = JSON.parse(data);
              packet.name = opts.name;
              packet.args = opts.args;
            } catch (e) { }

            packet.args = packet.args || [];
            break;

          case 'json':
            try {
              packet.data = JSON.parse(data);
            } catch (e) { }
            break;

          case 'connect':
            packet.qs = data || '';
            break;

          case 'ack':
            var pieces = data.match(/^([0-9]+)(\+)?(.*)/);
            if (pieces) {
              packet.ackId = pieces[1];
              packet.args = [];

              if (pieces[3]) {
                try {
                  packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];
                } catch (e) { }
              }
            }
            break;

          case 'disconnect':
          case 'heartbeat':
            break;
        };

        return packet;
      };

      /**
       * Decodes data payload. Detects multiple messages
       *
       * @return {Array} messages
       * @api public
       */

      parser.decodePayload = function (data) {
        // IE doesn't like data[i] for unicode chars, charAt works fine
        if (data.charAt(0) == '\ufffd') {
          var ret = [];

          for (var i = 1, length = ''; i < data.length; i++) {
            if (data.charAt(i) == '\ufffd') {
              ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));
              i += Number(length) + 1;
              length = '';
            } else {
              length += data.charAt(i);
            }
          }

          return ret;
        } else {
          return [parser.decodePacket(data)];
        }
      };

    })(
        'undefined' != typeof io ? io : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );
    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.Transport = Transport;

      /**
       * This is the transport template for all supported transport methods.
       *
       * @constructor
       * @api public
       */

      function Transport (socket, sessid) {
        this.socket = socket;
        this.sessid = sessid;
      };

      /**
       * Apply EventEmitter mixin.
       */

      io.util.mixin(Transport, io.EventEmitter);


      /**
       * Indicates whether heartbeats is enabled for this transport
       *
       * @api private
       */

      Transport.prototype.heartbeats = function () {
        return true;
      };

      /**
       * Handles the response from the server. When a new response is received
       * it will automatically update the timeout, decode the message and
       * forwards the response to the onMessage function for further processing.
       *
       * @param {String} data Response from the server.
       * @api private
       */

      Transport.prototype.onData = function (data) {
        this.clearCloseTimeout();

        // If the connection in currently open (or in a reopening state) reset the close
        // timeout since we have just received data. This check is necessary so
        // that we don't reset the timeout on an explicitly disconnected connection.
        if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {
          this.setCloseTimeout();
        }

        if (data !== '') {
          // todo: we should only do decodePayload for xhr transports
          var msgs = io.parser.decodePayload(data);

          if (msgs && msgs.length) {
            for (var i = 0, l = msgs.length; i < l; i++) {
              this.onPacket(msgs[i]);
            }
          }
        }

        return this;
      };

      /**
       * Handles packets.
       *
       * @api private
       */

      Transport.prototype.onPacket = function (packet) {
        this.socket.setHeartbeatTimeout();

        if (packet.type == 'heartbeat') {
          return this.onHeartbeat();
        }

        if (packet.type == 'connect' && packet.endpoint == '') {
          this.onConnect();
        }

        if (packet.type == 'error' && packet.advice == 'reconnect') {
          this.isOpen = false;
        }

        this.socket.onPacket(packet);

        return this;
      };

      /**
       * Sets close timeout
       *
       * @api private
       */

      Transport.prototype.setCloseTimeout = function () {
        if (!this.closeTimeout) {
          var self = this;

          this.closeTimeout = setTimeout(function () {
            self.onDisconnect();
          }, this.socket.closeTimeout);
        }
      };

      /**
       * Called when transport disconnects.
       *
       * @api private
       */

      Transport.prototype.onDisconnect = function () {
        if (this.isOpen) this.close();
        this.clearTimeouts();
        this.socket.onDisconnect();
        return this;
      };

      /**
       * Called when transport connects
       *
       * @api private
       */

      Transport.prototype.onConnect = function () {
        this.socket.onConnect();
        return this;
      };

      /**
       * Clears close timeout
       *
       * @api private
       */

      Transport.prototype.clearCloseTimeout = function () {
        if (this.closeTimeout) {
          clearTimeout(this.closeTimeout);
          this.closeTimeout = null;
        }
      };

      /**
       * Clear timeouts
       *
       * @api private
       */

      Transport.prototype.clearTimeouts = function () {
        this.clearCloseTimeout();

        if (this.reopenTimeout) {
          clearTimeout(this.reopenTimeout);
        }
      };

      /**
       * Sends a packet
       *
       * @param {Object} packet object.
       * @api private
       */

      Transport.prototype.packet = function (packet) {
        this.send(io.parser.encodePacket(packet));
      };

      /**
       * Send the received heartbeat message back to server. So the server
       * knows we are still connected.
       *
       * @param {String} heartbeat Heartbeat response from the server.
       * @api private
       */

      Transport.prototype.onHeartbeat = function (heartbeat) {
        this.packet({ type: 'heartbeat' });
      };

      /**
       * Called when the transport opens.
       *
       * @api private
       */

      Transport.prototype.onOpen = function () {
        this.isOpen = true;
        this.clearCloseTimeout();
        this.socket.onOpen();
      };

      /**
       * Notifies the base when the connection with the Socket.IO server
       * has been disconnected.
       *
       * @api private
       */

      Transport.prototype.onClose = function () {
        var self = this;

        /* FIXME: reopen delay causing a infinit loop
        this.reopenTimeout = setTimeout(function () {
          self.open();
        }, this.socket.options['reopen delay']);*/

        this.isOpen = false;
        this.socket.onClose();
        this.onDisconnect();
      };

      /**
       * Generates a connection url based on the Socket.IO URL Protocol.
       * See <https://github.com/learnboost/socket.io-node/> for more details.
       *
       * @returns {String} Connection url
       * @api private
       */

      Transport.prototype.prepareUrl = function () {
        var options = this.socket.options;

        return this.scheme() + '://'
          + options.host + ':' + options.port + '/'
          + options.resource + '/' + io.protocol
          + '/' + this.name + '/' + this.sessid;
      };

      /**
       * Checks if the transport is ready to start a connection.
       *
       * @param {Socket} socket The socket instance that needs a transport
       * @param {Function} fn The callback
       * @api private
       */

      Transport.prototype.ready = function (socket, fn) {
        fn.call(this);
      };
    })(
        'undefined' != typeof io ? io : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );
    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.Socket = Socket;

      /**
       * Create a new `Socket.IO client` which can establish a persistent
       * connection with a Socket.IO enabled server.
       *
       * @api public
       */

      function Socket (options) {
        this.options = {
            port: 80
          , secure: false
          , document: 'document' in global ? document : false
          , resource: 'socket.io'
          , transports: io.transports
          , 'connect timeout': 10000
          , 'try multiple transports': true
          , 'reconnect': true
          , 'reconnection delay': 500
          , 'reconnection limit': Infinity
          , 'reopen delay': 3000
          , 'max reconnection attempts': 10
          , 'sync disconnect on unload': false
          , 'auto connect': true
          , 'flash policy port': 10843
          , 'manualFlush': false
        };

        io.util.merge(this.options, options);

        this.connected = false;
        this.open = false;
        this.connecting = false;
        this.reconnecting = false;
        this.namespaces = {};
        this.buffer = [];
        this.doBuffer = false;

        if (this.options['sync disconnect on unload'] &&
            (!this.isXDomain() || io.util.ua.hasCORS)) {
          var self = this;
          io.util.on(global, 'beforeunload', function () {
            self.disconnectSync();
          }, false);
        }

        if (this.options['auto connect']) {
          this.connect();
        }
    };

      /**
       * Apply EventEmitter mixin.
       */

      io.util.mixin(Socket, io.EventEmitter);

      /**
       * Returns a namespace listener/emitter for this socket
       *
       * @api public
       */

      Socket.prototype.of = function (name) {
        if (!this.namespaces[name]) {
          this.namespaces[name] = new io.SocketNamespace(this, name);

          if (name !== '') {
            this.namespaces[name].packet({ type: 'connect' });
          }
        }

        return this.namespaces[name];
      };

      /**
       * Emits the given event to the Socket and all namespaces
       *
       * @api private
       */

      Socket.prototype.publish = function () {
        this.emit.apply(this, arguments);

        var nsp;

        for (var i in this.namespaces) {
          if (this.namespaces.hasOwnProperty(i)) {
            nsp = this.of(i);
            nsp.$emit.apply(nsp, arguments);
          }
        }
      };

      /**
       * Performs the handshake
       *
       * @api private
       */

      function empty () { };

      Socket.prototype.handshake = function (fn) {
        var self = this
          , options = this.options;

        function complete (data) {
          if (data instanceof Error) {
            self.connecting = false;
            self.onError(data.message);
          } else {
            fn.apply(null, data.split(':'));
          }
        };

        var url = [
              'http' + (options.secure ? 's' : '') + ':/'
            , options.host + ':' + options.port
            , options.resource
            , io.protocol
            , io.util.query(this.options.query, 't=' + +new Date)
          ].join('/');

        if (this.isXDomain() && !io.util.ua.hasCORS) {
          var insertAt = document.getElementsByTagName('script')[0]
            , script = document.createElement('script');

          script.src = url + '&jsonp=' + io.j.length;
          insertAt.parentNode.insertBefore(script, insertAt);

          io.j.push(function (data) {
            complete(data);
            script.parentNode.removeChild(script);
          });
        } else {
          var xhr = io.util.request();

          xhr.open('GET', url, true);
          if (this.isXDomain()) {
            xhr.withCredentials = true;
          }
          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              xhr.onreadystatechange = empty;

              if (xhr.status == 200) {
                complete(xhr.responseText);
              } else if (xhr.status == 403) {
                self.onError(xhr.responseText);
              } else {
                self.connecting = false;
                !self.reconnecting && self.onError(xhr.responseText);
              }
            }
          };
          xhr.send(null);
        }
      };

      /**
       * Find an available transport based on the options supplied in the constructor.
       *
       * @api private
       */

      Socket.prototype.getTransport = function (override) {
        var transports = override || this.transports, match;

        for (var i = 0, transport; transport = transports[i]; i++) {
          if (io.Transport[transport]
            && io.Transport[transport].check(this)
            && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {
            return new io.Transport[transport](this, this.sessionid);
          }
        }

        return null;
      };

      /**
       * Connects to the server.
       *
       * @param {Function} [fn] Callback.
       * @returns {io.Socket}
       * @api public
       */

      Socket.prototype.connect = function (fn) {
        if (this.connecting) {
          return this;
        }

        var self = this;
        self.connecting = true;

        this.handshake(function (sid, heartbeat, close, transports) {
          self.sessionid = sid;
          self.closeTimeout = close * 1000;
          self.heartbeatTimeout = heartbeat * 1000;
          if(!self.transports)
              self.transports = self.origTransports = (transports ? io.util.intersect(
                  transports.split(',')
                , self.options.transports
              ) : self.options.transports);

          self.setHeartbeatTimeout();

          function connect (transports){
            if (self.transport) self.transport.clearTimeouts();

            self.transport = self.getTransport(transports);
            if (!self.transport) return self.publish('connect_failed');

            // once the transport is ready
            self.transport.ready(self, function () {
              self.connecting = true;
              self.publish('connecting', self.transport.name);
              self.transport.open();

              if (self.options['connect timeout']) {
                self.connectTimeoutTimer = setTimeout(function () {
                  if (!self.connected) {
                    self.connecting = false;

                    if (self.options['try multiple transports']) {
                      var remaining = self.transports;

                      while (remaining.length > 0 && remaining.splice(0,1)[0] !=
                             self.transport.name) {}

                        if (remaining.length){
                          connect(remaining);
                        } else {
                          self.publish('connect_failed');
                        }
                    }
                  }
                }, self.options['connect timeout']);
              }
            });
          }

          connect(self.transports);

          self.once('connect', function (){
            clearTimeout(self.connectTimeoutTimer);

            fn && typeof fn == 'function' && fn();
          });
        });

        return this;
      };

      /**
       * Clears and sets a new heartbeat timeout using the value given by the
       * server during the handshake.
       *
       * @api private
       */

      Socket.prototype.setHeartbeatTimeout = function () {
        clearTimeout(this.heartbeatTimeoutTimer);
        if(this.transport && !this.transport.heartbeats()) return;

        var self = this;
        this.heartbeatTimeoutTimer = setTimeout(function () {
          self.transport.onClose();
        }, this.heartbeatTimeout);
      };

      /**
       * Sends a message.
       *
       * @param {Object} data packet.
       * @returns {io.Socket}
       * @api public
       */

      Socket.prototype.packet = function (data) {
        if (this.connected && !this.doBuffer) {
          this.transport.packet(data);
        } else {
          this.buffer.push(data);
        }

        return this;
      };

      /**
       * Sets buffer state
       *
       * @api private
       */

      Socket.prototype.setBuffer = function (v) {
        this.doBuffer = v;

        if (!v && this.connected && this.buffer.length) {
          if (!this.options['manualFlush']) {
            this.flushBuffer();
          }
        }
      };

      /**
       * Flushes the buffer data over the wire.
       * To be invoked manually when 'manualFlush' is set to true.
       *
       * @api public
       */

      Socket.prototype.flushBuffer = function() {
        this.transport.payload(this.buffer);
        this.buffer = [];
      };


      /**
       * Disconnect the established connect.
       *
       * @returns {io.Socket}
       * @api public
       */

      Socket.prototype.disconnect = function () {
        if (this.connected || this.connecting) {
          if (this.open) {
            this.of('').packet({ type: 'disconnect' });
          }

          // handle disconnection immediately
          this.onDisconnect('booted');
        }

        return this;
      };

      /**
       * Disconnects the socket with a sync XHR.
       *
       * @api private
       */

      Socket.prototype.disconnectSync = function () {
        // ensure disconnection
        var xhr = io.util.request();
        var uri = [
            'http' + (this.options.secure ? 's' : '') + ':/'
          , this.options.host + ':' + this.options.port
          , this.options.resource
          , io.protocol
          , ''
          , this.sessionid
        ].join('/') + '/?disconnect=1';

        xhr.open('GET', uri, false);
        xhr.send(null);

        // handle disconnection immediately
        this.onDisconnect('booted');
      };

      /**
       * Check if we need to use cross domain enabled transports. Cross domain would
       * be a different port or different domain name.
       *
       * @returns {Boolean}
       * @api private
       */

      Socket.prototype.isXDomain = function () {

        var port = global.location.port ||
          ('https:' == global.location.protocol ? 443 : 80);

        return this.options.host !== global.location.hostname
          || this.options.port != port;
      };

      /**
       * Called upon handshake.
       *
       * @api private
       */

      Socket.prototype.onConnect = function () {
        if (!this.connected) {
          this.connected = true;
          this.connecting = false;
          if (!this.doBuffer) {
            // make sure to flush the buffer
            this.setBuffer(false);
          }
          this.emit('connect');
        }
      };

      /**
       * Called when the transport opens
       *
       * @api private
       */

      Socket.prototype.onOpen = function () {
        this.open = true;
      };

      /**
       * Called when the transport closes.
       *
       * @api private
       */

      Socket.prototype.onClose = function () {
        this.open = false;
        clearTimeout(this.heartbeatTimeoutTimer);
      };

      /**
       * Called when the transport first opens a connection
       *
       * @param text
       */

      Socket.prototype.onPacket = function (packet) {
        this.of(packet.endpoint).onPacket(packet);
      };

      /**
       * Handles an error.
       *
       * @api private
       */

      Socket.prototype.onError = function (err) {
        if (err && err.advice) {
          if (err.advice === 'reconnect' && (this.connected || this.connecting)) {
            this.disconnect();
            if (this.options.reconnect) {
              this.reconnect();
            }
          }
        }

        this.publish('error', err && err.reason ? err.reason : err);
      };

      /**
       * Called when the transport disconnects.
       *
       * @api private
       */

      Socket.prototype.onDisconnect = function (reason) {
        var wasConnected = this.connected
          , wasConnecting = this.connecting;

        this.connected = false;
        this.connecting = false;
        this.open = false;

        if (wasConnected || wasConnecting) {
          this.transport.close();
          this.transport.clearTimeouts();
          if (wasConnected) {
            this.publish('disconnect', reason);

            if ('booted' != reason && this.options.reconnect && !this.reconnecting) {
              this.reconnect();
            }
          }
        }
      };

      /**
       * Called upon reconnection.
       *
       * @api private
       */

      Socket.prototype.reconnect = function () {
        this.reconnecting = true;
        this.reconnectionAttempts = 0;
        this.reconnectionDelay = this.options['reconnection delay'];

        var self = this
          , maxAttempts = this.options['max reconnection attempts']
          , tryMultiple = this.options['try multiple transports']
          , limit = this.options['reconnection limit'];

        function reset () {
          if (self.connected) {
            for (var i in self.namespaces) {
              if (self.namespaces.hasOwnProperty(i) && '' !== i) {
                  self.namespaces[i].packet({ type: 'connect' });
              }
            }
            self.publish('reconnect', self.transport.name, self.reconnectionAttempts);
          }

          clearTimeout(self.reconnectionTimer);

          self.removeListener('connect_failed', maybeReconnect);
          self.removeListener('connect', maybeReconnect);

          self.reconnecting = false;

          delete self.reconnectionAttempts;
          delete self.reconnectionDelay;
          delete self.reconnectionTimer;
          delete self.redoTransports;

          self.options['try multiple transports'] = tryMultiple;
        };

        function maybeReconnect () {
          if (!self.reconnecting) {
            return;
          }

          if (self.connected) {
            return reset();
          };

          if (self.connecting && self.reconnecting) {
            return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);
          }

          if (self.reconnectionAttempts++ >= maxAttempts) {
            if (!self.redoTransports) {
              self.on('connect_failed', maybeReconnect);
              self.options['try multiple transports'] = true;
              self.transports = self.origTransports;
              self.transport = self.getTransport();
              self.redoTransports = true;
              self.connect();
            } else {
              self.publish('reconnect_failed');
              reset();
            }
          } else {
            if (self.reconnectionDelay < limit) {
              self.reconnectionDelay *= 2; // exponential back off
            }

            self.connect();
            self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);
            self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);
          }
        };

        this.options['try multiple transports'] = false;
        this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);

        this.on('connect', maybeReconnect);
      };

    })(
        'undefined' != typeof io ? io : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );
    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.SocketNamespace = SocketNamespace;

      /**
       * Socket namespace constructor.
       *
       * @constructor
       * @api public
       */

      function SocketNamespace (socket, name) {
        this.socket = socket;
        this.name = name || '';
        this.flags = {};
        this.json = new Flag(this, 'json');
        this.ackPackets = 0;
        this.acks = {};
      };

      /**
       * Apply EventEmitter mixin.
       */

      io.util.mixin(SocketNamespace, io.EventEmitter);

      /**
       * Copies emit since we override it
       *
       * @api private
       */

      SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;

      /**
       * Creates a new namespace, by proxying the request to the socket. This
       * allows us to use the synax as we do on the server.
       *
       * @api public
       */

      SocketNamespace.prototype.of = function () {
        return this.socket.of.apply(this.socket, arguments);
      };

      /**
       * Sends a packet.
       *
       * @api private
       */

      SocketNamespace.prototype.packet = function (packet) {
        packet.endpoint = this.name;
        this.socket.packet(packet);
        this.flags = {};
        return this;
      };

      /**
       * Sends a message
       *
       * @api public
       */

      SocketNamespace.prototype.send = function (data, fn) {
        var packet = {
            type: this.flags.json ? 'json' : 'message'
          , data: data
        };

        if ('function' == typeof fn) {
          packet.id = ++this.ackPackets;
          packet.ack = true;
          this.acks[packet.id] = fn;
        }

        return this.packet(packet);
      };

      /**
       * Emits an event
       *
       * @api public
       */

      SocketNamespace.prototype.emit = function (name) {
        var args = Array.prototype.slice.call(arguments, 1)
          , lastArg = args[args.length - 1]
          , packet = {
                type: 'event'
              , name: name
            };

        if ('function' == typeof lastArg) {
          packet.id = ++this.ackPackets;
          packet.ack = 'data';
          this.acks[packet.id] = lastArg;
          args = args.slice(0, args.length - 1);
        }

        packet.args = args;

        return this.packet(packet);
      };

      /**
       * Disconnects the namespace
       *
       * @api private
       */

      SocketNamespace.prototype.disconnect = function () {
        if (this.name === '') {
          this.socket.disconnect();
        } else {
          this.packet({ type: 'disconnect' });
          this.$emit('disconnect');
        }

        return this;
      };

      /**
       * Handles a packet
       *
       * @api private
       */

      SocketNamespace.prototype.onPacket = function (packet) {
        var self = this;

        function ack () {
          self.packet({
              type: 'ack'
            , args: io.util.toArray(arguments)
            , ackId: packet.id
          });
        };

        switch (packet.type) {
          case 'connect':
            this.$emit('connect');
            break;

          case 'disconnect':
            if (this.name === '') {
              this.socket.onDisconnect(packet.reason || 'booted');
            } else {
              this.$emit('disconnect', packet.reason);
            }
            break;

          case 'message':
          case 'json':
            var params = ['message', packet.data];

            if (packet.ack == 'data') {
              params.push(ack);
            } else if (packet.ack) {
              this.packet({ type: 'ack', ackId: packet.id });
            }

            this.$emit.apply(this, params);
            break;

          case 'event':
            var params = [packet.name].concat(packet.args);

            if (packet.ack == 'data')
              params.push(ack);

            this.$emit.apply(this, params);
            break;

          case 'ack':
            if (this.acks[packet.ackId]) {
              this.acks[packet.ackId].apply(this, packet.args);
              delete this.acks[packet.ackId];
            }
            break;

          case 'error':
            if (packet.advice){
              this.socket.onError(packet);
            } else {
              if (packet.reason == 'unauthorized') {
                this.$emit('connect_failed', packet.reason);
              } else {
                this.$emit('error', packet.reason);
              }
            }
            break;
        }
      };

      /**
       * Flag interface.
       *
       * @api private
       */

      function Flag (nsp, name) {
        this.namespace = nsp;
        this.name = name;
      };

      /**
       * Send a message
       *
       * @api public
       */

      Flag.prototype.send = function () {
        this.namespace.flags[this.name] = true;
        this.namespace.send.apply(this.namespace, arguments);
      };

      /**
       * Emit an event
       *
       * @api public
       */

      Flag.prototype.emit = function () {
        this.namespace.flags[this.name] = true;
        this.namespace.emit.apply(this.namespace, arguments);
      };

    })(
        'undefined' != typeof io ? io : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.websocket = WS;

      /**
       * The WebSocket transport uses the HTML5 WebSocket API to establish an
       * persistent connection with the Socket.IO server. This transport will also
       * be inherited by the FlashSocket fallback as it provides a API compatible
       * polyfill for the WebSockets.
       *
       * @constructor
       * @extends {io.Transport}
       * @api public
       */

      function WS (socket) {
        io.Transport.apply(this, arguments);
      };

      /**
       * Inherits from Transport.
       */

      io.util.inherit(WS, io.Transport);

      /**
       * Transport name
       *
       * @api public
       */

      WS.prototype.name = 'websocket';

      /**
       * Initializes a new `WebSocket` connection with the Socket.IO server. We attach
       * all the appropriate listeners to handle the responses from the server.
       *
       * @returns {Transport}
       * @api public
       */

      WS.prototype.open = function () {
        var query = io.util.query(this.socket.options.query)
          , self = this
          , Socket


        if (!Socket) {
          Socket = global.MozWebSocket || global.WebSocket;
        }

        this.websocket = new Socket(this.prepareUrl() + query);

        this.websocket.onopen = function () {
          self.onOpen();
          self.socket.setBuffer(false);
        };
        this.websocket.onmessage = function (ev) {
          self.onData(ev.data);
        };
        this.websocket.onclose = function () {
          self.onClose();
          self.socket.setBuffer(true);
        };
        this.websocket.onerror = function (e) {
          self.onError(e);
        };

        return this;
      };

      /**
       * Send a message to the Socket.IO server. The message will automatically be
       * encoded in the correct message format.
       *
       * @returns {Transport}
       * @api public
       */

      // Do to a bug in the current IDevices browser, we need to wrap the send in a
      // setTimeout, when they resume from sleeping the browser will crash if
      // we don't allow the browser time to detect the socket has been closed
      if (io.util.ua.iDevice) {
        WS.prototype.send = function (data) {
          var self = this;
          setTimeout(function() {
             self.websocket.send(data);
          },0);
          return this;
        };
      } else {
        WS.prototype.send = function (data) {
          this.websocket.send(data);
          return this;
        };
      }

      /**
       * Payload
       *
       * @api private
       */

      WS.prototype.payload = function (arr) {
        for (var i = 0, l = arr.length; i < l; i++) {
          this.packet(arr[i]);
        }
        return this;
      };

      /**
       * Disconnect the established `WebSocket` connection.
       *
       * @returns {Transport}
       * @api public
       */

      WS.prototype.close = function () {
        this.websocket.close();
        return this;
      };

      /**
       * Handle the errors that `WebSocket` might be giving when we
       * are attempting to connect or send messages.
       *
       * @param {Error} e The error.
       * @api private
       */

      WS.prototype.onError = function (e) {
        this.socket.onError(e);
      };

      /**
       * Returns the appropriate scheme for the URI generation.
       *
       * @api private
       */
      WS.prototype.scheme = function () {
        return this.socket.options.secure ? 'wss' : 'ws';
      };

      /**
       * Checks if the browser has support for native `WebSockets` and that
       * it's not the polyfill created for the FlashSocket transport.
       *
       * @return {Boolean}
       * @api public
       */

      WS.check = function () {
        return ('WebSocket' in global && !('__addTask' in WebSocket))
              || 'MozWebSocket' in global;
      };

      /**
       * Check if the `WebSocket` transport support cross domain communications.
       *
       * @returns {Boolean}
       * @api public
       */

      WS.xdomainCheck = function () {
        return true;
      };

      /**
       * Add the transport to your public io.transports array.
       *
       * @api private
       */

      io.transports.push('websocket');

    })(
        'undefined' != typeof io ? io.Transport : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.flashsocket = Flashsocket;

      /**
       * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket
       * specification. It uses a .swf file to communicate with the server. If you want
       * to serve the .swf file from a other server than where the Socket.IO script is
       * coming from you need to use the insecure version of the .swf. More information
       * about this can be found on the github page.
       *
       * @constructor
       * @extends {io.Transport.websocket}
       * @api public
       */

      function Flashsocket () {
        io.Transport.websocket.apply(this, arguments);
      };

      /**
       * Inherits from Transport.
       */

      io.util.inherit(Flashsocket, io.Transport.websocket);

      /**
       * Transport name
       *
       * @api public
       */

      Flashsocket.prototype.name = 'flashsocket';

      /**
       * Disconnect the established `FlashSocket` connection. This is done by adding a
       * new task to the FlashSocket. The rest will be handled off by the `WebSocket`
       * transport.
       *
       * @returns {Transport}
       * @api public
       */

      Flashsocket.prototype.open = function () {
        var self = this
          , args = arguments;

        WebSocket.__addTask(function () {
          io.Transport.websocket.prototype.open.apply(self, args);
        });
        return this;
      };

      /**
       * Sends a message to the Socket.IO server. This is done by adding a new
       * task to the FlashSocket. The rest will be handled off by the `WebSocket`
       * transport.
       *
       * @returns {Transport}
       * @api public
       */

      Flashsocket.prototype.send = function () {
        var self = this, args = arguments;
        WebSocket.__addTask(function () {
          io.Transport.websocket.prototype.send.apply(self, args);
        });
        return this;
      };

      /**
       * Disconnects the established `FlashSocket` connection.
       *
       * @returns {Transport}
       * @api public
       */

      Flashsocket.prototype.close = function () {
        WebSocket.__tasks.length = 0;
        io.Transport.websocket.prototype.close.call(this);
        return this;
      };

      /**
       * The WebSocket fall back needs to append the flash container to the body
       * element, so we need to make sure we have access to it. Or defer the call
       * until we are sure there is a body element.
       *
       * @param {Socket} socket The socket instance that needs a transport
       * @param {Function} fn The callback
       * @api private
       */

      Flashsocket.prototype.ready = function (socket, fn) {
        function init () {
          var options = socket.options
            , port = options['flash policy port']
            , path = [
                  'http' + (options.secure ? 's' : '') + ':/'
                , options.host + ':' + options.port
                , options.resource
                , 'static/flashsocket'
                , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'
              ];

          // Only start downloading the swf file when the checked that this browser
          // actually supports it
          if (!Flashsocket.loaded) {
            if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {
              // Set the correct file based on the XDomain settings
              WEB_SOCKET_SWF_LOCATION = path.join('/');
            }

            if (port !== 843) {
              WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);
            }

            WebSocket.__initialize();
            Flashsocket.loaded = true;
          }

          fn.call(self);
        }

        var self = this;
        if (document.body) return init();

        io.util.load(init);
      };

      /**
       * Check if the FlashSocket transport is supported as it requires that the Adobe
       * Flash Player plug-in version `10.0.0` or greater is installed. And also check if
       * the polyfill is correctly loaded.
       *
       * @returns {Boolean}
       * @api public
       */

      Flashsocket.check = function () {
        if (
            typeof WebSocket == 'undefined'
          || !('__initialize' in WebSocket) || !swfobject
        ) return false;

        return swfobject.getFlashPlayerVersion().major >= 10;
      };

      /**
       * Check if the FlashSocket transport can be used as cross domain / cross origin
       * transport. Because we can't see which type (secure or insecure) of .swf is used
       * we will just return true.
       *
       * @returns {Boolean}
       * @api public
       */

      Flashsocket.xdomainCheck = function () {
        return true;
      };

      /**
       * Disable AUTO_INITIALIZATION
       */

      if (typeof window != 'undefined') {
        WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;
      }

      /**
       * Add the transport to your public io.transports array.
       *
       * @api private
       */

      io.transports.push('flashsocket');
    })(
        'undefined' != typeof io ? io.Transport : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );
    /*	SWFObject v2.2 <http://code.google.com/p/swfobject/>
    	is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
    */
    if ('undefined' != typeof window) {
    var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class")}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac])}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();
    }
    // Copyright: Hiroshi Ichikawa <http://gimite.net/en/>
    // License: New BSD License
    // Reference: http://dev.w3.org/html5/websockets/
    // Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol

    (function() {

      if ('undefined' == typeof window || window.WebSocket) return;

      var console = window.console;
      if (!console || !console.log || !console.error) {
        console = {log: function(){ }, error: function(){ }};
      }

      if (!swfobject.hasFlashPlayerVersion("10.0.0")) {
        console.error("Flash Player >= 10.0.0 is required.");
        return;
      }
      if (location.protocol == "file:") {
        console.error(
          "WARNING: web-socket-js doesn't work in file:///... URL " +
          "unless you set Flash Security Settings properly. " +
          "Open the page via Web server i.e. http://...");
      }

      /**
       * This class represents a faux web socket.
       * @param {string} url
       * @param {array or string} protocols
       * @param {string} proxyHost
       * @param {int} proxyPort
       * @param {string} headers
       */
      WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {
        var self = this;
        self.__id = WebSocket.__nextId++;
        WebSocket.__instances[self.__id] = self;
        self.readyState = WebSocket.CONNECTING;
        self.bufferedAmount = 0;
        self.__events = {};
        if (!protocols) {
          protocols = [];
        } else if (typeof protocols == "string") {
          protocols = [protocols];
        }
        // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.
        // Otherwise, when onopen fires immediately, onopen is called before it is set.
        setTimeout(function() {
          WebSocket.__addTask(function() {
            WebSocket.__flash.create(
                self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);
          });
        }, 0);
      };

      /**
       * Send data to the web socket.
       * @param {string} data  The data to send to the socket.
       * @return {boolean}  True for success, false for failure.
       */
      WebSocket.prototype.send = function(data) {
        if (this.readyState == WebSocket.CONNECTING) {
          throw "INVALID_STATE_ERR: Web Socket connection has not been established";
        }
        // We use encodeURIComponent() here, because FABridge doesn't work if
        // the argument includes some characters. We don't use escape() here
        // because of this:
        // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions
        // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't
        // preserve all Unicode characters either e.g. "\uffff" in Firefox.
        // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require
        // additional testing.
        var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));
        if (result < 0) { // success
          return true;
        } else {
          this.bufferedAmount += result;
          return false;
        }
      };

      /**
       * Close this web socket gracefully.
       */
      WebSocket.prototype.close = function() {
        if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {
          return;
        }
        this.readyState = WebSocket.CLOSING;
        WebSocket.__flash.close(this.__id);
      };

      /**
       * Implementation of {@link <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration">DOM 2 EventTarget Interface</a>}
       *
       * @param {string} type
       * @param {function} listener
       * @param {boolean} useCapture
       * @return void
       */
      WebSocket.prototype.addEventListener = function(type, listener, useCapture) {
        if (!(type in this.__events)) {
          this.__events[type] = [];
        }
        this.__events[type].push(listener);
      };

      /**
       * Implementation of {@link <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration">DOM 2 EventTarget Interface</a>}
       *
       * @param {string} type
       * @param {function} listener
       * @param {boolean} useCapture
       * @return void
       */
      WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {
        if (!(type in this.__events)) return;
        var events = this.__events[type];
        for (var i = events.length - 1; i >= 0; --i) {
          if (events[i] === listener) {
            events.splice(i, 1);
            break;
          }
        }
      };

      /**
       * Implementation of {@link <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration">DOM 2 EventTarget Interface</a>}
       *
       * @param {Event} event
       * @return void
       */
      WebSocket.prototype.dispatchEvent = function(event) {
        var events = this.__events[event.type] || [];
        for (var i = 0; i < events.length; ++i) {
          events[i](event);
        }
        var handler = this["on" + event.type];
        if (handler) handler(event);
      };

      /**
       * Handles an event from Flash.
       * @param {Object} flashEvent
       */
      WebSocket.prototype.__handleEvent = function(flashEvent) {
        if ("readyState" in flashEvent) {
          this.readyState = flashEvent.readyState;
        }
        if ("protocol" in flashEvent) {
          this.protocol = flashEvent.protocol;
        }

        var jsEvent;
        if (flashEvent.type == "open" || flashEvent.type == "error") {
          jsEvent = this.__createSimpleEvent(flashEvent.type);
        } else if (flashEvent.type == "close") {
          // TODO implement jsEvent.wasClean
          jsEvent = this.__createSimpleEvent("close");
        } else if (flashEvent.type == "message") {
          var data = decodeURIComponent(flashEvent.message);
          jsEvent = this.__createMessageEvent("message", data);
        } else {
          throw "unknown event type: " + flashEvent.type;
        }

        this.dispatchEvent(jsEvent);
      };

      WebSocket.prototype.__createSimpleEvent = function(type) {
        if (document.createEvent && window.Event) {
          var event = document.createEvent("Event");
          event.initEvent(type, false, false);
          return event;
        } else {
          return {type: type, bubbles: false, cancelable: false};
        }
      };

      WebSocket.prototype.__createMessageEvent = function(type, data) {
        if (document.createEvent && window.MessageEvent && !window.opera) {
          var event = document.createEvent("MessageEvent");
          event.initMessageEvent("message", false, false, data, null, null, window, null);
          return event;
        } else {
          // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.
          return {type: type, data: data, bubbles: false, cancelable: false};
        }
      };

      /**
       * Define the WebSocket readyState enumeration.
       */
      WebSocket.CONNECTING = 0;
      WebSocket.OPEN = 1;
      WebSocket.CLOSING = 2;
      WebSocket.CLOSED = 3;

      WebSocket.__flash = null;
      WebSocket.__instances = {};
      WebSocket.__tasks = [];
      WebSocket.__nextId = 0;

      /**
       * Load a new flash security policy file.
       * @param {string} url
       */
      WebSocket.loadFlashPolicyFile = function(url){
        WebSocket.__addTask(function() {
          WebSocket.__flash.loadManualPolicyFile(url);
        });
      };

      /**
       * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.
       */
      WebSocket.__initialize = function() {
        if (WebSocket.__flash) return;

        if (WebSocket.__swfLocation) {
          // For backword compatibility.
          window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;
        }
        if (!window.WEB_SOCKET_SWF_LOCATION) {
          console.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");
          return;
        }
        var container = document.createElement("div");
        container.id = "webSocketContainer";
        // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents
        // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).
        // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash
        // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is
        // the best we can do as far as we know now.
        container.style.position = "absolute";
        if (WebSocket.__isFlashLite()) {
          container.style.left = "0px";
          container.style.top = "0px";
        } else {
          container.style.left = "-100px";
          container.style.top = "-100px";
        }
        var holder = document.createElement("div");
        holder.id = "webSocketFlash";
        container.appendChild(holder);
        document.body.appendChild(container);
        // See this article for hasPriority:
        // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html
        swfobject.embedSWF(
          WEB_SOCKET_SWF_LOCATION,
          "webSocketFlash",
          "1" /* width */,
          "1" /* height */,
          "10.0.0" /* SWF version */,
          null,
          null,
          {hasPriority: true, swliveconnect : true, allowScriptAccess: "always"},
          null,
          function(e) {
            if (!e.success) {
              console.error("[WebSocket] swfobject.embedSWF failed");
            }
          });
      };

      /**
       * Called by Flash to notify JS that it's fully loaded and ready
       * for communication.
       */
      WebSocket.__onFlashInitialized = function() {
        // We need to set a timeout here to avoid round-trip calls
        // to flash during the initialization process.
        setTimeout(function() {
          WebSocket.__flash = document.getElementById("webSocketFlash");
          WebSocket.__flash.setCallerUrl(location.href);
          WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);
          for (var i = 0; i < WebSocket.__tasks.length; ++i) {
            WebSocket.__tasks[i]();
          }
          WebSocket.__tasks = [];
        }, 0);
      };

      /**
       * Called by Flash to notify WebSockets events are fired.
       */
      WebSocket.__onFlashEvent = function() {
        setTimeout(function() {
          try {
            // Gets events using receiveEvents() instead of getting it from event object
            // of Flash event. This is to make sure to keep message order.
            // It seems sometimes Flash events don't arrive in the same order as they are sent.
            var events = WebSocket.__flash.receiveEvents();
            for (var i = 0; i < events.length; ++i) {
              WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);
            }
          } catch (e) {
            console.error(e);
          }
        }, 0);
        return true;
      };

      // Called by Flash.
      WebSocket.__log = function(message) {
        console.log(decodeURIComponent(message));
      };

      // Called by Flash.
      WebSocket.__error = function(message) {
        console.error(decodeURIComponent(message));
      };

      WebSocket.__addTask = function(task) {
        if (WebSocket.__flash) {
          task();
        } else {
          WebSocket.__tasks.push(task);
        }
      };

      /**
       * Test if the browser is running flash lite.
       * @return {boolean} True if flash lite is running, false otherwise.
       */
      WebSocket.__isFlashLite = function() {
        if (!window.navigator || !window.navigator.mimeTypes) {
          return false;
        }
        var mimeType = window.navigator.mimeTypes["application/x-shockwave-flash"];
        if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {
          return false;
        }
        return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;
      };

      if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {
        if (window.addEventListener) {
          window.addEventListener("load", function(){
            WebSocket.__initialize();
          }, false);
        } else {
          window.attachEvent("onload", function(){
            WebSocket.__initialize();
          });
        }
      }

    })();

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       *
       * @api public
       */

      exports.XHR = XHR;

      /**
       * XHR constructor
       *
       * @costructor
       * @api public
       */

      function XHR (socket) {
        if (!socket) return;

        io.Transport.apply(this, arguments);
        this.sendBuffer = [];
      };

      /**
       * Inherits from Transport.
       */

      io.util.inherit(XHR, io.Transport);

      /**
       * Establish a connection
       *
       * @returns {Transport}
       * @api public
       */

      XHR.prototype.open = function () {
        this.socket.setBuffer(false);
        this.onOpen();
        this.get();

        // we need to make sure the request succeeds since we have no indication
        // whether the request opened or not until it succeeded.
        this.setCloseTimeout();

        return this;
      };

      /**
       * Check if we need to send data to the Socket.IO server, if we have data in our
       * buffer we encode it and forward it to the `post` method.
       *
       * @api private
       */

      XHR.prototype.payload = function (payload) {
        var msgs = [];

        for (var i = 0, l = payload.length; i < l; i++) {
          msgs.push(io.parser.encodePacket(payload[i]));
        }

        this.send(io.parser.encodePayload(msgs));
      };

      /**
       * Send data to the Socket.IO server.
       *
       * @param data The message
       * @returns {Transport}
       * @api public
       */

      XHR.prototype.send = function (data) {
        this.post(data);
        return this;
      };

      /**
       * Posts a encoded message to the Socket.IO server.
       *
       * @param {String} data A encoded message.
       * @api private
       */

      function empty () { };

      XHR.prototype.post = function (data) {
        var self = this;
        this.socket.setBuffer(true);

        function stateChange () {
          if (this.readyState == 4) {
            this.onreadystatechange = empty;
            self.posting = false;

            if (this.status == 200){
              self.socket.setBuffer(false);
            } else {
              self.onClose();
            }
          }
        }

        function onload () {
          this.onload = empty;
          self.socket.setBuffer(false);
        };

        this.sendXHR = this.request('POST');

        if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {
          this.sendXHR.onload = this.sendXHR.onerror = onload;
        } else {
          this.sendXHR.onreadystatechange = stateChange;
        }

        this.sendXHR.send(data);
      };

      /**
       * Disconnects the established `XHR` connection.
       *
       * @returns {Transport}
       * @api public
       */

      XHR.prototype.close = function () {
        this.onClose();
        return this;
      };

      /**
       * Generates a configured XHR request
       *
       * @param {String} url The url that needs to be requested.
       * @param {String} method The method the request should use.
       * @returns {XMLHttpRequest}
       * @api private
       */

      XHR.prototype.request = function (method) {
        var req = io.util.request(this.socket.isXDomain())
          , query = io.util.query(this.socket.options.query, 't=' + +new Date);

        req.open(method || 'GET', this.prepareUrl() + query, true);

        if (method == 'POST') {
          try {
            if (req.setRequestHeader) {
              req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
            } else {
              // XDomainRequest
              req.contentType = 'text/plain';
            }
          } catch (e) {}
        }

        return req;
      };

      /**
       * Returns the scheme to use for the transport URLs.
       *
       * @api private
       */

      XHR.prototype.scheme = function () {
        return this.socket.options.secure ? 'https' : 'http';
      };

      /**
       * Check if the XHR transports are supported
       *
       * @param {Boolean} xdomain Check if we support cross domain requests.
       * @returns {Boolean}
       * @api public
       */

      XHR.check = function (socket, xdomain) {
        try {
          var request = io.util.request(xdomain),
              usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),
              socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),
              isXProtocol = (global.location && socketProtocol != global.location.protocol);
          if (request && !(usesXDomReq && isXProtocol)) {
            return true;
          }
        } catch(e) {}

        return false;
      };

      /**
       * Check if the XHR transport supports cross domain requests.
       *
       * @returns {Boolean}
       * @api public
       */

      XHR.xdomainCheck = function (socket) {
        return XHR.check(socket, true);
      };

    })(
        'undefined' != typeof io ? io.Transport : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );
    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports.htmlfile = HTMLFile;

      /**
       * The HTMLFile transport creates a `forever iframe` based transport
       * for Internet Explorer. Regular forever iframe implementations will
       * continuously trigger the browsers buzy indicators. If the forever iframe
       * is created inside a `htmlfile` these indicators will not be trigged.
       *
       * @constructor
       * @extends {io.Transport.XHR}
       * @api public
       */

      function HTMLFile (socket) {
        io.Transport.XHR.apply(this, arguments);
      };

      /**
       * Inherits from XHR transport.
       */

      io.util.inherit(HTMLFile, io.Transport.XHR);

      /**
       * Transport name
       *
       * @api public
       */

      HTMLFile.prototype.name = 'htmlfile';

      /**
       * Creates a new Ac...eX `htmlfile` with a forever loading iframe
       * that can be used to listen to messages. Inside the generated
       * `htmlfile` a reference will be made to the HTMLFile transport.
       *
       * @api private
       */

      HTMLFile.prototype.get = function () {
        this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');
        this.doc.open();
        this.doc.write('<html></html>');
        this.doc.close();
        this.doc.parentWindow.s = this;

        var iframeC = this.doc.createElement('div');
        iframeC.className = 'socketio';

        this.doc.body.appendChild(iframeC);
        this.iframe = this.doc.createElement('iframe');

        iframeC.appendChild(this.iframe);

        var self = this
          , query = io.util.query(this.socket.options.query, 't='+ +new Date);

        this.iframe.src = this.prepareUrl() + query;

        io.util.on(window, 'unload', function () {
          self.destroy();
        });
      };

      /**
       * The Socket.IO server will write script tags inside the forever
       * iframe, this function will be used as callback for the incoming
       * information.
       *
       * @param {String} data The message
       * @param {document} doc Reference to the context
       * @api private
       */

      HTMLFile.prototype._ = function (data, doc) {
        this.onData(data);
        try {
          var script = doc.getElementsByTagName('script')[0];
          script.parentNode.removeChild(script);
        } catch (e) { }
      };

      /**
       * Destroy the established connection, iframe and `htmlfile`.
       * And calls the `CollectGarbage` function of Internet Explorer
       * to release the memory.
       *
       * @api private
       */

      HTMLFile.prototype.destroy = function () {
        if (this.iframe){
          try {
            this.iframe.src = 'about:blank';
          } catch(e){}

          this.doc = null;
          this.iframe.parentNode.removeChild(this.iframe);
          this.iframe = null;

          CollectGarbage();
        }
      };

      /**
       * Disconnects the established connection.
       *
       * @returns {Transport} Chaining.
       * @api public
       */

      HTMLFile.prototype.close = function () {
        this.destroy();
        return io.Transport.XHR.prototype.close.call(this);
      };

      /**
       * Checks if the browser supports this transport. The browser
       * must have an `Ac...eXObject` implementation.
       *
       * @return {Boolean}
       * @api public
       */

      HTMLFile.check = function (socket) {
        if (typeof window != "undefined" && (['Active'].concat('Object').join('X')) in window){
          try {
            var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');
            return a && io.Transport.XHR.check(socket);
          } catch(e){}
        }
        return false;
      };

      /**
       * Check if cross domain requests are supported.
       *
       * @returns {Boolean}
       * @api public
       */

      HTMLFile.xdomainCheck = function () {
        // we can probably do handling for sub-domains, we should
        // test that it's cross domain but a subdomain here
        return false;
      };

      /**
       * Add the transport to your public io.transports array.
       *
       * @api private
       */

      io.transports.push('htmlfile');

    })(
        'undefined' != typeof io ? io.Transport : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {

      /**
       * Expose constructor.
       */

      exports['xhr-polling'] = XHRPolling;

      /**
       * The XHR-polling transport uses long polling XHR requests to create a
       * "persistent" connection with the server.
       *
       * @constructor
       * @api public
       */

      function XHRPolling () {
        io.Transport.XHR.apply(this, arguments);
      };

      /**
       * Inherits from XHR transport.
       */

      io.util.inherit(XHRPolling, io.Transport.XHR);

      /**
       * Merge the properties from XHR transport
       */

      io.util.merge(XHRPolling, io.Transport.XHR);

      /**
       * Transport name
       *
       * @api public
       */

      XHRPolling.prototype.name = 'xhr-polling';

      /**
       * Indicates whether heartbeats is enabled for this transport
       *
       * @api private
       */

      XHRPolling.prototype.heartbeats = function () {
        return false;
      };

      /**
       * Establish a connection, for iPhone and Android this will be done once the page
       * is loaded.
       *
       * @returns {Transport} Chaining.
       * @api public
       */

      XHRPolling.prototype.open = function () {
        var self = this;

        io.Transport.XHR.prototype.open.call(self);
        return false;
      };

      /**
       * Starts a XHR request to wait for incoming messages.
       *
       * @api private
       */

      function empty () {};

      XHRPolling.prototype.get = function () {
        if (!this.isOpen) return;

        var self = this;

        function stateChange () {
          if (this.readyState == 4) {
            this.onreadystatechange = empty;

            if (this.status == 200) {
              self.onData(this.responseText);
              self.get();
            } else {
              self.onClose();
            }
          }
        };

        function onload () {
          this.onload = empty;
          this.onerror = empty;
          self.retryCounter = 1;
          self.onData(this.responseText);
          self.get();
        };

        function onerror () {
          self.retryCounter ++;
          if(!self.retryCounter || self.retryCounter > 3) {
            self.onClose();
          } else {
            self.get();
          }
        };

        this.xhr = this.request();

        if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {
          this.xhr.onload = onload;
          this.xhr.onerror = onerror;
        } else {
          this.xhr.onreadystatechange = stateChange;
        }

        this.xhr.send(null);
      };

      /**
       * Handle the unclean close behavior.
       *
       * @api private
       */

      XHRPolling.prototype.onClose = function () {
        io.Transport.XHR.prototype.onClose.call(this);

        if (this.xhr) {
          this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;
          try {
            this.xhr.abort();
          } catch(e){}
          this.xhr = null;
        }
      };

      /**
       * Webkit based browsers show a infinit spinner when you start a XHR request
       * before the browsers onload event is called so we need to defer opening of
       * the transport until the onload event is called. Wrapping the cb in our
       * defer method solve this.
       *
       * @param {Socket} socket The socket instance that needs a transport
       * @param {Function} fn The callback
       * @api private
       */

      XHRPolling.prototype.ready = function (socket, fn) {
        var self = this;

        io.util.defer(function () {
          fn.call(self);
        });
      };

      /**
       * Add the transport to your public io.transports array.
       *
       * @api private
       */

      io.transports.push('xhr-polling');

    })(
        'undefined' != typeof io ? io.Transport : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );

    /**
     * socket.io
     * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
     * MIT Licensed
     */

    (function (exports, io) {
      /**
       * There is a way to hide the loading indicator in Firefox. If you create and
       * remove a iframe it will stop showing the current loading indicator.
       * Unfortunately we can't feature detect that and UA sniffing is evil.
       *
       * @api private
       */

      var indicator = global.document && "MozAppearance" in
        global.document.documentElement.style;

      /**
       * Expose constructor.
       */

      exports['jsonp-polling'] = JSONPPolling;

      /**
       * The JSONP transport creates an persistent connection by dynamically
       * inserting a script tag in the page. This script tag will receive the
       * information of the Socket.IO server. When new information is received
       * it creates a new script tag for the new data stream.
       *
       * @constructor
       * @extends {io.Transport.xhr-polling}
       * @api public
       */

      function JSONPPolling (socket) {
        io.Transport['xhr-polling'].apply(this, arguments);

        this.index = io.j.length;

        var self = this;

        io.j.push(function (msg) {
          self._(msg);
        });
      };

      /**
       * Inherits from XHR polling transport.
       */

      io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);

      /**
       * Transport name
       *
       * @api public
       */

      JSONPPolling.prototype.name = 'jsonp-polling';

      /**
       * Posts a encoded message to the Socket.IO server using an iframe.
       * The iframe is used because script tags can create POST based requests.
       * The iframe is positioned outside of the view so the user does not
       * notice it's existence.
       *
       * @param {String} data A encoded message.
       * @api private
       */

      JSONPPolling.prototype.post = function (data) {
        var self = this
          , query = io.util.query(
                 this.socket.options.query
              , 't='+ (+new Date) + '&i=' + this.index
            );

        if (!this.form) {
          var form = document.createElement('form')
            , area = document.createElement('textarea')
            , id = this.iframeId = 'socketio_iframe_' + this.index
            , iframe;

          form.className = 'socketio';
          form.style.position = 'absolute';
          form.style.top = '0px';
          form.style.left = '0px';
          form.style.display = 'none';
          form.target = id;
          form.method = 'POST';
          form.setAttribute('accept-charset', 'utf-8');
          area.name = 'd';
          form.appendChild(area);
          document.body.appendChild(form);

          this.form = form;
          this.area = area;
        }

        this.form.action = this.prepareUrl() + query;

        function complete () {
          initIframe();
          self.socket.setBuffer(false);
        };

        function initIframe () {
          if (self.iframe) {
            self.form.removeChild(self.iframe);
          }

          try {
            // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
            iframe = document.createElement('<iframe name="'+ self.iframeId +'">');
          } catch (e) {
            iframe = document.createElement('iframe');
            iframe.name = self.iframeId;
          }

          iframe.id = self.iframeId;

          self.form.appendChild(iframe);
          self.iframe = iframe;
        };

        initIframe();

        // we temporarily stringify until we figure out how to prevent
        // browsers from turning `\n` into `\r\n` in form inputs
        this.area.value = io.JSON.stringify(data);

        try {
          this.form.submit();
        } catch(e) {}

        if (this.iframe.attachEvent) {
          iframe.onreadystatechange = function () {
            if (self.iframe.readyState == 'complete') {
              complete();
            }
          };
        } else {
          this.iframe.onload = complete;
        }

        this.socket.setBuffer(true);
      };

      /**
       * Creates a new JSONP poll that can be used to listen
       * for messages from the Socket.IO server.
       *
       * @api private
       */

      JSONPPolling.prototype.get = function () {
        var self = this
          , script = document.createElement('script')
          , query = io.util.query(
                 this.socket.options.query
              , 't='+ (+new Date) + '&i=' + this.index
            );

        if (this.script) {
          this.script.parentNode.removeChild(this.script);
          this.script = null;
        }

        script.async = true;
        script.src = this.prepareUrl() + query;
        script.onerror = function () {
          self.onClose();
        };

        var insertAt = document.getElementsByTagName('script')[0];
        insertAt.parentNode.insertBefore(script, insertAt);
        this.script = script;

        if (indicator) {
          setTimeout(function () {
            var iframe = document.createElement('iframe');
            document.body.appendChild(iframe);
            document.body.removeChild(iframe);
          }, 100);
        }
      };

      /**
       * Callback function for the incoming message stream from the Socket.IO server.
       *
       * @param {String} data The message
       * @api private
       */

      JSONPPolling.prototype._ = function (msg) {
        this.onData(msg);
        if (this.isOpen) {
          this.get();
        }
        return this;
      };

      /**
       * The indicator hack only works after onload
       *
       * @param {Socket} socket The socket instance that needs a transport
       * @param {Function} fn The callback
       * @api private
       */

      JSONPPolling.prototype.ready = function (socket, fn) {
        var self = this;
        if (!indicator) return fn.call(this);

        io.util.load(function () {
          fn.call(self);
        });
      };

      /**
       * Checks if browser supports this transport.
       *
       * @return {Boolean}
       * @api public
       */

      JSONPPolling.check = function () {
        return 'document' in global;
      };

      /**
       * Check if cross domain requests are supported
       *
       * @returns {Boolean}
       * @api public
       */

      JSONPPolling.xdomainCheck = function () {
        return true;
      };

      /**
       * Add the transport to your public io.transports array.
       *
       * @api private
       */

      io.transports.push('jsonp-polling');

    })(
        'undefined' != typeof io ? io.Transport : module.exports
      , 'undefined' != typeof io ? io : module.parent.exports
    );

    if (typeof define === "function" && define.amd) {
      define([], function () { return io; });
    } else {
      return io;
    }

    })(window);
    ;

    var Peer = /*
    The MIT License

    Copyright (c) 2012, Mozilla Foundation
    Copyright (c) 2012, Alan Kligman
    All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    */

    (function() {

      /* Notes
       *
       * - Continue using prefixed names for now.
       *
       */

      var io = SocketIO;
      var webrtcSupported = true;

      var RTCPeerConnection;
      if(window.mozRTCPeerConnection)
        RTCPeerConnection = window.mozRTCPeerConnection;
      else if(window.webkitRTCPeerConnection)
        RTCPeerConnection = window.webkitRTCPeerConnection;
      else if(window.RTCPeerConnection)
        RTCPeerConnection = window.RTCPeerConnection
      else
        webrtcSupported = false;

      var RTCSessionDescription;
      if(window.mozRTCSessionDescription)
        RTCSessionDescription = window.mozRTCSessionDescription;
      else if(window.webkitRTCSessionDescription)
        RTCSessionDescription = window.webkitRTCSessionDescription;
      else if(window.RTCSessionDescription)
        RTCSessionDescription = window.RTCSessionDescription
      else
        webrtcSupported = false;

      var RTCIceCandidate;
      if(window.mozRTCIceCandidate)
        RTCIceCandidate = window.mozRTCIceCandidate;
      else if(window.webkitRTCIceCandidate)
        RTCIceCandidate = window.webkitRTCIceCandidate;
      else if(window.RTCIceCandidate)
        RTCIceCandidate = window.RTCIceCandidate;
      else
        webrtcSupported = false;

      var getUserMedia;
      if(!navigator.getUserMedia) {
        if(navigator.mozGetUserMedia)
          getUserMedia = navigator.mozGetUserMedia.bind(navigator);
        else if(navigator.webkitGetUserMedia)
          getUserMedia = navigator.webkitGetUserMedia.bind(navigator);
        else
          webrtcSupported = false;
      } else {
        getUserMedia = navigator.getUserMedia.bind(navigator);
      }

      // FIXME: browser detection is gross, but I don't see another way to do this
      var RTCConnectProtocol;
      if(window.mozRTCPeerConnection) {
        RTCConnectProtocol = mozRTCConnectProtocol;
      } else if(window.webkitRTCPeerConnection) {
        RTCConnectProtocol = webkitRTCConnectProtocol;
      } else {
        webrtcSupported = false;
      }

      function callback(object, method, args) {
        if(!Array.isArray(args))
          args = [args];
        if(method in object && 'function' === typeof object[method]) {
          object[method].apply(object, args);
        }
      };

      function fail(object, method, error) {
        if (!(error instanceof Error))
          error = new Error(error);
        callback(object, method, [error]);
      };

      function defer(queue, object, method, args) {
        if(queue) {
          queue.push([object, method, args]);
          return true;
        } else {
          return false;
        }
      };

      function processDeferredQueue(queue) {
        while(queue.length) {
          var deferred = queue.shift();
          callback(deferred[0], deferred[1], deferred[2]);
        }
      };

      var ONE_SECOND = 1000; // milliseconds
      var DEFAULT_CONNECTION_TIMEOUT = 10 * ONE_SECOND;
      var DEFAULT_PING_TIMEOUT = 1 * ONE_SECOND;
      var RELIABLE_CHANNEL_OPTIONS = {
        reliable: false
      };
      var UNRELIABLE_CHANNEL_OPTIONS = {
        outOfOrderAllowed: true,
        maxRetransmitNum: 0,
        reliable: false
      };

      function PendingConnectionAbortError(message) {
        this.name = "PendingConnectionAbortError";
        this.message = (message || "");
      };
      PendingConnectionAbortError.prototype = Error.prototype;

      function ConnectionFailedError(message) {
        this.name = "ConnectionFailedError";
        this.message = (message || "");
      };
      ConnectionFailedError.prototype = Error.prototype;

      var E = {
        PendingConnectionAbortError: PendingConnectionAbortError,
        ConnectionFailedError: ConnectionFailedError
      };

      function WebSocketBroker(brokerUrl) {
        this.brokerUrl = brokerUrl;
        this.state = WebSocketBroker.OFFLINE;

        this.onstatechange = null;
        this.onreceive = null;
        this.onerror = null;

        this.socket = null;
        this.route = null;
      };

      // States
      WebSocketBroker.OFFLINE     = 0x00;
      WebSocketBroker.CONNECTING  = 0x01;
      WebSocketBroker.CONNECTED   = 0x02;
      // Flags
      WebSocketBroker.ROUTED      = 0x10;
      WebSocketBroker.LISTENING   = 0x20;

      WebSocketBroker.prototype.setState = function setState(state, clearFlags) {
        var clear = clearFlags ? 0x00 : 0xF0;
        this.state &= clear >>> 0;
        this.state |= state >>> 0;
        callback(this, 'onstatechange', [this.state, (state | (clear & 0x0)) >>> 0]);
      };
      WebSocketBroker.prototype.setFlag = function setFlag(flag) {
        this.state = (this.state | flag) >>> 0;
        callback(this, 'onstatechange', [this.state, flag])
      };
      WebSocketBroker.prototype.clearFlag = function clearFlag(flag) {
        flag = (~flag) >>> 0;
        this.state = (this.state & flag) >>> 0;
        callback(this, 'onstatechange', [this.state, flag])
      };
      WebSocketBroker.prototype.checkState = function checkState(mask) {
        return !!(this.state & mask);
      };
      WebSocketBroker.prototype.connect = function connect() {
        var that = this;
        var socket = io.connect(this.brokerUrl + '/peer', {
          'sync disconnect on unload': true // partially fixes 'interrupted while page loading' warning
        });

        socket.on('connecting', function onconnecting() {
          that.setState(WebSocketBroker.CONNECTING, true);
        });

        socket.on('connect', function onconnect() {
          that.setState(WebSocketBroker.CONNECTED, true);
        });

        socket.on('connect_failed', function onconnect_failed() {
          that.setState(WebSocketBroker.OFFLINE, true);
        });

        socket.on('route', function onroute(route) {
          that.route = route;
          that.setFlag(WebSocketBroker.ROUTED);
        });

        socket.on('disconnect', function ondisconnect() {
          that.setState(WebSocketBroker.OFFLINE, true);
        });

        socket.on('error', function onerror(error) {
          fail(that, 'onerror', error);
        });

        socket.on('receive', function onreceive(message) {
          var from = message['from'];
          var data = message['data'];
          callback(that, 'onreceive', [from, data]);
        });

        this.socket = socket;
      };
      WebSocketBroker.prototype.disconnect = function disconnect() {
        if(this.checkState(WebSocketBroker.CONNECTED)) {
          this.socket.disconnect();
          this.setState(WebSocketBroker.OFFLINE, true);
          return true;
        } else {
          return false;
        }
      };
      WebSocketBroker.prototype.listen = function listen(options) {
        var that = this;
        if(this.checkState(WebSocketBroker.CONNECTED)) {
          this.socket.emit('listen', options, function onresponse(response) {
            if(response && response['error']) {
              var error = new Error(response['error']);
              fail(that, 'onerror', error);
            } else {
              that.setFlag(WebSocketBroker.LISTENING);
            }
          });
        }
      };
      WebSocketBroker.prototype.ignore = function ignore() {
        var that = this;
        if(this.checkState(WebSocketBroker.CONNECTED)) {
          this.socket.emit('ignore', null, function onresponse(response) {
            if(response && response['error']) {
              var error = new Error(response['error']);
              fail(that, 'onerror', error)
            } else {
              that.clearFlag(WebSocketBroker.LISTENING);
            }
          });
        }
      };
      WebSocketBroker.prototype.send = function send(to, message) {
        var that = this;
        if(this.checkState(WebSocketBroker.CONNECTED)) {
          this.socket.emit('send', {'to': to, 'data': message}, function onresponse(response) {
            if(response && response['error']) {
              var error = new Error(response['error']);
              fail(that, 'onerror', error)
            }
          });
        };
      };

      var dataChannels = {
        'reliable': 'RELIABLE',
        'unreliable': 'UNRELIABLE',
        '@control': 'RELIABLE'
      };
      var nextDataConnectionPort = 1;
      function CommonRTCConnectProtocol() {
        // FIXME: these timeouts should be configurable
        this.connectionTimeout = 10 * ONE_SECOND;
        this.pingTimeout = 1 * ONE_SECOND;
      };
      CommonRTCConnectProtocol.prototype.process = function process(message) {
        var that = this;

        var type = message['type'];
        switch(type) {
          case 'ice':
            var candidate = JSON.parse(message['candidate']);
            if(candidate)
              this.handleIce(candidate);
            break;

          case 'offer':
            that.ports.remote = message['port'];
            var offer = {
              'type': 'offer',
              'sdp': message['description']
            };
            this.handleOffer(offer);
            break;

          case 'answer':
            that.ports.remote = message['port'];
            var answer = {
              'type': 'answer',
              'sdp': message['description']
            };
            this.handleAnswer(answer);
            break;

          case 'abort':
            this.handleAbort();
            break;

          default:
            fail(this, 'onerror', 'unknown message');
        }
      };
      CommonRTCConnectProtocol.prototype.handleAbort = function handleAbort() {
        fail(this, 'onerror', new Error(E.RTCConnectProtocolAbort));
      };
      CommonRTCConnectProtocol.prototype.initialize = function initialize(cb) {
        var that = this;

        if(this.peerConnection)
          return cb();

        // FIXME: peer connection servers should be configurable
        this.peerConnection = new RTCPeerConnection(this.connectionServers, this.connectionOptions);
        this.peerConnection.onicecandidate = function(event) {
          var message = {
            'type': 'ice',
            'candidate': JSON.stringify(event.candidate)
          };
          callback(that, 'onmessage', message);
        };
        this.peerConnection.onaddstream = function(event) {
          that.streams['remote'] = event.stream;
        };
        this.peerConnection.onstatechange = function(event) {
          console.log(event.target.readyState);
        };

        function createStream(useFake) {
          useFake = (!useVideo && !useAudio) ? true : useFake;
          var useVideo = !!that.options['video'];
          var useAudio = !!that.options['audio'];
          var mediaOptions = {
            video: useVideo,
            audio: (!useVideo && !useAudio) ? true : useAudio,
            fake: useFake
          };
          getUserMedia(mediaOptions,
            function(stream) {
              that.peerConnection.addStream(stream);
              that.streams['local'] = stream;
              cb();
            },
            function(error) {
              console.error('!', error);
              if(!useFake)
                createStream(true);
              else
                fail(that, 'onerror', error);
            }
          );
        }

        createStream();
      };
      CommonRTCConnectProtocol.prototype.handleIce = function handleIce(candidate) {
        var that = this;

        function setIce() {
          if(!that.peerConnection.remoteDescription) {
            return
          }
          that.peerConnection.addIceCandidate(new RTCIceCandidate(candidate),
            function(error) {
              fail(that, 'onerror', error);
            }
          );
        };

        this.initialize(setIce);
      };
      CommonRTCConnectProtocol.prototype.initiate = function initiate() {
        var that = this;
        this.initiator = true;

        function createDataChannels() {
          var labels = Object.keys(dataChannels);
          labels.forEach(function(label) {
            var channelOptions = that.channelOptions[dataChannels[label]];
            var channel = that._pending[label] = that.peerConnection.createDataChannel(label, channelOptions);
            channel.binaryType = that.options['binaryType'];
            channel.onopen = function() {
              that.channels[label] = channel;
              delete that._pending[label];
              if(Object.keys(that.channels).length === labels.length) {
                that.complete = true;
                callback(that, 'oncomplete', []);
              }
            };
            channel.onerror = function(error) {
              console.error(error);
              fail(that, 'onerror', error);
            };
          });
          createOffer();
        };

        function createOffer() {
          that.peerConnection.createOffer(setLocal,
            function(error) {
              fail(that, 'onerror', error);
            }
          );
        };

        function setLocal(description) {
          that.peerConnection.setLocalDescription(new RTCSessionDescription(description), complete,
            function(error) {
              fail(that, 'onerror', error);
            }
          );

          function complete() {
            var message = {
              'type': 'offer',
              'description': description['sdp'],
              'port': that.ports.local
            };
            callback(that, 'onmessage', message);
          };
        };

        this.initialize(createDataChannels);
      };
      CommonRTCConnectProtocol.prototype.handleOffer = function handleOffer(offer) {
        var that = this;

        function handleDataChannels() {
          var labels = Object.keys(dataChannels);
          that.peerConnection.ondatachannel = function(event) {
            var channel = event.channel;
            var label = channel.label;
            that._pending[label] = channel;
            channel.binaryType = that.options['binaryType'];
            channel.onopen = function() {
              that.channels[label] = channel;
              delete that._pending[label];
              if(Object.keys(that.channels).length === labels.length) {
                that.complete = true;
                callback(that, 'oncomplete', []);
              }
            };
            channel.onerror = function(error) {
              console.error(error);
              fail(that, 'onerror', error);
            };
          };
          setRemote();
        };

        function setRemote() {
          that.peerConnection.setRemoteDescription(new RTCSessionDescription(offer), createAnswer,
            function(error) {
              fail(that, 'onerror', error);
            }
          );
        };

        function createAnswer() {
          that.peerConnection.createAnswer(setLocal,
            function(error) {
              fail(that, 'onerror', error);
            }
          );
        };

        function setLocal(description) {
          that.peerConnection.setLocalDescription(new RTCSessionDescription(description), complete,
            function(error) {
              fail(that, 'onerror', error);
            }
          );

          function complete() {
            var message = {
              'type': 'answer',
              'description': description['sdp'],
              'port': that.ports.local
            };
            callback(that, 'onmessage', message);
          };
        };

        this.initialize(handleDataChannels);
      };
      CommonRTCConnectProtocol.prototype.handleAnswer = function handleAnswer(answer) {
        var that = this;

        function setRemote() {
          that.peerConnection.setRemoteDescription(new RTCSessionDescription(answer), complete,
            function(error) {
              fail(that, 'onerror', error);
            }
          );
        };

        function complete() {
        };

        this.initialize(setRemote);
      };

      function mozRTCConnectProtocol(options) {
        this.options = options;
        this.onmessage = null;
        this.oncomplete = null;
        this.onerror = null;

        this.complete = false;
        this.ports = {
          local: nextDataConnectionPort ++,
          remote: null
        };
        this.streams = {
          local: null,
          remote: null
        };
        this.initiator = false;

        this.peerConnection = null;
        this.channels = {};
        this._pending = {};
        this.connectionServers = null;
        this.connectionOptions = null;
        this.channelOptions = {
          RELIABLE: {
            // defaults
          },
          UNRELIABLE: {
            outOfOrderAllowed: true,
            maxRetransmitNum: 0
          }
        };
      };
      mozRTCConnectProtocol.prototype = new CommonRTCConnectProtocol();
      mozRTCConnectProtocol.prototype.constructor = mozRTCConnectProtocol;

      function webkitRTCConnectProtocol(options) {
        this.options = options;
        this.onmessage = null;
        this.oncomplete = null;
        this.onerror = null;

        this.complete = false;
        this.ports = {
          local: nextDataConnectionPort ++,
          remote: null
        };
        this.streams = {
          local: null,
          remote: null
        };
        this.initiator = false;

        this.peerConnection = null;
        this.channels = {};
        this._pending = {};
        this.connectionServers = {iceServers:[{url:'stun:23.21.150.121'}]};
        this.connectionOptions = {
          'optional': [{ 'RtpDataChannels': true }]
        };
        this.channelOptions = {
          RELIABLE: {
            // FIXME: reliable channels do not work in chrome yet
            reliable: false
          },
          UNRELIABLE: {
            reliable: false
          }
        };
      };
      webkitRTCConnectProtocol.prototype = new CommonRTCConnectProtocol();
      webkitRTCConnectProtocol.prototype.constructor = webkitRTCConnectProtocol;

      // FIXME: this could use a cleanup
      var nextConnectionId = 1;
      function Connection(options, peerConnection, streams, channels) {
        var that = this;
        this.id = nextConnectionId ++;
        this.streams = streams;
        this.connected = false;
        this.messageFlag = false;

        this.onmessage = null;
        this.ondisconnect = null;
        this.onerror = null;

        this.peerConnection = peerConnection;

        // DataChannels
        this.channels = channels;

        this.connectionTimer = null;
        this.pingTimer = null;

        function handleConnectionTimerExpired() {
          if(!that.connected)
            return
          this.connectionTimer = null;
          if(false === that.messageFlag) {
            that.channels['@control'].send('ping');
            this.pingTimer = window.setTimeout(handlePingTimerExpired, options['pingTimeout']);
          } else {
            that.messageFlag = false;
            this.connectionTimer = window.setTimeout(handleConnectionTimerExpired, options['connectionTimeout']);
          }
        };
        function handlePingTimerExpired() {
          if(!that.connected)
            return
          this.pingTimer = null;
          if(false === that.messageFlag) {
            that.connected = false;
            that.close();
          } else {
            that.messageFlag = false;
            this.connectionTimer = window.setTimeout(handleConnectionTimerExpired, options['connectionTimeout']);
          }
        };

        Object.keys(this.channels).forEach(function(label) {
          var channel = that.channels[label];
          if(label.match('^@')) // check for internal channels
            return;

          channel.onmessage = function onmessage(message) {
            that.messageFlag = true;
            callback(that, 'onmessage', [label, message]);
          };
        });
        this.channels['@control'].onmessage = function onmessage(message) {
          that.messageFlag = true;
          if(that.connected) {
            var data = message.data;
            if('ping' === data) {
              that.channels['@control'].send('pong');
            } else if('pong' === data) {
              // ok
            } else if('quit' === data) {
              that.close();
            }
          }
        };

        this.connected = true;
        this.connectionTimer = window.setTimeout(handleConnectionTimerExpired, options['connectionTimeout']);
      };
      Connection.prototype.close = function close() {
        console.log('close connection');
        if(this.connected) {
          this.channels['@control'].send('quit');
        }
        this.connected = false;
        this.peerConnection.close();
        if(this.connectionTimer) {
          window.clearInterval(this.connectionTimer);
          this.connectionTimer = null;
        }
        if(this.pingTimer) {
          window.clearInterval(this.pingTimer);
          this.pingTimer = null;
        }
        this.peerConnection = null;
        callback(this, 'ondisconnect', []);
      };
      Connection.prototype.send = function send(label, message) {
        this.channels[label].send(message);
      };

      function PendingConnection(route, incoming) {
        this.route = route;
        this.incoming = incoming;
        this.proceed = true;
      };
      PendingConnection.prototype.accept = function accept() {
        this.proceed = true;
      };
      PendingConnection.prototype.reject = function reject() {
        this.proceed = false;
      };

      function Peer(brokerUrl, options) {
        if(!webrtcSupported)
          throw new Error("WebRTC not supported");

        var that = this;
        this.brokerUrl = brokerUrl;
        this.options = options = options || {};
        options['binaryType'] = options['binaryType'] || 'arraybuffer';
        options['connectionTimeout'] = options['connectionTimeout'] || 10 * ONE_SECOND;
        options['pingTimeout'] = options['pingTimeout'] || 1 * ONE_SECOND;

        this.onconnection = null;
        this.onpending = null;
        this.onroute = null;
        this.onerror = null;

        this.broker = new WebSocketBroker(brokerUrl);
        this.pending = {};

        this.queues = {
          connected: [],
          listening: []
        };

        this.broker.onstatechange = function onstatechange(state, mask) {
          if(that.queues.connected.length && that.broker.checkState(WebSocketBroker.ROUTED)) {
            processDeferredQueue(that.queues.connected);
            if(that.queues.listening.length && that.broker.checkState(WebSocketBroker.LISTENING)) {
              processDeferredQueue(that.queues.listening);
            }
          }
          if(mask & WebSocketBroker.ROUTED) {
            callback(that, 'onroute', that.broker.route);
          }
        };

        this.broker.onreceive = function onreceive(from, message) {
          var handshake;
          if(!that.pending.hasOwnProperty(from)) {
            if(!that.broker.checkState(WebSocketBroker.LISTENING)) {
              return;
            }

            var pendingConnection = new PendingConnection(from, /*incoming*/ true);
            callback(that, 'onpending', [pendingConnection]);
            if(!pendingConnection['proceed'])
              return;

            var handshake = that.pending[from] = new RTCConnectProtocol(that.options);
            handshake.oncomplete = function() {
              var connection = new Connection(that.options, handshake.peerConnection, handshake.streams, handshake.channels);
              connection['route'] = from;
              delete that.pending[from];
              callback(that, 'onconnection', [connection]);
            };
            handshake.onmessage = function(message) {
              that.broker.send(from, message);
            };
            handshake.onerror = function(error) {
              delete that.pending[from];
              callback(that, 'onerror', [error]);
            };
          } else {
            handshake = that.pending[from];
          }
          handshake.process(message);
        };

        this.broker.connect();
      };
      Peer.prototype.listen = function listen(options) {
        if(!this.broker.checkState(WebSocketBroker.ROUTED))
          return defer(this.queues.connected, this, 'listen', [options]);

        options = options || {};
        options['url'] = options['url'] || window.location.toString();
        options['listed'] = (undefined !== options['listed']) ? options['listed'] : true;
        options['metadata'] = options['metadata'] || {};

        this.broker.listen(options);
      };
      Peer.prototype.ignore = function ignore() {
        throw new Error('not implemented');
      };
      Peer.prototype.connect = function connect(route) {
        if(!this.broker.checkState(WebSocketBroker.ROUTED))
          return defer(this.queues.connected, this, 'connect', [route]);

        var that = this;

        if(this.pending.hasOwnProperty(route))
          throw new Error('already connecting to this host'); // FIXME: we can handle this better

        var pendingConnection = new PendingConnection(route, /*incoming*/ false);
        callback(that, 'onpending', [pendingConnection]);
        if(!pendingConnection['proceed'])
          return;

        var handshake = this.pending[route] = new RTCConnectProtocol(this.options);
        handshake.oncomplete = function() {
          var connection = new Connection(this.options, handshake.peerConnection, handshake.streams, handshake.channels);
          connection['route'] = route;
          delete that.pending[route];
          callback(that, 'onconnection', [connection]);
        };
        handshake.onmessage = function(message) {
          that.broker.send(route, message);
        };
        handshake.onerror = function(error) {
          delete that.pending[route];
          fail(that, 'onerror', error);
        };

        handshake.initiate();
      };
      Peer.prototype.close = function close() {
        this.broker.disconnect();
      };
      Peer.E = E;

      return Peer;

    })();;
    var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function _socket(family, type, protocol) {
        var INCOMING_QUEUE_LENGTH = 64;
        var info = FS.createStream({
          addr: null,
          port: null,
          inQueue: new CircularBuffer(INCOMING_QUEUE_LENGTH),
          header: new Uint16Array(2),
          bound: false,
          socket: true,
          stream_ops: {}
        });
        assert(info.fd < 64); // select() assumes socket fd values are in 0..63
        var stream = type == 1;
        if (protocol) {
          assert(stream == (protocol == 6)); // if stream, must be tcp
        }

        // Open the peer connection if we don't have it already
        if (null == Sockets.peer) {
          var host = Module['host'];
          var broker = Module['webrtc']['broker'];
          var session = Module['webrtc']['session'];
          var peer = new Peer(broker);
          var listenOptions = Module['webrtc']['hostOptions'] || {};
          peer.onconnection = function peer_onconnection(connection) {
            console.log('connected');
            var addr;
            /* If this peer is connecting to the host, assign 10.0.0.1 to the host so it can be
               reached at a known address.
             */
            // Assign 10.0.0.1 to the host
            if (session && session === connection['route']) {
              addr = 0x0100000a; // 10.0.0.1
            } else {
              addr = Sockets.addrPool.shift();
            }
            connection['addr'] = addr;
            Sockets.connections[addr] = connection;
            connection.ondisconnect = function connection_ondisconnect() {
              console.log('disconnect');
              // Don't return the host address (10.0.0.1) to the pool
              if (!(session && session === Sockets.connections[addr]['route'])) {
                Sockets.addrPool.push(addr);
              }
              delete Sockets.connections[addr];

              if (Module['webrtc']['ondisconnect'] && 'function' === typeof Module['webrtc']['ondisconnect']) {
                Module['webrtc']['ondisconnect'](peer);
              }
            };
            connection.onerror = function connection_onerror(error) {
              if (Module['webrtc']['onerror'] && 'function' === typeof Module['webrtc']['onerror']) {
                Module['webrtc']['onerror'](error);
              }
            };
            connection.onmessage = function connection_onmessage(label, message) {
              if ('unreliable' === label) {
                handleMessage(addr, message.data);
              }
            }

            if (Module['webrtc']['onconnect'] && 'function' === typeof Module['webrtc']['onconnect']) {
              Module['webrtc']['onconnect'](peer);
            }
          };
          peer.onpending = function peer_onpending(pending) {
            console.log('pending from: ', pending['route'], '; initiated by: ', (pending['incoming']) ? 'remote' : 'local');
          };
          peer.onerror = function peer_onerror(error) {
            console.error(error);
          };
          peer.onroute = function peer_onroute(route) {
            if (Module['webrtc']['onpeer'] && 'function' === typeof Module['webrtc']['onpeer']) {
              Module['webrtc']['onpeer'](peer, route);
            }
          };
          function handleMessage(addr, message) {
            var header = new Uint16Array(message, 0, 2);
            if (Sockets.portmap[header[1]]) {
              Sockets.portmap[header[1]].inQueue.push([addr, message]);
            } else {
              console.log("unable to deliver message: ", addr, header[1], message);
            }
          }
          window.onbeforeunload = function window_onbeforeunload() {
            var ids = Object.keys(Sockets.connections);
            ids.forEach(function(id) {
              Sockets.connections[id].close();
            });
          }
          Sockets.peer = peer;
        }

        function CircularBuffer(max_length) {
          var buffer = new Array(++ max_length);
          var head = 0;
          var tail = 0;
          var length = 0;

          return {
            push: function(element) {
              buffer[tail ++] = element;
              length = Math.min(++ length, max_length - 1);
              tail = tail % max_length;
              if (tail === head) {
                head = (head + 1) % max_length;
              }
            },
            shift: function(element) {
              if (length < 1) return undefined;

              var element = buffer[head];
              -- length;
              head = (head + 1) % max_length;
              return element;
            },
            length: function() {
              return length;
            }
          };
        };
        return info.fd;
      }

    function _SDL_SetError() {
    Module['printErr']('missing function: SDL_SetError'); abort(-1);
    }

    function _connect() {
        // Stub: connection-oriented sockets are not supported yet.
      }

    function _setsockopt(d, level, optname, optval, optlen) {
        console.log('ignoring setsockopt command');
        return 0;
      }


    function __inet_ntop4_raw(addr) {
        return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
      }

    var _ntohs=_htons;

    function _mkport() {
        for(var i = 0; i < Sockets.maxport; ++ i) {
          var port = Sockets.nextport ++;
          Sockets.nextport = (Sockets.nextport > Sockets.maxport) ? 1 : Sockets.nextport;
          if (!Sockets.portmap[port]) {
            return port;
          }
        }
        assert(false, 'all available ports are in use!');
      }function _bind(fd, addr, addrlen) {
        var info = FS.getStream(fd);
        if (!info) return -1;
        if (addr) {
          info.port = _ntohs(getValue(addr + 2, 'i16'));
          // info.addr = getValue(addr + 4, 'i32');
        }
        if (!info.port) {
          info.port = _mkport();
        }
        info.addr = Sockets.localAddr; // 10.0.0.254
        info.host = __inet_ntop4_raw(info.addr);
        info.close = function info_close() {
          Sockets.portmap[info.port] = undefined;
        }
        Sockets.portmap[info.port] = info;
        console.log("bind: ", info.host, info.port);
        info.bound = true;
      }

    function _listen() {
    Module['printErr']('missing function: listen'); abort(-1);
    }

    function _fcntl(fildes, cmd, varargs, dup2) {
        // int fcntl(int fildes, int cmd, ...);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
        var stream = FS.getStream(fildes);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
        switch (cmd) {
          case 0:
            var arg = HEAP32[((varargs)>>2)];
            if (arg < 0) {
              ___setErrNo(ERRNO_CODES.EINVAL);
              return -1;
            }
            var newStream;
            try {
              newStream = FS.open(stream.path, stream.flags, 0, arg);
            } catch (e) {
              FS.handleFSError(e);
              return -1;
            }
            return newStream.fd;
          case 1:
          case 2:
            return 0;  // FD_CLOEXEC makes no sense for a single process.
          case 3:
            return stream.flags;
          case 4:
            var arg = HEAP32[((varargs)>>2)];
            stream.flags |= arg;
            return 0;
          case 12:
          case 12:
            var arg = HEAP32[((varargs)>>2)];
            var offset = 0;
            // We're always unlocked.
            HEAP16[(((arg)+(offset))>>1)]=2;
            return 0;
          case 13:
          case 14:
          case 13:
          case 14:
            // Pretend that the locking is successful.
            return 0;
          case 8:
          case 9:
            // These are for sockets. We don't have them fully implemented yet.
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          default:
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
        }
        // Should never be reached. Only to silence strict warnings.
        return -1;
      }

    function _accept(fd, addr, addrlen) {
        // TODO: webrtc queued incoming connections, etc.
        // For now, the model is that bind does a connect, and we "accept" that one connection,
        // which has host:port the same as ours. We also return the same socket fd.
        var info = FS.getStream(fd);
        if (!info) return -1;
        if (addr) {
          setValue(addr + 4, info.addr, 'i32');
          setValue(addr + 2, info.port, 'i32');
          setValue(addrlen, 16, 'i32');
        }
        return fd;
      }





    function _strerror_r(errnum, strerrbuf, buflen) {
        if (errnum in ERRNO_MESSAGES) {
          if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
            return ___setErrNo(ERRNO_CODES.ERANGE);
          } else {
            var msg = ERRNO_MESSAGES[errnum];
            writeAsciiToMemory(msg, strerrbuf);
            return 0;
          }
        } else {
          return ___setErrNo(ERRNO_CODES.EINVAL);
        }
      }function _strerror(errnum) {
        if (!_strerror.buffer) _strerror.buffer = _malloc(256);
        _strerror_r(errnum, _strerror.buffer, 256);
        return _strerror.buffer;
      }function _perror(s) {
        // void perror(const char *s);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
        var stdout = HEAP32[((_stdout)>>2)];
        if (s) {
          _fputs(s, stdout);
          _fputc(58, stdout);
          _fputc(32, stdout);
        }
        var errnum = HEAP32[((___errno_location())>>2)];
        _puts(_strerror(errnum));
      }

    function _random() {
    Module['printErr']('missing function: random'); abort(-1);
    }

    function _sendto() {
    Module['printErr']('missing function: sendto'); abort(-1);
    }

    function _recvfrom() {
    Module['printErr']('missing function: recvfrom'); abort(-1);
    }

    function _select(nfds, readfds, writefds, exceptfds, timeout) {
        // readfds are supported,
        // writefds checks socket open status
        // exceptfds not supported
        // timeout is always 0 - fully async
        assert(!exceptfds);

        var errorCondition = 0;

        function canRead(info) {
          return info.inQueue.length() > 0;
        }

        function canWrite(info) {
          return true;
        }

        function checkfds(nfds, fds, can) {
          if (!fds) return 0;

          var bitsSet = 0;
          var dstLow  = 0;
          var dstHigh = 0;
          var srcLow  = HEAP32[((fds)>>2)];
          var srcHigh = HEAP32[(((fds)+(4))>>2)];
          nfds = Math.min(64, nfds); // fd sets have 64 bits

          for (var fd = 0; fd < nfds; fd++) {
            var mask = 1 << (fd % 32), int_ = fd < 32 ? srcLow : srcHigh;
            if (int_ & mask) {
              // index is in the set, check if it is ready for read
              var info = FS.getStream(fd);
              if (info && can(info)) {
                // set bit
                fd < 32 ? (dstLow = dstLow | mask) : (dstHigh = dstHigh | mask);
                bitsSet++;
              }
            }
          }

          HEAP32[((fds)>>2)]=dstLow;
          HEAP32[(((fds)+(4))>>2)]=dstHigh;
          return bitsSet;
        }

        var totalHandles = checkfds(nfds, readfds, canRead) + checkfds(nfds, writefds, canWrite);
        if (errorCondition) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        } else {
          return totalHandles;
        }
      }

    function _pthread_mutex_lock() {}

    function _pthread_mutex_unlock() {}

    function ___cxa_guard_acquire(variable) {
        if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
          HEAP8[(variable)]=1;
          return 1;
        }
        return 0;
      }

    function ___cxa_guard_release() {}

    function _pthread_cond_broadcast() {
        return 0;
      }

    function _pthread_cond_wait() {
        return 0;
      }

    function _ungetc(c, stream) {
        // int ungetc(int c, FILE *stream);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
        stream = FS.getStream(stream);
        if (!stream) {
          return -1;
        }
        if (c === -1) {
          // do nothing for EOF character
          return c;
        }
        c = unSign(c & 0xFF);
        stream.ungotten.push(c);
        stream.eof = false;
        return c;
      }

    var _getc=_fgetc;

    function __ZNSt9exceptionD2Ev() {}


    function _abort() {
        Module['abort']();
      }

    function _sysconf(name) {
        // long sysconf(int name);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
        switch(name) {
          case 30: return PAGE_SIZE;
          case 132:
          case 133:
          case 12:
          case 137:
          case 138:
          case 15:
          case 235:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 149:
          case 13:
          case 10:
          case 236:
          case 153:
          case 9:
          case 21:
          case 22:
          case 159:
          case 154:
          case 14:
          case 77:
          case 78:
          case 139:
          case 80:
          case 81:
          case 79:
          case 82:
          case 68:
          case 67:
          case 164:
          case 11:
          case 29:
          case 47:
          case 48:
          case 95:
          case 52:
          case 51:
          case 46:
            return 200809;
          case 27:
          case 246:
          case 127:
          case 128:
          case 23:
          case 24:
          case 160:
          case 161:
          case 181:
          case 182:
          case 242:
          case 183:
          case 184:
          case 243:
          case 244:
          case 245:
          case 165:
          case 178:
          case 179:
          case 49:
          case 50:
          case 168:
          case 169:
          case 175:
          case 170:
          case 171:
          case 172:
          case 97:
          case 76:
          case 32:
          case 173:
          case 35:
            return -1;
          case 176:
          case 177:
          case 7:
          case 155:
          case 8:
          case 157:
          case 125:
          case 126:
          case 92:
          case 93:
          case 129:
          case 130:
          case 131:
          case 94:
          case 91:
            return 1;
          case 74:
          case 60:
          case 69:
          case 70:
          case 4:
            return 1024;
          case 31:
          case 42:
          case 72:
            return 32;
          case 87:
          case 26:
          case 33:
            return 2147483647;
          case 34:
          case 1:
            return 47839;
          case 38:
          case 36:
            return 99;
          case 43:
          case 37:
            return 2048;
          case 0: return 2097152;
          case 3: return 65536;
          case 28: return 32768;
          case 44: return 32767;
          case 75: return 16384;
          case 39: return 1000;
          case 89: return 700;
          case 71: return 256;
          case 40: return 255;
          case 2: return 100;
          case 180: return 64;
          case 25: return 20;
          case 5: return 16;
          case 6: return 6;
          case 73: return 4;
          case 84: return 1;
        }
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }

    function ___cxa_guard_abort() {}


    function _isxdigit(chr) {
        return (chr >= 48 && chr <= 57) ||
               (chr >= 97 && chr <= 102) ||
               (chr >= 65 && chr <= 70);
      }var _isxdigit_l=_isxdigit;

    var _isdigit_l=_isdigit;

    function _catopen(name, oflag) {
        // nl_catd catopen (const char *name, int oflag)
        return -1;
      }

    function _catgets(catd, set_id, msg_id, s) {
        // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
        return s;
      }

    function _catclose(catd) {
        // int catclose (nl_catd catd)
        return 0;
      }

    function _newlocale(mask, locale, base) {
        return _malloc(4);
      }

    function _freelocale(locale) {
        _free(locale);
      }

    function ___ctype_b_loc() {
        // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
        var me = ___ctype_b_loc;
        if (!me.ret) {
          var values = [
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
            49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
            55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
            50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
            49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
            50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
          ];
          var i16size = 2;
          var arr = _malloc(values.length * i16size);
          for (var i = 0; i < values.length; i++) {
            HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
          }
          me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
        }
        return me.ret;
      }

    function ___ctype_tolower_loc() {
        // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
        var me = ___ctype_tolower_loc;
        if (!me.ret) {
          var values = [
            128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
            158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
            188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
            218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
            248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
            104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
            104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
            134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
            164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
            194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
            224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
            254,255
          ];
          var i32size = 4;
          var arr = _malloc(values.length * i32size);
          for (var i = 0; i < values.length; i++) {
            HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
          }
          me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
        }
        return me.ret;
      }

    function ___ctype_toupper_loc() {
        // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
        var me = ___ctype_toupper_loc;
        if (!me.ret) {
          var values = [
            128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
            158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
            188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
            218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
            248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
            145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
            175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
            205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
            235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
          ];
          var i32size = 4;
          var arr = _malloc(values.length * i32size);
          for (var i = 0; i < values.length; i++) {
            HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
          }
          me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
        }
        return me.ret;
      }



    function __isLeapYear(year) {
          return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
      }

    function __arraySum(array, index) {
        var sum = 0;
        for (var i = 0; i <= index; sum += array[i++]);
        return sum;
      }


    var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];

    var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
        var newDate = new Date(date.getTime());
        while(days > 0) {
          var leap = __isLeapYear(newDate.getFullYear());
          var currentMonth = newDate.getMonth();
          var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];

          if (days > daysInCurrentMonth-newDate.getDate()) {
            // we spill over to next month
            days -= (daysInCurrentMonth-newDate.getDate()+1);
            newDate.setDate(1);
            if (currentMonth < 11) {
              newDate.setMonth(currentMonth+1)
            } else {
              newDate.setMonth(0);
              newDate.setFullYear(newDate.getFullYear()+1);
            }
          } else {
            // we stay in current month
            newDate.setDate(newDate.getDate()+days);
            return newDate;
          }
        }

        return newDate;
      }function _strftime(s, maxsize, format, tm) {
        // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html

        var date = {
          tm_sec: HEAP32[((tm)>>2)],
          tm_min: HEAP32[(((tm)+(4))>>2)],
          tm_hour: HEAP32[(((tm)+(8))>>2)],
          tm_mday: HEAP32[(((tm)+(12))>>2)],
          tm_mon: HEAP32[(((tm)+(16))>>2)],
          tm_year: HEAP32[(((tm)+(20))>>2)],
          tm_wday: HEAP32[(((tm)+(24))>>2)],
          tm_yday: HEAP32[(((tm)+(28))>>2)],
          tm_isdst: HEAP32[(((tm)+(32))>>2)]
        };

        var pattern = Pointer_stringify(format);

        // expand format
        var EXPANSION_RULES_1 = {
          '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
          '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
          '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
          '%h': '%b',                       // Equivalent to %b
          '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
          '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
          '%T': '%H:%M:%S',                 // Replaced by the time
          '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
          '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
        };
        for (var rule in EXPANSION_RULES_1) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
        }

        var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

        function leadingSomething(value, digits, character) {
          var str = typeof value === 'number' ? value.toString() : (value || '');
          while (str.length < digits) {
            str = character[0]+str;
          }
          return str;
        };

        function leadingNulls(value, digits) {
          return leadingSomething(value, digits, '0');
        };

        function compareByDay(date1, date2) {
          function sgn(value) {
            return value < 0 ? -1 : (value > 0 ? 1 : 0);
          };

          var compare;
          if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
            if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
              compare = sgn(date1.getDate()-date2.getDate());
            }
          }
          return compare;
        };

        function getFirstWeekStartDate(janFourth) {
            switch (janFourth.getDay()) {
              case 0: // Sunday
                return new Date(janFourth.getFullYear()-1, 11, 29);
              case 1: // Monday
                return janFourth;
              case 2: // Tuesday
                return new Date(janFourth.getFullYear(), 0, 3);
              case 3: // Wednesday
                return new Date(janFourth.getFullYear(), 0, 2);
              case 4: // Thursday
                return new Date(janFourth.getFullYear(), 0, 1);
              case 5: // Friday
                return new Date(janFourth.getFullYear()-1, 11, 31);
              case 6: // Saturday
                return new Date(janFourth.getFullYear()-1, 11, 30);
            }
        };

        function getWeekBasedYear(date) {
            var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);

            var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
            var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);

            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

            if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
              // this date is after the start of the first week of this year
              if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear()+1;
              } else {
                return thisDate.getFullYear();
              }
            } else {
              return thisDate.getFullYear()-1;
            }
        };

        var EXPANSION_RULES_2 = {
          '%a': function(date) {
            return WEEKDAYS[date.tm_wday].substring(0,3);
          },
          '%A': function(date) {
            return WEEKDAYS[date.tm_wday];
          },
          '%b': function(date) {
            return MONTHS[date.tm_mon].substring(0,3);
          },
          '%B': function(date) {
            return MONTHS[date.tm_mon];
          },
          '%C': function(date) {
            var year = date.tm_year+1900;
            return leadingNulls(Math.floor(year/100),2);
          },
          '%d': function(date) {
            return leadingNulls(date.tm_mday, 2);
          },
          '%e': function(date) {
            return leadingSomething(date.tm_mday, 2, ' ');
          },
          '%g': function(date) {
            // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
            // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
            // January 4th, which is also the week that includes the first Thursday of the year, and
            // is also the first week that contains at least four days in the year.
            // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
            // the last week of the preceding year; thus, for Saturday 2nd January 1999,
            // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
            // or 31st is a Monday, it and any following days are part of week 1 of the following year.
            // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.

            return getWeekBasedYear(date).toString().substring(2);
          },
          '%G': function(date) {
            return getWeekBasedYear(date);
          },
          '%H': function(date) {
            return leadingNulls(date.tm_hour, 2);
          },
          '%I': function(date) {
            return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
          },
          '%j': function(date) {
            // Day of the year (001-366)
            return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
          },
          '%m': function(date) {
            return leadingNulls(date.tm_mon+1, 2);
          },
          '%M': function(date) {
            return leadingNulls(date.tm_min, 2);
          },
          '%n': function() {
            return '\n';
          },
          '%p': function(date) {
            if (date.tm_hour > 0 && date.tm_hour < 13) {
              return 'AM';
            } else {
              return 'PM';
            }
          },
          '%S': function(date) {
            return leadingNulls(date.tm_sec, 2);
          },
          '%t': function() {
            return '\t';
          },
          '%u': function(date) {
            var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
            return day.getDay() || 7;
          },
          '%U': function(date) {
            // Replaced by the week number of the year as a decimal number [00,53].
            // The first Sunday of January is the first day of week 1;
            // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
            var janFirst = new Date(date.tm_year+1900, 0, 1);
            var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
            var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);

            // is target date after the first Sunday?
            if (compareByDay(firstSunday, endDate) < 0) {
              // calculate difference in days between first Sunday and endDate
              var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
              var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
              var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
              return leadingNulls(Math.ceil(days/7), 2);
            }

            return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
          },
          '%V': function(date) {
            // Replaced by the week number of the year (Monday as the first day of the week)
            // as a decimal number [01,53]. If the week containing 1 January has four
            // or more days in the new year, then it is considered week 1.
            // Otherwise, it is the last week of the previous year, and the next week is week 1.
            // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
            var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
            var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);

            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

            var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);

            if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
              // if given date is before this years first week, then it belongs to the 53rd week of last year
              return '53';
            }

            if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
              // if given date is after next years first week, then it belongs to the 01th week of next year
              return '01';
            }

            // given date is in between CW 01..53 of this calendar year
            var daysDifference;
            if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
              // first CW of this year starts last year
              daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
            } else {
              // first CW of this year starts this year
              daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
            }
            return leadingNulls(Math.ceil(daysDifference/7), 2);
          },
          '%w': function(date) {
            var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
            return day.getDay();
          },
          '%W': function(date) {
            // Replaced by the week number of the year as a decimal number [00,53].
            // The first Monday of January is the first day of week 1;
            // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
            var janFirst = new Date(date.tm_year, 0, 1);
            var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
            var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);

            // is target date after the first Monday?
            if (compareByDay(firstMonday, endDate) < 0) {
              var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
              var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
              var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
              return leadingNulls(Math.ceil(days/7), 2);
            }
            return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
          },
          '%y': function(date) {
            // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
            return (date.tm_year+1900).toString().substring(2);
          },
          '%Y': function(date) {
            // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
            return date.tm_year+1900;
          },
          '%z': function(date) {
            // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
            // or by no characters if no timezone is determinable.
            // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
            // If tm_isdst is zero, the standard time offset is used.
            // If tm_isdst is greater than zero, the daylight savings time offset is used.
            // If tm_isdst is negative, no characters are returned.
            // FIXME: we cannot determine time zone (or can we?)
            return '';
          },
          '%Z': function(date) {
            // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
            // FIXME: we cannot determine time zone (or can we?)
            return '';
          },
          '%%': function() {
            return '%';
          }
        };
        for (var rule in EXPANSION_RULES_2) {
          if (pattern.indexOf(rule) >= 0) {
            pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
          }
        }

        var bytes = intArrayFromString(pattern, false);
        if (bytes.length > maxsize) {
          return 0;
        }

        writeArrayToMemory(bytes, s);
        return bytes.length-1;
      }var _strftime_l=_strftime;



    function __parseInt64(str, endptr, base, min, max, unsign) {
        var isNegative = false;
        // Skip space.
        while (_isspace(HEAP8[(str)])) str++;

        // Check for a plus/minus sign.
        if (HEAP8[(str)] == 45) {
          str++;
          isNegative = true;
        } else if (HEAP8[(str)] == 43) {
          str++;
        }

        // Find base.
        var ok = false;
        var finalBase = base;
        if (!finalBase) {
          if (HEAP8[(str)] == 48) {
            if (HEAP8[((str+1)|0)] == 120 ||
                HEAP8[((str+1)|0)] == 88) {
              finalBase = 16;
              str += 2;
            } else {
              finalBase = 8;
              ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
            }
          }
        } else if (finalBase==16) {
          if (HEAP8[(str)] == 48) {
            if (HEAP8[((str+1)|0)] == 120 ||
                HEAP8[((str+1)|0)] == 88) {
              str += 2;
            }
          }
        }
        if (!finalBase) finalBase = 10;
        var start = str;

        // Get digits.
        var chr;
        while ((chr = HEAP8[(str)]) != 0) {
          var digit = parseInt(String.fromCharCode(chr), finalBase);
          if (isNaN(digit)) {
            break;
          } else {
            str++;
            ok = true;
          }
        }

        if (!ok) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return ((asm["setTempRet0"](0),0)|0);
        }

        // Set end pointer.
        if (endptr) {
          HEAP32[((endptr)>>2)]=str;
        }

        try {
          var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
          i64Math.fromString(numberString, finalBase, min, max, unsign);
        } catch(e) {
          ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
        }

        return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
      }function _strtoull(str, endptr, base) {
        return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
      }var _strtoull_l=_strtoull;


    function _strtoll(str, endptr, base) {
        return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
      }var _strtoll_l=_strtoll;

    function _uselocale(locale) {
        return 0;
      }


    function _asprintf(s, format, varargs) {
        return _sprintf(-s, format, varargs);
      }function _vasprintf(s, format, va_arg) {
        return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
      }

    function _vsscanf(s, format, va_arg) {
        return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
      }

    function _sbrk(bytes) {
        // Implement a Linux-like 'memory area' for our 'process'.
        // Changes the size of the memory area by |bytes|; returns the
        // address of the previous top ('break') of the memory area
        // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
        var self = _sbrk;
        if (!self.called) {
          DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
          self.called = true;
          assert(Runtime.dynamicAlloc);
          self.alloc = Runtime.dynamicAlloc;
          Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
        }
        var ret = DYNAMICTOP;
        if (bytes != 0) self.alloc(bytes);
        return ret;  // Previous break location.
      }


    function _copysign(a, b) {
        return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
      }var _copysignl=_copysign;

    var _fmodl=_fmod;






  FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
  ___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
  __ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
  if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
  Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
    Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
    Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
    Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
    Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
    Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  ___strtok_state = Runtime.staticAlloc(4);
  ___buildEnvironment(ENV);
  _fputc.ret = allocate([0], "i8", ALLOC_STATIC);
  _fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
  STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

  staticSealed = true; // seal the static portion of memory

  STACK_MAX = STACK_BASE + 5242880;

  DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

  assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

   var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
   var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
  function invoke_viiiii(index,a1,a2,a3,a4,a5) {
    try {
      Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiii(index,a1,a2,a3,a4) {
    try {
      Module["dynCall_viiii"](index,a1,a2,a3,a4);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_i(index) {
    try {
      return Module["dynCall_i"](index);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_vi(index,a1) {
    try {
      Module["dynCall_vi"](index,a1);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_vii(index,a1,a2) {
    try {
      Module["dynCall_vii"](index,a1,a2);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    try {
      return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_iii(index,a1,a2) {
    try {
      return Module["dynCall_iii"](index,a1,a2);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_iiii(index,a1,a2,a3) {
    try {
      return Module["dynCall_iiii"](index,a1,a2,a3);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    try {
      Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_ii(index,a1) {
    try {
      return Module["dynCall_ii"](index,a1);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    try {
      Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    try {
      Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_v(index) {
    try {
      Module["dynCall_v"](index);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    try {
      return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    try {
      Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    try {
      Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    try {
      Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_iiiii(index,a1,a2,a3,a4) {
    try {
      return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
    try {
      return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function invoke_viii(index,a1,a2,a3) {
    try {
      Module["dynCall_viii"](index,a1,a2,a3);
    } catch(e) {
      if (typeof e !== 'number' && e !== 'longjmp') throw e;
      asm["setThrew"](1, 0);
    }
  }

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }

  // EMSCRIPTEN_START_ASM
  var asm= require('./asm')({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_viiiii": invoke_viiiii, "invoke_viiii": invoke_viiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_ii": invoke_ii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_viii": invoke_viii, "_llvm_lifetime_end": _llvm_lifetime_end, "_lseek": _lseek, "_SDL_WaitEvent": _SDL_WaitEvent, "_sysconf": _sysconf, "__scanString": __scanString, "_SDL_JoystickNumHats": _SDL_JoystickNumHats, "_random": _random, "_fclose": _fclose, "_pthread_mutex_lock": _pthread_mutex_lock, "_SDL_JoystickGetButton": _SDL_JoystickGetButton, "_select": _select, "_SDL_JoystickOpen": _SDL_JoystickOpen, "___cxa_end_catch": ___cxa_end_catch, "_strtoull": _strtoull, "_fflush": _fflush, "_strtol": _strtol, "_SDL_ShowCursor": _SDL_ShowCursor, "_strtok": _strtok, "_fwrite": _fwrite, "_llvm_pow_f32": _llvm_pow_f32, "_fputs": _fputs, "_llvm_umul_with_overflow_i32": _llvm_umul_with_overflow_i32, "_SDL_SetAlpha": _SDL_SetAlpha, "_isspace": _isspace, "_localtime": _localtime, "_puts": _puts, "_SDL_NumJoysticks": _SDL_NumJoysticks, "_read": _read, "_ceil": _ceil, "_getpwnam": _getpwnam, "_execl": _execl, "_fileno": _fileno, "_strstr": _strstr, "_fsync": _fsync, "_SDL_SetError": _SDL_SetError, "_SDL_CreateRGBSurface": _SDL_CreateRGBSurface, "_signal": _signal, "_SDL_PauseAudio": _SDL_PauseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "_SDL_LockAudio": _SDL_LockAudio, "_recvfrom": _recvfrom, "___cxa_rethrow": ___cxa_rethrow, "_opendir": _opendir, "_fmod": _fmod, "___resumeException": ___resumeException, "_SDL_FreeSurface": _SDL_FreeSurface, "_strcmp": _strcmp, "_memchr": _memchr, "_strncmp": _strncmp, "_vsscanf": _vsscanf, "_snprintf": _snprintf, "_newlocale": _newlocale, "_fgetc": _fgetc, "_SDL_SetPalette": _SDL_SetPalette, "_readdir": _readdir, "_SDL_OpenAudio": _SDL_OpenAudio, "__getFloat": __getFloat, "_atexit": _atexit, "_mknod": _mknod, "_connect": _connect, "_getsockname": _getsockname, "___cxa_free_exception": ___cxa_free_exception, "_fgets": _fgets, "_close": _close, "_SDL_FillRect": _SDL_FillRect, "_strchr": _strchr, "_pthread_cond_wait": _pthread_cond_wait, "_SDL_LockSurface": _SDL_LockSurface, "_vasprintf": _vasprintf, "___setErrNo": ___setErrNo, "___cxa_guard_abort": ___cxa_guard_abort, "_inet_addr": _inet_addr, "_isxdigit": _isxdigit, "_access": _access, "_ftell": _ftell, "_exit": _exit, "_sprintf": _sprintf, "_asprintf": _asprintf, "___ctype_b_loc": ___ctype_b_loc, "_strrchr": _strrchr, "_freelocale": _freelocale, "_fcntl": _fcntl, "_catopen": _catopen, "_catgets": _catgets, "_strcspn": _strcspn, "_fputc": _fputc, "_llvm_uadd_with_overflow_i32": _llvm_uadd_with_overflow_i32, "_sendto": _sendto, "___cxa_is_number_type": ___cxa_is_number_type, "__arraySum": __arraySum, "___cxa_does_inherit": ___cxa_does_inherit, "___cxa_guard_acquire": ___cxa_guard_acquire, "_localtime_r": _localtime_r, "___cxa_begin_catch": ___cxa_begin_catch, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "_getpeername": _getpeername, "_SDL_GetTicks": _SDL_GetTicks, "__parseInt64": __parseInt64, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_cos": _cos, "_SDL_SetColors": _SDL_SetColors, "_SDL_PollEvent": _SDL_PollEvent, "___cxa_call_unexpected": ___cxa_call_unexpected, "_strpbrk": _strpbrk, "_SDL_Init": _SDL_Init, "_SDL_JoystickName": _SDL_JoystickName, "_copysign": _copysign, "_SDL_JoystickGetAxis": _SDL_JoystickGetAxis, "__exit": __exit, "_strftime": _strftime, "_SDL_WM_GrabInput": _SDL_WM_GrabInput, "_rand": _rand, "_tzset": _tzset, "_fabsf": _fabsf, "__inet_pton4_raw": __inet_pton4_raw, "___cxa_throw": ___cxa_throw, "_SDL_JoystickNumButtons": _SDL_JoystickNumButtons, "_gethostbyname": _gethostbyname, "_toupper": _toupper, "_printf": _printf, "_pread": _pread, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_fopen": _fopen, "_open": _open, "___ctype_tolower_loc": ___ctype_tolower_loc, "_log": _log, "_SDL_UnlockSurface": _SDL_UnlockSurface, "_perror": _perror, "_exp2": _exp2, "_SDL_Flip": _SDL_Flip, "_mkdir": _mkdir, "_isalpha": _isalpha, "_rmdir": _rmdir, "_SDL_InitSubSystem": _SDL_InitSubSystem, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_SDL_GetKeyName": _SDL_GetKeyName, "_SDL_GetError": _SDL_GetError, "_listen": _listen, "_getcwd": _getcwd, "_setsockopt": _setsockopt, "__formatString": __formatString, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_getenv": _getenv, "__ZSt9terminatev": __ZSt9terminatev, "_atoi": _atoi, "_accept": _accept, "_isascii": _isascii, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_SDL_WM_SetCaption": _SDL_WM_SetCaption, "_SDL_JoystickGetHat": _SDL_JoystickGetHat, "_llvm_pow_f64": _llvm_pow_f64, "_sbrk": _sbrk, "_SDL_JoystickClose": _SDL_JoystickClose, "___errno_location": ___errno_location, "_strerror": _strerror, "_fstat": _fstat, "_catclose": _catclose, "_llvm_lifetime_start": _llvm_lifetime_start, "_SDL_Quit": _SDL_Quit, "_strspn": _strspn, "__parseInt": __parseInt, "___cxa_guard_release": ___cxa_guard_release, "_ungetc": _ungetc, "_ftruncate": _ftruncate, "_SDL_UnlockAudio": _SDL_UnlockAudio, "_vsprintf": _vsprintf, "_uselocale": _uselocale, "_rename": _rename, "_vsnprintf": _vsnprintf, "_sscanf": _sscanf, "___assert_fail": ___assert_fail, "_SDL_MapRGB": _SDL_MapRGB, "_fread": _fread, "_strtok_r": _strtok_r, "_SDL_JoystickNumAxes": _SDL_JoystickNumAxes, "_abort": _abort, "_fprintf": _fprintf, "_isdigit": _isdigit, "_strtoll": _strtoll, "_tan": _tan, "___buildEnvironment": ___buildEnvironment, "__addDays": __addDays, "_strncat": _strncat, "_htons": _htons, "_floor": _floor, "__reallyNegative": __reallyNegative, "_fseek": _fseek, "_sqrt": _sqrt, "_write": _write, "_SDL_UpperBlit": _SDL_UpperBlit, "_mkport": _mkport, "_SDL_GetModState": _SDL_GetModState, "___cxa_allocate_exception": ___cxa_allocate_exception, "_sin": _sin, "_stat": _stat, "___cxa_pure_virtual": ___cxa_pure_virtual, "_truncate": _truncate, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_readdir_r": _readdir_r, "___ctype_toupper_loc": ___ctype_toupper_loc, "_closedir": _closedir, "_socket": _socket, "_SDL_JoystickEventState": _SDL_JoystickEventState, "_SDL_Delay": _SDL_Delay, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_llvm_va_end": _llvm_va_end, "_unlink": _unlink, "__inet_ntop4_raw": __inet_ntop4_raw, "_pwrite": _pwrite, "_fabs": _fabs, "__inet_pton6_raw": __inet_pton6_raw, "_strerror_r": _strerror_r, "_bind": _bind, "_SDL_VideoModeOK": _SDL_VideoModeOK, "_atan2": _atan2, "_putenv": _putenv, "__isLeapYear": __isLeapYear, "_llvm_bswap_i16": _llvm_bswap_i16, "_time": _time, "_llvm_bswap_i32": _llvm_bswap_i32, "_SDL_JoystickUpdate": _SDL_JoystickUpdate, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_environ": _environ, "___dso_handle": ___dso_handle, "_stdout": _stdout, "___fsmu8": ___fsmu8, "__ZTISt9exception": __ZTISt9exception, "__ZTVN10__cxxabiv119__pointer_type_infoE": __ZTVN10__cxxabiv119__pointer_type_infoE, "__ZTVN10__cxxabiv117__class_type_infoE": __ZTVN10__cxxabiv117__class_type_infoE, "_stdin": _stdin, "__ZTVN10__cxxabiv120__si_class_type_infoE": __ZTVN10__cxxabiv120__si_class_type_infoE, "__ZTIi": __ZTIi, "__ZTIc": __ZTIc, "_stderr": _stderr }, buffer);

  // EMSCRIPTEN_END_ASM

  var _strlen = Module["_strlen"] = asm["_strlen"];
  var _strcat = Module["_strcat"] = asm["_strcat"];
  var __GLOBAL__I_a1827 = Module["__GLOBAL__I_a1827"] = asm["__GLOBAL__I_a1827"];
  var __GLOBAL__I_a2254 = Module["__GLOBAL__I_a2254"] = asm["__GLOBAL__I_a2254"];
  var _strncasecmp = Module["_strncasecmp"] = asm["_strncasecmp"];
  var _memcmp = Module["_memcmp"] = asm["_memcmp"];
  var _tolower = Module["_tolower"] = asm["_tolower"];
  var _main = Module["_main"] = asm["_main"];
  var _strncpy = Module["_strncpy"] = asm["_strncpy"];
  var _memset = Module["_memset"] = asm["_memset"];
  var _memcpy = Module["_memcpy"] = asm["_memcpy"];
  var _strcasecmp = Module["_strcasecmp"] = asm["_strcasecmp"];
  var __GLOBAL__I_a1038 = Module["__GLOBAL__I_a1038"] = asm["__GLOBAL__I_a1038"];
  var __GLOBAL__I_a2873 = Module["__GLOBAL__I_a2873"] = asm["__GLOBAL__I_a2873"];
  var __GLOBAL__I_a3216 = Module["__GLOBAL__I_a3216"] = asm["__GLOBAL__I_a3216"];
  var _realloc = Module["_realloc"] = asm["_realloc"];
  var __GLOBAL__I_a549 = Module["__GLOBAL__I_a549"] = asm["__GLOBAL__I_a549"];
  var __GLOBAL__I_a1270 = Module["__GLOBAL__I_a1270"] = asm["__GLOBAL__I_a1270"];
  var __GLOBAL__I_a2304 = Module["__GLOBAL__I_a2304"] = asm["__GLOBAL__I_a2304"];
  var __GLOBAL__I_a2417 = Module["__GLOBAL__I_a2417"] = asm["__GLOBAL__I_a2417"];
  var __GLOBAL__I_a2640 = Module["__GLOBAL__I_a2640"] = asm["__GLOBAL__I_a2640"];
  var _free = Module["_free"] = asm["_free"];
  var _memmove = Module["_memmove"] = asm["_memmove"];
  var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
  var _malloc = Module["_malloc"] = asm["_malloc"];
  var __GLOBAL__I_a858 = Module["__GLOBAL__I_a858"] = asm["__GLOBAL__I_a858"];
  var _strcpy = Module["_strcpy"] = asm["_strcpy"];
  var runPostSets = Module["runPostSets"] = asm["runPostSets"];
  var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
  var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
  var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
  var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
  var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
  var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
  var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
  var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
  var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
  var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
  var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
  var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
  var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
  var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
  var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
  var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
  var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
  var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
  var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];

  Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
  Runtime.stackSave = function() { return asm['stackSave']() };
  Runtime.stackRestore = function(top) { asm['stackRestore'](top) };

  // TODO: strip out parts of this we do not need

  //======= begin closure i64 code =======

  // Copyright 2009 The Closure Library Authors. All Rights Reserved.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //      http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS-IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  /**
   * @fileoverview Defines a Long class for representing a 64-bit two's-complement
   * integer value, which faithfully simulates the behavior of a Java "long". This
   * implementation is derived from LongLib in GWT.
   *
   */

  var i64Math = (function() { // Emscripten wrapper
    var goog = { math: {} };


    /**
     * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
     * values as *signed* integers.  See the from* functions below for more
     * convenient ways of constructing Longs.
     *
     * The internal representation of a long is the two given signed, 32-bit values.
     * We use 32-bit pieces because these are the size of integers on which
     * Javascript performs bit-operations.  For operations like addition and
     * multiplication, we split each number into 16-bit pieces, which can easily be
     * multiplied within Javascript's floating-point representation without overflow
     * or change in sign.
     *
     * In the algorithms below, we frequently reduce the negative case to the
     * positive case by negating the input(s) and then post-processing the result.
     * Note that we must ALWAYS check specially whether those values are MIN_VALUE
     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
     * a positive number, it overflows back into a negative).  Not handling this
     * case would often result in infinite recursion.
     *
     * @param {number} low  The low (signed) 32 bits of the long.
     * @param {number} high  The high (signed) 32 bits of the long.
     * @constructor
     */
    goog.math.Long = function(low, high) {
      /**
       * @type {number}
       * @private
       */
      this.low_ = low | 0;  // force into 32 signed bits.

      /**
       * @type {number}
       * @private
       */
      this.high_ = high | 0;  // force into 32 signed bits.
    };


    // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
    // from* methods on which they depend.


    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @private
     */
    goog.math.Long.IntCache_ = {};


    /**
     * Returns a Long representing the given (32-bit) integer value.
     * @param {number} value The 32-bit integer in question.
     * @return {!goog.math.Long} The corresponding Long value.
     */
    goog.math.Long.fromInt = function(value) {
      if (-128 <= value && value < 128) {
        var cachedObj = goog.math.Long.IntCache_[value];
        if (cachedObj) {
          return cachedObj;
        }
      }

      var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
      if (-128 <= value && value < 128) {
        goog.math.Long.IntCache_[value] = obj;
      }
      return obj;
    };


    /**
     * Returns a Long representing the given value, provided that it is a finite
     * number.  Otherwise, zero is returned.
     * @param {number} value The number in question.
     * @return {!goog.math.Long} The corresponding Long value.
     */
    goog.math.Long.fromNumber = function(value) {
      if (isNaN(value) || !isFinite(value)) {
        return goog.math.Long.ZERO;
      } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MIN_VALUE;
      } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else if (value < 0) {
        return goog.math.Long.fromNumber(-value).negate();
      } else {
        return new goog.math.Long(
            (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
            (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
      }
    };


    /**
     * Returns a Long representing the 64-bit integer that comes by concatenating
     * the given high and low bits.  Each is assumed to use 32 bits.
     * @param {number} lowBits The low 32-bits.
     * @param {number} highBits The high 32-bits.
     * @return {!goog.math.Long} The corresponding Long value.
     */
    goog.math.Long.fromBits = function(lowBits, highBits) {
      return new goog.math.Long(lowBits, highBits);
    };


    /**
     * Returns a Long representation of the given string, written using the given
     * radix.
     * @param {string} str The textual representation of the Long.
     * @param {number=} opt_radix The radix in which the text is written.
     * @return {!goog.math.Long} The corresponding Long value.
     */
    goog.math.Long.fromString = function(str, opt_radix) {
      if (str.length == 0) {
        throw Error('number format error: empty string');
      }

      var radix = opt_radix || 10;
      if (radix < 2 || 36 < radix) {
        throw Error('radix out of range: ' + radix);
      }

      if (str.charAt(0) == '-') {
        return goog.math.Long.fromString(str.substring(1), radix).negate();
      } else if (str.indexOf('-') >= 0) {
        throw Error('number format error: interior "-" character: ' + str);
      }

      // Do several (8) digits each time through the loop, so as to
      // minimize the calls to the very expensive emulated div.
      var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

      var result = goog.math.Long.ZERO;
      for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i);
        var value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
          var power = goog.math.Long.fromNumber(Math.pow(radix, size));
          result = result.multiply(power).add(goog.math.Long.fromNumber(value));
        } else {
          result = result.multiply(radixToPower);
          result = result.add(goog.math.Long.fromNumber(value));
        }
      }
      return result;
    };


    // NOTE: the compiler should inline these constant values below and then remove
    // these variables, so there should be no runtime penalty for these.


    /**
     * Number used repeated below in calculations.  This must appear before the
     * first call to any from* function below.
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


    /**
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


    /**
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_32_DBL_ =
        goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


    /**
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_31_DBL_ =
        goog.math.Long.TWO_PWR_32_DBL_ / 2;


    /**
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_48_DBL_ =
        goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


    /**
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_64_DBL_ =
        goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


    /**
     * @type {number}
     * @private
     */
    goog.math.Long.TWO_PWR_63_DBL_ =
        goog.math.Long.TWO_PWR_64_DBL_ / 2;


    /** @type {!goog.math.Long} */
    goog.math.Long.ZERO = goog.math.Long.fromInt(0);


    /** @type {!goog.math.Long} */
    goog.math.Long.ONE = goog.math.Long.fromInt(1);


    /** @type {!goog.math.Long} */
    goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


    /** @type {!goog.math.Long} */
    goog.math.Long.MAX_VALUE =
        goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


    /** @type {!goog.math.Long} */
    goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


    /**
     * @type {!goog.math.Long}
     * @private
     */
    goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


    /** @return {number} The value, assuming it is a 32-bit integer. */
    goog.math.Long.prototype.toInt = function() {
      return this.low_;
    };


    /** @return {number} The closest floating-point representation to this value. */
    goog.math.Long.prototype.toNumber = function() {
      return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
             this.getLowBitsUnsigned();
    };


    /**
     * @param {number=} opt_radix The radix in which the text should be written.
     * @return {string} The textual representation of this value.
     */
    goog.math.Long.prototype.toString = function(opt_radix) {
      var radix = opt_radix || 10;
      if (radix < 2 || 36 < radix) {
        throw Error('radix out of range: ' + radix);
      }

      if (this.isZero()) {
        return '0';
      }

      if (this.isNegative()) {
        if (this.equals(goog.math.Long.MIN_VALUE)) {
          // We need to change the Long value before it can be negated, so we remove
          // the bottom-most digit in this base and then recurse to do the rest.
          var radixLong = goog.math.Long.fromNumber(radix);
          var div = this.div(radixLong);
          var rem = div.multiply(radixLong).subtract(this);
          return div.toString(radix) + rem.toInt().toString(radix);
        } else {
          return '-' + this.negate().toString(radix);
        }
      }

      // Do several (6) digits each time through the loop, so as to
      // minimize the calls to the very expensive emulated div.
      var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

      var rem = this;
      var result = '';
      while (true) {
        var remDiv = rem.div(radixToPower);
        var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
        var digits = intval.toString(radix);

        rem = remDiv;
        if (rem.isZero()) {
          return digits + result;
        } else {
          while (digits.length < 6) {
            digits = '0' + digits;
          }
          result = '' + digits + result;
        }
      }
    };


    /** @return {number} The high 32-bits as a signed value. */
    goog.math.Long.prototype.getHighBits = function() {
      return this.high_;
    };


    /** @return {number} The low 32-bits as a signed value. */
    goog.math.Long.prototype.getLowBits = function() {
      return this.low_;
    };


    /** @return {number} The low 32-bits as an unsigned value. */
    goog.math.Long.prototype.getLowBitsUnsigned = function() {
      return (this.low_ >= 0) ?
          this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
    };


    /**
     * @return {number} Returns the number of bits needed to represent the absolute
     *     value of this Long.
     */
    goog.math.Long.prototype.getNumBitsAbs = function() {
      if (this.isNegative()) {
        if (this.equals(goog.math.Long.MIN_VALUE)) {
          return 64;
        } else {
          return this.negate().getNumBitsAbs();
        }
      } else {
        var val = this.high_ != 0 ? this.high_ : this.low_;
        for (var bit = 31; bit > 0; bit--) {
          if ((val & (1 << bit)) != 0) {
            break;
          }
        }
        return this.high_ != 0 ? bit + 33 : bit + 1;
      }
    };


    /** @return {boolean} Whether this value is zero. */
    goog.math.Long.prototype.isZero = function() {
      return this.high_ == 0 && this.low_ == 0;
    };


    /** @return {boolean} Whether this value is negative. */
    goog.math.Long.prototype.isNegative = function() {
      return this.high_ < 0;
    };


    /** @return {boolean} Whether this value is odd. */
    goog.math.Long.prototype.isOdd = function() {
      return (this.low_ & 1) == 1;
    };


    /**
     * @param {goog.math.Long} other Long to compare against.
     * @return {boolean} Whether this Long equals the other.
     */
    goog.math.Long.prototype.equals = function(other) {
      return (this.high_ == other.high_) && (this.low_ == other.low_);
    };


    /**
     * @param {goog.math.Long} other Long to compare against.
     * @return {boolean} Whether this Long does not equal the other.
     */
    goog.math.Long.prototype.notEquals = function(other) {
      return (this.high_ != other.high_) || (this.low_ != other.low_);
    };


    /**
     * @param {goog.math.Long} other Long to compare against.
     * @return {boolean} Whether this Long is less than the other.
     */
    goog.math.Long.prototype.lessThan = function(other) {
      return this.compare(other) < 0;
    };


    /**
     * @param {goog.math.Long} other Long to compare against.
     * @return {boolean} Whether this Long is less than or equal to the other.
     */
    goog.math.Long.prototype.lessThanOrEqual = function(other) {
      return this.compare(other) <= 0;
    };


    /**
     * @param {goog.math.Long} other Long to compare against.
     * @return {boolean} Whether this Long is greater than the other.
     */
    goog.math.Long.prototype.greaterThan = function(other) {
      return this.compare(other) > 0;
    };


    /**
     * @param {goog.math.Long} other Long to compare against.
     * @return {boolean} Whether this Long is greater than or equal to the other.
     */
    goog.math.Long.prototype.greaterThanOrEqual = function(other) {
      return this.compare(other) >= 0;
    };


    /**
     * Compares this Long with the given one.
     * @param {goog.math.Long} other Long to compare against.
     * @return {number} 0 if they are the same, 1 if the this is greater, and -1
     *     if the given one is greater.
     */
    goog.math.Long.prototype.compare = function(other) {
      if (this.equals(other)) {
        return 0;
      }

      var thisNeg = this.isNegative();
      var otherNeg = other.isNegative();
      if (thisNeg && !otherNeg) {
        return -1;
      }
      if (!thisNeg && otherNeg) {
        return 1;
      }

      // at this point, the signs are the same, so subtraction will not overflow
      if (this.subtract(other).isNegative()) {
        return -1;
      } else {
        return 1;
      }
    };


    /** @return {!goog.math.Long} The negation of this value. */
    goog.math.Long.prototype.negate = function() {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.MIN_VALUE;
      } else {
        return this.not().add(goog.math.Long.ONE);
      }
    };


    /**
     * Returns the sum of this and the given Long.
     * @param {goog.math.Long} other Long to add to this one.
     * @return {!goog.math.Long} The sum of this and the given Long.
     */
    goog.math.Long.prototype.add = function(other) {
      // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

      var a48 = this.high_ >>> 16;
      var a32 = this.high_ & 0xFFFF;
      var a16 = this.low_ >>> 16;
      var a00 = this.low_ & 0xFFFF;

      var b48 = other.high_ >>> 16;
      var b32 = other.high_ & 0xFFFF;
      var b16 = other.low_ >>> 16;
      var b00 = other.low_ & 0xFFFF;

      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 + b00;
      c16 += c00 >>> 16;
      c00 &= 0xFFFF;
      c16 += a16 + b16;
      c32 += c16 >>> 16;
      c16 &= 0xFFFF;
      c32 += a32 + b32;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c48 += a48 + b48;
      c48 &= 0xFFFF;
      return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
    };


    /**
     * Returns the difference of this and the given Long.
     * @param {goog.math.Long} other Long to subtract from this.
     * @return {!goog.math.Long} The difference of this and the given Long.
     */
    goog.math.Long.prototype.subtract = function(other) {
      return this.add(other.negate());
    };


    /**
     * Returns the product of this and the given long.
     * @param {goog.math.Long} other Long to multiply with this.
     * @return {!goog.math.Long} The product of this and the other.
     */
    goog.math.Long.prototype.multiply = function(other) {
      if (this.isZero()) {
        return goog.math.Long.ZERO;
      } else if (other.isZero()) {
        return goog.math.Long.ZERO;
      }

      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
      }

      if (this.isNegative()) {
        if (other.isNegative()) {
          return this.negate().multiply(other.negate());
        } else {
          return this.negate().multiply(other).negate();
        }
      } else if (other.isNegative()) {
        return this.multiply(other.negate()).negate();
      }

      // If both longs are small, use float multiplication
      if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
          other.lessThan(goog.math.Long.TWO_PWR_24_)) {
        return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
      }

      // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
      // We can skip products that would overflow.

      var a48 = this.high_ >>> 16;
      var a32 = this.high_ & 0xFFFF;
      var a16 = this.low_ >>> 16;
      var a00 = this.low_ & 0xFFFF;

      var b48 = other.high_ >>> 16;
      var b32 = other.high_ & 0xFFFF;
      var b16 = other.low_ >>> 16;
      var b00 = other.low_ & 0xFFFF;

      var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
      c00 += a00 * b00;
      c16 += c00 >>> 16;
      c00 &= 0xFFFF;
      c16 += a16 * b00;
      c32 += c16 >>> 16;
      c16 &= 0xFFFF;
      c16 += a00 * b16;
      c32 += c16 >>> 16;
      c16 &= 0xFFFF;
      c32 += a32 * b00;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c32 += a16 * b16;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c32 += a00 * b32;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
      c48 &= 0xFFFF;
      return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
    };


    /**
     * Returns this Long divided by the given one.
     * @param {goog.math.Long} other Long by which to divide.
     * @return {!goog.math.Long} This Long divided by the given one.
     */
    goog.math.Long.prototype.div = function(other) {
      if (other.isZero()) {
        throw Error('division by zero');
      } else if (this.isZero()) {
        return goog.math.Long.ZERO;
      }

      if (this.equals(goog.math.Long.MIN_VALUE)) {
        if (other.equals(goog.math.Long.ONE) ||
            other.equals(goog.math.Long.NEG_ONE)) {
          return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
        } else if (other.equals(goog.math.Long.MIN_VALUE)) {
          return goog.math.Long.ONE;
        } else {
          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
          var halfThis = this.shiftRight(1);
          var approx = halfThis.div(other).shiftLeft(1);
          if (approx.equals(goog.math.Long.ZERO)) {
            return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
          } else {
            var rem = this.subtract(other.multiply(approx));
            var result = approx.add(rem.div(other));
            return result;
          }
        }
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ZERO;
      }

      if (this.isNegative()) {
        if (other.isNegative()) {
          return this.negate().div(other.negate());
        } else {
          return this.negate().div(other).negate();
        }
      } else if (other.isNegative()) {
        return this.div(other.negate()).negate();
      }

      // Repeat the following until the remainder is less than other:  find a
      // floating-point that approximates remainder / other *from below*, add this
      // into the result, and subtract it from the remainder.  It is critical that
      // the approximate value is less than or equal to the real value so that the
      // remainder never becomes negative.
      var res = goog.math.Long.ZERO;
      var rem = this;
      while (rem.greaterThanOrEqual(other)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2);
        var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        var approxRes = goog.math.Long.fromNumber(approx);
        var approxRem = approxRes.multiply(other);
        while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
          approx -= delta;
          approxRes = goog.math.Long.fromNumber(approx);
          approxRem = approxRes.multiply(other);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero()) {
          approxRes = goog.math.Long.ONE;
        }

        res = res.add(approxRes);
        rem = rem.subtract(approxRem);
      }
      return res;
    };


    /**
     * Returns this Long modulo the given one.
     * @param {goog.math.Long} other Long by which to mod.
     * @return {!goog.math.Long} This Long modulo the given one.
     */
    goog.math.Long.prototype.modulo = function(other) {
      return this.subtract(this.div(other).multiply(other));
    };


    /** @return {!goog.math.Long} The bitwise-NOT of this value. */
    goog.math.Long.prototype.not = function() {
      return goog.math.Long.fromBits(~this.low_, ~this.high_);
    };


    /**
     * Returns the bitwise-AND of this Long and the given one.
     * @param {goog.math.Long} other The Long with which to AND.
     * @return {!goog.math.Long} The bitwise-AND of this and the other.
     */
    goog.math.Long.prototype.and = function(other) {
      return goog.math.Long.fromBits(this.low_ & other.low_,
                                     this.high_ & other.high_);
    };


    /**
     * Returns the bitwise-OR of this Long and the given one.
     * @param {goog.math.Long} other The Long with which to OR.
     * @return {!goog.math.Long} The bitwise-OR of this and the other.
     */
    goog.math.Long.prototype.or = function(other) {
      return goog.math.Long.fromBits(this.low_ | other.low_,
                                     this.high_ | other.high_);
    };


    /**
     * Returns the bitwise-XOR of this Long and the given one.
     * @param {goog.math.Long} other The Long with which to XOR.
     * @return {!goog.math.Long} The bitwise-XOR of this and the other.
     */
    goog.math.Long.prototype.xor = function(other) {
      return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                     this.high_ ^ other.high_);
    };


    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number} numBits The number of bits by which to shift.
     * @return {!goog.math.Long} This shifted to the left by the given amount.
     */
    goog.math.Long.prototype.shiftLeft = function(numBits) {
      numBits &= 63;
      if (numBits == 0) {
        return this;
      } else {
        var low = this.low_;
        if (numBits < 32) {
          var high = this.high_;
          return goog.math.Long.fromBits(
              low << numBits,
              (high << numBits) | (low >>> (32 - numBits)));
        } else {
          return goog.math.Long.fromBits(0, low << (numBits - 32));
        }
      }
    };


    /**
     * Returns this Long with bits shifted to the right by the given amount.
     * @param {number} numBits The number of bits by which to shift.
     * @return {!goog.math.Long} This shifted to the right by the given amount.
     */
    goog.math.Long.prototype.shiftRight = function(numBits) {
      numBits &= 63;
      if (numBits == 0) {
        return this;
      } else {
        var high = this.high_;
        if (numBits < 32) {
          var low = this.low_;
          return goog.math.Long.fromBits(
              (low >>> numBits) | (high << (32 - numBits)),
              high >> numBits);
        } else {
          return goog.math.Long.fromBits(
              high >> (numBits - 32),
              high >= 0 ? 0 : -1);
        }
      }
    };


    /**
     * Returns this Long with bits shifted to the right by the given amount, with
     * the new top bits matching the current sign bit.
     * @param {number} numBits The number of bits by which to shift.
     * @return {!goog.math.Long} This shifted to the right by the given amount, with
     *     zeros placed into the new leading bits.
     */
    goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
      numBits &= 63;
      if (numBits == 0) {
        return this;
      } else {
        var high = this.high_;
        if (numBits < 32) {
          var low = this.low_;
          return goog.math.Long.fromBits(
              (low >>> numBits) | (high << (32 - numBits)),
              high >>> numBits);
        } else if (numBits == 32) {
          return goog.math.Long.fromBits(high, 0);
        } else {
          return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
        }
      }
    };

    //======= begin jsbn =======

    var navigator = { appName: 'Modern Browser' }; // polyfill a little

    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // http://www-cs-students.stanford.edu/~tjw/jsbn/

    /*
     * Copyright (c) 2003-2005  Tom Wu
     * All Rights Reserved.
     *
     * Permission is hereby granted, free of charge, to any person obtaining
     * a copy of this software and associated documentation files (the
     * "Software"), to deal in the Software without restriction, including
     * without limitation the rights to use, copy, modify, merge, publish,
     * distribute, sublicense, and/or sell copies of the Software, and to
     * permit persons to whom the Software is furnished to do so, subject to
     * the following conditions:
     *
     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
     * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
     *
     * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
     * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
     * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
     * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
     * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
     *
     * In addition, the following condition applies:
     *
     * All redistributions must retain an intact copy of this copyright notice
     * and disclaimer.
     */

    // Basic JavaScript BN library - subset useful for RSA encryption.

    // Bits per digit
    var dbits;

    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary&0xffffff)==0xefcafe);

    // (public) Constructor
    function BigInteger(a,b,c) {
      if(a != null)
        if("number" == typeof a) this.fromNumber(a,b,c);
        else if(b == null && "string" != typeof a) this.fromString(a,256);
        else this.fromString(a,b);
    }

    // return new, unset BigInteger
    function nbi() { return new BigInteger(null); }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.

    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i,x,w,j,c,n) {
      while(--n >= 0) {
        var v = x*this[i++]+w[j]+c;
        c = Math.floor(v/0x4000000);
        w[j++] = v&0x3ffffff;
      }
      return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i,x,w,j,c,n) {
      var xl = x&0x7fff, xh = x>>15;
      while(--n >= 0) {
        var l = this[i]&0x7fff;
        var h = this[i++]>>15;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
        w[j++] = l&0x3fffffff;
      }
      return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i,x,w,j,c,n) {
      var xl = x&0x3fff, xh = x>>14;
      while(--n >= 0) {
        var l = this[i]&0x3fff;
        var h = this[i++]>>14;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x3fff)<<14)+w[j]+c;
        c = (l>>28)+(m>>14)+xh*h;
        w[j++] = l&0xfffffff;
      }
      return c;
    }
    if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
      BigInteger.prototype.am = am2;
      dbits = 30;
    }
    else if(j_lm && (navigator.appName != "Netscape")) {
      BigInteger.prototype.am = am1;
      dbits = 26;
    }
    else { // Mozilla/Netscape seems to prefer am3
      BigInteger.prototype.am = am3;
      dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1<<dbits)-1);
    BigInteger.prototype.DV = (1<<dbits);

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2,BI_FP);
    BigInteger.prototype.F1 = BI_FP-dbits;
    BigInteger.prototype.F2 = 2*dbits-BI_FP;

    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,vv;
    rr = "0".charCodeAt(0);
    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) { return BI_RM.charAt(n); }
    function intAt(s,i) {
      var c = BI_RC[s.charCodeAt(i)];
      return (c==null)?-1:c;
    }

    // (protected) copy this to r
    function bnpCopyTo(r) {
      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
      this.t = 1;
      this.s = (x<0)?-1:0;
      if(x > 0) this[0] = x;
      else if(x < -1) this[0] = x+DV;
      else this.t = 0;
    }

    // return bigint initialized to value
    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

    // (protected) set from string and radix
    function bnpFromString(s,b) {
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 256) k = 8; // byte array
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else { this.fromRadix(s,b); return; }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while(--i >= 0) {
        var x = (k==8)?s[i]&0xff:intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-") mi = true;
          continue;
        }
        mi = false;
        if(sh == 0)
          this[this.t++] = x;
        else if(sh+k > this.DB) {
          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
          this[this.t++] = (x>>(this.DB-sh));
        }
        else
          this[this.t-1] |= x<<sh;
        sh += k;
        if(sh >= this.DB) sh -= this.DB;
      }
      if(k == 8 && (s[0]&0x80) != 0) {
        this.s = -1;
        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
      }
      this.clamp();
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) clamp off excess high words
    function bnpClamp() {
      var c = this.s&this.DM;
      while(this.t > 0 && this[this.t-1] == c) --this.t;
    }

    // (public) return string representation in given radix
    function bnToString(b) {
      if(this.s < 0) return "-"+this.negate().toString(b);
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else return this.toRadix(b);
      var km = (1<<k)-1, d, m = false, r = "", i = this.t;
      var p = this.DB-(i*this.DB)%k;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
        while(i >= 0) {
          if(p < k) {
            d = (this[i]&((1<<p)-1))<<(k-p);
            d |= this[--i]>>(p+=this.DB-k);
          }
          else {
            d = (this[i]>>(p-=k))&km;
            if(p <= 0) { p += this.DB; --i; }
          }
          if(d > 0) m = true;
          if(m) r += int2char(d);
        }
      }
      return m?r:"0";
    }

    // (public) -this
    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

    // (public) |this|
    function bnAbs() { return (this.s<0)?this.negate():this; }

    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
      var r = this.s-a.s;
      if(r != 0) return r;
      var i = this.t;
      r = i-a.t;
      if(r != 0) return (this.s<0)?-r:r;
      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
      return 0;
    }

    // returns bit length of the integer x
    function nbits(x) {
      var r = 1, t;
      if((t=x>>>16) != 0) { x = t; r += 16; }
      if((t=x>>8) != 0) { x = t; r += 8; }
      if((t=x>>4) != 0) { x = t; r += 4; }
      if((t=x>>2) != 0) { x = t; r += 2; }
      if((t=x>>1) != 0) { x = t; r += 1; }
      return r;
    }

    // (public) return the number of bits in "this"
    function bnBitLength() {
      if(this.t <= 0) return 0;
      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
    }

    // (protected) r = this << n*DB
    function bnpDLShiftTo(n,r) {
      var i;
      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
      for(i = n-1; i >= 0; --i) r[i] = 0;
      r.t = this.t+n;
      r.s = this.s;
    }

    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n,r) {
      for(var i = n; i < this.t; ++i) r[i-n] = this[i];
      r.t = Math.max(this.t-n,0);
      r.s = this.s;
    }

    // (protected) r = this << n
    function bnpLShiftTo(n,r) {
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<cbs)-1;
      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
      for(i = this.t-1; i >= 0; --i) {
        r[i+ds+1] = (this[i]>>cbs)|c;
        c = (this[i]&bm)<<bs;
      }
      for(i = ds-1; i >= 0; --i) r[i] = 0;
      r[ds] = c;
      r.t = this.t+ds+1;
      r.s = this.s;
      r.clamp();
    }

    // (protected) r = this >> n
    function bnpRShiftTo(n,r) {
      r.s = this.s;
      var ds = Math.floor(n/this.DB);
      if(ds >= this.t) { r.t = 0; return; }
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<bs)-1;
      r[0] = this[ds]>>bs;
      for(var i = ds+1; i < this.t; ++i) {
        r[i-ds-1] |= (this[i]&bm)<<cbs;
        r[i-ds] = this[i]>>bs;
      }
      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
      r.t = this.t-ds;
      r.clamp();
    }

    // (protected) r = this - a
    function bnpSubTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]-a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c -= a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c -= a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = (c<0)?-1:0;
      if(c < -1) r[i++] = this.DV+c;
      else if(c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a,r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i+y.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
      r.s = 0;
      r.clamp();
      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2*x.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < x.t-1; ++i) {
        var c = x.am(i,x[i],r,2*i,0,1);
        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
          r[i+x.t] -= x.DV;
          r[i+x.t+1] = 1;
        }
      }
      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
      r.s = 0;
      r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m,q,r) {
      var pm = m.abs();
      if(pm.t <= 0) return;
      var pt = this.abs();
      if(pt.t < pm.t) {
        if(q != null) q.fromInt(0);
        if(r != null) this.copyTo(r);
        return;
      }
      if(r == null) r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
      else { pm.copyTo(y); pt.copyTo(r); }
      var ys = y.t;
      var y0 = y[ys-1];
      if(y0 == 0) return;
      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
      var i = r.t, j = i-ys, t = (q==null)?nbi():q;
      y.dlShiftTo(j,t);
      if(r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t,r);
      }
      BigInteger.ONE.dlShiftTo(ys,t);
      t.subTo(y,y);	// "negative" y so we can replace sub with am later
      while(y.t < ys) y[y.t++] = 0;
      while(--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
          y.dlShiftTo(j,t);
          r.subTo(t,r);
          while(r[i] < --qd) r.subTo(t,r);
        }
      }
      if(q != null) {
        r.drShiftTo(ys,q);
        if(ts != ms) BigInteger.ZERO.subTo(q,q);
      }
      r.t = ys;
      r.clamp();
      if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
      if(ts < 0) BigInteger.ZERO.subTo(r,r);
    }

    // (public) this mod a
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a,null,r);
      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
      return r;
    }

    // Modular reduction using "classic" algorithm
    function Classic(m) { this.m = m; }
    function cConvert(x) {
      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
      else return x;
    }
    function cRevert(x) { return x; }
    function cReduce(x) { x.divRemTo(this.m,null,x); }
    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
      if(this.t < 1) return 0;
      var x = this[0];
      if((x&1) == 0) return 0;
      var y = x&3;		// y == 1/x mod 2^2
      y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
      y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
      // last step - calculate inverse mod DV directly;
      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
      y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
      // we really want the negative inverse, and -DV < y < DV
      return (y>0)?this.DV-y:-y;
    }

    // Montgomery reduction
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp&0x7fff;
      this.mph = this.mp>>15;
      this.um = (1<<(m.DB-15))-1;
      this.mt2 = 2*m.t;
    }

    // xR mod m
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t,r);
      r.divRemTo(this.m,null,r);
      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
      return r;
    }

    // x/R mod m
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }

    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
      while(x.t <= this.mt2)	// pad x so am has enough room later
        x[x.t++] = 0;
      for(var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i]&0x7fff;
        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i+this.m.t;
        x[j] += this.m.am(0,u0,x,i,0,this.m.t);
        // propagate carry
        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
      }
      x.clamp();
      x.drShiftTo(this.m.t,x);
      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = "x^2/R mod m"; x != r
    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = "xy/R mod m"; x,y != r
    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even
    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e,z) {
      if(e > 0xffffffff || e < 1) return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
      g.copyTo(r);
      while(--i >= 0) {
        z.sqrTo(r,r2);
        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
        else { var t = r; r = r2; r2 = t; }
      }
      return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e,m) {
      var z;
      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
      return this.exp(e,z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    // jsbn2 stuff

    // (protected) convert from radix string
    function bnpFromRadix(s,b) {
      this.fromInt(0);
      if(b == null) b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
      for(var i = 0; i < s.length; ++i) {
        var x = intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
          continue;
        }
        w = b*w+x;
        if(++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w,0);
          j = 0;
          w = 0;
        }
      }
      if(j > 0) {
        this.dMultiply(Math.pow(b,j));
        this.dAddOffset(w,0);
      }
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) return x s.t. r^x < DV
    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

    // (public) 0 if this == 0, 1 if this > 0
    function bnSigNum() {
      if(this.s < 0) return -1;
      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
      else return 1;
    }

    // (protected) this *= n, this >= 0, 1 < n < DV
    function bnpDMultiply(n) {
      this[this.t] = this.am(0,n-1,this,0,0,this.t);
      ++this.t;
      this.clamp();
    }

    // (protected) this += n << w words, this >= 0
    function bnpDAddOffset(n,w) {
      if(n == 0) return;
      while(this.t <= w) this[this.t++] = 0;
      this[w] += n;
      while(this[w] >= this.DV) {
        this[w] -= this.DV;
        if(++w >= this.t) this[this.t++] = 0;
        ++this[w];
      }
    }

    // (protected) convert to radix string
    function bnpToRadix(b) {
      if(b == null) b = 10;
      if(this.signum() == 0 || b < 2 || b > 36) return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b,cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d,y,z);
      while(y.signum() > 0) {
        r = (a+z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d,y,z);
      }
      return z.intValue().toString(b) + r;
    }

    // (public) return value as integer
    function bnIntValue() {
      if(this.s < 0) {
        if(this.t == 1) return this[0]-this.DV;
        else if(this.t == 0) return -1;
      }
      else if(this.t == 1) return this[0];
      else if(this.t == 0) return 0;
      // assumes 16 < DB < 32
      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
    }

    // (protected) r = this + a
    function bnpAddTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]+a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c += a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c += a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = (c<0)?-1:0;
      if(c > 0) r[i++] = c;
      else if(c < -1) r[i++] = this.DV+c;
      r.t = i;
      r.clamp();
    }

    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.addTo = bnpAddTo;

    //======= end jsbn =======

    // Emscripten wrapper
    var Wrapper = {
      abs: function(l, h) {
        var x = new goog.math.Long(l, h);
        var ret;
        if (x.isNegative()) {
          ret = x.negate();
        } else {
          ret = x;
        }
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      },
      ensureTemps: function() {
        if (Wrapper.ensuredTemps) return;
        Wrapper.ensuredTemps = true;
        Wrapper.two32 = new BigInteger();
        Wrapper.two32.fromString('4294967296', 10);
        Wrapper.two64 = new BigInteger();
        Wrapper.two64.fromString('18446744073709551616', 10);
        Wrapper.temp1 = new BigInteger();
        Wrapper.temp2 = new BigInteger();
      },
      lh2bignum: function(l, h) {
        var a = new BigInteger();
        a.fromString(h.toString(), 10);
        var b = new BigInteger();
        a.multiplyTo(Wrapper.two32, b);
        var c = new BigInteger();
        c.fromString(l.toString(), 10);
        var d = new BigInteger();
        c.addTo(b, d);
        return d;
      },
      stringify: function(l, h, unsigned) {
        var ret = new goog.math.Long(l, h).toString();
        if (unsigned && ret[0] == '-') {
          // unsign slowly using jsbn bignums
          Wrapper.ensureTemps();
          var bignum = new BigInteger();
          bignum.fromString(ret, 10);
          ret = new BigInteger();
          Wrapper.two64.addTo(bignum, ret);
          ret = ret.toString(10);
        }
        return ret;
      },
      fromString: function(str, base, min, max, unsigned) {
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(str, base);
        var bigmin = new BigInteger();
        bigmin.fromString(min, 10);
        var bigmax = new BigInteger();
        bigmax.fromString(max, 10);
        if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
          var temp = new BigInteger();
          bignum.addTo(Wrapper.two64, temp);
          bignum = temp;
        }
        var error = false;
        if (bignum.compareTo(bigmin) < 0) {
          bignum = bigmin;
          error = true;
        } else if (bignum.compareTo(bigmax) > 0) {
          bignum = bigmax;
          error = true;
        }
        var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
        if (error) throw 'range error';
      }
    };
    return Wrapper;
  })();

  //======= end closure i64 code =======



  // === Auto-generated postamble setup entry stuff ===

  if (memoryInitializer) {
    function applyData(data) {
      HEAPU8.set(data, STATIC_BASE);
    }
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](memoryInitializer));
    } else {
      addRunDependency('memory initializer');
      Browser.asyncLoad(memoryInitializer, function(data) {
        applyData(data);
        removeRunDependency('memory initializer');
      }, function(data) {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }

  function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
  };
  ExitStatus.prototype = new Error();
  ExitStatus.prototype.constructor = ExitStatus;

  var initialStackTop;
  var preloadStartTime = null;
  var calledMain = false;

  dependenciesFulfilled = function runCaller() {
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!Module['calledRun'] && shouldRunNow) run();
    if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
  }

  Module['callMain'] = Module.callMain = function callMain(args) {
    assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
    assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

    args = args || [];

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    ensureInitRuntime();

    var argc = args.length+1;
    function pad() {
      for (var i = 0; i < 4-1; i++) {
        argv.push(0);
      }
    }
    var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
    pad();
    for (var i = 0; i < argc-1; i = i + 1) {
      argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
      pad();
    }
    argv.push(0);
    argv = allocate(argv, 'i32', ALLOC_NORMAL);

    initialStackTop = STACKTOP;

    try {

      var ret = Module['_main'](argc, argv, 0);


      // if we're not running an evented main loop, it's time to exit
      if (!Module['noExitRuntime']) {
        exit(ret);
      }
    }
    catch(e) {
      if (e instanceof ExitStatus) {
        // exit() throws this once it's done to make sure execution
        // has been stopped completely
        return;
      } else if (e == 'SimulateInfiniteLoop') {
        // running an evented main loop, don't immediately exit
        Module['noExitRuntime'] = true;
        return;
      } else {
        if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
        throw e;
      }
    } finally {
      calledMain = true;
    }
  }




  function run(args) {
    args = args || Module['arguments'];

    if (preloadStartTime === null) preloadStartTime = Date.now();

    if (runDependencies > 0) {
      Module.printErr('run() called, but dependencies remain, so not running');
      return;
    }

    preRun();

    if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
    if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

    function doRun() {
      if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
      Module['calledRun'] = true;

      ensureInitRuntime();

      preMain();

      if (Module['_main'] && shouldRunNow) {
        Module['callMain'](args);
      }

      postRun();
    }

    if (Module['setStatus']) {
      Module['setStatus']('Running...');
      setTimeout(function() {
        setTimeout(function() {
          Module['setStatus']('');
        }, 1);
        if (!ABORT) doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module['run'] = Module.run = run;

  function exit(status) {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    // exit the runtime
    exitRuntime();

    // TODO We should handle this differently based on environment.
    // In the browser, the best we can do is throw an exception
    // to halt execution, but in node we could process.exit and
    // I'd imagine SM shell would have something equivalent.
    // This would let us set a proper exit status (which
    // would be great for checking test exit statuses).
    // https://github.com/kripken/emscripten/issues/1371

    // throw an exception to halt the current execution
    throw new ExitStatus(status);
  }
  Module['exit'] = Module.exit = exit;

  function abort(text) {
    if (text) {
      Module.print(text);
      Module.printErr(text);
    }

    ABORT = true;
    EXITSTATUS = 1;

    throw 'abort() at ' + stackTrace();
  }
  Module['abort'] = Module.abort = abort;

  // {{PRE_RUN_ADDITIONS}}

  if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
      Module['preInit'].pop()();
    }
  }

  // shouldRunNow refers to calling main(), not run().
  var shouldRunNow = true;
  if (Module['noInitialRun']) {
    shouldRunNow = false;
  }

  run();

  // {{POST_RUN_ADDITIONS}}

  // {{MODULE_ADDITIONS}}
};
